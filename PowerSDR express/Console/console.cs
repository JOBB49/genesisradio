//=================================================================
// console.cs
//=================================================================
// PowerSDR is a C# implementation of a Software Defined Radio.
// Copyright (C) 2004, 2005, 2006  FlexRadio Systems
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
//
// You may contact us via email at: sales@flex-radio.com.
// Paper mail may be sent to: 
//    FlexRadio Systems
//    12100 Technology Blvd.
//    Austin, TX 78727
//    USA
//=================================================================

/*
 *  Changes for GenesisRadio
 *  Copyright (C)2008-2013 YT7PWR Goran Radivojevic
 *  contact via email at: yt7pwr@ptt.rs or yt7pwr2002@yahoo.com
*/

using System;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Imaging;
using System.Drawing.Text;
using System.Globalization;
using System.IO;
using System.Net;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Threading;
using System.Text;
using System.Windows.Forms;
using SDRSerialSupportII;
using Splash_Screen;
using GenesisG59;
using GenesisG11;
using GenesisNetBox;
using System.Management;
using GenesisG6;

#if DirectX
using SlimDX;
#endif

namespace PowerSDR
{
	#region Enums

    public enum G6BandFilter      // yt7pwr
    {
        FIRST = -1,
        A1,
        A2,
        A3,
        A4,
        B1,
        B2,
        B3,
        B4,
        B5,
        B6,
        B7,
        B8,
        B9,
        B10,
        C1,
        C2,
        C3,
        C4,
        C5,
        LAST,
    }

    public enum VoIPtype
    {
        Server = 0,
        Client,
        None,
    }

    public enum SMeterType
    {
        type1 = 0,
        type2,
        type3,
        type4
    }

    public enum VFOMode             // yt7pwr
    {
        VFOA = 0,
        VFOB,
    }

    public enum RPTRmode            // yt7pwr
    {
        low = 0,
        simplex,
        high,
    }

    public enum FilterMode		    // yt7pwr
    {
        LOW_PASS = 0,
        HIGH_PASS,
        STOP_BAND,
        PASS_BAND,
        NOTCH,
    }

    public enum ATUMode             // yt7pwr
    {
        FULL_TUNE = 0,
        MEM_TUNE,
        BYPASS,
    }

    public enum WindowsVersion      // yt7pwr
    {
        WindowsNT = 0,
        Windows95 = 1,
        Windows98 = 2,
        WindowsMe = 3,
        Windows2000 = 4,
        WindowsXP = 5,
        WindowsVista = 6,
        Windows7 = 7,
        Windows8 = 8,
        Windows8_1 = 9,
    }

    public enum VisibleGroup   // yt7pwr
    {
        ZERO = 0,
        Multimeter,
        Options,
        SoundControl,
        G160,
        G80,
        G40,
        G3020,
        G137,
        G500,
        G59,
        G6,
        G11,
        VFOBetween,
        VFO,
        DSPMainRX,
        DSPSubRX,
        Display2,
        SubRX,
        ModeSpecificPhone,
        ModeSpecificCW,
        ModeSpecificDigital,
        ModeSpecificFM,
        Zoom,
        BandHF,
        RXSettings,
        MainRXMode,
        MainRXFilter,
        SubRXMode,
        SubRXFilter
    };

    public enum Keyer_mode  // yt7pwr
    {
        ZERO = 0,
        HandKey,
        Iambic,
        IambicReverse,
        PHONE,
        Iambic_B_Mode,
        Iambic_Reverse_B_Mode,
        TUNE,
        CWX,
    };

    public enum ColorSheme
    {
        original = 0,
        enhanced,
        SPECTRAN,
        BLACKWHITE,
        off,
    }

	public enum MultiMeterDisplayMode
	{
		Original = 0,
		Edge,
		Analog,
	}

	public enum FilterWidthMode
	{
		Linear = 0,
		Log,
		Log10,
	}

	public enum DisplayEngine
	{
		GDI_PLUS = 0,
		DIRECT_X,
	}

	public enum Model       // yt7pwr
	{
        FIRST = 0,
		GENESIS_G59USB = 1,
        GENESIS_G3020 = 2,
        GENESIS_G40 = 3,
        GENESIS_G80 = 4,
        GENESIS_G160 = 5,
        GENESIS_G59NET = 6,
        QRP2000 = 7,
        GENESIS_G137 = 9,
        GENESIS_G500 = 10,
        GENESIS_G11 = 11,
        GENESIS_G6 = 12,
        RTL_SDR = 13,
	}

	public enum BandFilter      // yt7pwr
	{
        FIRST = -1,
        GEN = 0,
        WWV = 0,
        B160M = 1,
        B80M = 2,
        B60M = 3,
        B40M = 3,
        B30M = 4,
        B20M = 4,
        B17M = 5,
        B15M = 5,
        B12M = 6,
        B10M = 6,
        B6M = 7,
        B2M,
        LAST,
	}

	public enum SoundCard
	{
		FIRST = -1,
		UNSUPPORTED_CARD,
		DELTA_44,
		FIREBOX,
		EDIROL_FA_66,
		AUDIGY,
		AUDIGY_2,
		AUDIGY_2_ZS,
		EXTIGY,
		MP3_PLUS,
		SANTA_CRUZ,
        REALTEK_HD_AUDIO,
        NO_MIXER_AUDIO_CARD,
        G6,
        RTL_SDR,
		LAST,
	}

	public enum DisplayMode
	{
		FIRST = -1,
        SPECTRUM,
		PANADAPTER,
        SCOPE,
        PHASE,
        PHASE2,
        WATERFALL,
        HISTOGRAM,
        PANAFALL,
        PANAFALL_INV,
        PANASCOPE,
        OFF,
		LAST,
	}

	public enum AGCMode
	{
		FIRST = -1,
		FIXD,
		LONG,
		SLOW,
		MED,
		FAST,
		CUSTOM,
		LAST,
	}

	public enum MeterRXMode
	{
		FIRST = -1,
		SIGNAL_STRENGTH,
		SIGNAL_AVERAGE,
		ADC_L,
		ADC_R,
		OFF,
		LAST,
	}

	public enum MeterTXMode
	{
		FIRST = -1,
		FORWARD_POWER,
		REVERSE_POWER,
		MIC,
		EQ,
		LEVELER,
		LVL_G,
		COMP,
		CPDR,
		ALC,
		ALC_G,
		SWR,
		OFF,
		LAST,
	}

	public enum CATKeyerLine
	{
		NONE = 0,
		DTR,
		RTS,
	}

    public enum KeyerLine
    {
        NONE = 0,
        DSR,
        CTS,
        DCD,
        RTS,
        DTR,
    }

    public enum SecondaryPTTKeyerLine
    {
        NONE = 0,
        DCD,
        CTS,
        DTR,
    }

	public enum DateTimeMode
	{
		OFF = 0,
		LOCAL,
		UTC,
		LAST,
	}

	public enum BandPlan
	{
		IARU1 = 1,
		IARU2 = 2,
		IARU3 = 3,
	}

	public enum PreampMode
	{
		FIRST = -1,
		OFF,
		LOW,
		MED,
		HIGH,
		LAST,
	}

	public enum DSPMode
	{
		FIRST = -1,
		LSB,
		USB,
		DSB,
		CWL,
		CWU,
		FMN,
		AM,
		DIGU,
		SPEC,
		DIGL,
		SAM,
		DRM,
        WFM,
		LAST,
	}

	public enum Band
	{
		FIRST = 0,
		GEN,
		B160M,
		B80M,
		B60M,
		B40M,
		B30M,
		B20M,
		B17M,
		B15M,
		B12M,
		B10M,
		B6M,
		B2M,
		WWV,
        B07M,
        VHF,
        B600M,
        B2190M,
        BX1,
        BX2,
        BX3,
        BX4,
        BX5,
        BX6,
        BX7,
        BX8,
        BX9,
        BX10,
        BX11,
        BX12,
        A1,
        A2,
        A3,
        A4,
        B1,
        B2,
        B3,
        B4,
        B5,
        B6,
        B7,
        B8,
        B9,
        B10,
        C1,
        C2,
        C3,
        C4,
        C5,
		LAST,
	}

	public enum Filter
	{
		FIRST = -1,
		F1,
		F2,
		F3,
		F4,
		F5,
		F6,
		F7,
		F8,
		F9,
		F10,
		VAR1,
		VAR2,
		NONE,
		LAST,
	}

	public enum PTTMode
	{
		FIRST = -1,
		NONE,
		MANUAL,
		MIC,
		CW,
		CAT,
		VOX,
        MULTI_PSK,
        LOOP_DLL,
        ATU_TUNE,
		LAST,
	}

	public enum DisplayLabelAlignment
	{
		FIRST = -1,
		LEFT,
		CENTER,
		RIGHT,
		AUTO,
		OFF,
		LAST,
	}

	public enum ClickTuneMode
	{
		Off = 0,
		VFOA,
		VFOB,
	}

    public enum Window
    {
        FIRST = -1,
        RECTANGULAR,
        HANNING,
        WELCH,
        PARZEN,
        BARTLETT,
        HAMMING,
        BLACKMAN2,
        BLACKMAN3,
        BLACKMAN4,
        EXPONENTIAL,
        RIEMANN,
        BLKHARRIS,
        LAST,
    }

    public enum WBIR_State
    {
        FastAdapt,
        SlowAdapt,
        NoAdapt,
        StopAdapt,
        DelayAdapt,
        MOXAdapt,
    }

	#endregion

    #region structures

    [StructLayout(LayoutKind.Sequential)]
    public struct XBand
    {
        public double freq_min;
        public double freq_max;
        public double losc;
        public double pa_gain;
        public double pa_pwr;
        public bool rx_only;
        public string name;
    }

    #endregion

    unsafe public partial class Console : System.Windows.Forms.Form
    {
        const string GSDR_revision = "  v2.0.16";
        private CheckBoxTS chkG6ATT_18dB;
        private CheckBoxTS chkG6ATT_12dB;

#if(WIN32)
        const string GSDR_version = " 32bit";
#endif
#if(WIN64)
        const string GSDR_version = "  64bit";
#endif

        #region DLL import

        [DllImport("user32.dll")]
        public static extern IntPtr SendMessage(IntPtr window, int message, int wparam, int lparam);

        #endregion

        #region Variable Declarations

        #region Genesis variable

        public ServerSendData ServerSocket;
        public ClientRecvData ClientSocket;
        public CAToverEthernetServer CAT_server_socket;
        public CAToverEthernetClient CAT_client_socket;
        public bool CalibrationInProgress = false;
        private bool calibration_running = false;
        //public Mutex display_mutex = new Mutex();
        public AutoResetEvent network_event;
        ManagementEventWatcher eventWatcher;
        public Skin skin;
        internal const Int32 WM_DEVICECHANGE = 0X219;
        internal const Int32 DBT_DEVICEARRIVAL = 0x8000;            // system detected a new device
        internal const Int32 DBT_DEVICEREMOVECOMPLETE = 0x8004;     // complete removal
        public GenesisG59.G59 g59;
        public GenesisG11.G11 g11;
        public double rx_phase = 0.0;
        public double rx_gain = 0.0;
        public double tx_phase = 0.0;
        public double tx_gain = 0.0;
        public bool booting = false;
        public GenesisNetBox.NetBox net_device;
        public bool memory = false;
        public bool losc_change = false;
        public System.OperatingSystem OSInfo = System.Environment.OSVersion;
        public WindowsVersion WinVer;
        public string classicVFO_background_image = null;
        public string NewVFO_background_image = null;
        private Thread ATU_thread;
        private delegate void DirectXCallbackFunction(string name);
        private delegate void GDICallbackFunction(string name);
        private bool pause_multimeter_thread = false;
        DXClusterClient DXClusterForm;
        AutoResetEvent genesis_ext_ptt_event = new AutoResetEvent(false);
        delegate void SIOListenerCommand(string command, byte[] data);
        public bool QSK = false;
        public bool[] G11BandFiltersCH1 = new bool[20];
        public bool[] G11BandFiltersCH2 = new bool[20];
        public bool show_more_bands = false;
        public XBand[] xBand = new XBand[13];
        public bool digital_smeter = false;
        public MeterRXMode newVFOSmeterDigitalSignal = MeterRXMode.SIGNAL_STRENGTH;
        const int WM_VSCROLL = 0x115;
        const int SB_BOTTOM = 7;
        public AGauge NewVFOSignalGauge;
        public const int WM_SIZE = 0x0005;
        public const int WM_EXITSIZEMOVE = 0x0232;
        private delegate void DebugCallbackFunction(string name);
        public bool debug_enabled = false;
        public GenesisG6.G6 g6;
        public bool g11_multiband = false;
        public SMeterType SMeter_type = SMeterType.type1;
        public WinLIRC ir_remote;
        public bool band_change_TUN = false;

        #endregion

        private SIOListenerII siolisten = null;
        public Thread CATEth_thread;
        private Thread[] audio_process_thread;				// fields calls to DttSP functions
        private Thread draw_display_thread;					// draws the main display 
        private Thread multimeter_thread;					// draws/updates the multimeter
        private Thread poll_ptt_thread;						// polls the PTT line on the parallel port
        private Thread sql_update_thread;					// polls the RX signal strength
        private Thread vox_update_thread;					// polls the mic input
        private Thread noise_gate_update_thread;			// polls the mic input during TX
        private Thread network_thread;                      // thread for net_device
        private Thread wbir_thread;
        private Thread MemoryZap_thread;                    // memory zapping thread
        public About AboutForm;
        public Setup SetupForm;
        public CWX CWXForm;
        public VoiceMessages VoiceMsgForm;
        public EQForm EQForm;
        public FilterForm filterForm;
        public XTRV XTRVForm;
        public ExtIO_si570_usb SI570;
        public ExtIO_RTL RTL_SDR;
        public QRP2000 qrp2000;
        public WaveControl WaveForm;
        public DebugForm debug;
        public bool run_setup_wizard;						// Used to run the wizard the first time the software comes up
        private int band_160m_index;						// These band indexes are used to keep track of which
        private int band_80m_index;							// location in the bandstack was last saved/recalled
        private int band_60m_index;
        private int band_40m_index;
        private int band_30m_index;
        private int band_20m_index;
        private int band_17m_index;
        private int band_15m_index;
        private int band_12m_index;
        private int band_10m_index;
        private int band_6m_index;
        private int band_2m_index;
        private int band_wwv_index;
        private int band_gen_index;
        private int band_X1_index;
        private int band_X2_index;
        private int band_X3_index;
        private int band_X4_index;
        private int band_X5_index;
        private int band_X6_index;
        private int band_X7_index;
        private int band_X8_index;
        private int band_X9_index;
        private int band_X10_index;
        private int band_X11_index;
        private int band_X12_index;
        private int band_2190m_index;
        private int band_600m_index;

        private int band_160m_register;						// These integers are the number of band stack registers
        private int band_80m_register;						// found in the database for each band
        private int band_60m_register;
        private int band_40m_register;
        private int band_30m_register;
        private int band_20m_register;
        private int band_17m_register;
        private int band_15m_register;
        private int band_12m_register;
        private int band_10m_register;
        private int band_6m_register;
        private int band_2m_register;
        private int band_wwv_register;
        private int band_gen_register;
        private int band_X1_register;
        private int band_X2_register;
        private int band_X3_register;
        private int band_X4_register;
        private int band_X5_register;
        private int band_X6_register;
        private int band_X7_register;
        private int band_X8_register;
        private int band_X9_register;
        private int band_X10_register;
        private int band_X11_register;
        private int band_X12_register;
        private int band_2190m_register;
        private int band_600m_register;

        // wbir!
        //        public float[] rx_mu_table;
        public float[] rx_image_real_table;				    // table used to store image cal info
        public float[] rx_image_imag_table; 				// table used to store image cal info
        public float[] tx_image_phase_table;				// table used to store image cal info
        public float[] tx_image_gain_table; 				// table used to store image cal info
        public float[] rx_image_phase_table;				// table used to store image cal info
        public float[] rx_image_gain_table; 				// table used to store image cal info

        private double[] wheel_tune_list;					// A list of available tuning steps
        private int wheel_tune_index;						// An index into the above array
        private int wheel_tune_index_subRX;  				// An index into the above array

        private bool was_panadapter = false;				// used to restore panadater when switching to spectrum DSP mode
        public float filter_size_cal_offset;				// filter offset based on DSP filter size
        public float xvtr_gain_offset;						// gain offset as entered on the xvtr form
        private int current_xvtr_index = -1;				// index of current xvtr in use

        private bool meter_data_ready;						// used to synchronize the new DSP data with the multimeter
        private float new_meter_data;						// new data for the multimeter from the DSP
        private float current_meter_data;					// current data for the multimeter
        private int meter_peak_count;						// Counter for peak hold on multimeter
        private int meter_peak_value;						// Value for peak hold on multimeter
        private float[] meter_text_history;					// Array used to output the peak power over a period of time
        private int meter_text_history_index;				// index used with above variable to do peak power
        private Band tuned_band;							// last band that the atu was tuned on
        private bool shift_down;							// used to modify tuning rate
        private bool manual_mox;							// True if the MOX button was clicked on (not PTT)		
        private DSPMode vfob_dsp_mode;						// Saves control pointer for last mode used on VFO B 
        private Filter vfob_filter;							// Saves control pointer for last filter used on VFO B
        private int vfoA_char_width;							// Used to calibrate mousewheel tuning
        private int vfoA_char_space;							// Used to calibrate mousewheel tuning
        private int vfoA_small_char_width;					// Used to calibrate mousewheel tuning
        private int vfoA_small_char_space;					// Used to calibrate mousewheel tuning
        private int vfoA_decimal_width;						// Used to calibrate mousewheel tuning
        private int vfoA_decimal_space;						// Used to calibrate mousewheel tuning		
        private int vfoA_pixel_offset;						// Used to calibrate mousewheel tuning
        private int vfoB_char_width;							// Used to calibrate mousewheel tuning
        private int vfoB_char_space;							// Used to calibrate mousewheel tuning
        private int vfoB_small_char_width;					// Used to calibrate mousewheel tuning
        private int vfoB_small_char_space;					// Used to calibrate mousewheel tuning
        private int vfoB_decimal_width;						// Used to calibrate mousewheel tuning
        private int vfoB_decimal_space;						// Used to calibrate mousewheel tuning		
        private int vfoB_pixel_offset;						// Used to calibrate mousewheel tuning
        private int vfoA_hover_digit;						// Digit for hover display
        private int vfoB_hover_digit;						// Digit for hover display
        private int vfoA_new_hover_digit;					// Digit for new vfoa hover display
        private int vfoB_new_hover_digit;				    // Digit for new vfob hover display
        private string last_band;							// Used in bandstacking algorithm

        private int losc_char_width;
        private int losc_char_space;
        private int losc_small_char_width;
        private int losc_small_char_space;
        private int losc_decimal_width;
        private int losc_decimal_space;
        private int losc_pixel_offset;
        private int losc_hover_digit;
        private int losc_new_hover_digit;

        public string separator;							// contains the locations specific decimal separator

        private int last_filter_shift;						// VK6APH
        private int last_var1_shift;						// VK6APH 
        private int last_var2_shift;						// VK6APH

        public string[] CmdLineArgs;

        public CWKeyer2 Keyer;
        private HiPerfTimer break_in_timer;
        public double avg_vox_pwr = 0.0;

        #endregion

        #region Windows Form Generated Code

        private System.Windows.Forms.RadioButtonTS radDisplayZoom1x;
        private System.Windows.Forms.RadioButtonTS radDisplayZoom2x;
        private System.Windows.Forms.RadioButtonTS radDisplayZoom4x;
        private System.Windows.Forms.RadioButtonTS radDisplayZoom8x;
        private System.Windows.Forms.TextBoxTS txtLOSCFreq;
        private System.Windows.Forms.TextBoxTS txtVFOAFreq;
        private System.Windows.Forms.TextBoxTS txtVFOABand;
        private System.Windows.Forms.TextBoxTS txtVFOBFreq;
        public System.Windows.Forms.PictureBox picDisplay;
        private System.Windows.Forms.GroupBoxTS grpLOSC;
        private System.Windows.Forms.GroupBoxTS grpVFOA;
        private System.Windows.Forms.GroupBoxTS grpVFOB;
        private System.Windows.Forms.TextBoxTS txtVFOBBand;
        private System.Windows.Forms.GroupBoxTS grpDisplay;
        public System.Windows.Forms.CheckBoxTS chkPower;
        private System.Windows.Forms.LabelTS lblCPUMeter;
        private System.Windows.Forms.ComboBoxTS comboDisplayMode;
        private System.Windows.Forms.NumericUpDownTS udFilterLow;
        private System.Windows.Forms.NumericUpDownTS udFilterHigh;
        private System.Windows.Forms.RadioButtonTS radFilterVar1;
        private System.Windows.Forms.RadioButtonTS radFilterVar2;
        private System.Windows.Forms.GroupBoxTS grpDSPMainRX;
        private System.Windows.Forms.LabelTS lblAGC;
        private System.Windows.Forms.CheckBoxTS chkNB;
        private System.Windows.Forms.CheckBoxTS chkANF;
        private System.Windows.Forms.CheckBoxTS chkNR;
        private System.Windows.Forms.CheckBoxTS chkMON;
        private System.Windows.Forms.CheckBoxTS chkTUN;
        private System.Windows.Forms.CheckBoxTS chkMOX;
        private System.Windows.Forms.NumericUpDownTS udXIT;
        private System.Windows.Forms.NumericUpDownTS udRIT;
        private System.Windows.Forms.CheckBoxTS chkMUT;
        private System.Windows.Forms.CheckBoxTS chkXIT;
        private System.Windows.Forms.CheckBoxTS chkRIT;
        private System.Windows.Forms.LabelTS lblPWR;
        public System.Windows.Forms.LabelTS lblAFValue;
        private System.Windows.Forms.LabelTS lblMIC;
        private System.Windows.Forms.NumericUpDownTS udMIC;
        private System.Windows.Forms.TextBoxTS txtWheelTune;
        private System.Windows.Forms.CheckBoxTS chkBIN;
        private System.Windows.Forms.GroupBoxTS grpMultimeter;
        private System.Windows.Forms.CheckBoxTS btnVFOSwap;
        private System.Windows.Forms.CheckBoxTS btnVFOBtoA;
        private System.Windows.Forms.CheckBoxTS btnVFOAtoB;
        private System.Windows.Forms.GroupBoxTS grpVFO;
        public System.Windows.Forms.CheckBoxTS chkVFOSplit;
        private System.Windows.Forms.GroupBoxTS grpDisplay2;
        private System.Windows.Forms.CheckBoxTS chkDisplayAVG;
        private System.Windows.Forms.TextBoxTS txtMultiText;
        private System.Windows.Forms.Timer timer_cpu_meter;
        private System.Windows.Forms.LabelTS lblFilterHigh;
        private System.Windows.Forms.LabelTS lblFilterLow;
        private System.Windows.Forms.LabelTS lblMultiSMeter;
        private System.Windows.Forms.PictureBox picMultimeterAnalog;
        private System.Windows.Forms.PictureBox picMultiMeterDigital;
        private System.Windows.Forms.NumericUpDownTS udSQLMainRX;
        private System.Windows.Forms.CheckBoxTS chkSQLMainRX;
        private System.Windows.Forms.Timer timer_peak_text;
        private System.Windows.Forms.ButtonTS btnMemoryQuickSave;
        private System.Windows.Forms.ButtonTS btnMemoryQuickRecall;
        private System.Windows.Forms.ToolTip toolTip1;
        private PowerSDR.PrettyTrackBar ptbFilterShift;
        private System.Windows.Forms.LabelTS lblFilterShift;
        private System.Windows.Forms.ButtonTS btnFilterShiftReset;
        private System.Windows.Forms.Timer timer_clock;
        private System.Windows.Forms.PanelTS panelLOSCHover;
        private System.Windows.Forms.PanelTS panelVFOAHover;
        private System.Windows.Forms.PanelTS panelVFOBHover;
        private System.Windows.Forms.ComboBoxTS comboMeterRXMode;
        private System.Windows.Forms.ComboBoxTS comboMeterTXMode;
        private System.Windows.Forms.GroupBoxTS grpSoundControls;
        private System.Windows.Forms.GroupBoxTS grpOptions;
        private System.Windows.Forms.ButtonTS btnXITReset;
        private System.Windows.Forms.ButtonTS btnRITReset;
        private System.Windows.Forms.CheckBoxTS chkDSPComp;
        private System.Windows.Forms.CheckBoxTS chkDSPNB2;
        private System.Windows.Forms.CheckBoxTS chkVFOLock;
        private PowerSDR.PrettyTrackBar ptbFilterWidth;
        private System.Windows.Forms.LabelTS lblFilterWidth;
        private System.Windows.Forms.LabelTS lblCWSpeed;
        public System.Windows.Forms.NumericUpDownTS udCWSpeed;
        private System.Windows.Forms.CheckBoxTS chkDSPCompander;
        private System.Windows.Forms.MenuItem mnuWave;
        private System.Windows.Forms.MenuItem mnuAbout;
        private System.Windows.Forms.CheckBoxTS chkDisplayPeak;
        private System.Windows.Forms.MenuItem mnuEQ;
        private System.Windows.Forms.GroupBoxTS grpMainRXFilter;
        private System.Windows.Forms.MenuItem mnuCWX;
        private System.Windows.Forms.RadioButtonTS radFilter1;
        private System.Windows.Forms.RadioButtonTS radFilter2;
        private System.Windows.Forms.RadioButtonTS radFilter3;
        private System.Windows.Forms.RadioButtonTS radFilter4;
        private System.Windows.Forms.RadioButtonTS radFilter5;
        private System.Windows.Forms.RadioButtonTS radFilter6;
        private System.Windows.Forms.RadioButtonTS radFilter7;
        private System.Windows.Forms.RadioButtonTS radFilter8;
        private System.Windows.Forms.RadioButtonTS radFilter9;
        private System.Windows.Forms.RadioButtonTS radFilter10;
        private System.Windows.Forms.ContextMenu contextMenuFilter;
        private System.Windows.Forms.MenuItem menuItemFilterConfigure;
        private System.Windows.Forms.LabelTS lblRF;
        private PowerSDR.PrettyTrackBar ptbAF;
        private PowerSDR.PrettyTrackBar ptbRF;
        private PowerSDR.PrettyTrackBar ptbPWR;
        private System.Windows.Forms.LabelTS lblTuneStep;
        private System.Windows.Forms.GroupBoxTS grpVFOBetween;
        private PowerSDR.PrettyTrackBar ptbMIC;
        private GroupBoxTS grpModeSpecificPhone;
        private GroupBoxTS grpModeSpecificCW;
        private GroupBoxTS grpModeSpecificDigital;
        private System.Windows.Forms.CheckBoxTS chkVOX;
        private System.Windows.Forms.CheckBoxTS chkBreakIn;
        private PowerSDR.PrettyTrackBar ptbCWSpeed;
        public System.Windows.Forms.CheckBoxTS chkVACEnabled;
        public System.Windows.Forms.LabelTS lblTXGain;
        private System.Windows.Forms.NumericUpDownTS udVACTXGain;
        public System.Windows.Forms.LabelTS lblRXGain;
        private System.Windows.Forms.NumericUpDownTS udVACRXGain;
        private PowerSDR.PrettyTrackBar ptbVACRXGain;
        private PowerSDR.PrettyTrackBar ptbVACTXGain;
        private PrettyTrackBar ptbSQLMainRX;
        private System.Windows.Forms.PictureBox picSQLMainRX;
        private System.Windows.Forms.PictureBox picVOX;
        private PowerSDR.PrettyTrackBar ptbVOX;
        private System.Windows.Forms.CheckBoxTS chkNoiseGate;
        private PrettyTrackBar ptbNoiseGate;
        private System.Windows.Forms.PictureBox picNoiseGate;
        private System.Windows.Forms.TextBoxTS txtDisplayCursorOffset;
        private System.Windows.Forms.TextBoxTS txtDisplayCursorPower;
        private System.Windows.Forms.TextBoxTS txtDisplayCursorFreq;
        private System.Windows.Forms.TextBoxTS txtDisplayPeakOffset;
        private System.Windows.Forms.TextBoxTS txtDisplayPeakFreq;
        private System.Windows.Forms.TextBoxTS txtDisplayPeakPower;
        private System.Windows.Forms.LabelTS lblVFOBLSD;
        private System.Windows.Forms.TextBoxTS txtLOSCMSD;
        private System.Windows.Forms.TextBoxTS txtVFOAMSD;
        private System.Windows.Forms.TextBoxTS txtVFOBMSD;
        private System.Windows.Forms.TextBoxTS txtLOSCLSD;
        private System.Windows.Forms.TextBoxTS txtVFOALSD;
        private System.Windows.Forms.TextBoxTS txtVFOBLSD;
        private System.Windows.Forms.NumericUpDownTS udCPDR;
        private PowerSDR.PrettyTrackBar ptbCPDR;
        private System.Windows.Forms.NumericUpDownTS udCOMP;
        private PowerSDR.PrettyTrackBar ptbCOMP;
        private System.Windows.Forms.ButtonTS btnTuneStepChangeSmaller;
        private System.Windows.Forms.ButtonTS btnChangeTuneStepLarger;
        private System.Windows.Forms.NumericUpDownTS udNoiseGate;
        private System.Windows.Forms.NumericUpDownTS udVOX;
        private System.Windows.Forms.ComboBoxTS comboTXProfile;
        private System.Windows.Forms.CheckBoxTS chkShowTXFilter;
        private System.Windows.Forms.MenuItem mnuFilterReset;
        private System.Windows.Forms.ComboBoxTS comboVACSampleRate;
        private System.Windows.Forms.GroupBoxTS grpDIGSampleRate;
        private System.Windows.Forms.CheckBoxTS chkCWIambic;
        private System.Windows.Forms.GroupBoxTS grpCWPitch;
        private System.Windows.Forms.LabelTS lblCWPitchFreq;
        private System.Windows.Forms.NumericUpDownTS udCWPitch;
        private System.Windows.Forms.CheckBoxTS chkCWVAC;
        private System.Windows.Forms.LabelTS lblTransmitProfile;
        public System.Windows.Forms.CheckBoxTS chkPlayWav;
        private System.Windows.Forms.CheckBoxTS chkShowTXCWFreq;
        private System.Windows.Forms.CheckBoxTS chkEnableSubRX;
        private PowerSDR.PrettyTrackBar ptbPanMainRX;
        private PowerSDR.PrettyTrackBar ptbPanSubRX;
        private System.Windows.Forms.GroupBoxTS grpSubRX;
        private PowerSDR.PrettyTrackBar ptbRX1Gain;
        private PowerSDR.PrettyTrackBar ptbRX0Gain;
        private GroupBoxTS grpBandHF;
        private RadioButtonTS radBandGEN;
        private RadioButtonTS radBandWWV;
        private RadioButtonTS radMoreBands;
        private RadioButtonTS radBand2;
        private RadioButtonTS radBand6;
        private RadioButtonTS radBand10;
        private RadioButtonTS radBand12;
        private RadioButtonTS radBand15;
        private RadioButtonTS radBand17;
        private RadioButtonTS radBand20;
        private RadioButtonTS radBand30;
        private RadioButtonTS radBand40;
        private RadioButtonTS radBand60;
        private RadioButtonTS radBand80;
        private RadioButtonTS radBand160;
        private ButtonTS btnHidden;
        public PictureBox picWaterfall;
        private GroupBoxTS grpZoom;
        public LabelTS btnUSB;
        private RadioButtonTS radDisplayZoom16x;
        private RadioButtonTS radDisplayZoom32x;
        private PrettyTrackBar ptbDisplayPan;
        private PrettyTrackBar ptbDisplayZoom;
        private LabelTS label1;
        private LabelTS label2;
        private CheckBoxTS btnHIGH_AF;
        private CheckBoxTS btnHIGH_RF;
        private CheckBoxTS btnATT;
        private ButtonTS btnEraseMemory;
        private CheckBoxTS chkVFOsinc;
        public GroupBoxTS grpG160;
        private RadioButtonTS btnG160_X2;
        private RadioButtonTS btnG160_X1;
        public GroupBoxTS grpG59;
        public GroupBoxTS grpG80;
        private RadioButtonTS btnG80_X4;
        private RadioButtonTS btnG80_X3;
        private RadioButtonTS btnG80_X2;
        private RadioButtonTS btnG80_X1;
        public GroupBoxTS grpG3020;
        public GroupBoxTS grpG40;
        private RadioButtonTS btnG40_X1;
        public LabelTS lblMemoryNumber;
        private ContextMenuStrip contextMemoryMenu;
        private ToolStripMenuItem eraseAllMemoryToolStripMenuItem;
        private TextBoxTS txtMemory;
        private MenuItem mnuWizard;
        private ContextMenuStrip contextLOSCMenu;
        private ToolStripMenuItem xtal1ToolStripMenuItem;
        private RadioButtonTS btnG3020_X4;
        private RadioButtonTS btnG3020_X3;
        private RadioButtonTS btnG3020_X2;
        private RadioButtonTS btnG3020_X1;
        private CheckBoxTS btnVFOA;
        public CheckBoxTS btnCWX1;
        public CheckBoxTS btnCWX4;
        public CheckBoxTS btnCWX3;
        public CheckBoxTS btnCWX2;
        public CheckBoxTS btnCWX5;
        public CheckBoxTS btnCWX6;
        private GroupBoxTS grpCWX;
        public CheckBoxTS chkRecordWav;
        private GroupBoxTS groupBoxTS1;
        public CheckBoxTS btnMsg1;
        public CheckBoxTS btnMsg6;
        public CheckBoxTS btnMsg5;
        public CheckBoxTS btnMsg4;
        public CheckBoxTS btnMsg3;
        public CheckBoxTS btnMsg2;
        private MenuItem mnuVoiceMessages;
        public MenuStrip menuStrip1;
        private ToolStripMenuItem setupToolStripMenuItem;
        private ToolStripMenuItem waveToolStripMenuItem;
        private ToolStripMenuItem equalizerToolStripMenuItem;
        private ToolStripMenuItem cWXToolStripMenuItem;
        private ToolStripMenuItem voiceMessagesToolStripMenuItem;
        private ToolStripMenuItem wizardToolStripMenuItem;
        private ToolStripMenuItem aboutToolStripMenuItem;
        private MenuItem mnuSetup;
        public GroupBoxTS grpVFOnew;
        private TextBoxTS txtVFOAnew;
        private TextBoxTS txtVFOBnew;
        private PanelTS panelVFOBnewHover;
        private PanelTS panelVFOAnewHover;
        private TextBoxTS txtLOSCnew;
        private PanelTS panelLOSCnewHover;
        public AGauge AnalogSignalGauge;
        public LabelTS lblLOSC;
        public LabelTS lblVFOB;
        public LabelTS lblVFOA;
        private GroupBoxTS grpManualNotch;
        public LabelTS lblVFOBTX;
        public LabelTS lblVFOATX;
        private TextBoxTS txtNewVFOBand;
        private GroupBoxTS grpSubRXFilter;
        private NumericUpDownTS udSubRXFilterHigh;
        private NumericUpDownTS udSubRXFilterLow;
        private PrettyTrackBar ptbSubRXFilterWidth;
        private LabelTS labelTS1;
        private ButtonTS btnSubRXFilterShiftReset;
        private PrettyTrackBar ptbSubRXFilterShift;
        private LabelTS labelTS2;
        private RadioButtonTS radSubRXFilter1;
        private RadioButtonTS radSubRXFilter2;
        private RadioButtonTS radSubRXFilter3;
        private RadioButtonTS radSubRXFilter4;
        private RadioButtonTS radSubRXFilter5;
        private RadioButtonTS radSubRXFilter6;
        private RadioButtonTS radSubRXFilter7;
        private RadioButtonTS radSubRXFilter8;
        private RadioButtonTS radSubRXFilter9;
        private RadioButtonTS radSubRXFilter10;
        private RadioButtonTS radSubRXFilterVar1;
        private RadioButtonTS radSubRXFilterVar2;
        private LabelTS labelTS3;
        private LabelTS labelTS4;
        private GroupBoxTS grpDSPSubRX;
        private CheckBoxTS chkNB2SubRX;
        private CheckBoxTS chkNBSubRX;
        private CheckBoxTS chkANFSubRX;
        private CheckBoxTS chkNRSubRX;
        private CheckBoxTS chkBINSubRX;
        private ComboBoxTS comboAGCSubRX;
        private ComboBoxTS comboAGCMainRX;
        private NumericUpDownTS udSQLSubRX;
        private CheckBoxTS chkSQLSubRX;
        private PrettyTrackBar ptbSQLSubRX;
        private PictureBox picSQLSubRX;
        private ButtonTS btnChangeTuneStepLargerSubRX;
        private ButtonTS btnTuneStepChangeSmallerSubRX;
        private TextBoxTS txtWheelTuneSubRX;
        private CheckBoxTS btnZAP;
        public LabelTS btnNetwork;
        private ToolStripMenuItem minimalisticToolStripMenuItem;
        private GroupBoxTS grpSoundControls1;
        private PrettyTrackBar ptbPWR1;
        private PrettyTrackBar ptbRF1;
        private PrettyTrackBar ptbAF1;
        private NumericUpDownTS udRF1;
        private LabelTS lblRF1;
        private LabelTS lblPWR1;
        private NumericUpDownTS udPWR1;
        private LabelTS lblAF1;
        private NumericUpDownTS udAF1;
        private ContextMenuStrip contextNewVFOSmeter;
        public ToolStripComboBox toolStripNewVFOSmeterTX;
        public ToolStripComboBox toolStripNewVFOSmeterRX;
        private ToolStripTextBox toolStripTextBox1;
        private ToolStripTextBox toolStripTextBox2;
        public GroupBoxTS grpG137;
        private RadioButtonTS btnG137_X1;
        public GroupBoxTS grpG500;
        private RadioButtonTS btnG500_X1;
        public LabelTS lblRX2;
        private LabelTS lblNotchShift;
        private LabelTS lblWidth;
        public PrettyTrackBar ptbNotchShift;
        private PrettyTrackBar ptbNotchWidth;
        private CheckBoxTS chkManualNotchFilter;
        private LabelTS lblNotchLow;
        private LabelTS lblNotchHigh;
        public LabelTS lblPWRValue;
        public LabelTS lblRFValue;
        private LabelTS lblAF;
        private ButtonTS btnNotchReset;
        private LabelTS labelTS6;
        private LabelTS labelTS5;
        public LabelTS lblAFNewVFO;
        public LabelTS lblRFNewVFO;
        public LabelTS lblATTNewVFO;
        private GroupBoxTS grpSubRXMode;
        private RadioButtonTS radSUBRxModeAM;
        private RadioButtonTS radSUBRxModeSAM;
        private RadioButtonTS radSUBRxModeDSB;
        private RadioButtonTS radSUBRxModeCWU;
        private RadioButtonTS radSUBRxModeDIGU;
        private RadioButtonTS radSUBRxModeDIGL;
        private RadioButtonTS radSUBRxModeLSB;
        private RadioButtonTS radSUBRxModeSPEC;
        private RadioButtonTS radSUBRxModeDRM;
        private RadioButtonTS radSUBRxModeFMN;
        private RadioButtonTS radSUBRxModeUSB;
        private RadioButtonTS radSUBRxModeCWL;
        private GroupBoxTS grpMainRXMode;
        private RadioButtonTS radModeAM;
        private RadioButtonTS radModeSAM;
        private RadioButtonTS radModeDSB;
        private RadioButtonTS radModeCWU;
        private RadioButtonTS radModeDIGU;
        private RadioButtonTS radModeDIGL;
        private RadioButtonTS radModeLSB;
        private RadioButtonTS radModeSPEC;
        private RadioButtonTS radModeDRM;
        private RadioButtonTS radModeFMN;
        private RadioButtonTS radModeUSB;
        private RadioButtonTS radModeWFM;
        public GroupBoxTS grpG11;
        private CheckBoxTS chkG11ATTbtn;
        private CheckBoxTS chkG11AFbtn;
        private CheckBoxTS chkG11RFbtn;
        private ToolStripMenuItem dXToolStripMenuItem;
        private GroupBoxTS grpMoreBands;
        private RadioButtonTS radBandX12;
        private RadioButtonTS radBandX11;
        private RadioButtonTS radBandHF;
        private RadioButtonTS radBandX10;
        private RadioButtonTS radBandX9;
        private RadioButtonTS radBandX8;
        private RadioButtonTS radBandX7;
        private RadioButtonTS radBandX6;
        private RadioButtonTS radBandX5;
        private RadioButtonTS radBandX4;
        private RadioButtonTS radBandX3;
        private RadioButtonTS radBandX2;
        private RadioButtonTS radBandX1;
        private RadioButtonTS radBand600;
        private RadioButtonTS radBand2190;
        private ToolStripMenuItem xTRVToolStripMenuItem;
        public PowerSDR.Invoke.SMeter1 sMeterDigital1;
        public PowerSDR.Invoke.SMeter2 sMeterDigital2;
        private ToolStripMenuItem debugToolStripMenuItem;
        public PictureBox picAGauge;
        private PictureBox picSmallAGauge;
        private GroupBoxTS grpModeSpecificFM;
        private TextBoxTS txtFMmemory;
        public LabelTS lblFMMemory;
        private ButtonTS btnFMMC;
        private ButtonTS btnFMMR;
        private ButtonTS btnFMMS;
        private GroupBoxTS grpFMVoiceMsg;
        public CheckBoxTS chkFMMsg6;
        public CheckBoxTS chkFMMsg5;
        public CheckBoxTS chkFMMsg4;
        public CheckBoxTS chkFMMsg3;
        public CheckBoxTS chkFMMsg2;
        public CheckBoxTS chkFMMsg1;
        private PrettyTrackBar ptbFMMicGain;
        private LabelTS labelTS8;
        private ComboBoxTS comboFMCTCSSFreq;
        public CheckBoxTS chkCTCSS;
        private RadioButtonTS radFMModeLow;
        private RadioButtonTS radFMModeSimplex;
        private RadioButtonTS radFMModeHigh;
        private LabelTS labelTS7;
        private NumericUpDownTS udFMOffset;
        private ContextMenuStrip contextMenuFMMemory;
        private ToolStripMenuItem eraseAllMemoryToolStripMenuItem1;
        public CheckBoxTS chkVACMute;
        private ContextMenuStrip contextMenuMUTE;
        private ToolStripMenuItem leftToolStripMenuItem;
        private ToolStripMenuItem rightToolStripMenuItem;
        private ToolStripMenuItem bothToolStripMenuItem;
        private ToolStripMenuItem noneToolStripMenuItem;
        public GroupBoxTS grpG6;
        private CheckBoxTS chkG6ATT_6dB;
        private CheckBoxTS chkG6AF;
        private CheckBoxTS chkG6RF;
        private CheckBoxTS chkWFMstereo;
        private System.ComponentModel.IContainer components;

        #endregion

        #region Constructor and Destructor

        public Console(string[] args)
        {
            CmdLineArgs = args;
            #if DEBUG
                        //System.Windows.Forms.Control.CheckForIllegalCrossThreadCalls = true;
            #endif

            Splash.ShowSplashScreen();							// Start splash screen

            Splash.SetStatus("Initializing Components");		// Set progress point
            InitializeComponent();								// Windows Forms Generated Code
            Splash.SetStatus("DPI resize");
            float dpi = this.CreateGraphics().DpiX;
            this.AutoScaleMode = AutoScaleMode.Dpi;
            SizeF d = this.AutoScaleDimensions;
            d.Height = dpi;
            d.Width = dpi;
            this.AutoScaleDimensions = d;
            float ratio = dpi / 96.0f;
            string font_name = this.Font.Name;
            float size = (float)(8.25 / ratio);
            System.Drawing.Font new_font = new System.Drawing.Font(font_name, size);
            this.Font = new_font;

            Splash.SetStatus("Initializing Database");			// Set progress point
            DB.AppDataPath = Application.StartupPath;
            DB.Init();											// Initialize the database

            Splash.SetStatus("Initializing DSP");				// Set progress point

            if (!DttSP.Init())									// Initialize the DSP processor
            {
                Splash.SetStatus("Error in DSP!");
                Thread.Sleep(3000);
                this.ExitConsole();
            }

            Splash.SetStatus("Initializing PortAudio");			// Set progress point
            int result = PA19.PA_Initialize();					// Initialize the audio interface

            if (result < 0)
            {
                Splash.SetStatus("Error while initializing PortAudio!");
                Thread.Sleep(2000);
                this.ExitConsole();
            }

            Splash.SetStatus("Loading Main Form");				// Set progress point
#if !DEBUG
            //Splash.SplashForm.Owner = this;						// So that main form will show when splash disappears
#endif
            break_in_timer = new HiPerfTimer();

            Splash.SetStatus("Initializing Genesis radio communication");	// Set progress point

            InitConsole();										// Initialize all forms and main variables

            Splash.SetStatus("Finished");						// Set progress point
            // Activates double buffering

            SetStyle(ControlStyles.UserPaint |
                ControlStyles.AllPaintingInWmPaint |
                ControlStyles.OptimizedDoubleBuffer, true);
            UpdateStyles();

            Splash.CloseForm();									// End splash screen

            if (run_setup_wizard)
            {
                SetupWizard w = new SetupWizard(this, 0);
                w.ShowDialog();
            }

            if (multimeter_cal_offset == 0.0f)
            {
                switch (current_soundcard)
                {
                    case SoundCard.SANTA_CRUZ:
                        multimeter_cal_offset = -26.39952f;
                        break;
                    case SoundCard.AUDIGY_2_ZS:
                        multimeter_cal_offset = 1.024933f;
                        break;
                    case SoundCard.MP3_PLUS:
                        multimeter_cal_offset = -33.40224f;
                        break;
                    case SoundCard.EXTIGY:
                        multimeter_cal_offset = -29.30501f;
                        break;
                    case SoundCard.DELTA_44:
                        multimeter_cal_offset = -25.13887f;
                        break;
                    case SoundCard.FIREBOX:
                        multimeter_cal_offset = -20.94611f;
                        break;
                    case SoundCard.EDIROL_FA_66:
                        multimeter_cal_offset = -46.82864f;
                        break;
                    case SoundCard.UNSUPPORTED_CARD:
                        multimeter_cal_offset = -52.43533f;
                        break;
                }
            }

            if (display_cal_offset == 0.0f)
            {
                switch (current_soundcard)
                {
                    case SoundCard.SANTA_CRUZ:
                        DisplayCalOffset = -56.56675f;
                        break;
                    case SoundCard.AUDIGY_2_ZS:
                        DisplayCalOffset = -29.20928f;
                        break;
                    case SoundCard.MP3_PLUS:
                        DisplayCalOffset = -62.84578f;
                        break;
                    case SoundCard.EXTIGY:
                        DisplayCalOffset = -62.099f;
                        break;
                    case SoundCard.DELTA_44:
                        DisplayCalOffset = -57.467f;
                        break;
                    case SoundCard.FIREBOX:
                        DisplayCalOffset = -54.019f;
                        break;
                    case SoundCard.EDIROL_FA_66:
                        DisplayCalOffset = -80.429f;
                        break;
                    case SoundCard.UNSUPPORTED_CARD:
                        DisplayCalOffset = -82.62103f;
                        break;
                }
            }

            loscFreq = LOSCFreq;
            vfoAFreq = VFOAFreq;
            vfoBFreq = VFOBFreq;

            NewVFOSignalGauge.GaugeTarget = picAGauge;
            NewVFOSignalGauge.Width = picAGauge.Width;
            NewVFOSignalGauge.Height = picAGauge.Height;
            NewVFOSignalGauge.booting = false;
            AnalogSignalGauge.GaugeTarget = picSmallAGauge;
            AnalogSignalGauge.Width = picSmallAGauge.Width;
            AnalogSignalGauge.Height = picSmallAGauge.Height;
            AnalogSignalGauge.Center = new Point(78, 155);
            AnalogSignalGauge.m_NeedleRadius = 120;
            AnalogSignalGauge.m_BaseArcStart = 237;
            AnalogSignalGauge.m_BaseArcSweep = 65;
            AnalogSignalGauge.booting = false;

#if DirectX
            Display_DirectX.booting = false;
            NewVFOSignalGauge.booting = false;
            NewVFOSignalGauge.DirectX_Init(NewVFO_background_image);
            Display_DirectX.PanadapterTarget = picDisplay;
            Display_DirectX.WaterfallTarget = picWaterfall;
#endif

            Console_Resize(this, EventArgs.Empty);
            Console_Resize(this, EventArgs.Empty);

            if (auto_pwr_up)
            {
                chkPower.Checked = true;
                this.WindowState = FormWindowState.Minimized;
            }
        }

        protected override void Dispose(bool disposing)
        {
            try
            {
                if (chkPower.Checked)
                {
                    chkPower.Checked = false;
                    Thread.Sleep(100);
                }
                else
                {
                    ConsoleClosing = true;
                    this.Hide();
                    Audio.VAC_callback_return = 2;      // abort VAC callback
                    Audio.callback_return = 2;          // abort audio callback
                    if (debug != null) debug.Dispose();
                    if (SetupForm != null) SetupForm.Hide();
                    if (CWXForm != null) CWXForm.Hide();
                    if (VoiceMsgForm != null) VoiceMsgForm.Hide();
                    if (EQForm != null) EQForm.Hide();
                    if(XTRVForm != null) XTRVForm.Hide();

                    if (DXClusterForm != null)
                    {
                        DXClusterForm.closing = true;
                        DXClusterForm.Hide();
                    }

                    SaveDatabase();

                    if (disposing)
                    {
                        if (components != null)
                        {
                            components.Dispose();
                        }
                    }

                    base.Dispose(disposing);
                    ExitConsole();
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Dispose error!\n" + ex.ToString());
            }
        }

        public void SaveDatabase()                                  // yt7pwr
        {
            try
            {
                SaveState();
                if (XTRVForm != null) XTRVForm.SaveOptions();
                if (CWXForm != null) CWXForm.SaveSettings();
                if (SetupForm != null) SetupForm.SaveOptions();
                if (EQForm != null) EQForm.SaveSettings();
                if (DXClusterForm != null) DXClusterForm.SaveOptions();
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        #endregion

        #region Windows Form Designer generated code
        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.components = new System.ComponentModel.Container();
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(Console));
            this.mnuWave = new System.Windows.Forms.MenuItem();
            this.mnuEQ = new System.Windows.Forms.MenuItem();
            this.mnuCWX = new System.Windows.Forms.MenuItem();
            this.mnuVoiceMessages = new System.Windows.Forms.MenuItem();
            this.mnuWizard = new System.Windows.Forms.MenuItem();
            this.mnuAbout = new System.Windows.Forms.MenuItem();
            this.contextMenuFilter = new System.Windows.Forms.ContextMenu();
            this.menuItemFilterConfigure = new System.Windows.Forms.MenuItem();
            this.mnuFilterReset = new System.Windows.Forms.MenuItem();
            this.timer_cpu_meter = new System.Windows.Forms.Timer(this.components);
            this.timer_peak_text = new System.Windows.Forms.Timer(this.components);
            this.toolTip1 = new System.Windows.Forms.ToolTip(this.components);
            this.chkNoiseGate = new System.Windows.Forms.CheckBoxTS();
            this.chkVOX = new System.Windows.Forms.CheckBoxTS();
            this.chkDSPComp = new System.Windows.Forms.CheckBoxTS();
            this.chkDSPCompander = new System.Windows.Forms.CheckBoxTS();
            this.comboTXProfile = new System.Windows.Forms.ComboBoxTS();
            this.chkShowTXFilter = new System.Windows.Forms.CheckBoxTS();
            this.ptbPWR = new PowerSDR.PrettyTrackBar();
            this.ptbRF = new PowerSDR.PrettyTrackBar();
            this.ptbAF = new PowerSDR.PrettyTrackBar();
            this.btnNetwork = new System.Windows.Forms.LabelTS();
            this.chkShowTXCWFreq = new System.Windows.Forms.CheckBoxTS();
            this.chkCWVAC = new System.Windows.Forms.CheckBoxTS();
            this.udCWPitch = new System.Windows.Forms.NumericUpDownTS();
            this.chkCWIambic = new System.Windows.Forms.CheckBoxTS();
            this.chkBreakIn = new System.Windows.Forms.CheckBoxTS();
            this.udCWSpeed = new System.Windows.Forms.NumericUpDownTS();
            this.btnG160_X2 = new System.Windows.Forms.RadioButtonTS();
            this.btnG160_X1 = new System.Windows.Forms.RadioButtonTS();
            this.btnATT = new System.Windows.Forms.CheckBoxTS();
            this.btnHIGH_AF = new System.Windows.Forms.CheckBoxTS();
            this.btnHIGH_RF = new System.Windows.Forms.CheckBoxTS();
            this.btnUSB = new System.Windows.Forms.LabelTS();
            this.ptbRX0Gain = new PowerSDR.PrettyTrackBar();
            this.chkEnableSubRX = new System.Windows.Forms.CheckBoxTS();
            this.ptbPanSubRX = new PowerSDR.PrettyTrackBar();
            this.ptbPanMainRX = new PowerSDR.PrettyTrackBar();
            this.ptbRX1Gain = new PowerSDR.PrettyTrackBar();
            this.radBandGEN = new System.Windows.Forms.RadioButtonTS();
            this.radBandWWV = new System.Windows.Forms.RadioButtonTS();
            this.radMoreBands = new System.Windows.Forms.RadioButtonTS();
            this.radBand2 = new System.Windows.Forms.RadioButtonTS();
            this.radBand6 = new System.Windows.Forms.RadioButtonTS();
            this.radBand10 = new System.Windows.Forms.RadioButtonTS();
            this.radBand12 = new System.Windows.Forms.RadioButtonTS();
            this.radBand15 = new System.Windows.Forms.RadioButtonTS();
            this.radBand17 = new System.Windows.Forms.RadioButtonTS();
            this.radBand20 = new System.Windows.Forms.RadioButtonTS();
            this.radBand30 = new System.Windows.Forms.RadioButtonTS();
            this.radBand40 = new System.Windows.Forms.RadioButtonTS();
            this.radBand60 = new System.Windows.Forms.RadioButtonTS();
            this.radBand80 = new System.Windows.Forms.RadioButtonTS();
            this.radBand160 = new System.Windows.Forms.RadioButtonTS();
            this.btnZAP = new System.Windows.Forms.CheckBoxTS();
            this.btnVFOA = new System.Windows.Forms.CheckBoxTS();
            this.chkVFOsinc = new System.Windows.Forms.CheckBoxTS();
            this.btnEraseMemory = new System.Windows.Forms.ButtonTS();
            this.chkVFOLock = new System.Windows.Forms.CheckBoxTS();
            this.btnMemoryQuickRecall = new System.Windows.Forms.ButtonTS();
            this.btnMemoryQuickSave = new System.Windows.Forms.ButtonTS();
            this.chkDisplayPeak = new System.Windows.Forms.CheckBoxTS();
            this.comboDisplayMode = new System.Windows.Forms.ComboBoxTS();
            this.chkDisplayAVG = new System.Windows.Forms.CheckBoxTS();
            this.chkRecordWav = new System.Windows.Forms.CheckBoxTS();
            this.chkMUT = new System.Windows.Forms.CheckBoxTS();
            this.contextMenuMUTE = new System.Windows.Forms.ContextMenuStrip(this.components);
            this.leftToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.rightToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.bothToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.noneToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.chkMON = new System.Windows.Forms.CheckBoxTS();
            this.chkTUN = new System.Windows.Forms.CheckBoxTS();
            this.chkMOX = new System.Windows.Forms.CheckBoxTS();
            this.chkPlayWav = new System.Windows.Forms.CheckBoxTS();
            this.comboVACSampleRate = new System.Windows.Forms.ComboBoxTS();
            this.txtWheelTune = new System.Windows.Forms.TextBoxTS();
            this.udFilterHigh = new System.Windows.Forms.NumericUpDownTS();
            this.udFilterLow = new System.Windows.Forms.NumericUpDownTS();
            this.ptbFilterWidth = new PowerSDR.PrettyTrackBar();
            this.btnFilterShiftReset = new System.Windows.Forms.ButtonTS();
            this.ptbFilterShift = new PowerSDR.PrettyTrackBar();
            this.chkPower = new System.Windows.Forms.CheckBoxTS();
            this.chkDSPNB2 = new System.Windows.Forms.CheckBoxTS();
            this.chkNB = new System.Windows.Forms.CheckBoxTS();
            this.chkANF = new System.Windows.Forms.CheckBoxTS();
            this.chkNR = new System.Windows.Forms.CheckBoxTS();
            this.chkBIN = new System.Windows.Forms.CheckBoxTS();
            this.udXIT = new System.Windows.Forms.NumericUpDownTS();
            this.udRIT = new System.Windows.Forms.NumericUpDownTS();
            this.chkXIT = new System.Windows.Forms.CheckBoxTS();
            this.chkRIT = new System.Windows.Forms.CheckBoxTS();
            this.comboMeterTXMode = new System.Windows.Forms.ComboBoxTS();
            this.comboMeterRXMode = new System.Windows.Forms.ComboBoxTS();
            this.btnRITReset = new System.Windows.Forms.ButtonTS();
            this.btnXITReset = new System.Windows.Forms.ButtonTS();
            this.btnVFOSwap = new System.Windows.Forms.CheckBoxTS();
            this.btnVFOBtoA = new System.Windows.Forms.CheckBoxTS();
            this.btnVFOAtoB = new System.Windows.Forms.CheckBoxTS();
            this.chkVFOSplit = new System.Windows.Forms.CheckBoxTS();
            this.chkSQLMainRX = new System.Windows.Forms.CheckBoxTS();
            this.udVACTXGain = new System.Windows.Forms.NumericUpDownTS();
            this.udVACRXGain = new System.Windows.Forms.NumericUpDownTS();
            this.chkVACEnabled = new System.Windows.Forms.CheckBoxTS();
            this.udSubRXFilterHigh = new System.Windows.Forms.NumericUpDownTS();
            this.udSubRXFilterLow = new System.Windows.Forms.NumericUpDownTS();
            this.ptbSubRXFilterWidth = new PowerSDR.PrettyTrackBar();
            this.btnSubRXFilterShiftReset = new System.Windows.Forms.ButtonTS();
            this.ptbSubRXFilterShift = new PowerSDR.PrettyTrackBar();
            this.chkNB2SubRX = new System.Windows.Forms.CheckBoxTS();
            this.chkNBSubRX = new System.Windows.Forms.CheckBoxTS();
            this.chkANFSubRX = new System.Windows.Forms.CheckBoxTS();
            this.chkNRSubRX = new System.Windows.Forms.CheckBoxTS();
            this.chkBINSubRX = new System.Windows.Forms.CheckBoxTS();
            this.comboAGCMainRX = new System.Windows.Forms.ComboBoxTS();
            this.comboAGCSubRX = new System.Windows.Forms.ComboBoxTS();
            this.ptbSQLMainRX = new PowerSDR.PrettyTrackBar();
            this.udSQLSubRX = new System.Windows.Forms.NumericUpDownTS();
            this.chkSQLSubRX = new System.Windows.Forms.CheckBoxTS();
            this.ptbSQLSubRX = new PowerSDR.PrettyTrackBar();
            this.udSQLMainRX = new System.Windows.Forms.NumericUpDownTS();
            this.txtWheelTuneSubRX = new System.Windows.Forms.TextBoxTS();
            this.ptbPWR1 = new PowerSDR.PrettyTrackBar();
            this.ptbRF1 = new PowerSDR.PrettyTrackBar();
            this.ptbAF1 = new PowerSDR.PrettyTrackBar();
            this.udRF1 = new System.Windows.Forms.NumericUpDownTS();
            this.udPWR1 = new System.Windows.Forms.NumericUpDownTS();
            this.udAF1 = new System.Windows.Forms.NumericUpDownTS();
            this.lblRX2 = new System.Windows.Forms.LabelTS();
            this.ptbNotchWidth = new PowerSDR.PrettyTrackBar();
            this.ptbNotchShift = new PowerSDR.PrettyTrackBar();
            this.btnNotchReset = new System.Windows.Forms.ButtonTS();
            this.radSUBRxModeAM = new System.Windows.Forms.RadioButtonTS();
            this.radSUBRxModeSAM = new System.Windows.Forms.RadioButtonTS();
            this.radSUBRxModeDSB = new System.Windows.Forms.RadioButtonTS();
            this.radSUBRxModeCWU = new System.Windows.Forms.RadioButtonTS();
            this.radSUBRxModeDIGU = new System.Windows.Forms.RadioButtonTS();
            this.radSUBRxModeDIGL = new System.Windows.Forms.RadioButtonTS();
            this.radSUBRxModeLSB = new System.Windows.Forms.RadioButtonTS();
            this.radSUBRxModeSPEC = new System.Windows.Forms.RadioButtonTS();
            this.radSUBRxModeDRM = new System.Windows.Forms.RadioButtonTS();
            this.radSUBRxModeFMN = new System.Windows.Forms.RadioButtonTS();
            this.radSUBRxModeUSB = new System.Windows.Forms.RadioButtonTS();
            this.radSUBRxModeCWL = new System.Windows.Forms.RadioButtonTS();
            this.radModeAM = new System.Windows.Forms.RadioButtonTS();
            this.radModeSAM = new System.Windows.Forms.RadioButtonTS();
            this.radModeDSB = new System.Windows.Forms.RadioButtonTS();
            this.radModeCWU = new System.Windows.Forms.RadioButtonTS();
            this.radModeDIGU = new System.Windows.Forms.RadioButtonTS();
            this.radModeDIGL = new System.Windows.Forms.RadioButtonTS();
            this.radModeLSB = new System.Windows.Forms.RadioButtonTS();
            this.radModeSPEC = new System.Windows.Forms.RadioButtonTS();
            this.radModeDRM = new System.Windows.Forms.RadioButtonTS();
            this.radModeFMN = new System.Windows.Forms.RadioButtonTS();
            this.radModeUSB = new System.Windows.Forms.RadioButtonTS();
            this.radModeWFM = new System.Windows.Forms.RadioButtonTS();
            this.chkManualNotchFilter = new System.Windows.Forms.CheckBoxTS();
            this.chkG11ATTbtn = new System.Windows.Forms.CheckBoxTS();
            this.chkG11AFbtn = new System.Windows.Forms.CheckBoxTS();
            this.chkG11RFbtn = new System.Windows.Forms.CheckBoxTS();
            this.radBandHF = new System.Windows.Forms.RadioButtonTS();
            this.radBand600 = new System.Windows.Forms.RadioButtonTS();
            this.radBand2190 = new System.Windows.Forms.RadioButtonTS();
            this.btnFMMC = new System.Windows.Forms.ButtonTS();
            this.btnFMMR = new System.Windows.Forms.ButtonTS();
            this.btnFMMS = new System.Windows.Forms.ButtonTS();
            this.lblMemoryNumber = new System.Windows.Forms.LabelTS();
            this.contextMemoryMenu = new System.Windows.Forms.ContextMenuStrip(this.components);
            this.eraseAllMemoryToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.lblFMMemory = new System.Windows.Forms.LabelTS();
            this.contextMenuFMMemory = new System.Windows.Forms.ContextMenuStrip(this.components);
            this.eraseAllMemoryToolStripMenuItem1 = new System.Windows.Forms.ToolStripMenuItem();
            this.udFMOffset = new System.Windows.Forms.NumericUpDownTS();
            this.radFMModeHigh = new System.Windows.Forms.RadioButtonTS();
            this.radFMModeSimplex = new System.Windows.Forms.RadioButtonTS();
            this.radFMModeLow = new System.Windows.Forms.RadioButtonTS();
            this.chkCTCSS = new System.Windows.Forms.CheckBoxTS();
            this.comboFMCTCSSFreq = new System.Windows.Forms.ComboBoxTS();
            this.ptbFMMicGain = new PowerSDR.PrettyTrackBar();
            this.chkVACMute = new System.Windows.Forms.CheckBoxTS();
            this.chkG6ATT_6dB = new System.Windows.Forms.CheckBoxTS();
            this.chkG6AF = new System.Windows.Forms.CheckBoxTS();
            this.chkG6RF = new System.Windows.Forms.CheckBoxTS();
            this.chkWFMstereo = new System.Windows.Forms.CheckBoxTS();
            this.chkG6ATT_12dB = new System.Windows.Forms.CheckBoxTS();
            this.chkG6ATT_18dB = new System.Windows.Forms.CheckBoxTS();
            this.timer_clock = new System.Windows.Forms.Timer(this.components);
            this.contextLOSCMenu = new System.Windows.Forms.ContextMenuStrip(this.components);
            this.xtal1ToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.menuStrip1 = new System.Windows.Forms.MenuStrip();
            this.setupToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.waveToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.equalizerToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.cWXToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.voiceMessagesToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.wizardToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.minimalisticToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.dXToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.xTRVToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.debugToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.aboutToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.mnuSetup = new System.Windows.Forms.MenuItem();
            this.contextNewVFOSmeter = new System.Windows.Forms.ContextMenuStrip(this.components);
            this.toolStripTextBox1 = new System.Windows.Forms.ToolStripTextBox();
            this.toolStripNewVFOSmeterRX = new System.Windows.Forms.ToolStripComboBox();
            this.toolStripTextBox2 = new System.Windows.Forms.ToolStripTextBox();
            this.toolStripNewVFOSmeterTX = new System.Windows.Forms.ToolStripComboBox();
            this.grpG500 = new System.Windows.Forms.GroupBoxTS();
            this.btnG500_X1 = new System.Windows.Forms.RadioButtonTS();
            this.grpG137 = new System.Windows.Forms.GroupBoxTS();
            this.btnG137_X1 = new System.Windows.Forms.RadioButtonTS();
            this.grpG40 = new System.Windows.Forms.GroupBoxTS();
            this.btnG40_X1 = new System.Windows.Forms.RadioButtonTS();
            this.grpModeSpecificPhone = new System.Windows.Forms.GroupBoxTS();
            this.groupBoxTS1 = new System.Windows.Forms.GroupBoxTS();
            this.btnMsg6 = new System.Windows.Forms.CheckBoxTS();
            this.btnMsg5 = new System.Windows.Forms.CheckBoxTS();
            this.btnMsg4 = new System.Windows.Forms.CheckBoxTS();
            this.btnMsg3 = new System.Windows.Forms.CheckBoxTS();
            this.btnMsg2 = new System.Windows.Forms.CheckBoxTS();
            this.btnMsg1 = new System.Windows.Forms.CheckBoxTS();
            this.udNoiseGate = new System.Windows.Forms.NumericUpDownTS();
            this.udVOX = new System.Windows.Forms.NumericUpDownTS();
            this.ptbMIC = new PowerSDR.PrettyTrackBar();
            this.udCPDR = new System.Windows.Forms.NumericUpDownTS();
            this.ptbCPDR = new PowerSDR.PrettyTrackBar();
            this.udCOMP = new System.Windows.Forms.NumericUpDownTS();
            this.ptbCOMP = new PowerSDR.PrettyTrackBar();
            this.picNoiseGate = new System.Windows.Forms.PictureBox();
            this.ptbNoiseGate = new PowerSDR.PrettyTrackBar();
            this.picVOX = new System.Windows.Forms.PictureBox();
            this.ptbVOX = new PowerSDR.PrettyTrackBar();
            this.udMIC = new System.Windows.Forms.NumericUpDownTS();
            this.lblMIC = new System.Windows.Forms.LabelTS();
            this.lblTransmitProfile = new System.Windows.Forms.LabelTS();
            this.grpVFOA = new System.Windows.Forms.GroupBoxTS();
            this.panelVFOAHover = new System.Windows.Forms.PanelTS();
            this.txtVFOALSD = new System.Windows.Forms.TextBoxTS();
            this.txtVFOAMSD = new System.Windows.Forms.TextBoxTS();
            this.txtVFOABand = new System.Windows.Forms.TextBoxTS();
            this.txtVFOAFreq = new System.Windows.Forms.TextBoxTS();
            this.btnHidden = new System.Windows.Forms.ButtonTS();
            this.grpVFOnew = new System.Windows.Forms.GroupBoxTS();
            this.picAGauge = new System.Windows.Forms.PictureBox();
            this.lblATTNewVFO = new System.Windows.Forms.LabelTS();
            this.lblRFNewVFO = new System.Windows.Forms.LabelTS();
            this.lblAFNewVFO = new System.Windows.Forms.LabelTS();
            this.txtNewVFOBand = new System.Windows.Forms.TextBoxTS();
            this.lblVFOBTX = new System.Windows.Forms.LabelTS();
            this.lblVFOATX = new System.Windows.Forms.LabelTS();
            this.lblLOSC = new System.Windows.Forms.LabelTS();
            this.lblVFOB = new System.Windows.Forms.LabelTS();
            this.lblVFOA = new System.Windows.Forms.LabelTS();
            this.panelLOSCnewHover = new System.Windows.Forms.PanelTS();
            this.panelVFOBnewHover = new System.Windows.Forms.PanelTS();
            this.panelVFOAnewHover = new System.Windows.Forms.PanelTS();
            this.txtLOSCnew = new System.Windows.Forms.TextBoxTS();
            this.txtVFOBnew = new System.Windows.Forms.TextBoxTS();
            this.txtVFOAnew = new System.Windows.Forms.TextBoxTS();
            this.sMeterDigital1 = new PowerSDR.Invoke.SMeter1();
            this.sMeterDigital2 = new PowerSDR.Invoke.SMeter2();
            this.lblNotchShift = new System.Windows.Forms.LabelTS();
            this.lblWidth = new System.Windows.Forms.LabelTS();
            this.grpSoundControls = new System.Windows.Forms.GroupBoxTS();
            this.lblAF = new System.Windows.Forms.LabelTS();
            this.lblPWRValue = new System.Windows.Forms.LabelTS();
            this.lblRFValue = new System.Windows.Forms.LabelTS();
            this.picSQLSubRX = new System.Windows.Forms.PictureBox();
            this.lblRF = new System.Windows.Forms.LabelTS();
            this.lblPWR = new System.Windows.Forms.LabelTS();
            this.lblAGC = new System.Windows.Forms.LabelTS();
            this.lblAFValue = new System.Windows.Forms.LabelTS();
            this.picSQLMainRX = new System.Windows.Forms.PictureBox();
            this.grpModeSpecificCW = new System.Windows.Forms.GroupBoxTS();
            this.grpCWX = new System.Windows.Forms.GroupBoxTS();
            this.btnCWX4 = new System.Windows.Forms.CheckBoxTS();
            this.btnCWX5 = new System.Windows.Forms.CheckBoxTS();
            this.btnCWX1 = new System.Windows.Forms.CheckBoxTS();
            this.btnCWX6 = new System.Windows.Forms.CheckBoxTS();
            this.btnCWX2 = new System.Windows.Forms.CheckBoxTS();
            this.btnCWX3 = new System.Windows.Forms.CheckBoxTS();
            this.grpCWPitch = new System.Windows.Forms.GroupBoxTS();
            this.lblCWPitchFreq = new System.Windows.Forms.LabelTS();
            this.ptbCWSpeed = new PowerSDR.PrettyTrackBar();
            this.lblCWSpeed = new System.Windows.Forms.LabelTS();
            this.grpVFOB = new System.Windows.Forms.GroupBoxTS();
            this.txtVFOBLSD = new System.Windows.Forms.TextBoxTS();
            this.panelVFOBHover = new System.Windows.Forms.PanelTS();
            this.txtVFOBMSD = new System.Windows.Forms.TextBoxTS();
            this.lblVFOBLSD = new System.Windows.Forms.LabelTS();
            this.txtVFOBBand = new System.Windows.Forms.TextBoxTS();
            this.txtVFOBFreq = new System.Windows.Forms.TextBoxTS();
            this.grpLOSC = new System.Windows.Forms.GroupBoxTS();
            this.panelLOSCHover = new System.Windows.Forms.PanelTS();
            this.txtLOSCLSD = new System.Windows.Forms.TextBoxTS();
            this.txtLOSCMSD = new System.Windows.Forms.TextBoxTS();
            this.txtLOSCFreq = new System.Windows.Forms.TextBoxTS();
            this.grpG160 = new System.Windows.Forms.GroupBoxTS();
            this.grpG3020 = new System.Windows.Forms.GroupBoxTS();
            this.btnG3020_X4 = new System.Windows.Forms.RadioButtonTS();
            this.btnG3020_X3 = new System.Windows.Forms.RadioButtonTS();
            this.btnG3020_X2 = new System.Windows.Forms.RadioButtonTS();
            this.btnG3020_X1 = new System.Windows.Forms.RadioButtonTS();
            this.grpG80 = new System.Windows.Forms.GroupBoxTS();
            this.btnG80_X4 = new System.Windows.Forms.RadioButtonTS();
            this.btnG80_X3 = new System.Windows.Forms.RadioButtonTS();
            this.btnG80_X2 = new System.Windows.Forms.RadioButtonTS();
            this.btnG80_X1 = new System.Windows.Forms.RadioButtonTS();
            this.grpG59 = new System.Windows.Forms.GroupBoxTS();
            this.grpZoom = new System.Windows.Forms.GroupBoxTS();
            this.label2 = new System.Windows.Forms.LabelTS();
            this.ptbDisplayZoom = new PowerSDR.PrettyTrackBar();
            this.ptbDisplayPan = new PowerSDR.PrettyTrackBar();
            this.label1 = new System.Windows.Forms.LabelTS();
            this.radDisplayZoom32x = new System.Windows.Forms.RadioButtonTS();
            this.radDisplayZoom1x = new System.Windows.Forms.RadioButtonTS();
            this.radDisplayZoom2x = new System.Windows.Forms.RadioButtonTS();
            this.radDisplayZoom16x = new System.Windows.Forms.RadioButtonTS();
            this.radDisplayZoom4x = new System.Windows.Forms.RadioButtonTS();
            this.radDisplayZoom8x = new System.Windows.Forms.RadioButtonTS();
            this.grpSubRX = new System.Windows.Forms.GroupBoxTS();
            this.grpBandHF = new System.Windows.Forms.GroupBoxTS();
            this.grpVFOBetween = new System.Windows.Forms.GroupBoxTS();
            this.txtMemory = new System.Windows.Forms.TextBoxTS();
            this.grpDisplay2 = new System.Windows.Forms.GroupBoxTS();
            this.grpOptions = new System.Windows.Forms.GroupBoxTS();
            this.btnChangeTuneStepLarger = new System.Windows.Forms.ButtonTS();
            this.btnTuneStepChangeSmaller = new System.Windows.Forms.ButtonTS();
            this.btnChangeTuneStepLargerSubRX = new System.Windows.Forms.ButtonTS();
            this.btnTuneStepChangeSmallerSubRX = new System.Windows.Forms.ButtonTS();
            this.grpModeSpecificDigital = new System.Windows.Forms.GroupBoxTS();
            this.grpDIGSampleRate = new System.Windows.Forms.GroupBoxTS();
            this.ptbVACTXGain = new PowerSDR.PrettyTrackBar();
            this.ptbVACRXGain = new PowerSDR.PrettyTrackBar();
            this.lblTXGain = new System.Windows.Forms.LabelTS();
            this.lblRXGain = new System.Windows.Forms.LabelTS();
            this.lblTuneStep = new System.Windows.Forms.LabelTS();
            this.grpDisplay = new System.Windows.Forms.GroupBoxTS();
            this.picWaterfall = new System.Windows.Forms.PictureBox();
            this.txtDisplayPeakFreq = new System.Windows.Forms.TextBoxTS();
            this.txtDisplayCursorFreq = new System.Windows.Forms.TextBoxTS();
            this.txtDisplayCursorPower = new System.Windows.Forms.TextBoxTS();
            this.txtDisplayPeakPower = new System.Windows.Forms.TextBoxTS();
            this.txtDisplayCursorOffset = new System.Windows.Forms.TextBoxTS();
            this.txtDisplayPeakOffset = new System.Windows.Forms.TextBoxTS();
            this.picDisplay = new System.Windows.Forms.PictureBox();
            this.grpMainRXFilter = new System.Windows.Forms.GroupBoxTS();
            this.lblFilterWidth = new System.Windows.Forms.LabelTS();
            this.lblFilterShift = new System.Windows.Forms.LabelTS();
            this.radFilter1 = new System.Windows.Forms.RadioButtonTS();
            this.radFilter2 = new System.Windows.Forms.RadioButtonTS();
            this.radFilter3 = new System.Windows.Forms.RadioButtonTS();
            this.radFilter4 = new System.Windows.Forms.RadioButtonTS();
            this.radFilter5 = new System.Windows.Forms.RadioButtonTS();
            this.radFilter6 = new System.Windows.Forms.RadioButtonTS();
            this.radFilter7 = new System.Windows.Forms.RadioButtonTS();
            this.radFilter8 = new System.Windows.Forms.RadioButtonTS();
            this.radFilter9 = new System.Windows.Forms.RadioButtonTS();
            this.radFilter10 = new System.Windows.Forms.RadioButtonTS();
            this.radFilterVar1 = new System.Windows.Forms.RadioButtonTS();
            this.radFilterVar2 = new System.Windows.Forms.RadioButtonTS();
            this.lblFilterLow = new System.Windows.Forms.LabelTS();
            this.lblFilterHigh = new System.Windows.Forms.LabelTS();
            this.lblCPUMeter = new System.Windows.Forms.LabelTS();
            this.grpDSPMainRX = new System.Windows.Forms.GroupBoxTS();
            this.grpMultimeter = new System.Windows.Forms.GroupBoxTS();
            this.picMultiMeterDigital = new System.Windows.Forms.PictureBox();
            this.lblMultiSMeter = new System.Windows.Forms.LabelTS();
            this.txtMultiText = new System.Windows.Forms.TextBoxTS();
            this.picMultimeterAnalog = new System.Windows.Forms.PictureBox();
            this.grpVFO = new System.Windows.Forms.GroupBoxTS();
            this.grpManualNotch = new System.Windows.Forms.GroupBoxTS();
            this.labelTS6 = new System.Windows.Forms.LabelTS();
            this.labelTS5 = new System.Windows.Forms.LabelTS();
            this.lblNotchLow = new System.Windows.Forms.LabelTS();
            this.lblNotchHigh = new System.Windows.Forms.LabelTS();
            this.picSmallAGauge = new System.Windows.Forms.PictureBox();
            this.grpSubRXFilter = new System.Windows.Forms.GroupBoxTS();
            this.labelTS1 = new System.Windows.Forms.LabelTS();
            this.labelTS2 = new System.Windows.Forms.LabelTS();
            this.radSubRXFilter1 = new System.Windows.Forms.RadioButtonTS();
            this.radSubRXFilter2 = new System.Windows.Forms.RadioButtonTS();
            this.radSubRXFilter3 = new System.Windows.Forms.RadioButtonTS();
            this.radSubRXFilter4 = new System.Windows.Forms.RadioButtonTS();
            this.radSubRXFilter5 = new System.Windows.Forms.RadioButtonTS();
            this.radSubRXFilter6 = new System.Windows.Forms.RadioButtonTS();
            this.radSubRXFilter7 = new System.Windows.Forms.RadioButtonTS();
            this.radSubRXFilter8 = new System.Windows.Forms.RadioButtonTS();
            this.radSubRXFilter9 = new System.Windows.Forms.RadioButtonTS();
            this.radSubRXFilter10 = new System.Windows.Forms.RadioButtonTS();
            this.radSubRXFilterVar1 = new System.Windows.Forms.RadioButtonTS();
            this.radSubRXFilterVar2 = new System.Windows.Forms.RadioButtonTS();
            this.labelTS3 = new System.Windows.Forms.LabelTS();
            this.labelTS4 = new System.Windows.Forms.LabelTS();
            this.grpDSPSubRX = new System.Windows.Forms.GroupBoxTS();
            this.grpSoundControls1 = new System.Windows.Forms.GroupBoxTS();
            this.lblRF1 = new System.Windows.Forms.LabelTS();
            this.lblPWR1 = new System.Windows.Forms.LabelTS();
            this.lblAF1 = new System.Windows.Forms.LabelTS();
            this.grpSubRXMode = new System.Windows.Forms.GroupBoxTS();
            this.grpMainRXMode = new System.Windows.Forms.GroupBoxTS();
            this.grpG11 = new System.Windows.Forms.GroupBoxTS();
            this.grpMoreBands = new System.Windows.Forms.GroupBoxTS();
            this.radBandX12 = new System.Windows.Forms.RadioButtonTS();
            this.radBandX11 = new System.Windows.Forms.RadioButtonTS();
            this.radBandX10 = new System.Windows.Forms.RadioButtonTS();
            this.radBandX9 = new System.Windows.Forms.RadioButtonTS();
            this.radBandX8 = new System.Windows.Forms.RadioButtonTS();
            this.radBandX7 = new System.Windows.Forms.RadioButtonTS();
            this.radBandX6 = new System.Windows.Forms.RadioButtonTS();
            this.radBandX5 = new System.Windows.Forms.RadioButtonTS();
            this.radBandX4 = new System.Windows.Forms.RadioButtonTS();
            this.radBandX3 = new System.Windows.Forms.RadioButtonTS();
            this.radBandX2 = new System.Windows.Forms.RadioButtonTS();
            this.radBandX1 = new System.Windows.Forms.RadioButtonTS();
            this.grpModeSpecificFM = new System.Windows.Forms.GroupBoxTS();
            this.labelTS7 = new System.Windows.Forms.LabelTS();
            this.grpFMVoiceMsg = new System.Windows.Forms.GroupBoxTS();
            this.chkFMMsg6 = new System.Windows.Forms.CheckBoxTS();
            this.chkFMMsg5 = new System.Windows.Forms.CheckBoxTS();
            this.chkFMMsg4 = new System.Windows.Forms.CheckBoxTS();
            this.chkFMMsg3 = new System.Windows.Forms.CheckBoxTS();
            this.chkFMMsg2 = new System.Windows.Forms.CheckBoxTS();
            this.chkFMMsg1 = new System.Windows.Forms.CheckBoxTS();
            this.labelTS8 = new System.Windows.Forms.LabelTS();
            this.txtFMmemory = new System.Windows.Forms.TextBoxTS();
            this.grpG6 = new System.Windows.Forms.GroupBoxTS();
            ((System.ComponentModel.ISupportInitialize)(this.ptbPWR)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbRF)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbAF)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.udCWPitch)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.udCWSpeed)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbRX0Gain)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbPanSubRX)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbPanMainRX)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbRX1Gain)).BeginInit();
            this.contextMenuMUTE.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.udFilterHigh)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.udFilterLow)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbFilterWidth)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbFilterShift)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.udXIT)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.udRIT)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.udVACTXGain)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.udVACRXGain)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.udSubRXFilterHigh)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.udSubRXFilterLow)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbSubRXFilterWidth)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbSubRXFilterShift)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbSQLMainRX)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.udSQLSubRX)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbSQLSubRX)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.udSQLMainRX)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbPWR1)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbRF1)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbAF1)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.udRF1)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.udPWR1)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.udAF1)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbNotchWidth)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbNotchShift)).BeginInit();
            this.contextMemoryMenu.SuspendLayout();
            this.contextMenuFMMemory.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.udFMOffset)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbFMMicGain)).BeginInit();
            this.contextLOSCMenu.SuspendLayout();
            this.menuStrip1.SuspendLayout();
            this.contextNewVFOSmeter.SuspendLayout();
            this.grpG500.SuspendLayout();
            this.grpG137.SuspendLayout();
            this.grpG40.SuspendLayout();
            this.grpModeSpecificPhone.SuspendLayout();
            this.groupBoxTS1.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.udNoiseGate)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.udVOX)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbMIC)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.udCPDR)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbCPDR)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.udCOMP)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbCOMP)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.picNoiseGate)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbNoiseGate)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.picVOX)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbVOX)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.udMIC)).BeginInit();
            this.grpVFOA.SuspendLayout();
            this.grpVFOnew.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.picAGauge)).BeginInit();
            this.grpSoundControls.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.picSQLSubRX)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.picSQLMainRX)).BeginInit();
            this.grpModeSpecificCW.SuspendLayout();
            this.grpCWX.SuspendLayout();
            this.grpCWPitch.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.ptbCWSpeed)).BeginInit();
            this.grpVFOB.SuspendLayout();
            this.grpLOSC.SuspendLayout();
            this.grpG160.SuspendLayout();
            this.grpG3020.SuspendLayout();
            this.grpG80.SuspendLayout();
            this.grpG59.SuspendLayout();
            this.grpZoom.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.ptbDisplayZoom)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbDisplayPan)).BeginInit();
            this.grpSubRX.SuspendLayout();
            this.grpBandHF.SuspendLayout();
            this.grpVFOBetween.SuspendLayout();
            this.grpDisplay2.SuspendLayout();
            this.grpOptions.SuspendLayout();
            this.grpModeSpecificDigital.SuspendLayout();
            this.grpDIGSampleRate.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.ptbVACTXGain)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbVACRXGain)).BeginInit();
            this.grpDisplay.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.picWaterfall)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.picDisplay)).BeginInit();
            this.grpMainRXFilter.SuspendLayout();
            this.grpDSPMainRX.SuspendLayout();
            this.grpMultimeter.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.picMultiMeterDigital)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.picMultimeterAnalog)).BeginInit();
            this.grpVFO.SuspendLayout();
            this.grpManualNotch.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.picSmallAGauge)).BeginInit();
            this.grpSubRXFilter.SuspendLayout();
            this.grpDSPSubRX.SuspendLayout();
            this.grpSoundControls1.SuspendLayout();
            this.grpSubRXMode.SuspendLayout();
            this.grpMainRXMode.SuspendLayout();
            this.grpG11.SuspendLayout();
            this.grpMoreBands.SuspendLayout();
            this.grpModeSpecificFM.SuspendLayout();
            this.grpFMVoiceMsg.SuspendLayout();
            this.grpG6.SuspendLayout();
            this.SuspendLayout();
            // 
            // mnuWave
            // 
            this.mnuWave.Index = -1;
            resources.ApplyResources(this.mnuWave, "mnuWave");
            this.mnuWave.Click += new System.EventHandler(this.menu_wave_Click);
            // 
            // mnuEQ
            // 
            this.mnuEQ.Index = -1;
            resources.ApplyResources(this.mnuEQ, "mnuEQ");
            this.mnuEQ.Click += new System.EventHandler(this.mnuEQ_Click);
            // 
            // mnuCWX
            // 
            this.mnuCWX.Index = -1;
            resources.ApplyResources(this.mnuCWX, "mnuCWX");
            this.mnuCWX.Click += new System.EventHandler(this.mnuCWX_Click);
            // 
            // mnuVoiceMessages
            // 
            this.mnuVoiceMessages.Index = -1;
            resources.ApplyResources(this.mnuVoiceMessages, "mnuVoiceMessages");
            this.mnuVoiceMessages.Click += new System.EventHandler(this.mnuVoiceMessages_Click);
            // 
            // mnuWizard
            // 
            this.mnuWizard.Index = -1;
            resources.ApplyResources(this.mnuWizard, "mnuWizard");
            this.mnuWizard.Click += new System.EventHandler(this.mnuWizard_Click);
            // 
            // mnuAbout
            // 
            this.mnuAbout.Index = -1;
            resources.ApplyResources(this.mnuAbout, "mnuAbout");
            this.mnuAbout.Click += new System.EventHandler(this.mnuAbout_Click);
            // 
            // contextMenuFilter
            // 
            this.contextMenuFilter.MenuItems.AddRange(new System.Windows.Forms.MenuItem[] {
            this.menuItemFilterConfigure,
            this.mnuFilterReset});
            // 
            // menuItemFilterConfigure
            // 
            this.menuItemFilterConfigure.Index = 0;
            resources.ApplyResources(this.menuItemFilterConfigure, "menuItemFilterConfigure");
            this.menuItemFilterConfigure.Click += new System.EventHandler(this.menuItemFilterConfigure_Click);
            // 
            // mnuFilterReset
            // 
            this.mnuFilterReset.Index = 1;
            resources.ApplyResources(this.mnuFilterReset, "mnuFilterReset");
            this.mnuFilterReset.Click += new System.EventHandler(this.mnuFilterReset_Click);
            // 
            // timer_cpu_meter
            // 
            this.timer_cpu_meter.Enabled = true;
            this.timer_cpu_meter.Interval = 1000;
            this.timer_cpu_meter.Tick += new System.EventHandler(this.timer_cpu_meter_Tick);
            // 
            // timer_peak_text
            // 
            this.timer_peak_text.Interval = 500;
            this.timer_peak_text.Tick += new System.EventHandler(this.timer_peak_text_Tick);
            // 
            // chkNoiseGate
            // 
            resources.ApplyResources(this.chkNoiseGate, "chkNoiseGate");
            this.chkNoiseGate.FlatAppearance.BorderSize = 0;
            this.chkNoiseGate.Image = null;
            this.chkNoiseGate.Name = "chkNoiseGate";
            this.toolTip1.SetToolTip(this.chkNoiseGate, resources.GetString("chkNoiseGate.ToolTip"));
            this.chkNoiseGate.CheckedChanged += new System.EventHandler(this.chkNoiseGate_CheckedChanged);
            // 
            // chkVOX
            // 
            resources.ApplyResources(this.chkVOX, "chkVOX");
            this.chkVOX.FlatAppearance.BorderSize = 0;
            this.chkVOX.Image = null;
            this.chkVOX.Name = "chkVOX";
            this.toolTip1.SetToolTip(this.chkVOX, resources.GetString("chkVOX.ToolTip"));
            this.chkVOX.CheckedChanged += new System.EventHandler(this.chkVOX_CheckedChanged);
            // 
            // chkDSPComp
            // 
            resources.ApplyResources(this.chkDSPComp, "chkDSPComp");
            this.chkDSPComp.FlatAppearance.BorderSize = 0;
            this.chkDSPComp.Image = null;
            this.chkDSPComp.Name = "chkDSPComp";
            this.toolTip1.SetToolTip(this.chkDSPComp, resources.GetString("chkDSPComp.ToolTip"));
            this.chkDSPComp.CheckedChanged += new System.EventHandler(this.chkDSPComp_CheckedChanged);
            // 
            // chkDSPCompander
            // 
            resources.ApplyResources(this.chkDSPCompander, "chkDSPCompander");
            this.chkDSPCompander.FlatAppearance.BorderSize = 0;
            this.chkDSPCompander.Image = null;
            this.chkDSPCompander.Name = "chkDSPCompander";
            this.toolTip1.SetToolTip(this.chkDSPCompander, resources.GetString("chkDSPCompander.ToolTip"));
            this.chkDSPCompander.CheckedChanged += new System.EventHandler(this.chkDSPCompander_CheckedChanged);
            // 
            // comboTXProfile
            // 
            this.comboTXProfile.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.comboTXProfile.DropDownWidth = 96;
            resources.ApplyResources(this.comboTXProfile, "comboTXProfile");
            this.comboTXProfile.Name = "comboTXProfile";
            this.toolTip1.SetToolTip(this.comboTXProfile, resources.GetString("comboTXProfile.ToolTip"));
            this.comboTXProfile.SelectedIndexChanged += new System.EventHandler(this.comboTXProfile_SelectedIndexChanged);
            // 
            // chkShowTXFilter
            // 
            resources.ApplyResources(this.chkShowTXFilter, "chkShowTXFilter");
            this.chkShowTXFilter.Image = null;
            this.chkShowTXFilter.Name = "chkShowTXFilter";
            this.toolTip1.SetToolTip(this.chkShowTXFilter, resources.GetString("chkShowTXFilter.ToolTip"));
            this.chkShowTXFilter.CheckedChanged += new System.EventHandler(this.chkShowTXFilter_CheckedChanged);
            // 
            // ptbPWR
            // 
            resources.ApplyResources(this.ptbPWR, "ptbPWR");
            this.ptbPWR.HeadImage = null;
            this.ptbPWR.LargeChange = 5;
            this.ptbPWR.Maximum = 100;
            this.ptbPWR.Minimum = 0;
            this.ptbPWR.Name = "ptbPWR";
            this.ptbPWR.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.ptbPWR.SmallChange = 1;
            this.ptbPWR.TabStop = false;
            this.toolTip1.SetToolTip(this.ptbPWR, resources.GetString("ptbPWR.ToolTip"));
            this.ptbPWR.Value = 50;
            this.ptbPWR.OnWheel += new PowerSDR.PrettyTrackBar.WheelHandler(this.ptbPWR_Wheel);
            this.ptbPWR.Scroll += new PowerSDR.PrettyTrackBar.ScrollHandler(this.ptbPWR_Scroll);
            // 
            // ptbRF
            // 
            resources.ApplyResources(this.ptbRF, "ptbRF");
            this.ptbRF.HeadImage = null;
            this.ptbRF.LargeChange = 5;
            this.ptbRF.Maximum = 120;
            this.ptbRF.Minimum = -20;
            this.ptbRF.Name = "ptbRF";
            this.ptbRF.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.ptbRF.SmallChange = 1;
            this.ptbRF.TabStop = false;
            this.toolTip1.SetToolTip(this.ptbRF, resources.GetString("ptbRF.ToolTip"));
            this.ptbRF.Value = 90;
            this.ptbRF.OnWheel += new PowerSDR.PrettyTrackBar.WheelHandler(this.ptbRF_Wheel);
            this.ptbRF.Scroll += new PowerSDR.PrettyTrackBar.ScrollHandler(this.ptbRF_Scroll);
            // 
            // ptbAF
            // 
            resources.ApplyResources(this.ptbAF, "ptbAF");
            this.ptbAF.HeadImage = null;
            this.ptbAF.LargeChange = 5;
            this.ptbAF.Maximum = 100;
            this.ptbAF.Minimum = 0;
            this.ptbAF.Name = "ptbAF";
            this.ptbAF.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.ptbAF.SmallChange = 1;
            this.ptbAF.TabStop = false;
            this.toolTip1.SetToolTip(this.ptbAF, resources.GetString("ptbAF.ToolTip"));
            this.ptbAF.Value = 50;
            this.ptbAF.OnWheel += new PowerSDR.PrettyTrackBar.WheelHandler(this.ptbAF_Wheel);
            this.ptbAF.Scroll += new PowerSDR.PrettyTrackBar.ScrollHandler(this.ptbAF_Scroll);
            // 
            // btnNetwork
            // 
            this.btnNetwork.BackColor = System.Drawing.Color.Red;
            this.btnNetwork.Image = null;
            resources.ApplyResources(this.btnNetwork, "btnNetwork");
            this.btnNetwork.Name = "btnNetwork";
            this.toolTip1.SetToolTip(this.btnNetwork, resources.GetString("btnNetwork.ToolTip"));
            this.btnNetwork.Click += new System.EventHandler(this.btnNetwork_Click);
            // 
            // chkShowTXCWFreq
            // 
            resources.ApplyResources(this.chkShowTXCWFreq, "chkShowTXCWFreq");
            this.chkShowTXCWFreq.Image = null;
            this.chkShowTXCWFreq.Name = "chkShowTXCWFreq";
            this.toolTip1.SetToolTip(this.chkShowTXCWFreq, resources.GetString("chkShowTXCWFreq.ToolTip"));
            this.chkShowTXCWFreq.CheckedChanged += new System.EventHandler(this.chkShowTXCWFreq_CheckedChanged);
            // 
            // chkCWVAC
            // 
            resources.ApplyResources(this.chkCWVAC, "chkCWVAC");
            this.chkCWVAC.FlatAppearance.BorderSize = 0;
            this.chkCWVAC.Image = null;
            this.chkCWVAC.Name = "chkCWVAC";
            this.toolTip1.SetToolTip(this.chkCWVAC, resources.GetString("chkCWVAC.ToolTip"));
            this.chkCWVAC.CheckedChanged += new System.EventHandler(this.chkCWVAC_CheckedChanged);
            // 
            // udCWPitch
            // 
            this.udCWPitch.Increment = new decimal(new int[] {
            10,
            0,
            0,
            0});
            resources.ApplyResources(this.udCWPitch, "udCWPitch");
            this.udCWPitch.Maximum = new decimal(new int[] {
            2250,
            0,
            0,
            0});
            this.udCWPitch.Minimum = new decimal(new int[] {
            200,
            0,
            0,
            0});
            this.udCWPitch.Name = "udCWPitch";
            this.toolTip1.SetToolTip(this.udCWPitch, resources.GetString("udCWPitch.ToolTip"));
            this.udCWPitch.Value = new decimal(new int[] {
            600,
            0,
            0,
            0});
            this.udCWPitch.ValueChanged += new System.EventHandler(this.udCWPitch_ValueChanged);
            // 
            // chkCWIambic
            // 
            resources.ApplyResources(this.chkCWIambic, "chkCWIambic");
            this.chkCWIambic.Checked = true;
            this.chkCWIambic.CheckState = System.Windows.Forms.CheckState.Checked;
            this.chkCWIambic.Image = null;
            this.chkCWIambic.Name = "chkCWIambic";
            this.toolTip1.SetToolTip(this.chkCWIambic, resources.GetString("chkCWIambic.ToolTip"));
            this.chkCWIambic.CheckedChanged += new System.EventHandler(this.chkCWIambic_CheckedChanged);
            // 
            // chkBreakIn
            // 
            resources.ApplyResources(this.chkBreakIn, "chkBreakIn");
            this.chkBreakIn.BackColor = System.Drawing.Color.Yellow;
            this.chkBreakIn.Checked = true;
            this.chkBreakIn.CheckState = System.Windows.Forms.CheckState.Checked;
            this.chkBreakIn.FlatAppearance.BorderSize = 0;
            this.chkBreakIn.Image = null;
            this.chkBreakIn.Name = "chkBreakIn";
            this.toolTip1.SetToolTip(this.chkBreakIn, resources.GetString("chkBreakIn.ToolTip"));
            this.chkBreakIn.UseVisualStyleBackColor = false;
            this.chkBreakIn.CheckedChanged += new System.EventHandler(this.chkBreakIn_CheckedChanged);
            // 
            // udCWSpeed
            // 
            this.udCWSpeed.Increment = new decimal(new int[] {
            1,
            0,
            0,
            0});
            resources.ApplyResources(this.udCWSpeed, "udCWSpeed");
            this.udCWSpeed.Maximum = new decimal(new int[] {
            60,
            0,
            0,
            0});
            this.udCWSpeed.Minimum = new decimal(new int[] {
            7,
            0,
            0,
            0});
            this.udCWSpeed.Name = "udCWSpeed";
            this.toolTip1.SetToolTip(this.udCWSpeed, resources.GetString("udCWSpeed.ToolTip"));
            this.udCWSpeed.Value = new decimal(new int[] {
            25,
            0,
            0,
            0});
            this.udCWSpeed.ValueChanged += new System.EventHandler(this.udCWSpeed_ValueChanged);
            // 
            // btnG160_X2
            // 
            resources.ApplyResources(this.btnG160_X2, "btnG160_X2");
            this.btnG160_X2.FlatAppearance.BorderSize = 0;
            this.btnG160_X2.Image = null;
            this.btnG160_X2.Name = "btnG160_X2";
            this.toolTip1.SetToolTip(this.btnG160_X2, resources.GetString("btnG160_X2.ToolTip"));
            this.btnG160_X2.UseVisualStyleBackColor = true;
            this.btnG160_X2.Click += new System.EventHandler(this.btnG160_X2_Click);
            // 
            // btnG160_X1
            // 
            resources.ApplyResources(this.btnG160_X1, "btnG160_X1");
            this.btnG160_X1.FlatAppearance.BorderSize = 0;
            this.btnG160_X1.Image = null;
            this.btnG160_X1.Name = "btnG160_X1";
            this.toolTip1.SetToolTip(this.btnG160_X1, resources.GetString("btnG160_X1.ToolTip"));
            this.btnG160_X1.UseVisualStyleBackColor = true;
            this.btnG160_X1.Click += new System.EventHandler(this.btnG160_X1_Click);
            // 
            // btnATT
            // 
            resources.ApplyResources(this.btnATT, "btnATT");
            this.btnATT.FlatAppearance.BorderSize = 0;
            this.btnATT.Image = null;
            this.btnATT.Name = "btnATT";
            this.toolTip1.SetToolTip(this.btnATT, resources.GetString("btnATT.ToolTip"));
            this.btnATT.UseVisualStyleBackColor = true;
            this.btnATT.CheckedChanged += new System.EventHandler(this.btnATT_CheckedChanged);
            // 
            // btnHIGH_AF
            // 
            resources.ApplyResources(this.btnHIGH_AF, "btnHIGH_AF");
            this.btnHIGH_AF.FlatAppearance.BorderSize = 0;
            this.btnHIGH_AF.Image = null;
            this.btnHIGH_AF.Name = "btnHIGH_AF";
            this.toolTip1.SetToolTip(this.btnHIGH_AF, resources.GetString("btnHIGH_AF.ToolTip"));
            this.btnHIGH_AF.UseVisualStyleBackColor = true;
            this.btnHIGH_AF.CheckedChanged += new System.EventHandler(this.btnHIGH_AF_CheckedChanged);
            // 
            // btnHIGH_RF
            // 
            resources.ApplyResources(this.btnHIGH_RF, "btnHIGH_RF");
            this.btnHIGH_RF.FlatAppearance.BorderSize = 0;
            this.btnHIGH_RF.Image = null;
            this.btnHIGH_RF.Name = "btnHIGH_RF";
            this.toolTip1.SetToolTip(this.btnHIGH_RF, resources.GetString("btnHIGH_RF.ToolTip"));
            this.btnHIGH_RF.UseVisualStyleBackColor = true;
            this.btnHIGH_RF.CheckedChanged += new System.EventHandler(this.btnHIGH_RF_CheckedChanged);
            // 
            // btnUSB
            // 
            this.btnUSB.BackColor = System.Drawing.Color.Red;
            this.btnUSB.Image = null;
            resources.ApplyResources(this.btnUSB, "btnUSB");
            this.btnUSB.Name = "btnUSB";
            this.toolTip1.SetToolTip(this.btnUSB, resources.GetString("btnUSB.ToolTip"));
            this.btnUSB.Click += new System.EventHandler(this.btnUSB_Click);
            // 
            // ptbRX0Gain
            // 
            resources.ApplyResources(this.ptbRX0Gain, "ptbRX0Gain");
            this.ptbRX0Gain.HeadImage = null;
            this.ptbRX0Gain.LargeChange = 1;
            this.ptbRX0Gain.Maximum = 100;
            this.ptbRX0Gain.Minimum = 0;
            this.ptbRX0Gain.Name = "ptbRX0Gain";
            this.ptbRX0Gain.Orientation = System.Windows.Forms.Orientation.Vertical;
            this.ptbRX0Gain.SmallChange = 1;
            this.ptbRX0Gain.TabStop = false;
            this.toolTip1.SetToolTip(this.ptbRX0Gain, resources.GetString("ptbRX0Gain.ToolTip"));
            this.ptbRX0Gain.Value = 100;
            this.ptbRX0Gain.OnWheel += new PowerSDR.PrettyTrackBar.WheelHandler(this.tbRX0Gain_OnWheel);
            this.ptbRX0Gain.Scroll += new PowerSDR.PrettyTrackBar.ScrollHandler(this.tbRX0Gain_Scroll);
            // 
            // chkEnableSubRX
            // 
            resources.ApplyResources(this.chkEnableSubRX, "chkEnableSubRX");
            this.chkEnableSubRX.FlatAppearance.BorderSize = 0;
            this.chkEnableSubRX.Image = null;
            this.chkEnableSubRX.Name = "chkEnableSubRX";
            this.toolTip1.SetToolTip(this.chkEnableSubRX, resources.GetString("chkEnableSubRX.ToolTip"));
            this.chkEnableSubRX.CheckedChanged += new System.EventHandler(this.chkEnableSubRX_CheckedChanged);
            // 
            // ptbPanSubRX
            // 
            this.ptbPanSubRX.BackColor = System.Drawing.SystemColors.Control;
            resources.ApplyResources(this.ptbPanSubRX, "ptbPanSubRX");
            this.ptbPanSubRX.HeadImage = null;
            this.ptbPanSubRX.LargeChange = 1;
            this.ptbPanSubRX.Maximum = 100;
            this.ptbPanSubRX.Minimum = 0;
            this.ptbPanSubRX.Name = "ptbPanSubRX";
            this.ptbPanSubRX.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.ptbPanSubRX.SmallChange = 1;
            this.ptbPanSubRX.TabStop = false;
            this.toolTip1.SetToolTip(this.ptbPanSubRX, resources.GetString("ptbPanSubRX.ToolTip"));
            this.ptbPanSubRX.Value = 100;
            this.ptbPanSubRX.OnWheel += new PowerSDR.PrettyTrackBar.WheelHandler(this.tbPanSubRX_OnWheel);
            this.ptbPanSubRX.Scroll += new PowerSDR.PrettyTrackBar.ScrollHandler(this.tbPanSubRX_Scroll);
            // 
            // ptbPanMainRX
            // 
            resources.ApplyResources(this.ptbPanMainRX, "ptbPanMainRX");
            this.ptbPanMainRX.HeadImage = null;
            this.ptbPanMainRX.LargeChange = 1;
            this.ptbPanMainRX.Maximum = 100;
            this.ptbPanMainRX.Minimum = 0;
            this.ptbPanMainRX.Name = "ptbPanMainRX";
            this.ptbPanMainRX.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.ptbPanMainRX.SmallChange = 1;
            this.ptbPanMainRX.TabStop = false;
            this.toolTip1.SetToolTip(this.ptbPanMainRX, resources.GetString("ptbPanMainRX.ToolTip"));
            this.ptbPanMainRX.Value = 0;
            this.ptbPanMainRX.OnWheel += new PowerSDR.PrettyTrackBar.WheelHandler(this.tbPanMainRX_OnWheel);
            this.ptbPanMainRX.Scroll += new PowerSDR.PrettyTrackBar.ScrollHandler(this.tbPanMainRX_Scroll);
            // 
            // ptbRX1Gain
            // 
            resources.ApplyResources(this.ptbRX1Gain, "ptbRX1Gain");
            this.ptbRX1Gain.HeadImage = null;
            this.ptbRX1Gain.LargeChange = 1;
            this.ptbRX1Gain.Maximum = 100;
            this.ptbRX1Gain.Minimum = 0;
            this.ptbRX1Gain.Name = "ptbRX1Gain";
            this.ptbRX1Gain.Orientation = System.Windows.Forms.Orientation.Vertical;
            this.ptbRX1Gain.SmallChange = 1;
            this.ptbRX1Gain.TabStop = false;
            this.toolTip1.SetToolTip(this.ptbRX1Gain, resources.GetString("ptbRX1Gain.ToolTip"));
            this.ptbRX1Gain.Value = 100;
            this.ptbRX1Gain.OnWheel += new PowerSDR.PrettyTrackBar.WheelHandler(this.tbRX1Gain_OnWheel);
            this.ptbRX1Gain.Scroll += new PowerSDR.PrettyTrackBar.ScrollHandler(this.tbRX1Gain_Scroll);
            // 
            // radBandGEN
            // 
            resources.ApplyResources(this.radBandGEN, "radBandGEN");
            this.radBandGEN.FlatAppearance.BorderSize = 0;
            this.radBandGEN.Image = null;
            this.radBandGEN.Name = "radBandGEN";
            this.toolTip1.SetToolTip(this.radBandGEN, resources.GetString("radBandGEN.ToolTip"));
            this.radBandGEN.MouseLeave += new System.EventHandler(this.MouseLeaveBandButton);
            this.radBandGEN.Click += new System.EventHandler(this.btnBandGEN_Click);
            this.radBandGEN.CheckedChanged += new System.EventHandler(this.btnBandGEN_CheckedChanged);
            this.radBandGEN.MouseHover += new System.EventHandler(this.radBandGEN_MouseHover);
            // 
            // radBandWWV
            // 
            resources.ApplyResources(this.radBandWWV, "radBandWWV");
            this.radBandWWV.FlatAppearance.BorderSize = 0;
            this.radBandWWV.Image = null;
            this.radBandWWV.Name = "radBandWWV";
            this.toolTip1.SetToolTip(this.radBandWWV, resources.GetString("radBandWWV.ToolTip"));
            this.radBandWWV.MouseLeave += new System.EventHandler(this.MouseLeaveBandButton);
            this.radBandWWV.Click += new System.EventHandler(this.btnBandWWV_Click);
            this.radBandWWV.CheckedChanged += new System.EventHandler(this.btnBandWWV_CheckedChanged);
            this.radBandWWV.MouseHover += new System.EventHandler(this.radBandWWV_MouseHover);
            // 
            // radMoreBands
            // 
            resources.ApplyResources(this.radMoreBands, "radMoreBands");
            this.radMoreBands.FlatAppearance.BorderSize = 0;
            this.radMoreBands.Image = null;
            this.radMoreBands.Name = "radMoreBands";
            this.toolTip1.SetToolTip(this.radMoreBands, resources.GetString("radMoreBands.ToolTip"));
            this.radMoreBands.MouseLeave += new System.EventHandler(this.MouseLeaveBandButton);
            this.radMoreBands.Click += new System.EventHandler(this.radMoreBands_Click);
            this.radMoreBands.MouseHover += new System.EventHandler(this.radBandVHF_MouseHover);
            // 
            // radBand2
            // 
            resources.ApplyResources(this.radBand2, "radBand2");
            this.radBand2.FlatAppearance.BorderSize = 0;
            this.radBand2.Image = null;
            this.radBand2.Name = "radBand2";
            this.toolTip1.SetToolTip(this.radBand2, resources.GetString("radBand2.ToolTip"));
            this.radBand2.MouseLeave += new System.EventHandler(this.MouseLeaveBandButton);
            this.radBand2.Click += new System.EventHandler(this.btnBand2_Click);
            this.radBand2.CheckedChanged += new System.EventHandler(this.btnBand2_CheckedChanged);
            this.radBand2.MouseHover += new System.EventHandler(this.radBand2_MouseHover);
            // 
            // radBand6
            // 
            resources.ApplyResources(this.radBand6, "radBand6");
            this.radBand6.FlatAppearance.BorderSize = 0;
            this.radBand6.Image = null;
            this.radBand6.Name = "radBand6";
            this.toolTip1.SetToolTip(this.radBand6, resources.GetString("radBand6.ToolTip"));
            this.radBand6.MouseLeave += new System.EventHandler(this.MouseLeaveBandButton);
            this.radBand6.Click += new System.EventHandler(this.btnBand6_Click);
            this.radBand6.CheckedChanged += new System.EventHandler(this.btnBand6_CheckedChanged);
            this.radBand6.MouseHover += new System.EventHandler(this.radBand6_MouseHover);
            // 
            // radBand10
            // 
            resources.ApplyResources(this.radBand10, "radBand10");
            this.radBand10.FlatAppearance.BorderSize = 0;
            this.radBand10.Image = null;
            this.radBand10.Name = "radBand10";
            this.toolTip1.SetToolTip(this.radBand10, resources.GetString("radBand10.ToolTip"));
            this.radBand10.MouseLeave += new System.EventHandler(this.MouseLeaveBandButton);
            this.radBand10.Click += new System.EventHandler(this.btnBand10_Click);
            this.radBand10.CheckedChanged += new System.EventHandler(this.btnBand10_CheckedChanged);
            this.radBand10.MouseHover += new System.EventHandler(this.radBand10_MouseHover);
            // 
            // radBand12
            // 
            resources.ApplyResources(this.radBand12, "radBand12");
            this.radBand12.FlatAppearance.BorderSize = 0;
            this.radBand12.Image = null;
            this.radBand12.Name = "radBand12";
            this.toolTip1.SetToolTip(this.radBand12, resources.GetString("radBand12.ToolTip"));
            this.radBand12.MouseLeave += new System.EventHandler(this.MouseLeaveBandButton);
            this.radBand12.Click += new System.EventHandler(this.btnBand12_Click);
            this.radBand12.CheckedChanged += new System.EventHandler(this.btnBand12_CheckedChanged);
            this.radBand12.MouseHover += new System.EventHandler(this.radBand12_MouseHover);
            // 
            // radBand15
            // 
            resources.ApplyResources(this.radBand15, "radBand15");
            this.radBand15.FlatAppearance.BorderSize = 0;
            this.radBand15.Image = null;
            this.radBand15.Name = "radBand15";
            this.toolTip1.SetToolTip(this.radBand15, resources.GetString("radBand15.ToolTip"));
            this.radBand15.MouseLeave += new System.EventHandler(this.MouseLeaveBandButton);
            this.radBand15.Click += new System.EventHandler(this.btnBand15_Click);
            this.radBand15.CheckedChanged += new System.EventHandler(this.btnBand15_CheckedChanged);
            this.radBand15.MouseHover += new System.EventHandler(this.radBand15_MouseHover);
            // 
            // radBand17
            // 
            resources.ApplyResources(this.radBand17, "radBand17");
            this.radBand17.FlatAppearance.BorderSize = 0;
            this.radBand17.Image = null;
            this.radBand17.Name = "radBand17";
            this.toolTip1.SetToolTip(this.radBand17, resources.GetString("radBand17.ToolTip"));
            this.radBand17.MouseLeave += new System.EventHandler(this.MouseLeaveBandButton);
            this.radBand17.Click += new System.EventHandler(this.btnBand17_Click);
            this.radBand17.CheckedChanged += new System.EventHandler(this.btnBand17_CheckedChanged);
            this.radBand17.MouseHover += new System.EventHandler(this.radBand17_MouseHover);
            // 
            // radBand20
            // 
            resources.ApplyResources(this.radBand20, "radBand20");
            this.radBand20.FlatAppearance.BorderSize = 0;
            this.radBand20.Image = null;
            this.radBand20.Name = "radBand20";
            this.toolTip1.SetToolTip(this.radBand20, resources.GetString("radBand20.ToolTip"));
            this.radBand20.MouseLeave += new System.EventHandler(this.MouseLeaveBandButton);
            this.radBand20.Click += new System.EventHandler(this.btnBand20_Click);
            this.radBand20.CheckedChanged += new System.EventHandler(this.btnBand20_CheckedChanged);
            this.radBand20.MouseHover += new System.EventHandler(this.radBand20_MouseHover);
            // 
            // radBand30
            // 
            resources.ApplyResources(this.radBand30, "radBand30");
            this.radBand30.FlatAppearance.BorderSize = 0;
            this.radBand30.Image = null;
            this.radBand30.Name = "radBand30";
            this.toolTip1.SetToolTip(this.radBand30, resources.GetString("radBand30.ToolTip"));
            this.radBand30.MouseLeave += new System.EventHandler(this.MouseLeaveBandButton);
            this.radBand30.Click += new System.EventHandler(this.btnBand30_Click);
            this.radBand30.CheckedChanged += new System.EventHandler(this.btnBand30_CheckedChanged);
            this.radBand30.MouseHover += new System.EventHandler(this.radBand30_MouseHover);
            // 
            // radBand40
            // 
            resources.ApplyResources(this.radBand40, "radBand40");
            this.radBand40.FlatAppearance.BorderSize = 0;
            this.radBand40.Image = null;
            this.radBand40.Name = "radBand40";
            this.toolTip1.SetToolTip(this.radBand40, resources.GetString("radBand40.ToolTip"));
            this.radBand40.MouseLeave += new System.EventHandler(this.MouseLeaveBandButton);
            this.radBand40.Click += new System.EventHandler(this.btnBand40_Click);
            this.radBand40.CheckedChanged += new System.EventHandler(this.btnBand40_CheckedChanged);
            this.radBand40.MouseHover += new System.EventHandler(this.radBand40_MouseHover);
            // 
            // radBand60
            // 
            resources.ApplyResources(this.radBand60, "radBand60");
            this.radBand60.FlatAppearance.BorderSize = 0;
            this.radBand60.Image = null;
            this.radBand60.Name = "radBand60";
            this.toolTip1.SetToolTip(this.radBand60, resources.GetString("radBand60.ToolTip"));
            this.radBand60.MouseLeave += new System.EventHandler(this.MouseLeaveBandButton);
            this.radBand60.Click += new System.EventHandler(this.btnBand60_Click);
            this.radBand60.CheckedChanged += new System.EventHandler(this.btnBand60_CheckedChanged);
            this.radBand60.MouseHover += new System.EventHandler(this.radBand60_MouseHover);
            // 
            // radBand80
            // 
            resources.ApplyResources(this.radBand80, "radBand80");
            this.radBand80.FlatAppearance.BorderSize = 0;
            this.radBand80.Image = null;
            this.radBand80.Name = "radBand80";
            this.toolTip1.SetToolTip(this.radBand80, resources.GetString("radBand80.ToolTip"));
            this.radBand80.MouseLeave += new System.EventHandler(this.MouseLeaveBandButton);
            this.radBand80.Click += new System.EventHandler(this.btnBand80_Click);
            this.radBand80.CheckedChanged += new System.EventHandler(this.btnBand80_CheckedChanged);
            this.radBand80.MouseHover += new System.EventHandler(this.radBand80_MouseHover);
            // 
            // radBand160
            // 
            resources.ApplyResources(this.radBand160, "radBand160");
            this.radBand160.FlatAppearance.BorderSize = 0;
            this.radBand160.Image = null;
            this.radBand160.Name = "radBand160";
            this.toolTip1.SetToolTip(this.radBand160, resources.GetString("radBand160.ToolTip"));
            this.radBand160.MouseLeave += new System.EventHandler(this.MouseLeaveBandButton);
            this.radBand160.Click += new System.EventHandler(this.btnBand160_Click);
            this.radBand160.CheckedChanged += new System.EventHandler(this.btnBand160_CheckedChanged);
            this.radBand160.MouseHover += new System.EventHandler(this.radBand160_MouseHover);
            // 
            // btnZAP
            // 
            resources.ApplyResources(this.btnZAP, "btnZAP");
            this.btnZAP.FlatAppearance.BorderSize = 0;
            this.btnZAP.Image = null;
            this.btnZAP.Name = "btnZAP";
            this.toolTip1.SetToolTip(this.btnZAP, resources.GetString("btnZAP.ToolTip"));
            this.btnZAP.CheckStateChanged += new System.EventHandler(this.btnZAP_CheckStateChanged);
            // 
            // btnVFOA
            // 
            resources.ApplyResources(this.btnVFOA, "btnVFOA");
            this.btnVFOA.FlatAppearance.BorderSize = 0;
            this.btnVFOA.Image = null;
            this.btnVFOA.Name = "btnVFOA";
            this.toolTip1.SetToolTip(this.btnVFOA, resources.GetString("btnVFOA.ToolTip"));
            this.btnVFOA.Click += new System.EventHandler(this.btnVFOA_Click);
            // 
            // chkVFOsinc
            // 
            resources.ApplyResources(this.chkVFOsinc, "chkVFOsinc");
            this.chkVFOsinc.FlatAppearance.BorderSize = 0;
            this.chkVFOsinc.Image = null;
            this.chkVFOsinc.Name = "chkVFOsinc";
            this.toolTip1.SetToolTip(this.chkVFOsinc, resources.GetString("chkVFOsinc.ToolTip"));
            this.chkVFOsinc.Click += new System.EventHandler(this.chkVFOsinc_Click);
            // 
            // btnEraseMemory
            // 
            this.btnEraseMemory.FlatAppearance.BorderSize = 0;
            resources.ApplyResources(this.btnEraseMemory, "btnEraseMemory");
            this.btnEraseMemory.Image = null;
            this.btnEraseMemory.Name = "btnEraseMemory";
            this.toolTip1.SetToolTip(this.btnEraseMemory, resources.GetString("btnEraseMemory.ToolTip"));
            this.btnEraseMemory.Click += new System.EventHandler(this.btnEraseMemory_Click);
            // 
            // chkVFOLock
            // 
            resources.ApplyResources(this.chkVFOLock, "chkVFOLock");
            this.chkVFOLock.FlatAppearance.BorderSize = 0;
            this.chkVFOLock.Image = null;
            this.chkVFOLock.Name = "chkVFOLock";
            this.toolTip1.SetToolTip(this.chkVFOLock, resources.GetString("chkVFOLock.ToolTip"));
            this.chkVFOLock.CheckedChanged += new System.EventHandler(this.chkVFOLock_CheckedChanged);
            // 
            // btnMemoryQuickRecall
            // 
            this.btnMemoryQuickRecall.FlatAppearance.BorderSize = 0;
            resources.ApplyResources(this.btnMemoryQuickRecall, "btnMemoryQuickRecall");
            this.btnMemoryQuickRecall.Image = null;
            this.btnMemoryQuickRecall.Name = "btnMemoryQuickRecall";
            this.toolTip1.SetToolTip(this.btnMemoryQuickRecall, resources.GetString("btnMemoryQuickRecall.ToolTip"));
            this.btnMemoryQuickRecall.Click += new System.EventHandler(this.btnMemoryQuickRestore_Click);
            // 
            // btnMemoryQuickSave
            // 
            this.btnMemoryQuickSave.FlatAppearance.BorderSize = 0;
            resources.ApplyResources(this.btnMemoryQuickSave, "btnMemoryQuickSave");
            this.btnMemoryQuickSave.Image = null;
            this.btnMemoryQuickSave.Name = "btnMemoryQuickSave";
            this.toolTip1.SetToolTip(this.btnMemoryQuickSave, resources.GetString("btnMemoryQuickSave.ToolTip"));
            this.btnMemoryQuickSave.Click += new System.EventHandler(this.btnMemoryQuickSave_Click);
            // 
            // chkDisplayPeak
            // 
            resources.ApplyResources(this.chkDisplayPeak, "chkDisplayPeak");
            this.chkDisplayPeak.FlatAppearance.BorderSize = 0;
            this.chkDisplayPeak.Image = null;
            this.chkDisplayPeak.Name = "chkDisplayPeak";
            this.toolTip1.SetToolTip(this.chkDisplayPeak, resources.GetString("chkDisplayPeak.ToolTip"));
            this.chkDisplayPeak.CheckedChanged += new System.EventHandler(this.chkDisplayPeak_CheckedChanged);
            // 
            // comboDisplayMode
            // 
            this.comboDisplayMode.BackColor = System.Drawing.SystemColors.Window;
            this.comboDisplayMode.DisplayMember = "3";
            this.comboDisplayMode.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.comboDisplayMode.DropDownWidth = 88;
            resources.ApplyResources(this.comboDisplayMode, "comboDisplayMode");
            this.comboDisplayMode.ForeColor = System.Drawing.SystemColors.WindowText;
            this.comboDisplayMode.Name = "comboDisplayMode";
            this.toolTip1.SetToolTip(this.comboDisplayMode, resources.GetString("comboDisplayMode.ToolTip"));
            this.comboDisplayMode.SelectedIndexChanged += new System.EventHandler(this.comboDisplayMode_SelectedIndexChanged);
            // 
            // chkDisplayAVG
            // 
            resources.ApplyResources(this.chkDisplayAVG, "chkDisplayAVG");
            this.chkDisplayAVG.FlatAppearance.BorderSize = 0;
            this.chkDisplayAVG.Image = null;
            this.chkDisplayAVG.Name = "chkDisplayAVG";
            this.toolTip1.SetToolTip(this.chkDisplayAVG, resources.GetString("chkDisplayAVG.ToolTip"));
            this.chkDisplayAVG.CheckedChanged += new System.EventHandler(this.chkDisplayAVG_CheckedChanged);
            // 
            // chkRecordWav
            // 
            resources.ApplyResources(this.chkRecordWav, "chkRecordWav");
            this.chkRecordWav.FlatAppearance.BorderSize = 0;
            this.chkRecordWav.Image = null;
            this.chkRecordWav.Name = "chkRecordWav";
            this.toolTip1.SetToolTip(this.chkRecordWav, resources.GetString("chkRecordWav.ToolTip"));
            this.chkRecordWav.CheckedChanged += new System.EventHandler(this.chkRecordWav_CheckedChanged);
            // 
            // chkMUT
            // 
            resources.ApplyResources(this.chkMUT, "chkMUT");
            this.chkMUT.ContextMenuStrip = this.contextMenuMUTE;
            this.chkMUT.FlatAppearance.BorderSize = 0;
            this.chkMUT.Image = null;
            this.chkMUT.Name = "chkMUT";
            this.toolTip1.SetToolTip(this.chkMUT, resources.GetString("chkMUT.ToolTip"));
            this.chkMUT.CheckedChanged += new System.EventHandler(this.chkMUT_CheckedChanged);
            // 
            // contextMenuMUTE
            // 
            this.contextMenuMUTE.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.leftToolStripMenuItem,
            this.rightToolStripMenuItem,
            this.bothToolStripMenuItem,
            this.noneToolStripMenuItem});
            this.contextMenuMUTE.Name = "contextMenuMUTE";
            resources.ApplyResources(this.contextMenuMUTE, "contextMenuMUTE");
            // 
            // leftToolStripMenuItem
            // 
            this.leftToolStripMenuItem.Name = "leftToolStripMenuItem";
            resources.ApplyResources(this.leftToolStripMenuItem, "leftToolStripMenuItem");
            this.leftToolStripMenuItem.Click += new System.EventHandler(this.leftToolStripMenuItem_Click);
            // 
            // rightToolStripMenuItem
            // 
            this.rightToolStripMenuItem.Name = "rightToolStripMenuItem";
            resources.ApplyResources(this.rightToolStripMenuItem, "rightToolStripMenuItem");
            this.rightToolStripMenuItem.Click += new System.EventHandler(this.rightToolStripMenuItem_Click);
            // 
            // bothToolStripMenuItem
            // 
            this.bothToolStripMenuItem.Name = "bothToolStripMenuItem";
            resources.ApplyResources(this.bothToolStripMenuItem, "bothToolStripMenuItem");
            this.bothToolStripMenuItem.Click += new System.EventHandler(this.bothToolStripMenuItem_Click);
            // 
            // noneToolStripMenuItem
            // 
            this.noneToolStripMenuItem.Name = "noneToolStripMenuItem";
            resources.ApplyResources(this.noneToolStripMenuItem, "noneToolStripMenuItem");
            this.noneToolStripMenuItem.Click += new System.EventHandler(this.noneToolStripMenuItem_Click);
            // 
            // chkMON
            // 
            resources.ApplyResources(this.chkMON, "chkMON");
            this.chkMON.FlatAppearance.BorderSize = 0;
            this.chkMON.Image = null;
            this.chkMON.Name = "chkMON";
            this.toolTip1.SetToolTip(this.chkMON, resources.GetString("chkMON.ToolTip"));
            this.chkMON.CheckedChanged += new System.EventHandler(this.chkMON_CheckedChanged);
            // 
            // chkTUN
            // 
            resources.ApplyResources(this.chkTUN, "chkTUN");
            this.chkTUN.FlatAppearance.BorderSize = 0;
            this.chkTUN.Image = null;
            this.chkTUN.Name = "chkTUN";
            this.toolTip1.SetToolTip(this.chkTUN, resources.GetString("chkTUN.ToolTip"));
            this.chkTUN.CheckedChanged += new System.EventHandler(this.chkTUN_CheckedChanged);
            // 
            // chkMOX
            // 
            resources.ApplyResources(this.chkMOX, "chkMOX");
            this.chkMOX.FlatAppearance.BorderSize = 0;
            this.chkMOX.Image = null;
            this.chkMOX.Name = "chkMOX";
            this.toolTip1.SetToolTip(this.chkMOX, resources.GetString("chkMOX.ToolTip"));
            this.chkMOX.Click += new System.EventHandler(this.chkMOX_Click);
            this.chkMOX.CheckedChanged += new System.EventHandler(this.chkMOX_CheckedChanged);
            // 
            // chkPlayWav
            // 
            resources.ApplyResources(this.chkPlayWav, "chkPlayWav");
            this.chkPlayWav.FlatAppearance.BorderSize = 0;
            this.chkPlayWav.Image = null;
            this.chkPlayWav.Name = "chkPlayWav";
            this.toolTip1.SetToolTip(this.chkPlayWav, resources.GetString("chkPlayWav.ToolTip"));
            this.chkPlayWav.CheckedChanged += new System.EventHandler(this.chkPlayWav_CheckedChanged);
            // 
            // comboVACSampleRate
            // 
            this.comboVACSampleRate.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.comboVACSampleRate.DropDownWidth = 64;
            resources.ApplyResources(this.comboVACSampleRate, "comboVACSampleRate");
            this.comboVACSampleRate.Items.AddRange(new object[] {
            resources.GetString("comboVACSampleRate.Items"),
            resources.GetString("comboVACSampleRate.Items1"),
            resources.GetString("comboVACSampleRate.Items2"),
            resources.GetString("comboVACSampleRate.Items3"),
            resources.GetString("comboVACSampleRate.Items4"),
            resources.GetString("comboVACSampleRate.Items5"),
            resources.GetString("comboVACSampleRate.Items6"),
            resources.GetString("comboVACSampleRate.Items7"),
            resources.GetString("comboVACSampleRate.Items8"),
            resources.GetString("comboVACSampleRate.Items9")});
            this.comboVACSampleRate.Name = "comboVACSampleRate";
            this.toolTip1.SetToolTip(this.comboVACSampleRate, resources.GetString("comboVACSampleRate.ToolTip"));
            this.comboVACSampleRate.SelectedIndexChanged += new System.EventHandler(this.comboVACSampleRate_SelectedIndexChanged);
            // 
            // txtWheelTune
            // 
            this.txtWheelTune.BackColor = System.Drawing.SystemColors.Window;
            this.txtWheelTune.Cursor = System.Windows.Forms.Cursors.Default;
            resources.ApplyResources(this.txtWheelTune, "txtWheelTune");
            this.txtWheelTune.ForeColor = System.Drawing.SystemColors.ControlText;
            this.txtWheelTune.Name = "txtWheelTune";
            this.txtWheelTune.ReadOnly = true;
            this.toolTip1.SetToolTip(this.txtWheelTune, resources.GetString("txtWheelTune.ToolTip"));
            this.txtWheelTune.GotFocus += new System.EventHandler(this.HideFocus);
            this.txtWheelTune.MouseDown += new System.Windows.Forms.MouseEventHandler(this.WheelTune_MouseDown);
            // 
            // udFilterHigh
            // 
            this.udFilterHigh.BackColor = System.Drawing.SystemColors.Window;
            resources.ApplyResources(this.udFilterHigh, "udFilterHigh");
            this.udFilterHigh.ForeColor = System.Drawing.SystemColors.ControlText;
            this.udFilterHigh.Increment = new decimal(new int[] {
            10,
            0,
            0,
            0});
            this.udFilterHigh.Maximum = new decimal(new int[] {
            125000,
            0,
            0,
            0});
            this.udFilterHigh.Minimum = new decimal(new int[] {
            125000,
            0,
            0,
            -2147483648});
            this.udFilterHigh.Name = "udFilterHigh";
            this.toolTip1.SetToolTip(this.udFilterHigh, resources.GetString("udFilterHigh.ToolTip"));
            this.udFilterHigh.Value = new decimal(new int[] {
            6000,
            0,
            0,
            0});
            this.udFilterHigh.ValueChanged += new System.EventHandler(this.udFilterHigh_ValueChanged);
            this.udFilterHigh.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.Console_KeyPress);
            this.udFilterHigh.LostFocus += new System.EventHandler(this.udFilterHigh_LostFocus);
            // 
            // udFilterLow
            // 
            this.udFilterLow.BackColor = System.Drawing.SystemColors.Window;
            resources.ApplyResources(this.udFilterLow, "udFilterLow");
            this.udFilterLow.ForeColor = System.Drawing.SystemColors.ControlText;
            this.udFilterLow.Increment = new decimal(new int[] {
            10,
            0,
            0,
            0});
            this.udFilterLow.Maximum = new decimal(new int[] {
            125000,
            0,
            0,
            0});
            this.udFilterLow.Minimum = new decimal(new int[] {
            125000,
            0,
            0,
            -2147483648});
            this.udFilterLow.Name = "udFilterLow";
            this.toolTip1.SetToolTip(this.udFilterLow, resources.GetString("udFilterLow.ToolTip"));
            this.udFilterLow.Value = new decimal(new int[] {
            0,
            0,
            0,
            0});
            this.udFilterLow.ValueChanged += new System.EventHandler(this.udFilterLow_ValueChanged);
            this.udFilterLow.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.Console_KeyPress);
            this.udFilterLow.LostFocus += new System.EventHandler(this.udFilterLow_LostFocus);
            // 
            // ptbFilterWidth
            // 
            resources.ApplyResources(this.ptbFilterWidth, "ptbFilterWidth");
            this.ptbFilterWidth.HeadImage = null;
            this.ptbFilterWidth.LargeChange = 5;
            this.ptbFilterWidth.Maximum = 20000;
            this.ptbFilterWidth.Minimum = 1;
            this.ptbFilterWidth.Name = "ptbFilterWidth";
            this.ptbFilterWidth.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.ptbFilterWidth.SmallChange = 1;
            this.ptbFilterWidth.TabStop = false;
            this.toolTip1.SetToolTip(this.ptbFilterWidth, resources.GetString("ptbFilterWidth.ToolTip"));
            this.ptbFilterWidth.Value = 1;
            this.ptbFilterWidth.OnWheel += new PowerSDR.PrettyTrackBar.WheelHandler(this.tbFilterWidth_Wheel);
            this.ptbFilterWidth.Scroll += new PowerSDR.PrettyTrackBar.ScrollHandler(this.tbFilterWidth_Scroll);
            // 
            // btnFilterShiftReset
            // 
            this.btnFilterShiftReset.FlatAppearance.BorderSize = 0;
            resources.ApplyResources(this.btnFilterShiftReset, "btnFilterShiftReset");
            this.btnFilterShiftReset.Image = null;
            this.btnFilterShiftReset.Name = "btnFilterShiftReset";
            this.btnFilterShiftReset.Tag = "Reset Filter Shift";
            this.toolTip1.SetToolTip(this.btnFilterShiftReset, resources.GetString("btnFilterShiftReset.ToolTip"));
            this.btnFilterShiftReset.Click += new System.EventHandler(this.btnFilterShiftReset_Click);
            // 
            // ptbFilterShift
            // 
            resources.ApplyResources(this.ptbFilterShift, "ptbFilterShift");
            this.ptbFilterShift.HeadImage = null;
            this.ptbFilterShift.LargeChange = 5;
            this.ptbFilterShift.Maximum = 1000;
            this.ptbFilterShift.Minimum = -1000;
            this.ptbFilterShift.Name = "ptbFilterShift";
            this.ptbFilterShift.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.ptbFilterShift.SmallChange = 1;
            this.ptbFilterShift.TabStop = false;
            this.toolTip1.SetToolTip(this.ptbFilterShift, resources.GetString("ptbFilterShift.ToolTip"));
            this.ptbFilterShift.Value = 0;
            this.ptbFilterShift.OnWheel += new PowerSDR.PrettyTrackBar.WheelHandler(this.tbFilterShift_Wheel);
            this.ptbFilterShift.Scroll += new PowerSDR.PrettyTrackBar.ScrollHandler(this.tbFilterShift_Scroll);
            // 
            // chkPower
            // 
            resources.ApplyResources(this.chkPower, "chkPower");
            this.chkPower.BackColor = System.Drawing.SystemColors.Control;
            this.chkPower.FlatAppearance.BorderSize = 0;
            this.chkPower.Image = null;
            this.chkPower.Name = "chkPower";
            this.toolTip1.SetToolTip(this.chkPower, resources.GetString("chkPower.ToolTip"));
            this.chkPower.UseVisualStyleBackColor = false;
            this.chkPower.CheckedChanged += new System.EventHandler(this.chkPower_CheckedChanged);
            // 
            // chkDSPNB2
            // 
            resources.ApplyResources(this.chkDSPNB2, "chkDSPNB2");
            this.chkDSPNB2.FlatAppearance.BorderSize = 0;
            this.chkDSPNB2.Image = null;
            this.chkDSPNB2.Name = "chkDSPNB2";
            this.toolTip1.SetToolTip(this.chkDSPNB2, resources.GetString("chkDSPNB2.ToolTip"));
            this.chkDSPNB2.CheckedChanged += new System.EventHandler(this.chkDSPNB2_CheckedChanged);
            // 
            // chkNB
            // 
            resources.ApplyResources(this.chkNB, "chkNB");
            this.chkNB.FlatAppearance.BorderSize = 0;
            this.chkNB.Image = null;
            this.chkNB.Name = "chkNB";
            this.toolTip1.SetToolTip(this.chkNB, resources.GetString("chkNB.ToolTip"));
            this.chkNB.CheckedChanged += new System.EventHandler(this.chkNB_CheckedChanged);
            // 
            // chkANF
            // 
            resources.ApplyResources(this.chkANF, "chkANF");
            this.chkANF.FlatAppearance.BorderSize = 0;
            this.chkANF.Image = null;
            this.chkANF.Name = "chkANF";
            this.toolTip1.SetToolTip(this.chkANF, resources.GetString("chkANF.ToolTip"));
            this.chkANF.CheckedChanged += new System.EventHandler(this.chkANF_CheckedChanged);
            // 
            // chkNR
            // 
            resources.ApplyResources(this.chkNR, "chkNR");
            this.chkNR.FlatAppearance.BorderSize = 0;
            this.chkNR.Image = null;
            this.chkNR.Name = "chkNR";
            this.toolTip1.SetToolTip(this.chkNR, resources.GetString("chkNR.ToolTip"));
            this.chkNR.CheckedChanged += new System.EventHandler(this.chkNR_CheckedChanged);
            // 
            // chkBIN
            // 
            resources.ApplyResources(this.chkBIN, "chkBIN");
            this.chkBIN.FlatAppearance.BorderSize = 0;
            this.chkBIN.Image = null;
            this.chkBIN.Name = "chkBIN";
            this.toolTip1.SetToolTip(this.chkBIN, resources.GetString("chkBIN.ToolTip"));
            this.chkBIN.CheckedChanged += new System.EventHandler(this.chkBIN_CheckedChanged);
            // 
            // udXIT
            // 
            this.udXIT.BackColor = System.Drawing.SystemColors.Window;
            this.udXIT.ForeColor = System.Drawing.SystemColors.ControlText;
            this.udXIT.Increment = new decimal(new int[] {
            1,
            0,
            0,
            0});
            resources.ApplyResources(this.udXIT, "udXIT");
            this.udXIT.Maximum = new decimal(new int[] {
            99999,
            0,
            0,
            0});
            this.udXIT.Minimum = new decimal(new int[] {
            99999,
            0,
            0,
            -2147483648});
            this.udXIT.Name = "udXIT";
            this.toolTip1.SetToolTip(this.udXIT, resources.GetString("udXIT.ToolTip"));
            this.udXIT.Value = new decimal(new int[] {
            0,
            0,
            0,
            0});
            this.udXIT.ValueChanged += new System.EventHandler(this.udXIT_ValueChanged);
            this.udXIT.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.Console_KeyPress);
            this.udXIT.LostFocus += new System.EventHandler(this.udXIT_LostFocus);
            // 
            // udRIT
            // 
            this.udRIT.BackColor = System.Drawing.SystemColors.Window;
            this.udRIT.ForeColor = System.Drawing.SystemColors.ControlText;
            this.udRIT.Increment = new decimal(new int[] {
            1,
            0,
            0,
            0});
            resources.ApplyResources(this.udRIT, "udRIT");
            this.udRIT.Maximum = new decimal(new int[] {
            99999,
            0,
            0,
            0});
            this.udRIT.Minimum = new decimal(new int[] {
            99999,
            0,
            0,
            -2147483648});
            this.udRIT.Name = "udRIT";
            this.toolTip1.SetToolTip(this.udRIT, resources.GetString("udRIT.ToolTip"));
            this.udRIT.Value = new decimal(new int[] {
            0,
            0,
            0,
            0});
            this.udRIT.ValueChanged += new System.EventHandler(this.udRIT_ValueChanged);
            this.udRIT.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.Console_KeyPress);
            this.udRIT.LostFocus += new System.EventHandler(this.udRIT_LostFocus);
            // 
            // chkXIT
            // 
            resources.ApplyResources(this.chkXIT, "chkXIT");
            this.chkXIT.FlatAppearance.BorderSize = 0;
            this.chkXIT.Image = null;
            this.chkXIT.Name = "chkXIT";
            this.toolTip1.SetToolTip(this.chkXIT, resources.GetString("chkXIT.ToolTip"));
            this.chkXIT.CheckedChanged += new System.EventHandler(this.chkXIT_CheckedChanged);
            // 
            // chkRIT
            // 
            resources.ApplyResources(this.chkRIT, "chkRIT");
            this.chkRIT.FlatAppearance.BorderSize = 0;
            this.chkRIT.Image = null;
            this.chkRIT.Name = "chkRIT";
            this.toolTip1.SetToolTip(this.chkRIT, resources.GetString("chkRIT.ToolTip"));
            this.chkRIT.CheckedChanged += new System.EventHandler(this.chkRIT_CheckedChanged);
            // 
            // comboMeterTXMode
            // 
            this.comboMeterTXMode.BackColor = System.Drawing.SystemColors.Window;
            this.comboMeterTXMode.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.comboMeterTXMode.DropDownWidth = 72;
            this.comboMeterTXMode.ForeColor = System.Drawing.SystemColors.WindowText;
            resources.ApplyResources(this.comboMeterTXMode, "comboMeterTXMode");
            this.comboMeterTXMode.Name = "comboMeterTXMode";
            this.toolTip1.SetToolTip(this.comboMeterTXMode, resources.GetString("comboMeterTXMode.ToolTip"));
            this.comboMeterTXMode.SelectedIndexChanged += new System.EventHandler(this.comboMeterTXMode_SelectedIndexChanged);
            // 
            // comboMeterRXMode
            // 
            this.comboMeterRXMode.BackColor = System.Drawing.SystemColors.Window;
            this.comboMeterRXMode.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.comboMeterRXMode.DropDownWidth = 72;
            this.comboMeterRXMode.ForeColor = System.Drawing.SystemColors.WindowText;
            resources.ApplyResources(this.comboMeterRXMode, "comboMeterRXMode");
            this.comboMeterRXMode.Name = "comboMeterRXMode";
            this.toolTip1.SetToolTip(this.comboMeterRXMode, resources.GetString("comboMeterRXMode.ToolTip"));
            this.comboMeterRXMode.SelectedIndexChanged += new System.EventHandler(this.comboMeterRXMode_SelectedIndexChanged);
            // 
            // btnRITReset
            // 
            this.btnRITReset.FlatAppearance.BorderSize = 0;
            resources.ApplyResources(this.btnRITReset, "btnRITReset");
            this.btnRITReset.Image = null;
            this.btnRITReset.Name = "btnRITReset";
            this.toolTip1.SetToolTip(this.btnRITReset, resources.GetString("btnRITReset.ToolTip"));
            this.btnRITReset.Click += new System.EventHandler(this.btnRITReset_Click);
            // 
            // btnXITReset
            // 
            this.btnXITReset.FlatAppearance.BorderSize = 0;
            resources.ApplyResources(this.btnXITReset, "btnXITReset");
            this.btnXITReset.Image = null;
            this.btnXITReset.Name = "btnXITReset";
            this.toolTip1.SetToolTip(this.btnXITReset, resources.GetString("btnXITReset.ToolTip"));
            this.btnXITReset.Click += new System.EventHandler(this.btnXITReset_Click);
            // 
            // btnVFOSwap
            // 
            resources.ApplyResources(this.btnVFOSwap, "btnVFOSwap");
            this.btnVFOSwap.FlatAppearance.BorderSize = 0;
            this.btnVFOSwap.Image = null;
            this.btnVFOSwap.Name = "btnVFOSwap";
            this.toolTip1.SetToolTip(this.btnVFOSwap, resources.GetString("btnVFOSwap.ToolTip"));
            this.btnVFOSwap.Click += new System.EventHandler(this.btnVFOSwap_Click);
            // 
            // btnVFOBtoA
            // 
            resources.ApplyResources(this.btnVFOBtoA, "btnVFOBtoA");
            this.btnVFOBtoA.FlatAppearance.BorderSize = 0;
            this.btnVFOBtoA.Image = null;
            this.btnVFOBtoA.Name = "btnVFOBtoA";
            this.toolTip1.SetToolTip(this.btnVFOBtoA, resources.GetString("btnVFOBtoA.ToolTip"));
            this.btnVFOBtoA.Click += new System.EventHandler(this.btnVFOBtoA_Click);
            // 
            // btnVFOAtoB
            // 
            resources.ApplyResources(this.btnVFOAtoB, "btnVFOAtoB");
            this.btnVFOAtoB.FlatAppearance.BorderSize = 0;
            this.btnVFOAtoB.Image = null;
            this.btnVFOAtoB.Name = "btnVFOAtoB";
            this.toolTip1.SetToolTip(this.btnVFOAtoB, resources.GetString("btnVFOAtoB.ToolTip"));
            this.btnVFOAtoB.Click += new System.EventHandler(this.btnVFOAtoB_Click);
            // 
            // chkVFOSplit
            // 
            resources.ApplyResources(this.chkVFOSplit, "chkVFOSplit");
            this.chkVFOSplit.FlatAppearance.BorderSize = 0;
            this.chkVFOSplit.Image = null;
            this.chkVFOSplit.Name = "chkVFOSplit";
            this.toolTip1.SetToolTip(this.chkVFOSplit, resources.GetString("chkVFOSplit.ToolTip"));
            this.chkVFOSplit.CheckedChanged += new System.EventHandler(this.chkVFOSplit_CheckedChanged);
            // 
            // chkSQLMainRX
            // 
            resources.ApplyResources(this.chkSQLMainRX, "chkSQLMainRX");
            this.chkSQLMainRX.FlatAppearance.BorderSize = 0;
            this.chkSQLMainRX.Image = null;
            this.chkSQLMainRX.Name = "chkSQLMainRX";
            this.toolTip1.SetToolTip(this.chkSQLMainRX, resources.GetString("chkSQLMainRX.ToolTip"));
            this.chkSQLMainRX.CheckedChanged += new System.EventHandler(this.chkSQLMainRX_CheckedChanged);
            // 
            // udVACTXGain
            // 
            this.udVACTXGain.Increment = new decimal(new int[] {
            1,
            0,
            0,
            0});
            resources.ApplyResources(this.udVACTXGain, "udVACTXGain");
            this.udVACTXGain.Maximum = new decimal(new int[] {
            20,
            0,
            0,
            0});
            this.udVACTXGain.Minimum = new decimal(new int[] {
            40,
            0,
            0,
            -2147483648});
            this.udVACTXGain.Name = "udVACTXGain";
            this.toolTip1.SetToolTip(this.udVACTXGain, resources.GetString("udVACTXGain.ToolTip"));
            this.udVACTXGain.Value = new decimal(new int[] {
            0,
            0,
            0,
            0});
            this.udVACTXGain.ValueChanged += new System.EventHandler(this.udVACTXGain_ValueChanged);
            // 
            // udVACRXGain
            // 
            this.udVACRXGain.Increment = new decimal(new int[] {
            1,
            0,
            0,
            0});
            resources.ApplyResources(this.udVACRXGain, "udVACRXGain");
            this.udVACRXGain.Maximum = new decimal(new int[] {
            20,
            0,
            0,
            0});
            this.udVACRXGain.Minimum = new decimal(new int[] {
            40,
            0,
            0,
            -2147483648});
            this.udVACRXGain.Name = "udVACRXGain";
            this.toolTip1.SetToolTip(this.udVACRXGain, resources.GetString("udVACRXGain.ToolTip"));
            this.udVACRXGain.Value = new decimal(new int[] {
            0,
            0,
            0,
            0});
            this.udVACRXGain.ValueChanged += new System.EventHandler(this.udVACRXGain_ValueChanged);
            // 
            // chkVACEnabled
            // 
            resources.ApplyResources(this.chkVACEnabled, "chkVACEnabled");
            this.chkVACEnabled.FlatAppearance.BorderSize = 0;
            this.chkVACEnabled.Image = null;
            this.chkVACEnabled.Name = "chkVACEnabled";
            this.toolTip1.SetToolTip(this.chkVACEnabled, resources.GetString("chkVACEnabled.ToolTip"));
            this.chkVACEnabled.CheckedChanged += new System.EventHandler(this.chkVACEnabled_CheckedChanged);
            // 
            // udSubRXFilterHigh
            // 
            this.udSubRXFilterHigh.BackColor = System.Drawing.SystemColors.Window;
            resources.ApplyResources(this.udSubRXFilterHigh, "udSubRXFilterHigh");
            this.udSubRXFilterHigh.ForeColor = System.Drawing.SystemColors.ControlText;
            this.udSubRXFilterHigh.Increment = new decimal(new int[] {
            10,
            0,
            0,
            0});
            this.udSubRXFilterHigh.Maximum = new decimal(new int[] {
            20000,
            0,
            0,
            0});
            this.udSubRXFilterHigh.Minimum = new decimal(new int[] {
            20000,
            0,
            0,
            -2147483648});
            this.udSubRXFilterHigh.Name = "udSubRXFilterHigh";
            this.toolTip1.SetToolTip(this.udSubRXFilterHigh, resources.GetString("udSubRXFilterHigh.ToolTip"));
            this.udSubRXFilterHigh.Value = new decimal(new int[] {
            6000,
            0,
            0,
            0});
            this.udSubRXFilterHigh.ValueChanged += new System.EventHandler(this.udSubRXFilterHigh_ValueChanged);
            this.udSubRXFilterHigh.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.Console_KeyPress);
            this.udSubRXFilterHigh.LostFocus += new System.EventHandler(this.udSubRXFilterHigh_LostFocus);
            // 
            // udSubRXFilterLow
            // 
            this.udSubRXFilterLow.BackColor = System.Drawing.SystemColors.Window;
            resources.ApplyResources(this.udSubRXFilterLow, "udSubRXFilterLow");
            this.udSubRXFilterLow.ForeColor = System.Drawing.SystemColors.ControlText;
            this.udSubRXFilterLow.Increment = new decimal(new int[] {
            10,
            0,
            0,
            0});
            this.udSubRXFilterLow.Maximum = new decimal(new int[] {
            20000,
            0,
            0,
            0});
            this.udSubRXFilterLow.Minimum = new decimal(new int[] {
            20000,
            0,
            0,
            -2147483648});
            this.udSubRXFilterLow.Name = "udSubRXFilterLow";
            this.toolTip1.SetToolTip(this.udSubRXFilterLow, resources.GetString("udSubRXFilterLow.ToolTip"));
            this.udSubRXFilterLow.Value = new decimal(new int[] {
            0,
            0,
            0,
            0});
            this.udSubRXFilterLow.ValueChanged += new System.EventHandler(this.udSubRXFilterLow_ValueChanged);
            this.udSubRXFilterLow.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.Console_KeyPress);
            this.udSubRXFilterLow.LostFocus += new System.EventHandler(this.udSubRXFilterLow_LostFocus);
            // 
            // ptbSubRXFilterWidth
            // 
            resources.ApplyResources(this.ptbSubRXFilterWidth, "ptbSubRXFilterWidth");
            this.ptbSubRXFilterWidth.HeadImage = null;
            this.ptbSubRXFilterWidth.LargeChange = 5;
            this.ptbSubRXFilterWidth.Maximum = 20000;
            this.ptbSubRXFilterWidth.Minimum = 1;
            this.ptbSubRXFilterWidth.Name = "ptbSubRXFilterWidth";
            this.ptbSubRXFilterWidth.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.ptbSubRXFilterWidth.SmallChange = 1;
            this.ptbSubRXFilterWidth.TabStop = false;
            this.toolTip1.SetToolTip(this.ptbSubRXFilterWidth, resources.GetString("ptbSubRXFilterWidth.ToolTip"));
            this.ptbSubRXFilterWidth.Value = 1;
            this.ptbSubRXFilterWidth.OnWheel += new PowerSDR.PrettyTrackBar.WheelHandler(this.ptbSubRXFilterWidth_OnWheel);
            this.ptbSubRXFilterWidth.MouseMove += new System.Windows.Forms.MouseEventHandler(this.ptbSubRXFilterWidth_MouseMove);
            this.ptbSubRXFilterWidth.Scroll += new PowerSDR.PrettyTrackBar.ScrollHandler(this.ptbSubRXFilterWidth_Scroll);
            // 
            // btnSubRXFilterShiftReset
            // 
            this.btnSubRXFilterShiftReset.FlatAppearance.BorderSize = 0;
            resources.ApplyResources(this.btnSubRXFilterShiftReset, "btnSubRXFilterShiftReset");
            this.btnSubRXFilterShiftReset.Image = null;
            this.btnSubRXFilterShiftReset.Name = "btnSubRXFilterShiftReset";
            this.btnSubRXFilterShiftReset.Tag = "Reset Filter Shift";
            this.toolTip1.SetToolTip(this.btnSubRXFilterShiftReset, resources.GetString("btnSubRXFilterShiftReset.ToolTip"));
            this.btnSubRXFilterShiftReset.Click += new System.EventHandler(this.btnSubRXFilterShiftReset_Click);
            // 
            // ptbSubRXFilterShift
            // 
            resources.ApplyResources(this.ptbSubRXFilterShift, "ptbSubRXFilterShift");
            this.ptbSubRXFilterShift.HeadImage = null;
            this.ptbSubRXFilterShift.LargeChange = 5;
            this.ptbSubRXFilterShift.Maximum = 1000;
            this.ptbSubRXFilterShift.Minimum = -1000;
            this.ptbSubRXFilterShift.Name = "ptbSubRXFilterShift";
            this.ptbSubRXFilterShift.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.ptbSubRXFilterShift.SmallChange = 1;
            this.ptbSubRXFilterShift.TabStop = false;
            this.toolTip1.SetToolTip(this.ptbSubRXFilterShift, resources.GetString("ptbSubRXFilterShift.ToolTip"));
            this.ptbSubRXFilterShift.Value = 0;
            this.ptbSubRXFilterShift.OnWheel += new PowerSDR.PrettyTrackBar.WheelHandler(this.ptbSubRXFilterShift_OnWheel);
            this.ptbSubRXFilterShift.MouseMove += new System.Windows.Forms.MouseEventHandler(this.ptbSubRXFilterShift_MouseMove);
            this.ptbSubRXFilterShift.Scroll += new PowerSDR.PrettyTrackBar.ScrollHandler(this.ptbSubRXFilterShift_Scroll);
            // 
            // chkNB2SubRX
            // 
            resources.ApplyResources(this.chkNB2SubRX, "chkNB2SubRX");
            this.chkNB2SubRX.FlatAppearance.BorderSize = 0;
            this.chkNB2SubRX.Image = null;
            this.chkNB2SubRX.Name = "chkNB2SubRX";
            this.toolTip1.SetToolTip(this.chkNB2SubRX, resources.GetString("chkNB2SubRX.ToolTip"));
            this.chkNB2SubRX.CheckedChanged += new System.EventHandler(this.chkNB2SubRX_CheckedChanged);
            // 
            // chkNBSubRX
            // 
            resources.ApplyResources(this.chkNBSubRX, "chkNBSubRX");
            this.chkNBSubRX.FlatAppearance.BorderSize = 0;
            this.chkNBSubRX.Image = null;
            this.chkNBSubRX.Name = "chkNBSubRX";
            this.toolTip1.SetToolTip(this.chkNBSubRX, resources.GetString("chkNBSubRX.ToolTip"));
            this.chkNBSubRX.CheckedChanged += new System.EventHandler(this.chkNBSubRX_CheckedChanged);
            // 
            // chkANFSubRX
            // 
            resources.ApplyResources(this.chkANFSubRX, "chkANFSubRX");
            this.chkANFSubRX.FlatAppearance.BorderSize = 0;
            this.chkANFSubRX.Image = null;
            this.chkANFSubRX.Name = "chkANFSubRX";
            this.toolTip1.SetToolTip(this.chkANFSubRX, resources.GetString("chkANFSubRX.ToolTip"));
            this.chkANFSubRX.CheckedChanged += new System.EventHandler(this.chkANFSubRX_CheckedChanged);
            // 
            // chkNRSubRX
            // 
            resources.ApplyResources(this.chkNRSubRX, "chkNRSubRX");
            this.chkNRSubRX.FlatAppearance.BorderSize = 0;
            this.chkNRSubRX.Image = null;
            this.chkNRSubRX.Name = "chkNRSubRX";
            this.toolTip1.SetToolTip(this.chkNRSubRX, resources.GetString("chkNRSubRX.ToolTip"));
            this.chkNRSubRX.CheckedChanged += new System.EventHandler(this.chkNRSubRX_CheckedChanged);
            // 
            // chkBINSubRX
            // 
            resources.ApplyResources(this.chkBINSubRX, "chkBINSubRX");
            this.chkBINSubRX.FlatAppearance.BorderSize = 0;
            this.chkBINSubRX.Image = null;
            this.chkBINSubRX.Name = "chkBINSubRX";
            this.toolTip1.SetToolTip(this.chkBINSubRX, resources.GetString("chkBINSubRX.ToolTip"));
            this.chkBINSubRX.CheckedChanged += new System.EventHandler(this.chkBINSubRX_CheckedChanged);
            // 
            // comboAGCMainRX
            // 
            this.comboAGCMainRX.BackColor = System.Drawing.SystemColors.Window;
            this.comboAGCMainRX.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.comboAGCMainRX.DropDownWidth = 48;
            resources.ApplyResources(this.comboAGCMainRX, "comboAGCMainRX");
            this.comboAGCMainRX.ForeColor = System.Drawing.SystemColors.WindowText;
            this.comboAGCMainRX.Name = "comboAGCMainRX";
            this.toolTip1.SetToolTip(this.comboAGCMainRX, resources.GetString("comboAGCMainRX.ToolTip"));
            this.comboAGCMainRX.SelectedIndexChanged += new System.EventHandler(this.comboAGCMainRX_SelectedIndexChanged);
            // 
            // comboAGCSubRX
            // 
            this.comboAGCSubRX.BackColor = System.Drawing.SystemColors.Window;
            this.comboAGCSubRX.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.comboAGCSubRX.DropDownWidth = 48;
            resources.ApplyResources(this.comboAGCSubRX, "comboAGCSubRX");
            this.comboAGCSubRX.ForeColor = System.Drawing.SystemColors.WindowText;
            this.comboAGCSubRX.Name = "comboAGCSubRX";
            this.toolTip1.SetToolTip(this.comboAGCSubRX, resources.GetString("comboAGCSubRX.ToolTip"));
            this.comboAGCSubRX.SelectedIndexChanged += new System.EventHandler(this.comboAGCSubRX_SelectedIndexChanged);
            // 
            // ptbSQLMainRX
            // 
            resources.ApplyResources(this.ptbSQLMainRX, "ptbSQLMainRX");
            this.ptbSQLMainRX.HeadImage = null;
            this.ptbSQLMainRX.LargeChange = 1;
            this.ptbSQLMainRX.Maximum = 0;
            this.ptbSQLMainRX.Minimum = -160;
            this.ptbSQLMainRX.Name = "ptbSQLMainRX";
            this.ptbSQLMainRX.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.ptbSQLMainRX.SmallChange = 1;
            this.ptbSQLMainRX.TabStop = false;
            this.toolTip1.SetToolTip(this.ptbSQLMainRX, resources.GetString("ptbSQLMainRX.ToolTip"));
            this.ptbSQLMainRX.Value = -150;
            this.ptbSQLMainRX.OnWheel += new PowerSDR.PrettyTrackBar.WheelHandler(this.tbSQL_OnWheel);
            this.ptbSQLMainRX.Scroll += new PowerSDR.PrettyTrackBar.ScrollHandler(this.tbSQL_Scroll);
            // 
            // udSQLSubRX
            // 
            this.udSQLSubRX.BackColor = System.Drawing.SystemColors.Window;
            this.udSQLSubRX.ForeColor = System.Drawing.SystemColors.ControlText;
            this.udSQLSubRX.Increment = new decimal(new int[] {
            1,
            0,
            0,
            0});
            resources.ApplyResources(this.udSQLSubRX, "udSQLSubRX");
            this.udSQLSubRX.Maximum = new decimal(new int[] {
            160,
            0,
            0,
            0});
            this.udSQLSubRX.Minimum = new decimal(new int[] {
            0,
            0,
            0,
            0});
            this.udSQLSubRX.Name = "udSQLSubRX";
            this.toolTip1.SetToolTip(this.udSQLSubRX, resources.GetString("udSQLSubRX.ToolTip"));
            this.udSQLSubRX.Value = new decimal(new int[] {
            150,
            0,
            0,
            0});
            this.udSQLSubRX.ValueChanged += new System.EventHandler(this.udSQLSubRX_ValueChanged);
            this.udSQLSubRX.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.Console_KeyPress);
            // 
            // chkSQLSubRX
            // 
            resources.ApplyResources(this.chkSQLSubRX, "chkSQLSubRX");
            this.chkSQLSubRX.FlatAppearance.BorderSize = 0;
            this.chkSQLSubRX.Image = null;
            this.chkSQLSubRX.Name = "chkSQLSubRX";
            this.toolTip1.SetToolTip(this.chkSQLSubRX, resources.GetString("chkSQLSubRX.ToolTip"));
            this.chkSQLSubRX.CheckedChanged += new System.EventHandler(this.chkSQLSubRX_CheckedChanged);
            // 
            // ptbSQLSubRX
            // 
            resources.ApplyResources(this.ptbSQLSubRX, "ptbSQLSubRX");
            this.ptbSQLSubRX.HeadImage = null;
            this.ptbSQLSubRX.LargeChange = 1;
            this.ptbSQLSubRX.Maximum = 0;
            this.ptbSQLSubRX.Minimum = -160;
            this.ptbSQLSubRX.Name = "ptbSQLSubRX";
            this.ptbSQLSubRX.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.ptbSQLSubRX.SmallChange = 1;
            this.ptbSQLSubRX.TabStop = false;
            this.toolTip1.SetToolTip(this.ptbSQLSubRX, resources.GetString("ptbSQLSubRX.ToolTip"));
            this.ptbSQLSubRX.Value = -150;
            this.ptbSQLSubRX.OnWheel += new PowerSDR.PrettyTrackBar.WheelHandler(this.ptbSQLSubRX_OnWheel);
            this.ptbSQLSubRX.Scroll += new PowerSDR.PrettyTrackBar.ScrollHandler(this.ptbSQLSubRX_Scroll);
            // 
            // udSQLMainRX
            // 
            this.udSQLMainRX.BackColor = System.Drawing.SystemColors.Window;
            this.udSQLMainRX.ForeColor = System.Drawing.SystemColors.ControlText;
            this.udSQLMainRX.Increment = new decimal(new int[] {
            1,
            0,
            0,
            0});
            resources.ApplyResources(this.udSQLMainRX, "udSQLMainRX");
            this.udSQLMainRX.Maximum = new decimal(new int[] {
            160,
            0,
            0,
            0});
            this.udSQLMainRX.Minimum = new decimal(new int[] {
            0,
            0,
            0,
            0});
            this.udSQLMainRX.Name = "udSQLMainRX";
            this.toolTip1.SetToolTip(this.udSQLMainRX, resources.GetString("udSQLMainRX.ToolTip"));
            this.udSQLMainRX.Value = new decimal(new int[] {
            150,
            0,
            0,
            0});
            this.udSQLMainRX.ValueChanged += new System.EventHandler(this.udSQLMainRX_ValueChanged);
            this.udSQLMainRX.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.Console_KeyPress);
            this.udSQLMainRX.LostFocus += new System.EventHandler(this.udSQLMainRX_LostFocus);
            // 
            // txtWheelTuneSubRX
            // 
            this.txtWheelTuneSubRX.BackColor = System.Drawing.SystemColors.Window;
            this.txtWheelTuneSubRX.Cursor = System.Windows.Forms.Cursors.Default;
            resources.ApplyResources(this.txtWheelTuneSubRX, "txtWheelTuneSubRX");
            this.txtWheelTuneSubRX.ForeColor = System.Drawing.SystemColors.ControlText;
            this.txtWheelTuneSubRX.Name = "txtWheelTuneSubRX";
            this.txtWheelTuneSubRX.ReadOnly = true;
            this.toolTip1.SetToolTip(this.txtWheelTuneSubRX, resources.GetString("txtWheelTuneSubRX.ToolTip"));
            this.txtWheelTuneSubRX.MouseDown += new System.Windows.Forms.MouseEventHandler(this.WheelTune_MouseDown);
            // 
            // ptbPWR1
            // 
            resources.ApplyResources(this.ptbPWR1, "ptbPWR1");
            this.ptbPWR1.HeadImage = null;
            this.ptbPWR1.LargeChange = 5;
            this.ptbPWR1.Maximum = 100;
            this.ptbPWR1.Minimum = 0;
            this.ptbPWR1.Name = "ptbPWR1";
            this.ptbPWR1.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.ptbPWR1.SmallChange = 1;
            this.ptbPWR1.TabStop = false;
            this.toolTip1.SetToolTip(this.ptbPWR1, resources.GetString("ptbPWR1.ToolTip"));
            this.ptbPWR1.Value = 50;
            this.ptbPWR1.OnWheel += new PowerSDR.PrettyTrackBar.WheelHandler(this.ptbPWR1_OnWheel);
            this.ptbPWR1.Scroll += new PowerSDR.PrettyTrackBar.ScrollHandler(this.ptbPWR1_Scroll);
            // 
            // ptbRF1
            // 
            resources.ApplyResources(this.ptbRF1, "ptbRF1");
            this.ptbRF1.HeadImage = null;
            this.ptbRF1.LargeChange = 5;
            this.ptbRF1.Maximum = 120;
            this.ptbRF1.Minimum = -20;
            this.ptbRF1.Name = "ptbRF1";
            this.ptbRF1.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.ptbRF1.SmallChange = 1;
            this.ptbRF1.TabStop = false;
            this.toolTip1.SetToolTip(this.ptbRF1, resources.GetString("ptbRF1.ToolTip"));
            this.ptbRF1.Value = 90;
            this.ptbRF1.OnWheel += new PowerSDR.PrettyTrackBar.WheelHandler(this.ptbRF1_OnWheel);
            this.ptbRF1.Scroll += new PowerSDR.PrettyTrackBar.ScrollHandler(this.ptbRF1_Scroll);
            // 
            // ptbAF1
            // 
            resources.ApplyResources(this.ptbAF1, "ptbAF1");
            this.ptbAF1.HeadImage = null;
            this.ptbAF1.LargeChange = 5;
            this.ptbAF1.Maximum = 100;
            this.ptbAF1.Minimum = 0;
            this.ptbAF1.Name = "ptbAF1";
            this.ptbAF1.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.ptbAF1.SmallChange = 1;
            this.ptbAF1.TabStop = false;
            this.toolTip1.SetToolTip(this.ptbAF1, resources.GetString("ptbAF1.ToolTip"));
            this.ptbAF1.Value = 50;
            this.ptbAF1.OnWheel += new PowerSDR.PrettyTrackBar.WheelHandler(this.ptbAF1_OnWheel);
            this.ptbAF1.Scroll += new PowerSDR.PrettyTrackBar.ScrollHandler(this.ptbAF1_Scroll);
            // 
            // udRF1
            // 
            this.udRF1.BackColor = System.Drawing.SystemColors.Window;
            this.udRF1.ForeColor = System.Drawing.SystemColors.ControlText;
            this.udRF1.Increment = new decimal(new int[] {
            1,
            0,
            0,
            0});
            resources.ApplyResources(this.udRF1, "udRF1");
            this.udRF1.Maximum = new decimal(new int[] {
            120,
            0,
            0,
            0});
            this.udRF1.Minimum = new decimal(new int[] {
            20,
            0,
            0,
            -2147483648});
            this.udRF1.Name = "udRF1";
            this.toolTip1.SetToolTip(this.udRF1, resources.GetString("udRF1.ToolTip"));
            this.udRF1.Value = new decimal(new int[] {
            90,
            0,
            0,
            0});
            this.udRF1.ValueChanged += new System.EventHandler(this.udRF1_ValueChanged);
            this.udRF1.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.Console_KeyPress);
            // 
            // udPWR1
            // 
            this.udPWR1.BackColor = System.Drawing.SystemColors.Window;
            this.udPWR1.DecimalPlaces = 1;
            this.udPWR1.ForeColor = System.Drawing.SystemColors.ControlText;
            this.udPWR1.Increment = new decimal(new int[] {
            1,
            0,
            0,
            65536});
            resources.ApplyResources(this.udPWR1, "udPWR1");
            this.udPWR1.Maximum = new decimal(new int[] {
            100,
            0,
            0,
            0});
            this.udPWR1.Minimum = new decimal(new int[] {
            0,
            0,
            0,
            0});
            this.udPWR1.Name = "udPWR1";
            this.toolTip1.SetToolTip(this.udPWR1, resources.GetString("udPWR1.ToolTip"));
            this.udPWR1.Value = new decimal(new int[] {
            100,
            0,
            0,
            0});
            this.udPWR1.ValueChanged += new System.EventHandler(this.udPWR1_ValueChanged);
            this.udPWR1.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.Console_KeyPress);
            // 
            // udAF1
            // 
            this.udAF1.BackColor = System.Drawing.SystemColors.Window;
            this.udAF1.ForeColor = System.Drawing.SystemColors.ControlText;
            this.udAF1.Increment = new decimal(new int[] {
            1,
            0,
            0,
            0});
            resources.ApplyResources(this.udAF1, "udAF1");
            this.udAF1.Maximum = new decimal(new int[] {
            100,
            0,
            0,
            0});
            this.udAF1.Minimum = new decimal(new int[] {
            0,
            0,
            0,
            0});
            this.udAF1.Name = "udAF1";
            this.toolTip1.SetToolTip(this.udAF1, resources.GetString("udAF1.ToolTip"));
            this.udAF1.Value = new decimal(new int[] {
            50,
            0,
            0,
            0});
            this.udAF1.ValueChanged += new System.EventHandler(this.udAF1_ValueChanged_1);
            this.udAF1.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.Console_KeyPress);
            // 
            // lblRX2
            // 
            resources.ApplyResources(this.lblRX2, "lblRX2");
            this.lblRX2.BackColor = System.Drawing.Color.Black;
            this.lblRX2.ForeColor = System.Drawing.Color.Olive;
            this.lblRX2.Image = null;
            this.lblRX2.Name = "lblRX2";
            this.toolTip1.SetToolTip(this.lblRX2, resources.GetString("lblRX2.ToolTip"));
            this.lblRX2.Click += new System.EventHandler(this.lblRX2_Click);
            // 
            // ptbNotchWidth
            // 
            resources.ApplyResources(this.ptbNotchWidth, "ptbNotchWidth");
            this.ptbNotchWidth.HeadImage = null;
            this.ptbNotchWidth.LargeChange = 10;
            this.ptbNotchWidth.Maximum = 5000;
            this.ptbNotchWidth.Minimum = 0;
            this.ptbNotchWidth.Name = "ptbNotchWidth";
            this.ptbNotchWidth.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.ptbNotchWidth.SmallChange = 10;
            this.ptbNotchWidth.TabStop = false;
            this.toolTip1.SetToolTip(this.ptbNotchWidth, resources.GetString("ptbNotchWidth.ToolTip"));
            this.ptbNotchWidth.Value = 200;
            this.ptbNotchWidth.OnWheel += new PowerSDR.PrettyTrackBar.WheelHandler(this.ptbNotchWidth_OnWheel);
            this.ptbNotchWidth.Scroll += new PowerSDR.PrettyTrackBar.ScrollHandler(this.ptbNotchWidth_Scroll);
            // 
            // ptbNotchShift
            // 
            resources.ApplyResources(this.ptbNotchShift, "ptbNotchShift");
            this.ptbNotchShift.HeadImage = null;
            this.ptbNotchShift.LargeChange = 25;
            this.ptbNotchShift.Maximum = 5000;
            this.ptbNotchShift.Minimum = -5000;
            this.ptbNotchShift.Name = "ptbNotchShift";
            this.ptbNotchShift.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.ptbNotchShift.SmallChange = 25;
            this.ptbNotchShift.TabStop = false;
            this.toolTip1.SetToolTip(this.ptbNotchShift, resources.GetString("ptbNotchShift.ToolTip"));
            this.ptbNotchShift.Value = 0;
            this.ptbNotchShift.OnWheel += new PowerSDR.PrettyTrackBar.WheelHandler(this.ptbNotchShift_OnWheel);
            this.ptbNotchShift.Scroll += new PowerSDR.PrettyTrackBar.ScrollHandler(this.ptbNotchShift_Scroll);
            // 
            // btnNotchReset
            // 
            this.btnNotchReset.FlatAppearance.BorderSize = 0;
            resources.ApplyResources(this.btnNotchReset, "btnNotchReset");
            this.btnNotchReset.Image = null;
            this.btnNotchReset.Name = "btnNotchReset";
            this.btnNotchReset.Tag = "Reset Filter Shift";
            this.toolTip1.SetToolTip(this.btnNotchReset, resources.GetString("btnNotchReset.ToolTip"));
            this.btnNotchReset.Click += new System.EventHandler(this.btnNotchReset_Click);
            // 
            // radSUBRxModeAM
            // 
            resources.ApplyResources(this.radSUBRxModeAM, "radSUBRxModeAM");
            this.radSUBRxModeAM.FlatAppearance.BorderSize = 0;
            this.radSUBRxModeAM.Image = null;
            this.radSUBRxModeAM.Name = "radSUBRxModeAM";
            this.toolTip1.SetToolTip(this.radSUBRxModeAM, resources.GetString("radSUBRxModeAM.ToolTip"));
            this.radSUBRxModeAM.CheckedChanged += new System.EventHandler(this.radSUBRxModeAM_CheckedChanged);
            // 
            // radSUBRxModeSAM
            // 
            resources.ApplyResources(this.radSUBRxModeSAM, "radSUBRxModeSAM");
            this.radSUBRxModeSAM.FlatAppearance.BorderSize = 0;
            this.radSUBRxModeSAM.Image = null;
            this.radSUBRxModeSAM.Name = "radSUBRxModeSAM";
            this.toolTip1.SetToolTip(this.radSUBRxModeSAM, resources.GetString("radSUBRxModeSAM.ToolTip"));
            this.radSUBRxModeSAM.CheckedChanged += new System.EventHandler(this.radSUBRxModeSAM_CheckedChanged);
            // 
            // radSUBRxModeDSB
            // 
            resources.ApplyResources(this.radSUBRxModeDSB, "radSUBRxModeDSB");
            this.radSUBRxModeDSB.FlatAppearance.BorderSize = 0;
            this.radSUBRxModeDSB.Image = null;
            this.radSUBRxModeDSB.Name = "radSUBRxModeDSB";
            this.toolTip1.SetToolTip(this.radSUBRxModeDSB, resources.GetString("radSUBRxModeDSB.ToolTip"));
            this.radSUBRxModeDSB.CheckedChanged += new System.EventHandler(this.radSUBRxModeDSB_CheckedChanged);
            // 
            // radSUBRxModeCWU
            // 
            resources.ApplyResources(this.radSUBRxModeCWU, "radSUBRxModeCWU");
            this.radSUBRxModeCWU.FlatAppearance.BorderSize = 0;
            this.radSUBRxModeCWU.Image = null;
            this.radSUBRxModeCWU.Name = "radSUBRxModeCWU";
            this.toolTip1.SetToolTip(this.radSUBRxModeCWU, resources.GetString("radSUBRxModeCWU.ToolTip"));
            this.radSUBRxModeCWU.CheckedChanged += new System.EventHandler(this.radSUBRxModeCWU_CheckedChanged);
            // 
            // radSUBRxModeDIGU
            // 
            resources.ApplyResources(this.radSUBRxModeDIGU, "radSUBRxModeDIGU");
            this.radSUBRxModeDIGU.FlatAppearance.BorderSize = 0;
            this.radSUBRxModeDIGU.Image = null;
            this.radSUBRxModeDIGU.Name = "radSUBRxModeDIGU";
            this.toolTip1.SetToolTip(this.radSUBRxModeDIGU, resources.GetString("radSUBRxModeDIGU.ToolTip"));
            this.radSUBRxModeDIGU.CheckedChanged += new System.EventHandler(this.radSUBRxModeDIGU_CheckedChanged);
            // 
            // radSUBRxModeDIGL
            // 
            resources.ApplyResources(this.radSUBRxModeDIGL, "radSUBRxModeDIGL");
            this.radSUBRxModeDIGL.FlatAppearance.BorderSize = 0;
            this.radSUBRxModeDIGL.Image = null;
            this.radSUBRxModeDIGL.Name = "radSUBRxModeDIGL";
            this.toolTip1.SetToolTip(this.radSUBRxModeDIGL, resources.GetString("radSUBRxModeDIGL.ToolTip"));
            this.radSUBRxModeDIGL.CheckedChanged += new System.EventHandler(this.radSUBRxModeDIGL_CheckedChanged);
            // 
            // radSUBRxModeLSB
            // 
            resources.ApplyResources(this.radSUBRxModeLSB, "radSUBRxModeLSB");
            this.radSUBRxModeLSB.FlatAppearance.BorderSize = 0;
            this.radSUBRxModeLSB.Image = null;
            this.radSUBRxModeLSB.Name = "radSUBRxModeLSB";
            this.toolTip1.SetToolTip(this.radSUBRxModeLSB, resources.GetString("radSUBRxModeLSB.ToolTip"));
            this.radSUBRxModeLSB.CheckedChanged += new System.EventHandler(this.radSUBRxModeLSB_CheckedChanged);
            // 
            // radSUBRxModeSPEC
            // 
            resources.ApplyResources(this.radSUBRxModeSPEC, "radSUBRxModeSPEC");
            this.radSUBRxModeSPEC.FlatAppearance.BorderSize = 0;
            this.radSUBRxModeSPEC.Image = null;
            this.radSUBRxModeSPEC.Name = "radSUBRxModeSPEC";
            this.toolTip1.SetToolTip(this.radSUBRxModeSPEC, resources.GetString("radSUBRxModeSPEC.ToolTip"));
            this.radSUBRxModeSPEC.CheckedChanged += new System.EventHandler(this.radSUBRxModeSPEC_CheckedChanged);
            // 
            // radSUBRxModeDRM
            // 
            resources.ApplyResources(this.radSUBRxModeDRM, "radSUBRxModeDRM");
            this.radSUBRxModeDRM.FlatAppearance.BorderSize = 0;
            this.radSUBRxModeDRM.Image = null;
            this.radSUBRxModeDRM.Name = "radSUBRxModeDRM";
            this.toolTip1.SetToolTip(this.radSUBRxModeDRM, resources.GetString("radSUBRxModeDRM.ToolTip"));
            this.radSUBRxModeDRM.CheckedChanged += new System.EventHandler(this.radSUBRxModeDRM_CheckedChanged);
            // 
            // radSUBRxModeFMN
            // 
            resources.ApplyResources(this.radSUBRxModeFMN, "radSUBRxModeFMN");
            this.radSUBRxModeFMN.FlatAppearance.BorderSize = 0;
            this.radSUBRxModeFMN.Image = null;
            this.radSUBRxModeFMN.Name = "radSUBRxModeFMN";
            this.toolTip1.SetToolTip(this.radSUBRxModeFMN, resources.GetString("radSUBRxModeFMN.ToolTip"));
            this.radSUBRxModeFMN.CheckedChanged += new System.EventHandler(this.radSUBRxModeFMN_CheckedChanged);
            // 
            // radSUBRxModeUSB
            // 
            resources.ApplyResources(this.radSUBRxModeUSB, "radSUBRxModeUSB");
            this.radSUBRxModeUSB.BackColor = System.Drawing.SystemColors.Control;
            this.radSUBRxModeUSB.FlatAppearance.BorderSize = 0;
            this.radSUBRxModeUSB.Image = null;
            this.radSUBRxModeUSB.Name = "radSUBRxModeUSB";
            this.toolTip1.SetToolTip(this.radSUBRxModeUSB, resources.GetString("radSUBRxModeUSB.ToolTip"));
            this.radSUBRxModeUSB.UseVisualStyleBackColor = false;
            this.radSUBRxModeUSB.CheckedChanged += new System.EventHandler(this.radSUBRxModeUSB_CheckedChanged);
            // 
            // radSUBRxModeCWL
            // 
            resources.ApplyResources(this.radSUBRxModeCWL, "radSUBRxModeCWL");
            this.radSUBRxModeCWL.FlatAppearance.BorderSize = 0;
            this.radSUBRxModeCWL.Image = null;
            this.radSUBRxModeCWL.Name = "radSUBRxModeCWL";
            this.toolTip1.SetToolTip(this.radSUBRxModeCWL, resources.GetString("radSUBRxModeCWL.ToolTip"));
            this.radSUBRxModeCWL.CheckedChanged += new System.EventHandler(this.radSUBRxModeCWL_CheckedChanged);
            // 
            // radModeAM
            // 
            resources.ApplyResources(this.radModeAM, "radModeAM");
            this.radModeAM.FlatAppearance.BorderSize = 0;
            this.radModeAM.Image = null;
            this.radModeAM.Name = "radModeAM";
            this.toolTip1.SetToolTip(this.radModeAM, resources.GetString("radModeAM.ToolTip"));
            this.radModeAM.CheckedChanged += new System.EventHandler(this.radModeAM_CheckedChanged);
            // 
            // radModeSAM
            // 
            resources.ApplyResources(this.radModeSAM, "radModeSAM");
            this.radModeSAM.FlatAppearance.BorderSize = 0;
            this.radModeSAM.Image = null;
            this.radModeSAM.Name = "radModeSAM";
            this.toolTip1.SetToolTip(this.radModeSAM, resources.GetString("radModeSAM.ToolTip"));
            this.radModeSAM.CheckedChanged += new System.EventHandler(this.radModeSAM_CheckedChanged);
            // 
            // radModeDSB
            // 
            resources.ApplyResources(this.radModeDSB, "radModeDSB");
            this.radModeDSB.FlatAppearance.BorderSize = 0;
            this.radModeDSB.Image = null;
            this.radModeDSB.Name = "radModeDSB";
            this.toolTip1.SetToolTip(this.radModeDSB, resources.GetString("radModeDSB.ToolTip"));
            this.radModeDSB.CheckedChanged += new System.EventHandler(this.radModeDSB_CheckedChanged);
            // 
            // radModeCWU
            // 
            resources.ApplyResources(this.radModeCWU, "radModeCWU");
            this.radModeCWU.FlatAppearance.BorderSize = 0;
            this.radModeCWU.Image = null;
            this.radModeCWU.Name = "radModeCWU";
            this.toolTip1.SetToolTip(this.radModeCWU, resources.GetString("radModeCWU.ToolTip"));
            this.radModeCWU.CheckedChanged += new System.EventHandler(this.radModeCWU_CheckedChanged);
            // 
            // radModeDIGU
            // 
            resources.ApplyResources(this.radModeDIGU, "radModeDIGU");
            this.radModeDIGU.FlatAppearance.BorderSize = 0;
            this.radModeDIGU.Image = null;
            this.radModeDIGU.Name = "radModeDIGU";
            this.toolTip1.SetToolTip(this.radModeDIGU, resources.GetString("radModeDIGU.ToolTip"));
            this.radModeDIGU.CheckedChanged += new System.EventHandler(this.radModeDIGU_CheckedChanged);
            // 
            // radModeDIGL
            // 
            resources.ApplyResources(this.radModeDIGL, "radModeDIGL");
            this.radModeDIGL.FlatAppearance.BorderSize = 0;
            this.radModeDIGL.Image = null;
            this.radModeDIGL.Name = "radModeDIGL";
            this.toolTip1.SetToolTip(this.radModeDIGL, resources.GetString("radModeDIGL.ToolTip"));
            this.radModeDIGL.CheckedChanged += new System.EventHandler(this.radModeDIGL_CheckedChanged);
            // 
            // radModeLSB
            // 
            resources.ApplyResources(this.radModeLSB, "radModeLSB");
            this.radModeLSB.FlatAppearance.BorderSize = 0;
            this.radModeLSB.Image = null;
            this.radModeLSB.Name = "radModeLSB";
            this.toolTip1.SetToolTip(this.radModeLSB, resources.GetString("radModeLSB.ToolTip"));
            this.radModeLSB.CheckedChanged += new System.EventHandler(this.radModeLSB_CheckedChanged);
            // 
            // radModeSPEC
            // 
            resources.ApplyResources(this.radModeSPEC, "radModeSPEC");
            this.radModeSPEC.FlatAppearance.BorderSize = 0;
            this.radModeSPEC.Image = null;
            this.radModeSPEC.Name = "radModeSPEC";
            this.toolTip1.SetToolTip(this.radModeSPEC, resources.GetString("radModeSPEC.ToolTip"));
            this.radModeSPEC.CheckedChanged += new System.EventHandler(this.radModeSPEC_CheckedChanged);
            // 
            // radModeDRM
            // 
            resources.ApplyResources(this.radModeDRM, "radModeDRM");
            this.radModeDRM.FlatAppearance.BorderSize = 0;
            this.radModeDRM.Image = null;
            this.radModeDRM.Name = "radModeDRM";
            this.toolTip1.SetToolTip(this.radModeDRM, resources.GetString("radModeDRM.ToolTip"));
            this.radModeDRM.CheckedChanged += new System.EventHandler(this.radModeDRM_CheckedChanged);
            // 
            // radModeFMN
            // 
            resources.ApplyResources(this.radModeFMN, "radModeFMN");
            this.radModeFMN.FlatAppearance.BorderSize = 0;
            this.radModeFMN.Image = null;
            this.radModeFMN.Name = "radModeFMN";
            this.toolTip1.SetToolTip(this.radModeFMN, resources.GetString("radModeFMN.ToolTip"));
            this.radModeFMN.CheckedChanged += new System.EventHandler(this.radModeFMN_CheckedChanged);
            // 
            // radModeUSB
            // 
            resources.ApplyResources(this.radModeUSB, "radModeUSB");
            this.radModeUSB.BackColor = System.Drawing.SystemColors.Control;
            this.radModeUSB.FlatAppearance.BorderSize = 0;
            this.radModeUSB.Image = null;
            this.radModeUSB.Name = "radModeUSB";
            this.toolTip1.SetToolTip(this.radModeUSB, resources.GetString("radModeUSB.ToolTip"));
            this.radModeUSB.UseVisualStyleBackColor = true;
            this.radModeUSB.CheckedChanged += new System.EventHandler(this.radModeUSB_CheckedChanged);
            // 
            // radModeWFM
            // 
            resources.ApplyResources(this.radModeWFM, "radModeWFM");
            this.radModeWFM.FlatAppearance.BorderSize = 0;
            this.radModeWFM.Image = null;
            this.radModeWFM.Name = "radModeWFM";
            this.toolTip1.SetToolTip(this.radModeWFM, resources.GetString("radModeWFM.ToolTip"));
            this.radModeWFM.CheckedChanged += new System.EventHandler(this.radModeWFM_CheckedChanged);
            // 
            // chkManualNotchFilter
            // 
            resources.ApplyResources(this.chkManualNotchFilter, "chkManualNotchFilter");
            this.chkManualNotchFilter.Image = null;
            this.chkManualNotchFilter.Name = "chkManualNotchFilter";
            this.toolTip1.SetToolTip(this.chkManualNotchFilter, resources.GetString("chkManualNotchFilter.ToolTip"));
            this.chkManualNotchFilter.UseVisualStyleBackColor = true;
            this.chkManualNotchFilter.CheckedChanged += new System.EventHandler(this.chkManualNotchFilter_CheckedChanged);
            // 
            // chkG11ATTbtn
            // 
            resources.ApplyResources(this.chkG11ATTbtn, "chkG11ATTbtn");
            this.chkG11ATTbtn.FlatAppearance.BorderSize = 0;
            this.chkG11ATTbtn.Image = null;
            this.chkG11ATTbtn.Name = "chkG11ATTbtn";
            this.toolTip1.SetToolTip(this.chkG11ATTbtn, resources.GetString("chkG11ATTbtn.ToolTip"));
            this.chkG11ATTbtn.UseVisualStyleBackColor = true;
            this.chkG11ATTbtn.CheckedChanged += new System.EventHandler(this.chkG11ATTbtn_CheckedChanged);
            // 
            // chkG11AFbtn
            // 
            resources.ApplyResources(this.chkG11AFbtn, "chkG11AFbtn");
            this.chkG11AFbtn.FlatAppearance.BorderSize = 0;
            this.chkG11AFbtn.Image = null;
            this.chkG11AFbtn.Name = "chkG11AFbtn";
            this.toolTip1.SetToolTip(this.chkG11AFbtn, resources.GetString("chkG11AFbtn.ToolTip"));
            this.chkG11AFbtn.UseVisualStyleBackColor = true;
            this.chkG11AFbtn.CheckedChanged += new System.EventHandler(this.chkG11AFbtn_CheckedChanged);
            // 
            // chkG11RFbtn
            // 
            resources.ApplyResources(this.chkG11RFbtn, "chkG11RFbtn");
            this.chkG11RFbtn.FlatAppearance.BorderSize = 0;
            this.chkG11RFbtn.Image = null;
            this.chkG11RFbtn.Name = "chkG11RFbtn";
            this.toolTip1.SetToolTip(this.chkG11RFbtn, resources.GetString("chkG11RFbtn.ToolTip"));
            this.chkG11RFbtn.UseVisualStyleBackColor = true;
            this.chkG11RFbtn.CheckedChanged += new System.EventHandler(this.chkG11RFbtn_CheckedChanged);
            // 
            // radBandHF
            // 
            resources.ApplyResources(this.radBandHF, "radBandHF");
            this.radBandHF.Checked = true;
            this.radBandHF.FlatAppearance.BorderSize = 0;
            this.radBandHF.Image = null;
            this.radBandHF.Name = "radBandHF";
            this.radBandHF.TabStop = true;
            this.toolTip1.SetToolTip(this.radBandHF, resources.GetString("radBandHF.ToolTip"));
            this.radBandHF.Click += new System.EventHandler(this.radBandHF_Click);
            this.radBandHF.CheckedChanged += new System.EventHandler(this.radBandHF_CheckedChanged);
            // 
            // radBand600
            // 
            resources.ApplyResources(this.radBand600, "radBand600");
            this.radBand600.FlatAppearance.BorderSize = 0;
            this.radBand600.Image = null;
            this.radBand600.Name = "radBand600";
            this.toolTip1.SetToolTip(this.radBand600, resources.GetString("radBand600.ToolTip"));
            this.radBand600.Click += new System.EventHandler(this.radBand600_Click);
            this.radBand600.CheckedChanged += new System.EventHandler(this.radBand600_CheckedChanged);
            // 
            // radBand2190
            // 
            resources.ApplyResources(this.radBand2190, "radBand2190");
            this.radBand2190.FlatAppearance.BorderSize = 0;
            this.radBand2190.Image = null;
            this.radBand2190.Name = "radBand2190";
            this.toolTip1.SetToolTip(this.radBand2190, resources.GetString("radBand2190.ToolTip"));
            this.radBand2190.Click += new System.EventHandler(this.radBand2190_Click);
            this.radBand2190.CheckedChanged += new System.EventHandler(this.radBand2190_CheckedChanged);
            // 
            // btnFMMC
            // 
            this.btnFMMC.FlatAppearance.BorderSize = 0;
            resources.ApplyResources(this.btnFMMC, "btnFMMC");
            this.btnFMMC.Image = null;
            this.btnFMMC.Name = "btnFMMC";
            this.toolTip1.SetToolTip(this.btnFMMC, resources.GetString("btnFMMC.ToolTip"));
            this.btnFMMC.Click += new System.EventHandler(this.btnFMMC_Click);
            // 
            // btnFMMR
            // 
            this.btnFMMR.FlatAppearance.BorderSize = 0;
            resources.ApplyResources(this.btnFMMR, "btnFMMR");
            this.btnFMMR.Image = null;
            this.btnFMMR.Name = "btnFMMR";
            this.toolTip1.SetToolTip(this.btnFMMR, resources.GetString("btnFMMR.ToolTip"));
            this.btnFMMR.Click += new System.EventHandler(this.btnFMMR_Click);
            // 
            // btnFMMS
            // 
            this.btnFMMS.FlatAppearance.BorderSize = 0;
            resources.ApplyResources(this.btnFMMS, "btnFMMS");
            this.btnFMMS.Image = null;
            this.btnFMMS.Name = "btnFMMS";
            this.toolTip1.SetToolTip(this.btnFMMS, resources.GetString("btnFMMS.ToolTip"));
            this.btnFMMS.Click += new System.EventHandler(this.btnFMMS_Click);
            // 
            // lblMemoryNumber
            // 
            resources.ApplyResources(this.lblMemoryNumber, "lblMemoryNumber");
            this.lblMemoryNumber.BackColor = System.Drawing.Color.Blue;
            this.lblMemoryNumber.ContextMenuStrip = this.contextMemoryMenu;
            this.lblMemoryNumber.ForeColor = System.Drawing.Color.White;
            this.lblMemoryNumber.Image = null;
            this.lblMemoryNumber.MinimumSize = new System.Drawing.Size(27, 20);
            this.lblMemoryNumber.Name = "lblMemoryNumber";
            this.toolTip1.SetToolTip(this.lblMemoryNumber, resources.GetString("lblMemoryNumber.ToolTip"));
            this.lblMemoryNumber.MouseLeave += new System.EventHandler(this.MemoryButton_MouseLeave);
            this.lblMemoryNumber.Click += new System.EventHandler(this.lblMemoryNumber_Click);
            this.lblMemoryNumber.MouseHover += new System.EventHandler(this.MemoryButton_MouseHover);
            // 
            // contextMemoryMenu
            // 
            this.contextMemoryMenu.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.eraseAllMemoryToolStripMenuItem});
            this.contextMemoryMenu.Name = "contextMemoryMenu";
            resources.ApplyResources(this.contextMemoryMenu, "contextMemoryMenu");
            // 
            // eraseAllMemoryToolStripMenuItem
            // 
            this.eraseAllMemoryToolStripMenuItem.Name = "eraseAllMemoryToolStripMenuItem";
            resources.ApplyResources(this.eraseAllMemoryToolStripMenuItem, "eraseAllMemoryToolStripMenuItem");
            this.eraseAllMemoryToolStripMenuItem.Click += new System.EventHandler(this.eraseAllMemoryToolStripMenuItem_Click);
            // 
            // lblFMMemory
            // 
            resources.ApplyResources(this.lblFMMemory, "lblFMMemory");
            this.lblFMMemory.BackColor = System.Drawing.Color.Blue;
            this.lblFMMemory.ContextMenuStrip = this.contextMenuFMMemory;
            this.lblFMMemory.ForeColor = System.Drawing.Color.White;
            this.lblFMMemory.Image = null;
            this.lblFMMemory.MinimumSize = new System.Drawing.Size(27, 20);
            this.lblFMMemory.Name = "lblFMMemory";
            this.toolTip1.SetToolTip(this.lblFMMemory, resources.GetString("lblFMMemory.ToolTip"));
            this.lblFMMemory.MouseLeave += new System.EventHandler(this.lblFMMemory_MouseLeave);
            this.lblFMMemory.Click += new System.EventHandler(this.lblFMMemory_Click);
            this.lblFMMemory.MouseHover += new System.EventHandler(this.lblFMMemory_MouseHover);
            // 
            // contextMenuFMMemory
            // 
            this.contextMenuFMMemory.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.eraseAllMemoryToolStripMenuItem1});
            this.contextMenuFMMemory.Name = "contextMenuFMMemory";
            resources.ApplyResources(this.contextMenuFMMemory, "contextMenuFMMemory");
            // 
            // eraseAllMemoryToolStripMenuItem1
            // 
            this.eraseAllMemoryToolStripMenuItem1.Name = "eraseAllMemoryToolStripMenuItem1";
            resources.ApplyResources(this.eraseAllMemoryToolStripMenuItem1, "eraseAllMemoryToolStripMenuItem1");
            this.eraseAllMemoryToolStripMenuItem1.Click += new System.EventHandler(this.eraseAllMemoryToolStripMenuItem1_Click);
            // 
            // udFMOffset
            // 
            this.udFMOffset.Increment = new decimal(new int[] {
            100,
            0,
            0,
            0});
            resources.ApplyResources(this.udFMOffset, "udFMOffset");
            this.udFMOffset.Maximum = new decimal(new int[] {
            5000,
            0,
            0,
            0});
            this.udFMOffset.Minimum = new decimal(new int[] {
            0,
            0,
            0,
            0});
            this.udFMOffset.Name = "udFMOffset";
            this.toolTip1.SetToolTip(this.udFMOffset, resources.GetString("udFMOffset.ToolTip"));
            this.udFMOffset.Value = new decimal(new int[] {
            600,
            0,
            0,
            0});
            // 
            // radFMModeHigh
            // 
            resources.ApplyResources(this.radFMModeHigh, "radFMModeHigh");
            this.radFMModeHigh.FlatAppearance.BorderSize = 0;
            this.radFMModeHigh.Image = null;
            this.radFMModeHigh.Name = "radFMModeHigh";
            this.toolTip1.SetToolTip(this.radFMModeHigh, resources.GetString("radFMModeHigh.ToolTip"));
            this.radFMModeHigh.CheckedChanged += new System.EventHandler(this.radFMModeHigh_CheckedChanged);
            // 
            // radFMModeSimplex
            // 
            resources.ApplyResources(this.radFMModeSimplex, "radFMModeSimplex");
            this.radFMModeSimplex.Checked = true;
            this.radFMModeSimplex.FlatAppearance.BorderSize = 0;
            this.radFMModeSimplex.Image = null;
            this.radFMModeSimplex.Name = "radFMModeSimplex";
            this.radFMModeSimplex.TabStop = true;
            this.toolTip1.SetToolTip(this.radFMModeSimplex, resources.GetString("radFMModeSimplex.ToolTip"));
            this.radFMModeSimplex.CheckedChanged += new System.EventHandler(this.radFMModeSimplex_CheckedChanged);
            // 
            // radFMModeLow
            // 
            resources.ApplyResources(this.radFMModeLow, "radFMModeLow");
            this.radFMModeLow.FlatAppearance.BorderSize = 0;
            this.radFMModeLow.Image = null;
            this.radFMModeLow.Name = "radFMModeLow";
            this.toolTip1.SetToolTip(this.radFMModeLow, resources.GetString("radFMModeLow.ToolTip"));
            this.radFMModeLow.CheckedChanged += new System.EventHandler(this.radFMModeLow_CheckedChanged);
            // 
            // chkCTCSS
            // 
            resources.ApplyResources(this.chkCTCSS, "chkCTCSS");
            this.chkCTCSS.FlatAppearance.BorderSize = 0;
            this.chkCTCSS.Image = null;
            this.chkCTCSS.Name = "chkCTCSS";
            this.toolTip1.SetToolTip(this.chkCTCSS, resources.GetString("chkCTCSS.ToolTip"));
            this.chkCTCSS.UseVisualStyleBackColor = false;
            this.chkCTCSS.CheckedChanged += new System.EventHandler(this.chkCTCSS_CheckedChanged);
            // 
            // comboFMCTCSSFreq
            // 
            this.comboFMCTCSSFreq.FormattingEnabled = true;
            this.comboFMCTCSSFreq.Items.AddRange(new object[] {
            resources.GetString("comboFMCTCSSFreq.Items"),
            resources.GetString("comboFMCTCSSFreq.Items1"),
            resources.GetString("comboFMCTCSSFreq.Items2"),
            resources.GetString("comboFMCTCSSFreq.Items3"),
            resources.GetString("comboFMCTCSSFreq.Items4"),
            resources.GetString("comboFMCTCSSFreq.Items5"),
            resources.GetString("comboFMCTCSSFreq.Items6"),
            resources.GetString("comboFMCTCSSFreq.Items7"),
            resources.GetString("comboFMCTCSSFreq.Items8"),
            resources.GetString("comboFMCTCSSFreq.Items9"),
            resources.GetString("comboFMCTCSSFreq.Items10"),
            resources.GetString("comboFMCTCSSFreq.Items11"),
            resources.GetString("comboFMCTCSSFreq.Items12"),
            resources.GetString("comboFMCTCSSFreq.Items13"),
            resources.GetString("comboFMCTCSSFreq.Items14"),
            resources.GetString("comboFMCTCSSFreq.Items15"),
            resources.GetString("comboFMCTCSSFreq.Items16"),
            resources.GetString("comboFMCTCSSFreq.Items17"),
            resources.GetString("comboFMCTCSSFreq.Items18"),
            resources.GetString("comboFMCTCSSFreq.Items19"),
            resources.GetString("comboFMCTCSSFreq.Items20"),
            resources.GetString("comboFMCTCSSFreq.Items21"),
            resources.GetString("comboFMCTCSSFreq.Items22"),
            resources.GetString("comboFMCTCSSFreq.Items23"),
            resources.GetString("comboFMCTCSSFreq.Items24"),
            resources.GetString("comboFMCTCSSFreq.Items25"),
            resources.GetString("comboFMCTCSSFreq.Items26"),
            resources.GetString("comboFMCTCSSFreq.Items27"),
            resources.GetString("comboFMCTCSSFreq.Items28"),
            resources.GetString("comboFMCTCSSFreq.Items29"),
            resources.GetString("comboFMCTCSSFreq.Items30"),
            resources.GetString("comboFMCTCSSFreq.Items31"),
            resources.GetString("comboFMCTCSSFreq.Items32"),
            resources.GetString("comboFMCTCSSFreq.Items33"),
            resources.GetString("comboFMCTCSSFreq.Items34"),
            resources.GetString("comboFMCTCSSFreq.Items35"),
            resources.GetString("comboFMCTCSSFreq.Items36"),
            resources.GetString("comboFMCTCSSFreq.Items37"),
            resources.GetString("comboFMCTCSSFreq.Items38")});
            resources.ApplyResources(this.comboFMCTCSSFreq, "comboFMCTCSSFreq");
            this.comboFMCTCSSFreq.Name = "comboFMCTCSSFreq";
            this.toolTip1.SetToolTip(this.comboFMCTCSSFreq, resources.GetString("comboFMCTCSSFreq.ToolTip"));
            this.comboFMCTCSSFreq.SelectedIndexChanged += new System.EventHandler(this.comboFMCTCSSFreq_SelectedIndexChanged);
            // 
            // ptbFMMicGain
            // 
            resources.ApplyResources(this.ptbFMMicGain, "ptbFMMicGain");
            this.ptbFMMicGain.HeadImage = null;
            this.ptbFMMicGain.LargeChange = 1;
            this.ptbFMMicGain.Maximum = 70;
            this.ptbFMMicGain.Minimum = 0;
            this.ptbFMMicGain.Name = "ptbFMMicGain";
            this.ptbFMMicGain.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.ptbFMMicGain.SmallChange = 1;
            this.ptbFMMicGain.TabStop = false;
            this.toolTip1.SetToolTip(this.ptbFMMicGain, resources.GetString("ptbFMMicGain.ToolTip"));
            this.ptbFMMicGain.Value = 35;
            this.ptbFMMicGain.OnWheel += new PowerSDR.PrettyTrackBar.WheelHandler(this.ptbFMMicGain_OnWheel);
            this.ptbFMMicGain.Scroll += new PowerSDR.PrettyTrackBar.ScrollHandler(this.ptbFMMicGain_Scroll);
            // 
            // chkVACMute
            // 
            resources.ApplyResources(this.chkVACMute, "chkVACMute");
            this.chkVACMute.FlatAppearance.BorderSize = 0;
            this.chkVACMute.Image = null;
            this.chkVACMute.Name = "chkVACMute";
            this.toolTip1.SetToolTip(this.chkVACMute, resources.GetString("chkVACMute.ToolTip"));
            this.chkVACMute.CheckedChanged += new System.EventHandler(this.chkVACMute_CheckedChanged);
            // 
            // chkG6ATT_6dB
            // 
            resources.ApplyResources(this.chkG6ATT_6dB, "chkG6ATT_6dB");
            this.chkG6ATT_6dB.FlatAppearance.BorderSize = 0;
            this.chkG6ATT_6dB.Image = null;
            this.chkG6ATT_6dB.Name = "chkG6ATT_6dB";
            this.toolTip1.SetToolTip(this.chkG6ATT_6dB, resources.GetString("chkG6ATT_6dB.ToolTip"));
            this.chkG6ATT_6dB.UseVisualStyleBackColor = true;
            this.chkG6ATT_6dB.CheckedChanged += new System.EventHandler(this.chkG6ATT_CheckedChanged);
            // 
            // chkG6AF
            // 
            resources.ApplyResources(this.chkG6AF, "chkG6AF");
            this.chkG6AF.FlatAppearance.BorderSize = 0;
            this.chkG6AF.Image = null;
            this.chkG6AF.Name = "chkG6AF";
            this.toolTip1.SetToolTip(this.chkG6AF, resources.GetString("chkG6AF.ToolTip"));
            this.chkG6AF.UseVisualStyleBackColor = true;
            this.chkG6AF.CheckedChanged += new System.EventHandler(this.chkG6AF_CheckedChanged);
            // 
            // chkG6RF
            // 
            resources.ApplyResources(this.chkG6RF, "chkG6RF");
            this.chkG6RF.FlatAppearance.BorderSize = 0;
            this.chkG6RF.Image = null;
            this.chkG6RF.Name = "chkG6RF";
            this.toolTip1.SetToolTip(this.chkG6RF, resources.GetString("chkG6RF.ToolTip"));
            this.chkG6RF.UseVisualStyleBackColor = true;
            this.chkG6RF.CheckedChanged += new System.EventHandler(this.chkG6RF_CheckedChanged);
            // 
            // chkWFMstereo
            // 
            resources.ApplyResources(this.chkWFMstereo, "chkWFMstereo");
            this.chkWFMstereo.Image = null;
            this.chkWFMstereo.Name = "chkWFMstereo";
            this.toolTip1.SetToolTip(this.chkWFMstereo, resources.GetString("chkWFMstereo.ToolTip"));
            this.chkWFMstereo.UseVisualStyleBackColor = true;
            this.chkWFMstereo.CheckedChanged += new System.EventHandler(this.chkWFMstereo_CheckedChanged);
            // 
            // chkG6ATT_12dB
            // 
            resources.ApplyResources(this.chkG6ATT_12dB, "chkG6ATT_12dB");
            this.chkG6ATT_12dB.FlatAppearance.BorderSize = 0;
            this.chkG6ATT_12dB.Image = null;
            this.chkG6ATT_12dB.Name = "chkG6ATT_12dB";
            this.toolTip1.SetToolTip(this.chkG6ATT_12dB, resources.GetString("chkG6ATT_12dB.ToolTip"));
            this.chkG6ATT_12dB.UseVisualStyleBackColor = true;
            this.chkG6ATT_12dB.CheckedChanged += new System.EventHandler(this.chkG6ATT_12dB_CheckedChanged);
            // 
            // chkG6ATT_18dB
            // 
            resources.ApplyResources(this.chkG6ATT_18dB, "chkG6ATT_18dB");
            this.chkG6ATT_18dB.FlatAppearance.BorderSize = 0;
            this.chkG6ATT_18dB.Image = null;
            this.chkG6ATT_18dB.Name = "chkG6ATT_18dB";
            this.toolTip1.SetToolTip(this.chkG6ATT_18dB, resources.GetString("chkG6ATT_18dB.ToolTip"));
            this.chkG6ATT_18dB.UseVisualStyleBackColor = true;
            this.chkG6ATT_18dB.CheckedChanged += new System.EventHandler(this.chkG6ATT_18dB_CheckedChanged);
            // 
            // contextLOSCMenu
            // 
            this.contextLOSCMenu.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.xtal1ToolStripMenuItem});
            this.contextLOSCMenu.Name = "contextLOSCMenu";
            resources.ApplyResources(this.contextLOSCMenu, "contextLOSCMenu");
            // 
            // xtal1ToolStripMenuItem
            // 
            this.xtal1ToolStripMenuItem.Name = "xtal1ToolStripMenuItem";
            resources.ApplyResources(this.xtal1ToolStripMenuItem, "xtal1ToolStripMenuItem");
            this.xtal1ToolStripMenuItem.Click += new System.EventHandler(this.xtalToolStripMenuItem);
            // 
            // menuStrip1
            // 
            resources.ApplyResources(this.menuStrip1, "menuStrip1");
            this.menuStrip1.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.setupToolStripMenuItem,
            this.waveToolStripMenuItem,
            this.equalizerToolStripMenuItem,
            this.cWXToolStripMenuItem,
            this.voiceMessagesToolStripMenuItem,
            this.wizardToolStripMenuItem,
            this.minimalisticToolStripMenuItem,
            this.dXToolStripMenuItem,
            this.xTRVToolStripMenuItem,
            this.debugToolStripMenuItem,
            this.aboutToolStripMenuItem});
            this.menuStrip1.LayoutStyle = System.Windows.Forms.ToolStripLayoutStyle.HorizontalStackWithOverflow;
            this.menuStrip1.Name = "menuStrip1";
            this.menuStrip1.RenderMode = System.Windows.Forms.ToolStripRenderMode.System;
            // 
            // setupToolStripMenuItem
            // 
            this.setupToolStripMenuItem.Name = "setupToolStripMenuItem";
            resources.ApplyResources(this.setupToolStripMenuItem, "setupToolStripMenuItem");
            this.setupToolStripMenuItem.Click += new System.EventHandler(this.menu_setup_Click);
            // 
            // waveToolStripMenuItem
            // 
            this.waveToolStripMenuItem.Name = "waveToolStripMenuItem";
            resources.ApplyResources(this.waveToolStripMenuItem, "waveToolStripMenuItem");
            this.waveToolStripMenuItem.Click += new System.EventHandler(this.menu_wave_Click);
            // 
            // equalizerToolStripMenuItem
            // 
            this.equalizerToolStripMenuItem.Name = "equalizerToolStripMenuItem";
            resources.ApplyResources(this.equalizerToolStripMenuItem, "equalizerToolStripMenuItem");
            this.equalizerToolStripMenuItem.Click += new System.EventHandler(this.mnuEQ_Click);
            // 
            // cWXToolStripMenuItem
            // 
            this.cWXToolStripMenuItem.Name = "cWXToolStripMenuItem";
            resources.ApplyResources(this.cWXToolStripMenuItem, "cWXToolStripMenuItem");
            this.cWXToolStripMenuItem.Click += new System.EventHandler(this.mnuCWX_Click);
            // 
            // voiceMessagesToolStripMenuItem
            // 
            this.voiceMessagesToolStripMenuItem.Name = "voiceMessagesToolStripMenuItem";
            resources.ApplyResources(this.voiceMessagesToolStripMenuItem, "voiceMessagesToolStripMenuItem");
            this.voiceMessagesToolStripMenuItem.Click += new System.EventHandler(this.mnuVoiceMessages_Click);
            // 
            // wizardToolStripMenuItem
            // 
            this.wizardToolStripMenuItem.Name = "wizardToolStripMenuItem";
            resources.ApplyResources(this.wizardToolStripMenuItem, "wizardToolStripMenuItem");
            this.wizardToolStripMenuItem.Click += new System.EventHandler(this.mnuWizard_Click);
            // 
            // minimalisticToolStripMenuItem
            // 
            this.minimalisticToolStripMenuItem.Name = "minimalisticToolStripMenuItem";
            resources.ApplyResources(this.minimalisticToolStripMenuItem, "minimalisticToolStripMenuItem");
            this.minimalisticToolStripMenuItem.Click += new System.EventHandler(this.minimalisticToolStripMenuItem_Click);
            // 
            // dXToolStripMenuItem
            // 
            this.dXToolStripMenuItem.Name = "dXToolStripMenuItem";
            resources.ApplyResources(this.dXToolStripMenuItem, "dXToolStripMenuItem");
            this.dXToolStripMenuItem.Click += new System.EventHandler(this.dXToolStripMenuItem_Click);
            // 
            // xTRVToolStripMenuItem
            // 
            this.xTRVToolStripMenuItem.Name = "xTRVToolStripMenuItem";
            resources.ApplyResources(this.xTRVToolStripMenuItem, "xTRVToolStripMenuItem");
            this.xTRVToolStripMenuItem.Click += new System.EventHandler(this.xTRVToolStripMenuItem_Click);
            // 
            // debugToolStripMenuItem
            // 
            this.debugToolStripMenuItem.Name = "debugToolStripMenuItem";
            resources.ApplyResources(this.debugToolStripMenuItem, "debugToolStripMenuItem");
            this.debugToolStripMenuItem.Click += new System.EventHandler(this.debugToolStripMenuItem_Click);
            // 
            // aboutToolStripMenuItem
            // 
            this.aboutToolStripMenuItem.Name = "aboutToolStripMenuItem";
            resources.ApplyResources(this.aboutToolStripMenuItem, "aboutToolStripMenuItem");
            this.aboutToolStripMenuItem.Click += new System.EventHandler(this.mnuAbout_Click);
            // 
            // mnuSetup
            // 
            this.mnuSetup.Index = -1;
            resources.ApplyResources(this.mnuSetup, "mnuSetup");
            this.mnuSetup.Click += new System.EventHandler(this.menu_setup_Click);
            // 
            // contextNewVFOSmeter
            // 
            this.contextNewVFOSmeter.BackColor = System.Drawing.SystemColors.Control;
            this.contextNewVFOSmeter.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolStripTextBox1,
            this.toolStripNewVFOSmeterRX,
            this.toolStripTextBox2,
            this.toolStripNewVFOSmeterTX});
            this.contextNewVFOSmeter.Name = "contextNewVFOSmeter";
            resources.ApplyResources(this.contextNewVFOSmeter, "contextNewVFOSmeter");
            // 
            // toolStripTextBox1
            // 
            this.toolStripTextBox1.BackColor = System.Drawing.Color.SteelBlue;
            this.toolStripTextBox1.ForeColor = System.Drawing.Color.White;
            this.toolStripTextBox1.Name = "toolStripTextBox1";
            resources.ApplyResources(this.toolStripTextBox1, "toolStripTextBox1");
            // 
            // toolStripNewVFOSmeterRX
            // 
            this.toolStripNewVFOSmeterRX.Name = "toolStripNewVFOSmeterRX";
            resources.ApplyResources(this.toolStripNewVFOSmeterRX, "toolStripNewVFOSmeterRX");
            this.toolStripNewVFOSmeterRX.SelectedIndexChanged += new System.EventHandler(this.NewVFOAnalogSignalGaugeRXmode);
            // 
            // toolStripTextBox2
            // 
            this.toolStripTextBox2.BackColor = System.Drawing.Color.Red;
            this.toolStripTextBox2.ForeColor = System.Drawing.Color.White;
            this.toolStripTextBox2.Name = "toolStripTextBox2";
            resources.ApplyResources(this.toolStripTextBox2, "toolStripTextBox2");
            // 
            // toolStripNewVFOSmeterTX
            // 
            this.toolStripNewVFOSmeterTX.Name = "toolStripNewVFOSmeterTX";
            resources.ApplyResources(this.toolStripNewVFOSmeterTX, "toolStripNewVFOSmeterTX");
            this.toolStripNewVFOSmeterTX.SelectedIndexChanged += new System.EventHandler(this.NewVFOAnalogSignalGaugeTXMode);
            // 
            // grpG500
            // 
            this.grpG500.Controls.Add(this.btnG500_X1);
            resources.ApplyResources(this.grpG500, "grpG500");
            this.grpG500.Name = "grpG500";
            this.grpG500.TabStop = false;
            // 
            // btnG500_X1
            // 
            resources.ApplyResources(this.btnG500_X1, "btnG500_X1");
            this.btnG500_X1.FlatAppearance.BorderSize = 0;
            this.btnG500_X1.Image = null;
            this.btnG500_X1.Name = "btnG500_X1";
            this.btnG500_X1.UseVisualStyleBackColor = true;
            this.btnG500_X1.Click += new System.EventHandler(this.btnG500_X1_Click);
            // 
            // grpG137
            // 
            this.grpG137.Controls.Add(this.btnG137_X1);
            resources.ApplyResources(this.grpG137, "grpG137");
            this.grpG137.Name = "grpG137";
            this.grpG137.TabStop = false;
            // 
            // btnG137_X1
            // 
            resources.ApplyResources(this.btnG137_X1, "btnG137_X1");
            this.btnG137_X1.FlatAppearance.BorderSize = 0;
            this.btnG137_X1.Image = null;
            this.btnG137_X1.Name = "btnG137_X1";
            this.btnG137_X1.UseVisualStyleBackColor = true;
            this.btnG137_X1.Click += new System.EventHandler(this.btnG137_X1_Click);
            // 
            // grpG40
            // 
            this.grpG40.Controls.Add(this.btnG40_X1);
            resources.ApplyResources(this.grpG40, "grpG40");
            this.grpG40.Name = "grpG40";
            this.grpG40.TabStop = false;
            // 
            // btnG40_X1
            // 
            resources.ApplyResources(this.btnG40_X1, "btnG40_X1");
            this.btnG40_X1.FlatAppearance.BorderSize = 0;
            this.btnG40_X1.Image = null;
            this.btnG40_X1.Name = "btnG40_X1";
            this.btnG40_X1.UseVisualStyleBackColor = true;
            this.btnG40_X1.Click += new System.EventHandler(this.btnG40_X1_Click);
            // 
            // grpModeSpecificPhone
            // 
            resources.ApplyResources(this.grpModeSpecificPhone, "grpModeSpecificPhone");
            this.grpModeSpecificPhone.Controls.Add(this.groupBoxTS1);
            this.grpModeSpecificPhone.Controls.Add(this.udNoiseGate);
            this.grpModeSpecificPhone.Controls.Add(this.udVOX);
            this.grpModeSpecificPhone.Controls.Add(this.ptbMIC);
            this.grpModeSpecificPhone.Controls.Add(this.udCPDR);
            this.grpModeSpecificPhone.Controls.Add(this.ptbCPDR);
            this.grpModeSpecificPhone.Controls.Add(this.udCOMP);
            this.grpModeSpecificPhone.Controls.Add(this.ptbCOMP);
            this.grpModeSpecificPhone.Controls.Add(this.picNoiseGate);
            this.grpModeSpecificPhone.Controls.Add(this.ptbNoiseGate);
            this.grpModeSpecificPhone.Controls.Add(this.picVOX);
            this.grpModeSpecificPhone.Controls.Add(this.ptbVOX);
            this.grpModeSpecificPhone.Controls.Add(this.udMIC);
            this.grpModeSpecificPhone.Controls.Add(this.chkNoiseGate);
            this.grpModeSpecificPhone.Controls.Add(this.chkVOX);
            this.grpModeSpecificPhone.Controls.Add(this.lblMIC);
            this.grpModeSpecificPhone.Controls.Add(this.chkDSPComp);
            this.grpModeSpecificPhone.Controls.Add(this.chkDSPCompander);
            this.grpModeSpecificPhone.Controls.Add(this.comboTXProfile);
            this.grpModeSpecificPhone.Controls.Add(this.lblTransmitProfile);
            this.grpModeSpecificPhone.Controls.Add(this.chkShowTXFilter);
            this.grpModeSpecificPhone.Name = "grpModeSpecificPhone";
            this.grpModeSpecificPhone.TabStop = false;
            // 
            // groupBoxTS1
            // 
            this.groupBoxTS1.Controls.Add(this.btnMsg6);
            this.groupBoxTS1.Controls.Add(this.btnMsg5);
            this.groupBoxTS1.Controls.Add(this.btnMsg4);
            this.groupBoxTS1.Controls.Add(this.btnMsg3);
            this.groupBoxTS1.Controls.Add(this.btnMsg2);
            this.groupBoxTS1.Controls.Add(this.btnMsg1);
            resources.ApplyResources(this.groupBoxTS1, "groupBoxTS1");
            this.groupBoxTS1.Name = "groupBoxTS1";
            this.groupBoxTS1.TabStop = false;
            // 
            // btnMsg6
            // 
            resources.ApplyResources(this.btnMsg6, "btnMsg6");
            this.btnMsg6.FlatAppearance.BorderSize = 0;
            this.btnMsg6.Image = null;
            this.btnMsg6.Name = "btnMsg6";
            this.btnMsg6.UseVisualStyleBackColor = true;
            this.btnMsg6.Click += new System.EventHandler(this.btnMsg6_Click);
            this.btnMsg6.MouseHover += new System.EventHandler(this.btnMsg6_MouseHover);
            // 
            // btnMsg5
            // 
            resources.ApplyResources(this.btnMsg5, "btnMsg5");
            this.btnMsg5.FlatAppearance.BorderSize = 0;
            this.btnMsg5.Image = null;
            this.btnMsg5.Name = "btnMsg5";
            this.btnMsg5.UseVisualStyleBackColor = true;
            this.btnMsg5.Click += new System.EventHandler(this.btnMsg5_Click);
            this.btnMsg5.MouseHover += new System.EventHandler(this.btnMsg5_MouseHover);
            // 
            // btnMsg4
            // 
            resources.ApplyResources(this.btnMsg4, "btnMsg4");
            this.btnMsg4.FlatAppearance.BorderSize = 0;
            this.btnMsg4.Image = null;
            this.btnMsg4.Name = "btnMsg4";
            this.btnMsg4.UseVisualStyleBackColor = true;
            this.btnMsg4.Click += new System.EventHandler(this.btnMsg4_Click);
            this.btnMsg4.MouseHover += new System.EventHandler(this.btnMsg4_MousHover);
            // 
            // btnMsg3
            // 
            resources.ApplyResources(this.btnMsg3, "btnMsg3");
            this.btnMsg3.FlatAppearance.BorderSize = 0;
            this.btnMsg3.Image = null;
            this.btnMsg3.Name = "btnMsg3";
            this.btnMsg3.UseVisualStyleBackColor = true;
            this.btnMsg3.Click += new System.EventHandler(this.btnMsg3_Click);
            this.btnMsg3.MouseHover += new System.EventHandler(this.btnMsg3_MouseHover);
            // 
            // btnMsg2
            // 
            resources.ApplyResources(this.btnMsg2, "btnMsg2");
            this.btnMsg2.FlatAppearance.BorderSize = 0;
            this.btnMsg2.Image = null;
            this.btnMsg2.Name = "btnMsg2";
            this.btnMsg2.UseVisualStyleBackColor = true;
            this.btnMsg2.Click += new System.EventHandler(this.btnMsg2_Click);
            this.btnMsg2.MouseHover += new System.EventHandler(this.btnMsg2_MouseHover);
            // 
            // btnMsg1
            // 
            resources.ApplyResources(this.btnMsg1, "btnMsg1");
            this.btnMsg1.FlatAppearance.BorderSize = 0;
            this.btnMsg1.ForeColor = System.Drawing.SystemColors.ControlText;
            this.btnMsg1.Image = null;
            this.btnMsg1.Name = "btnMsg1";
            this.btnMsg1.UseVisualStyleBackColor = false;
            this.btnMsg1.Click += new System.EventHandler(this.btnMsg1_Click);
            this.btnMsg1.MouseHover += new System.EventHandler(this.btnMsg1_MouseHover);
            // 
            // udNoiseGate
            // 
            this.udNoiseGate.BackColor = System.Drawing.SystemColors.Window;
            this.udNoiseGate.ForeColor = System.Drawing.SystemColors.ControlText;
            this.udNoiseGate.Increment = new decimal(new int[] {
            1,
            0,
            0,
            0});
            resources.ApplyResources(this.udNoiseGate, "udNoiseGate");
            this.udNoiseGate.Maximum = new decimal(new int[] {
            0,
            0,
            0,
            0});
            this.udNoiseGate.Minimum = new decimal(new int[] {
            160,
            0,
            0,
            -2147483648});
            this.udNoiseGate.Name = "udNoiseGate";
            this.udNoiseGate.Value = new decimal(new int[] {
            40,
            0,
            0,
            -2147483648});
            this.udNoiseGate.ValueChanged += new System.EventHandler(this.udNoiseGate_ValueChanged);
            // 
            // udVOX
            // 
            this.udVOX.BackColor = System.Drawing.SystemColors.Window;
            this.udVOX.ForeColor = System.Drawing.SystemColors.ControlText;
            this.udVOX.Increment = new decimal(new int[] {
            1,
            0,
            0,
            0});
            resources.ApplyResources(this.udVOX, "udVOX");
            this.udVOX.Maximum = new decimal(new int[] {
            1000,
            0,
            0,
            0});
            this.udVOX.Minimum = new decimal(new int[] {
            0,
            0,
            0,
            0});
            this.udVOX.Name = "udVOX";
            this.udVOX.Value = new decimal(new int[] {
            200,
            0,
            0,
            0});
            this.udVOX.ValueChanged += new System.EventHandler(this.udVOX_ValueChanged);
            // 
            // ptbMIC
            // 
            resources.ApplyResources(this.ptbMIC, "ptbMIC");
            this.ptbMIC.HeadImage = null;
            this.ptbMIC.LargeChange = 1;
            this.ptbMIC.Maximum = 70;
            this.ptbMIC.Minimum = 0;
            this.ptbMIC.Name = "ptbMIC";
            this.ptbMIC.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.ptbMIC.SmallChange = 1;
            this.ptbMIC.TabStop = false;
            this.ptbMIC.Value = 35;
            this.ptbMIC.OnWheel += new PowerSDR.PrettyTrackBar.WheelHandler(this.tbMIC_OnWheel);
            this.ptbMIC.Scroll += new PowerSDR.PrettyTrackBar.ScrollHandler(this.tbMIC_Scroll);
            // 
            // udCPDR
            // 
            this.udCPDR.BackColor = System.Drawing.SystemColors.Window;
            this.udCPDR.ForeColor = System.Drawing.SystemColors.ControlText;
            this.udCPDR.Increment = new decimal(new int[] {
            1,
            0,
            0,
            0});
            resources.ApplyResources(this.udCPDR, "udCPDR");
            this.udCPDR.Maximum = new decimal(new int[] {
            10,
            0,
            0,
            0});
            this.udCPDR.Minimum = new decimal(new int[] {
            0,
            0,
            0,
            0});
            this.udCPDR.Name = "udCPDR";
            this.udCPDR.Value = new decimal(new int[] {
            3,
            0,
            0,
            0});
            this.udCPDR.ValueChanged += new System.EventHandler(this.udCPDR_ValueChanged);
            // 
            // ptbCPDR
            // 
            resources.ApplyResources(this.ptbCPDR, "ptbCPDR");
            this.ptbCPDR.HeadImage = null;
            this.ptbCPDR.LargeChange = 1;
            this.ptbCPDR.Maximum = 10;
            this.ptbCPDR.Minimum = 0;
            this.ptbCPDR.Name = "ptbCPDR";
            this.ptbCPDR.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.ptbCPDR.SmallChange = 1;
            this.ptbCPDR.TabStop = false;
            this.ptbCPDR.Value = 3;
            this.ptbCPDR.OnWheel += new PowerSDR.PrettyTrackBar.WheelHandler(this.tbCPDR_OnWheel);
            this.ptbCPDR.Scroll += new PowerSDR.PrettyTrackBar.ScrollHandler(this.tbCPDR_Scroll);
            // 
            // udCOMP
            // 
            this.udCOMP.BackColor = System.Drawing.SystemColors.Window;
            this.udCOMP.ForeColor = System.Drawing.SystemColors.ControlText;
            this.udCOMP.Increment = new decimal(new int[] {
            1,
            0,
            0,
            0});
            resources.ApplyResources(this.udCOMP, "udCOMP");
            this.udCOMP.Maximum = new decimal(new int[] {
            20,
            0,
            0,
            0});
            this.udCOMP.Minimum = new decimal(new int[] {
            0,
            0,
            0,
            0});
            this.udCOMP.Name = "udCOMP";
            this.udCOMP.Value = new decimal(new int[] {
            3,
            0,
            0,
            0});
            this.udCOMP.ValueChanged += new System.EventHandler(this.udCOMP_ValueChanged);
            // 
            // ptbCOMP
            // 
            resources.ApplyResources(this.ptbCOMP, "ptbCOMP");
            this.ptbCOMP.HeadImage = null;
            this.ptbCOMP.LargeChange = 1;
            this.ptbCOMP.Maximum = 20;
            this.ptbCOMP.Minimum = 0;
            this.ptbCOMP.Name = "ptbCOMP";
            this.ptbCOMP.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.ptbCOMP.SmallChange = 1;
            this.ptbCOMP.TabStop = false;
            this.ptbCOMP.Value = 3;
            this.ptbCOMP.OnWheel += new PowerSDR.PrettyTrackBar.WheelHandler(this.tbCOMP_OnWheel);
            this.ptbCOMP.Scroll += new PowerSDR.PrettyTrackBar.ScrollHandler(this.tbCOMP_Scroll);
            // 
            // picNoiseGate
            // 
            this.picNoiseGate.BackColor = System.Drawing.SystemColors.ControlText;
            resources.ApplyResources(this.picNoiseGate, "picNoiseGate");
            this.picNoiseGate.Name = "picNoiseGate";
            this.picNoiseGate.TabStop = false;
            this.picNoiseGate.Paint += new System.Windows.Forms.PaintEventHandler(this.picNoiseGate_Paint);
            // 
            // ptbNoiseGate
            // 
            resources.ApplyResources(this.ptbNoiseGate, "ptbNoiseGate");
            this.ptbNoiseGate.HeadImage = null;
            this.ptbNoiseGate.LargeChange = 1;
            this.ptbNoiseGate.Maximum = 0;
            this.ptbNoiseGate.Minimum = -160;
            this.ptbNoiseGate.Name = "ptbNoiseGate";
            this.ptbNoiseGate.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.ptbNoiseGate.SmallChange = 1;
            this.ptbNoiseGate.TabStop = false;
            this.ptbNoiseGate.Value = -40;
            this.ptbNoiseGate.OnWheel += new PowerSDR.PrettyTrackBar.WheelHandler(this.tbNoiseGate_OnWheel);
            this.ptbNoiseGate.Scroll += new PowerSDR.PrettyTrackBar.ScrollHandler(this.tbNoiseGate_Scroll);
            // 
            // picVOX
            // 
            this.picVOX.BackColor = System.Drawing.SystemColors.ControlText;
            resources.ApplyResources(this.picVOX, "picVOX");
            this.picVOX.Name = "picVOX";
            this.picVOX.TabStop = false;
            this.picVOX.Paint += new System.Windows.Forms.PaintEventHandler(this.picVOX_Paint);
            // 
            // ptbVOX
            // 
            resources.ApplyResources(this.ptbVOX, "ptbVOX");
            this.ptbVOX.HeadImage = null;
            this.ptbVOX.LargeChange = 1;
            this.ptbVOX.Maximum = 1000;
            this.ptbVOX.Minimum = 0;
            this.ptbVOX.Name = "ptbVOX";
            this.ptbVOX.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.ptbVOX.SmallChange = 1;
            this.ptbVOX.TabStop = false;
            this.ptbVOX.Value = 200;
            this.ptbVOX.OnWheel += new PowerSDR.PrettyTrackBar.WheelHandler(this.tbVOX_OnWheel);
            this.ptbVOX.Scroll += new PowerSDR.PrettyTrackBar.ScrollHandler(this.tbVOX_Scroll);
            // 
            // udMIC
            // 
            this.udMIC.BackColor = System.Drawing.SystemColors.Window;
            this.udMIC.ForeColor = System.Drawing.SystemColors.ControlText;
            this.udMIC.Increment = new decimal(new int[] {
            1,
            0,
            0,
            0});
            resources.ApplyResources(this.udMIC, "udMIC");
            this.udMIC.Maximum = new decimal(new int[] {
            70,
            0,
            0,
            0});
            this.udMIC.Minimum = new decimal(new int[] {
            0,
            0,
            0,
            0});
            this.udMIC.Name = "udMIC";
            this.udMIC.Value = new decimal(new int[] {
            35,
            0,
            0,
            0});
            this.udMIC.ValueChanged += new System.EventHandler(this.udMIC_ValueChanged);
            this.udMIC.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.Console_KeyPress);
            this.udMIC.LostFocus += new System.EventHandler(this.udMIC_LostFocus);
            // 
            // lblMIC
            // 
            this.lblMIC.Image = null;
            resources.ApplyResources(this.lblMIC, "lblMIC");
            this.lblMIC.Name = "lblMIC";
            // 
            // lblTransmitProfile
            // 
            this.lblTransmitProfile.Image = null;
            resources.ApplyResources(this.lblTransmitProfile, "lblTransmitProfile");
            this.lblTransmitProfile.Name = "lblTransmitProfile";
            // 
            // grpVFOA
            // 
            this.grpVFOA.BackColor = System.Drawing.SystemColors.Control;
            resources.ApplyResources(this.grpVFOA, "grpVFOA");
            this.grpVFOA.Controls.Add(this.panelVFOAHover);
            this.grpVFOA.Controls.Add(this.txtVFOALSD);
            this.grpVFOA.Controls.Add(this.txtVFOAMSD);
            this.grpVFOA.Controls.Add(this.txtVFOABand);
            this.grpVFOA.Controls.Add(this.txtVFOAFreq);
            this.grpVFOA.Controls.Add(this.btnHidden);
            this.grpVFOA.ForeColor = System.Drawing.Color.Black;
            this.grpVFOA.Name = "grpVFOA";
            this.grpVFOA.TabStop = false;
            // 
            // panelVFOAHover
            // 
            resources.ApplyResources(this.panelVFOAHover, "panelVFOAHover");
            this.panelVFOAHover.BackColor = System.Drawing.Color.Black;
            this.panelVFOAHover.Name = "panelVFOAHover";
            this.panelVFOAHover.Paint += new System.Windows.Forms.PaintEventHandler(this.panelVFOAHover_Paint);
            this.panelVFOAHover.MouseMove += new System.Windows.Forms.MouseEventHandler(this.panelVFOAHover_MouseMove);
            // 
            // txtVFOALSD
            // 
            this.txtVFOALSD.BackColor = System.Drawing.Color.Black;
            this.txtVFOALSD.BorderStyle = System.Windows.Forms.BorderStyle.None;
            this.txtVFOALSD.Cursor = System.Windows.Forms.Cursors.Default;
            resources.ApplyResources(this.txtVFOALSD, "txtVFOALSD");
            this.txtVFOALSD.ForeColor = System.Drawing.Color.Olive;
            this.txtVFOALSD.Name = "txtVFOALSD";
            this.txtVFOALSD.MouseMove += new System.Windows.Forms.MouseEventHandler(this.txtVFOALSD_MouseMove);
            this.txtVFOALSD.MouseDown += new System.Windows.Forms.MouseEventHandler(this.txtVFOALSD_MouseDown);
            // 
            // txtVFOAMSD
            // 
            this.txtVFOAMSD.BackColor = System.Drawing.Color.Black;
            this.txtVFOAMSD.Cursor = System.Windows.Forms.Cursors.Default;
            resources.ApplyResources(this.txtVFOAMSD, "txtVFOAMSD");
            this.txtVFOAMSD.ForeColor = System.Drawing.Color.Olive;
            this.txtVFOAMSD.Name = "txtVFOAMSD";
            this.txtVFOAMSD.MouseLeave += new System.EventHandler(this.txtVFOAMSD_MouseLeave);
            this.txtVFOAMSD.MouseMove += new System.Windows.Forms.MouseEventHandler(this.txtVFOAMSD_MouseMove);
            this.txtVFOAMSD.MouseDown += new System.Windows.Forms.MouseEventHandler(this.txtVFOAMSD_MouseDown);
            // 
            // txtVFOABand
            // 
            this.txtVFOABand.BackColor = System.Drawing.Color.Black;
            resources.ApplyResources(this.txtVFOABand, "txtVFOABand");
            this.txtVFOABand.ForeColor = System.Drawing.Color.Green;
            this.txtVFOABand.Name = "txtVFOABand";
            this.txtVFOABand.GotFocus += new System.EventHandler(this.HideFocus);
            // 
            // txtVFOAFreq
            // 
            this.txtVFOAFreq.BackColor = System.Drawing.Color.Black;
            this.txtVFOAFreq.Cursor = System.Windows.Forms.Cursors.Default;
            resources.ApplyResources(this.txtVFOAFreq, "txtVFOAFreq");
            this.txtVFOAFreq.ForeColor = System.Drawing.Color.Olive;
            this.txtVFOAFreq.Name = "txtVFOAFreq";
            this.txtVFOAFreq.MouseLeave += new System.EventHandler(this.txtVFOAFreq_MouseLeave);
            this.txtVFOAFreq.MouseMove += new System.Windows.Forms.MouseEventHandler(this.txtVFOAFreq_MouseMove);
            this.txtVFOAFreq.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.txtVFOAFreq_KeyPress);
            this.txtVFOAFreq.LostFocus += new System.EventHandler(this.txtVFOAFreq_LostFocus);
            // 
            // btnHidden
            // 
            this.btnHidden.Image = null;
            resources.ApplyResources(this.btnHidden, "btnHidden");
            this.btnHidden.Name = "btnHidden";
            this.btnHidden.UseVisualStyleBackColor = true;
            // 
            // grpVFOnew
            // 
            resources.ApplyResources(this.grpVFOnew, "grpVFOnew");
            this.grpVFOnew.Controls.Add(this.picAGauge);
            this.grpVFOnew.Controls.Add(this.lblATTNewVFO);
            this.grpVFOnew.Controls.Add(this.lblRFNewVFO);
            this.grpVFOnew.Controls.Add(this.lblAFNewVFO);
            this.grpVFOnew.Controls.Add(this.lblRX2);
            this.grpVFOnew.Controls.Add(this.txtNewVFOBand);
            this.grpVFOnew.Controls.Add(this.lblVFOBTX);
            this.grpVFOnew.Controls.Add(this.lblVFOATX);
            this.grpVFOnew.Controls.Add(this.lblLOSC);
            this.grpVFOnew.Controls.Add(this.lblVFOB);
            this.grpVFOnew.Controls.Add(this.lblVFOA);
            this.grpVFOnew.Controls.Add(this.panelLOSCnewHover);
            this.grpVFOnew.Controls.Add(this.panelVFOBnewHover);
            this.grpVFOnew.Controls.Add(this.panelVFOAnewHover);
            this.grpVFOnew.Controls.Add(this.txtLOSCnew);
            this.grpVFOnew.Controls.Add(this.txtVFOBnew);
            this.grpVFOnew.Controls.Add(this.txtVFOAnew);
            this.grpVFOnew.Controls.Add(this.sMeterDigital1);
            this.grpVFOnew.Controls.Add(this.sMeterDigital2);
            this.grpVFOnew.Name = "grpVFOnew";
            this.grpVFOnew.TabStop = false;
            // 
            // picAGauge
            // 
            this.picAGauge.BackColor = System.Drawing.Color.Black;
            resources.ApplyResources(this.picAGauge, "picAGauge");
            this.picAGauge.ContextMenuStrip = this.contextNewVFOSmeter;
            this.picAGauge.Name = "picAGauge";
            this.picAGauge.TabStop = false;
            this.picAGauge.Paint += new System.Windows.Forms.PaintEventHandler(this.picAGauge_Paint);
            // 
            // lblATTNewVFO
            // 
            resources.ApplyResources(this.lblATTNewVFO, "lblATTNewVFO");
            this.lblATTNewVFO.BackColor = System.Drawing.Color.Black;
            this.lblATTNewVFO.ForeColor = System.Drawing.Color.Olive;
            this.lblATTNewVFO.Image = null;
            this.lblATTNewVFO.Name = "lblATTNewVFO";
            this.lblATTNewVFO.Click += new System.EventHandler(this.lblATTNewVFO_Click);
            // 
            // lblRFNewVFO
            // 
            resources.ApplyResources(this.lblRFNewVFO, "lblRFNewVFO");
            this.lblRFNewVFO.BackColor = System.Drawing.Color.Black;
            this.lblRFNewVFO.ForeColor = System.Drawing.Color.Olive;
            this.lblRFNewVFO.Image = null;
            this.lblRFNewVFO.Name = "lblRFNewVFO";
            this.lblRFNewVFO.Click += new System.EventHandler(this.lblRFNewVFO_Click);
            // 
            // lblAFNewVFO
            // 
            resources.ApplyResources(this.lblAFNewVFO, "lblAFNewVFO");
            this.lblAFNewVFO.BackColor = System.Drawing.Color.Black;
            this.lblAFNewVFO.ForeColor = System.Drawing.Color.Olive;
            this.lblAFNewVFO.Image = null;
            this.lblAFNewVFO.Name = "lblAFNewVFO";
            this.lblAFNewVFO.Click += new System.EventHandler(this.lblAFNewVFO_Click);
            // 
            // txtNewVFOBand
            // 
            this.txtNewVFOBand.BackColor = System.Drawing.Color.Black;
            this.txtNewVFOBand.BorderStyle = System.Windows.Forms.BorderStyle.None;
            this.txtNewVFOBand.Cursor = System.Windows.Forms.Cursors.IBeam;
            resources.ApplyResources(this.txtNewVFOBand, "txtNewVFOBand");
            this.txtNewVFOBand.ForeColor = System.Drawing.Color.Green;
            this.txtNewVFOBand.Name = "txtNewVFOBand";
            // 
            // lblVFOBTX
            // 
            resources.ApplyResources(this.lblVFOBTX, "lblVFOBTX");
            this.lblVFOBTX.BackColor = System.Drawing.Color.Black;
            this.lblVFOBTX.ForeColor = System.Drawing.Color.Olive;
            this.lblVFOBTX.Image = null;
            this.lblVFOBTX.Name = "lblVFOBTX";
            // 
            // lblVFOATX
            // 
            resources.ApplyResources(this.lblVFOATX, "lblVFOATX");
            this.lblVFOATX.BackColor = System.Drawing.Color.Black;
            this.lblVFOATX.ForeColor = System.Drawing.Color.Olive;
            this.lblVFOATX.Image = null;
            this.lblVFOATX.Name = "lblVFOATX";
            // 
            // lblLOSC
            // 
            resources.ApplyResources(this.lblLOSC, "lblLOSC");
            this.lblLOSC.BackColor = System.Drawing.Color.Black;
            this.lblLOSC.ForeColor = System.Drawing.Color.Olive;
            this.lblLOSC.Image = null;
            this.lblLOSC.Name = "lblLOSC";
            // 
            // lblVFOB
            // 
            resources.ApplyResources(this.lblVFOB, "lblVFOB");
            this.lblVFOB.BackColor = System.Drawing.Color.Black;
            this.lblVFOB.ForeColor = System.Drawing.Color.Olive;
            this.lblVFOB.Image = null;
            this.lblVFOB.Name = "lblVFOB";
            // 
            // lblVFOA
            // 
            resources.ApplyResources(this.lblVFOA, "lblVFOA");
            this.lblVFOA.BackColor = System.Drawing.Color.Black;
            this.lblVFOA.ForeColor = System.Drawing.Color.Olive;
            this.lblVFOA.Image = null;
            this.lblVFOA.Name = "lblVFOA";
            // 
            // panelLOSCnewHover
            // 
            resources.ApplyResources(this.panelLOSCnewHover, "panelLOSCnewHover");
            this.panelLOSCnewHover.BackColor = System.Drawing.Color.Black;
            this.panelLOSCnewHover.Name = "panelLOSCnewHover";
            this.panelLOSCnewHover.Paint += new System.Windows.Forms.PaintEventHandler(this.panelLOSCnew_Paint);
            this.panelLOSCnewHover.MouseMove += new System.Windows.Forms.MouseEventHandler(this.panelLOSCnewHover_MouseMove);
            // 
            // panelVFOBnewHover
            // 
            resources.ApplyResources(this.panelVFOBnewHover, "panelVFOBnewHover");
            this.panelVFOBnewHover.BackColor = System.Drawing.Color.Black;
            this.panelVFOBnewHover.Name = "panelVFOBnewHover";
            this.panelVFOBnewHover.Paint += new System.Windows.Forms.PaintEventHandler(this.panelVFOBnewHover_Paint);
            this.panelVFOBnewHover.MouseMove += new System.Windows.Forms.MouseEventHandler(this.panelVFOBnewHover_MouseMove);
            // 
            // panelVFOAnewHover
            // 
            resources.ApplyResources(this.panelVFOAnewHover, "panelVFOAnewHover");
            this.panelVFOAnewHover.BackColor = System.Drawing.Color.Black;
            this.panelVFOAnewHover.Name = "panelVFOAnewHover";
            this.panelVFOAnewHover.Paint += new System.Windows.Forms.PaintEventHandler(this.panelVFOAnewHover_Paint);
            this.panelVFOAnewHover.MouseMove += new System.Windows.Forms.MouseEventHandler(this.panelVFOAnewHover_MouseMove);
            // 
            // txtLOSCnew
            // 
            this.txtLOSCnew.BackColor = System.Drawing.Color.Black;
            this.txtLOSCnew.BorderStyle = System.Windows.Forms.BorderStyle.None;
            this.txtLOSCnew.ContextMenuStrip = this.contextLOSCMenu;
            resources.ApplyResources(this.txtLOSCnew, "txtLOSCnew");
            this.txtLOSCnew.ForeColor = System.Drawing.Color.Olive;
            this.txtLOSCnew.Name = "txtLOSCnew";
            this.txtLOSCnew.MouseLeave += new System.EventHandler(this.txtLOSCnew_MouseLeave);
            this.txtLOSCnew.MouseMove += new System.Windows.Forms.MouseEventHandler(this.txtLOSCnew_MouseMove);
            this.txtLOSCnew.MouseDown += new System.Windows.Forms.MouseEventHandler(this.txtLOSCnew_MouseDown);
            this.txtLOSCnew.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.txtLOSCnew_KeyPress);
            this.txtLOSCnew.LostFocus += new System.EventHandler(this.txtLOSCnew_LostFocus);
            // 
            // txtVFOBnew
            // 
            this.txtVFOBnew.BackColor = System.Drawing.Color.Black;
            this.txtVFOBnew.BorderStyle = System.Windows.Forms.BorderStyle.None;
            resources.ApplyResources(this.txtVFOBnew, "txtVFOBnew");
            this.txtVFOBnew.ForeColor = System.Drawing.Color.Olive;
            this.txtVFOBnew.Name = "txtVFOBnew";
            this.txtVFOBnew.MouseLeave += new System.EventHandler(this.txtVFOBnew_MouseLeave);
            this.txtVFOBnew.MouseMove += new System.Windows.Forms.MouseEventHandler(this.txtVFOBnew_MouseMove);
            this.txtVFOBnew.MouseDown += new System.Windows.Forms.MouseEventHandler(this.txtVFOBnew_MouseDown);
            this.txtVFOBnew.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.txtVFOBnew_KeyPress);
            this.txtVFOBnew.LostFocus += new System.EventHandler(this.txtVFOBnew_LostFocus);
            // 
            // txtVFOAnew
            // 
            this.txtVFOAnew.BackColor = System.Drawing.Color.Black;
            this.txtVFOAnew.BorderStyle = System.Windows.Forms.BorderStyle.None;
            resources.ApplyResources(this.txtVFOAnew, "txtVFOAnew");
            this.txtVFOAnew.ForeColor = System.Drawing.Color.Olive;
            this.txtVFOAnew.Name = "txtVFOAnew";
            this.txtVFOAnew.MouseLeave += new System.EventHandler(this.txtVFOAnew_MouseLeave);
            this.txtVFOAnew.MouseMove += new System.Windows.Forms.MouseEventHandler(this.txtVFOAnew_MouseMove);
            this.txtVFOAnew.MouseDown += new System.Windows.Forms.MouseEventHandler(this.txtVFOAnew_MouseDown);
            this.txtVFOAnew.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.txtVFOAnew_KeyPress);
            this.txtVFOAnew.LostFocus += new System.EventHandler(this.txtVFOAnew_LostFocus);
            // 
            // sMeterDigital1
            // 
            this.sMeterDigital1.BackColor = System.Drawing.Color.Black;
            this.sMeterDigital1.ContextMenuStrip = this.contextNewVFOSmeter;
            resources.ApplyResources(this.sMeterDigital1, "sMeterDigital1");
            this.sMeterDigital1.MaximumSize = new System.Drawing.Size(240, 133);
            this.sMeterDigital1.MinimumSize = new System.Drawing.Size(240, 133);
            this.sMeterDigital1.Name = "sMeterDigital1";
            this.sMeterDigital1.SignalMaxValue = 180F;
            this.sMeterDigital1.SignalMinValue = 0F;
            this.sMeterDigital1.SignalValue = 0F;
            this.sMeterDigital1.swrMaxValue = 180F;
            this.sMeterDigital1.swrMinValue = 0F;
            this.sMeterDigital1.swrValue = 0F;
            // 
            // sMeterDigital2
            // 
            this.sMeterDigital2.BackColor = System.Drawing.Color.Black;
            this.sMeterDigital2.Brightness = 255;
            this.sMeterDigital2.ContextMenuStrip = this.contextNewVFOSmeter;
            resources.ApplyResources(this.sMeterDigital2, "sMeterDigital2");
            this.sMeterDigital2.MaximumSize = new System.Drawing.Size(240, 133);
            this.sMeterDigital2.MinimumSize = new System.Drawing.Size(240, 133);
            this.sMeterDigital2.Name = "sMeterDigital2";
            this.sMeterDigital2.SignalMaxValue = 224F;
            this.sMeterDigital2.SignalMinValue = 0F;
            this.sMeterDigital2.SignalValue = 0F;
            this.sMeterDigital2.swrMaxValue = 180F;
            this.sMeterDigital2.swrMinValue = 0F;
            this.sMeterDigital2.swrValue = 0F;
            // 
            // lblNotchShift
            // 
            resources.ApplyResources(this.lblNotchShift, "lblNotchShift");
            this.lblNotchShift.Image = null;
            this.lblNotchShift.Name = "lblNotchShift";
            // 
            // lblWidth
            // 
            resources.ApplyResources(this.lblWidth, "lblWidth");
            this.lblWidth.Image = null;
            this.lblWidth.Name = "lblWidth";
            // 
            // grpSoundControls
            // 
            resources.ApplyResources(this.grpSoundControls, "grpSoundControls");
            this.grpSoundControls.Controls.Add(this.lblAF);
            this.grpSoundControls.Controls.Add(this.lblPWRValue);
            this.grpSoundControls.Controls.Add(this.lblRFValue);
            this.grpSoundControls.Controls.Add(this.comboAGCSubRX);
            this.grpSoundControls.Controls.Add(this.picSQLSubRX);
            this.grpSoundControls.Controls.Add(this.ptbPWR);
            this.grpSoundControls.Controls.Add(this.comboAGCMainRX);
            this.grpSoundControls.Controls.Add(this.ptbRF);
            this.grpSoundControls.Controls.Add(this.ptbAF);
            this.grpSoundControls.Controls.Add(this.lblRF);
            this.grpSoundControls.Controls.Add(this.lblPWR);
            this.grpSoundControls.Controls.Add(this.lblAGC);
            this.grpSoundControls.Controls.Add(this.lblAFValue);
            this.grpSoundControls.Controls.Add(this.udSQLMainRX);
            this.grpSoundControls.Controls.Add(this.picSQLMainRX);
            this.grpSoundControls.Controls.Add(this.ptbSQLSubRX);
            this.grpSoundControls.Controls.Add(this.chkSQLSubRX);
            this.grpSoundControls.Controls.Add(this.udSQLSubRX);
            this.grpSoundControls.Controls.Add(this.ptbSQLMainRX);
            this.grpSoundControls.Controls.Add(this.chkSQLMainRX);
            this.grpSoundControls.Name = "grpSoundControls";
            this.grpSoundControls.TabStop = false;
            // 
            // lblAF
            // 
            resources.ApplyResources(this.lblAF, "lblAF");
            this.lblAF.Image = null;
            this.lblAF.Name = "lblAF";
            // 
            // lblPWRValue
            // 
            resources.ApplyResources(this.lblPWRValue, "lblPWRValue");
            this.lblPWRValue.BackColor = System.Drawing.Color.Transparent;
            this.lblPWRValue.ForeColor = System.Drawing.Color.Black;
            this.lblPWRValue.Image = null;
            this.lblPWRValue.Name = "lblPWRValue";
            this.lblPWRValue.MouseLeave += new System.EventHandler(this.lblPWRValue_MouseLeave);
            this.lblPWRValue.MouseHover += new System.EventHandler(this.lblPWRValue_MouseHover);
            // 
            // lblRFValue
            // 
            resources.ApplyResources(this.lblRFValue, "lblRFValue");
            this.lblRFValue.BackColor = System.Drawing.Color.Transparent;
            this.lblRFValue.ForeColor = System.Drawing.Color.Black;
            this.lblRFValue.Image = null;
            this.lblRFValue.Name = "lblRFValue";
            this.lblRFValue.MouseLeave += new System.EventHandler(this.lblRFValue_MouseLeave);
            this.lblRFValue.MouseHover += new System.EventHandler(this.lblRFValue_MouseHover);
            // 
            // picSQLSubRX
            // 
            this.picSQLSubRX.BackColor = System.Drawing.SystemColors.ControlText;
            resources.ApplyResources(this.picSQLSubRX, "picSQLSubRX");
            this.picSQLSubRX.Name = "picSQLSubRX";
            this.picSQLSubRX.TabStop = false;
            this.picSQLSubRX.Paint += new System.Windows.Forms.PaintEventHandler(this.picSQLSubRX_Paint);
            // 
            // lblRF
            // 
            resources.ApplyResources(this.lblRF, "lblRF");
            this.lblRF.Image = null;
            this.lblRF.Name = "lblRF";
            // 
            // lblPWR
            // 
            resources.ApplyResources(this.lblPWR, "lblPWR");
            this.lblPWR.Image = null;
            this.lblPWR.Name = "lblPWR";
            // 
            // lblAGC
            // 
            this.lblAGC.Image = null;
            resources.ApplyResources(this.lblAGC, "lblAGC");
            this.lblAGC.Name = "lblAGC";
            // 
            // lblAFValue
            // 
            resources.ApplyResources(this.lblAFValue, "lblAFValue");
            this.lblAFValue.BackColor = System.Drawing.Color.Transparent;
            this.lblAFValue.ForeColor = System.Drawing.Color.Black;
            this.lblAFValue.Image = null;
            this.lblAFValue.Name = "lblAFValue";
            this.lblAFValue.MouseLeave += new System.EventHandler(this.lblAFValue_MouseLeave);
            this.lblAFValue.MouseHover += new System.EventHandler(this.lblAFValue_MouseHover);
            // 
            // picSQLMainRX
            // 
            this.picSQLMainRX.BackColor = System.Drawing.SystemColors.ControlText;
            resources.ApplyResources(this.picSQLMainRX, "picSQLMainRX");
            this.picSQLMainRX.Name = "picSQLMainRX";
            this.picSQLMainRX.TabStop = false;
            this.picSQLMainRX.Paint += new System.Windows.Forms.PaintEventHandler(this.picSQL_Paint);
            // 
            // grpModeSpecificCW
            // 
            resources.ApplyResources(this.grpModeSpecificCW, "grpModeSpecificCW");
            this.grpModeSpecificCW.Controls.Add(this.grpCWX);
            this.grpModeSpecificCW.Controls.Add(this.chkShowTXCWFreq);
            this.grpModeSpecificCW.Controls.Add(this.chkCWVAC);
            this.grpModeSpecificCW.Controls.Add(this.grpCWPitch);
            this.grpModeSpecificCW.Controls.Add(this.chkCWIambic);
            this.grpModeSpecificCW.Controls.Add(this.ptbCWSpeed);
            this.grpModeSpecificCW.Controls.Add(this.chkBreakIn);
            this.grpModeSpecificCW.Controls.Add(this.lblCWSpeed);
            this.grpModeSpecificCW.Controls.Add(this.udCWSpeed);
            this.grpModeSpecificCW.Name = "grpModeSpecificCW";
            this.grpModeSpecificCW.TabStop = false;
            // 
            // grpCWX
            // 
            this.grpCWX.Controls.Add(this.btnCWX4);
            this.grpCWX.Controls.Add(this.btnCWX5);
            this.grpCWX.Controls.Add(this.btnCWX1);
            this.grpCWX.Controls.Add(this.btnCWX6);
            this.grpCWX.Controls.Add(this.btnCWX2);
            this.grpCWX.Controls.Add(this.btnCWX3);
            resources.ApplyResources(this.grpCWX, "grpCWX");
            this.grpCWX.Name = "grpCWX";
            this.grpCWX.TabStop = false;
            // 
            // btnCWX4
            // 
            resources.ApplyResources(this.btnCWX4, "btnCWX4");
            this.btnCWX4.FlatAppearance.BorderSize = 0;
            this.btnCWX4.Image = null;
            this.btnCWX4.Name = "btnCWX4";
            this.btnCWX4.UseVisualStyleBackColor = true;
            this.btnCWX4.Click += new System.EventHandler(this.btnCWX4_Click);
            this.btnCWX4.MouseHover += new System.EventHandler(this.btnCWX4_MouseMove);
            // 
            // btnCWX5
            // 
            resources.ApplyResources(this.btnCWX5, "btnCWX5");
            this.btnCWX5.FlatAppearance.BorderSize = 0;
            this.btnCWX5.Image = null;
            this.btnCWX5.Name = "btnCWX5";
            this.btnCWX5.UseVisualStyleBackColor = true;
            this.btnCWX5.Click += new System.EventHandler(this.btnCWX5_Click);
            this.btnCWX5.MouseHover += new System.EventHandler(this.btnCWX5_MouseMove);
            // 
            // btnCWX1
            // 
            resources.ApplyResources(this.btnCWX1, "btnCWX1");
            this.btnCWX1.FlatAppearance.BorderSize = 0;
            this.btnCWX1.Image = null;
            this.btnCWX1.Name = "btnCWX1";
            this.btnCWX1.UseVisualStyleBackColor = true;
            this.btnCWX1.Click += new System.EventHandler(this.btnCWX1_Click);
            this.btnCWX1.MouseHover += new System.EventHandler(this.btnCWX1_MouseMove);
            // 
            // btnCWX6
            // 
            resources.ApplyResources(this.btnCWX6, "btnCWX6");
            this.btnCWX6.FlatAppearance.BorderSize = 0;
            this.btnCWX6.Image = null;
            this.btnCWX6.Name = "btnCWX6";
            this.btnCWX6.UseVisualStyleBackColor = true;
            this.btnCWX6.Click += new System.EventHandler(this.btnCWX6_Click);
            this.btnCWX6.MouseHover += new System.EventHandler(this.btnCWX6_MouseMove);
            // 
            // btnCWX2
            // 
            resources.ApplyResources(this.btnCWX2, "btnCWX2");
            this.btnCWX2.FlatAppearance.BorderSize = 0;
            this.btnCWX2.Image = null;
            this.btnCWX2.Name = "btnCWX2";
            this.btnCWX2.UseVisualStyleBackColor = true;
            this.btnCWX2.Click += new System.EventHandler(this.btnCWX2_Click);
            this.btnCWX2.MouseHover += new System.EventHandler(this.btnCWX2_MouseMove);
            // 
            // btnCWX3
            // 
            resources.ApplyResources(this.btnCWX3, "btnCWX3");
            this.btnCWX3.FlatAppearance.BorderSize = 0;
            this.btnCWX3.Image = null;
            this.btnCWX3.Name = "btnCWX3";
            this.btnCWX3.UseVisualStyleBackColor = true;
            this.btnCWX3.Click += new System.EventHandler(this.btnCWX3_Click);
            this.btnCWX3.MouseHover += new System.EventHandler(this.btnCWX3_MouseMove);
            // 
            // grpCWPitch
            // 
            this.grpCWPitch.Controls.Add(this.lblCWPitchFreq);
            this.grpCWPitch.Controls.Add(this.udCWPitch);
            resources.ApplyResources(this.grpCWPitch, "grpCWPitch");
            this.grpCWPitch.Name = "grpCWPitch";
            this.grpCWPitch.TabStop = false;
            // 
            // lblCWPitchFreq
            // 
            this.lblCWPitchFreq.Image = null;
            resources.ApplyResources(this.lblCWPitchFreq, "lblCWPitchFreq");
            this.lblCWPitchFreq.Name = "lblCWPitchFreq";
            // 
            // ptbCWSpeed
            // 
            resources.ApplyResources(this.ptbCWSpeed, "ptbCWSpeed");
            this.ptbCWSpeed.HeadImage = null;
            this.ptbCWSpeed.LargeChange = 5;
            this.ptbCWSpeed.Maximum = 60;
            this.ptbCWSpeed.Minimum = 7;
            this.ptbCWSpeed.Name = "ptbCWSpeed";
            this.ptbCWSpeed.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.ptbCWSpeed.SmallChange = 1;
            this.ptbCWSpeed.TabStop = false;
            this.ptbCWSpeed.Value = 7;
            this.ptbCWSpeed.OnWheel += new PowerSDR.PrettyTrackBar.WheelHandler(this.tbCWSpeed_Wheel);
            this.ptbCWSpeed.Scroll += new PowerSDR.PrettyTrackBar.ScrollHandler(this.tbCWSpeed_Scroll);
            // 
            // lblCWSpeed
            // 
            this.lblCWSpeed.Image = null;
            resources.ApplyResources(this.lblCWSpeed, "lblCWSpeed");
            this.lblCWSpeed.Name = "lblCWSpeed";
            // 
            // grpVFOB
            // 
            this.grpVFOB.BackColor = System.Drawing.SystemColors.Control;
            resources.ApplyResources(this.grpVFOB, "grpVFOB");
            this.grpVFOB.Controls.Add(this.txtVFOBLSD);
            this.grpVFOB.Controls.Add(this.panelVFOBHover);
            this.grpVFOB.Controls.Add(this.txtVFOBMSD);
            this.grpVFOB.Controls.Add(this.lblVFOBLSD);
            this.grpVFOB.Controls.Add(this.txtVFOBBand);
            this.grpVFOB.Controls.Add(this.txtVFOBFreq);
            this.grpVFOB.Name = "grpVFOB";
            this.grpVFOB.TabStop = false;
            // 
            // txtVFOBLSD
            // 
            this.txtVFOBLSD.BackColor = System.Drawing.Color.Black;
            this.txtVFOBLSD.BorderStyle = System.Windows.Forms.BorderStyle.None;
            this.txtVFOBLSD.Cursor = System.Windows.Forms.Cursors.Default;
            resources.ApplyResources(this.txtVFOBLSD, "txtVFOBLSD");
            this.txtVFOBLSD.ForeColor = System.Drawing.Color.Olive;
            this.txtVFOBLSD.Name = "txtVFOBLSD";
            this.txtVFOBLSD.MouseMove += new System.Windows.Forms.MouseEventHandler(this.txtVFOBLSD_MouseMove);
            this.txtVFOBLSD.MouseDown += new System.Windows.Forms.MouseEventHandler(this.txtVFOBLSD_MouseDown);
            // 
            // panelVFOBHover
            // 
            resources.ApplyResources(this.panelVFOBHover, "panelVFOBHover");
            this.panelVFOBHover.BackColor = System.Drawing.Color.Black;
            this.panelVFOBHover.Name = "panelVFOBHover";
            this.panelVFOBHover.Paint += new System.Windows.Forms.PaintEventHandler(this.panelVFOBHover_Paint);
            this.panelVFOBHover.MouseMove += new System.Windows.Forms.MouseEventHandler(this.panelVFOBHover_MouseMove);
            // 
            // txtVFOBMSD
            // 
            this.txtVFOBMSD.BackColor = System.Drawing.Color.Black;
            this.txtVFOBMSD.Cursor = System.Windows.Forms.Cursors.Default;
            resources.ApplyResources(this.txtVFOBMSD, "txtVFOBMSD");
            this.txtVFOBMSD.ForeColor = System.Drawing.Color.Olive;
            this.txtVFOBMSD.Name = "txtVFOBMSD";
            this.txtVFOBMSD.MouseLeave += new System.EventHandler(this.txtVFOBMSD_MouseLeave);
            this.txtVFOBMSD.MouseMove += new System.Windows.Forms.MouseEventHandler(this.txtVFOBMSD_MouseMove);
            this.txtVFOBMSD.MouseDown += new System.Windows.Forms.MouseEventHandler(this.txtVFOBMSD_MouseDown);
            // 
            // lblVFOBLSD
            // 
            this.lblVFOBLSD.BackColor = System.Drawing.Color.Cyan;
            resources.ApplyResources(this.lblVFOBLSD, "lblVFOBLSD");
            this.lblVFOBLSD.ForeColor = System.Drawing.Color.OrangeRed;
            this.lblVFOBLSD.Image = null;
            this.lblVFOBLSD.Name = "lblVFOBLSD";
            // 
            // txtVFOBBand
            // 
            this.txtVFOBBand.BackColor = System.Drawing.Color.Black;
            resources.ApplyResources(this.txtVFOBBand, "txtVFOBBand");
            this.txtVFOBBand.ForeColor = System.Drawing.Color.Green;
            this.txtVFOBBand.Name = "txtVFOBBand";
            this.txtVFOBBand.ReadOnly = true;
            this.txtVFOBBand.GotFocus += new System.EventHandler(this.HideFocus);
            // 
            // txtVFOBFreq
            // 
            this.txtVFOBFreq.BackColor = System.Drawing.Color.Black;
            this.txtVFOBFreq.Cursor = System.Windows.Forms.Cursors.Default;
            resources.ApplyResources(this.txtVFOBFreq, "txtVFOBFreq");
            this.txtVFOBFreq.ForeColor = System.Drawing.Color.Olive;
            this.txtVFOBFreq.Name = "txtVFOBFreq";
            this.txtVFOBFreq.MouseLeave += new System.EventHandler(this.txtVFOBFreq_MouseLeave);
            this.txtVFOBFreq.MouseMove += new System.Windows.Forms.MouseEventHandler(this.txtVFOBFreq_MouseMove);
            this.txtVFOBFreq.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.txtVFOBFreq_KeyPress);
            this.txtVFOBFreq.LostFocus += new System.EventHandler(this.txtVFOBFreq_LostFocus);
            // 
            // grpLOSC
            // 
            this.grpLOSC.BackColor = System.Drawing.SystemColors.Control;
            resources.ApplyResources(this.grpLOSC, "grpLOSC");
            this.grpLOSC.Controls.Add(this.panelLOSCHover);
            this.grpLOSC.Controls.Add(this.txtLOSCLSD);
            this.grpLOSC.Controls.Add(this.txtLOSCMSD);
            this.grpLOSC.Controls.Add(this.txtLOSCFreq);
            this.grpLOSC.ForeColor = System.Drawing.Color.Black;
            this.grpLOSC.Name = "grpLOSC";
            this.grpLOSC.TabStop = false;
            // 
            // panelLOSCHover
            // 
            resources.ApplyResources(this.panelLOSCHover, "panelLOSCHover");
            this.panelLOSCHover.BackColor = System.Drawing.Color.Black;
            this.panelLOSCHover.Name = "panelLOSCHover";
            this.panelLOSCHover.Paint += new System.Windows.Forms.PaintEventHandler(this.panelLOSCHover_Paint);
            this.panelLOSCHover.MouseMove += new System.Windows.Forms.MouseEventHandler(this.panelLOSCHover_MouseMove);
            // 
            // txtLOSCLSD
            // 
            this.txtLOSCLSD.BackColor = System.Drawing.Color.Black;
            this.txtLOSCLSD.BorderStyle = System.Windows.Forms.BorderStyle.None;
            this.txtLOSCLSD.Cursor = System.Windows.Forms.Cursors.Default;
            resources.ApplyResources(this.txtLOSCLSD, "txtLOSCLSD");
            this.txtLOSCLSD.ForeColor = System.Drawing.Color.Olive;
            this.txtLOSCLSD.Name = "txtLOSCLSD";
            this.txtLOSCLSD.MouseMove += new System.Windows.Forms.MouseEventHandler(this.txtLOSCLSD_MouseMove);
            this.txtLOSCLSD.MouseDown += new System.Windows.Forms.MouseEventHandler(this.txtLOSCLSD_MouseDown);
            // 
            // txtLOSCMSD
            // 
            this.txtLOSCMSD.BackColor = System.Drawing.Color.Black;
            this.txtLOSCMSD.ContextMenuStrip = this.contextLOSCMenu;
            this.txtLOSCMSD.Cursor = System.Windows.Forms.Cursors.Default;
            resources.ApplyResources(this.txtLOSCMSD, "txtLOSCMSD");
            this.txtLOSCMSD.ForeColor = System.Drawing.Color.Olive;
            this.txtLOSCMSD.Name = "txtLOSCMSD";
            this.txtLOSCMSD.MouseLeave += new System.EventHandler(this.txtLOSCMSD_MouseLeave);
            this.txtLOSCMSD.MouseMove += new System.Windows.Forms.MouseEventHandler(this.txtLOSCMSD_MouseMove);
            this.txtLOSCMSD.MouseDown += new System.Windows.Forms.MouseEventHandler(this.txtLOSCMSD_MouseDown);
            // 
            // txtLOSCFreq
            // 
            this.txtLOSCFreq.BackColor = System.Drawing.Color.Black;
            this.txtLOSCFreq.Cursor = System.Windows.Forms.Cursors.Default;
            resources.ApplyResources(this.txtLOSCFreq, "txtLOSCFreq");
            this.txtLOSCFreq.ForeColor = System.Drawing.Color.Green;
            this.txtLOSCFreq.Name = "txtLOSCFreq";
            this.txtLOSCFreq.MouseLeave += new System.EventHandler(this.txtLOSCFreq_MouseLeave);
            this.txtLOSCFreq.MouseMove += new System.Windows.Forms.MouseEventHandler(this.txtLOSCFreq_MouseMove);
            this.txtLOSCFreq.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.txtLOSCFreq_KeyPress);
            this.txtLOSCFreq.LostFocus += new System.EventHandler(this.txtLOSCFreq_LostFocus);
            // 
            // grpG160
            // 
            this.grpG160.Controls.Add(this.btnG160_X2);
            this.grpG160.Controls.Add(this.btnG160_X1);
            resources.ApplyResources(this.grpG160, "grpG160");
            this.grpG160.Name = "grpG160";
            this.grpG160.TabStop = false;
            // 
            // grpG3020
            // 
            resources.ApplyResources(this.grpG3020, "grpG3020");
            this.grpG3020.Controls.Add(this.btnG3020_X4);
            this.grpG3020.Controls.Add(this.btnG3020_X3);
            this.grpG3020.Controls.Add(this.btnG3020_X2);
            this.grpG3020.Controls.Add(this.btnG3020_X1);
            this.grpG3020.Name = "grpG3020";
            this.grpG3020.TabStop = false;
            // 
            // btnG3020_X4
            // 
            resources.ApplyResources(this.btnG3020_X4, "btnG3020_X4");
            this.btnG3020_X4.Image = null;
            this.btnG3020_X4.Name = "btnG3020_X4";
            this.btnG3020_X4.UseVisualStyleBackColor = true;
            this.btnG3020_X4.Click += new System.EventHandler(this.btnG3020_X4_Click);
            // 
            // btnG3020_X3
            // 
            resources.ApplyResources(this.btnG3020_X3, "btnG3020_X3");
            this.btnG3020_X3.Image = null;
            this.btnG3020_X3.Name = "btnG3020_X3";
            this.btnG3020_X3.UseVisualStyleBackColor = true;
            this.btnG3020_X3.Click += new System.EventHandler(this.btnG3020_X3_Click);
            // 
            // btnG3020_X2
            // 
            resources.ApplyResources(this.btnG3020_X2, "btnG3020_X2");
            this.btnG3020_X2.Image = null;
            this.btnG3020_X2.Name = "btnG3020_X2";
            this.btnG3020_X2.UseVisualStyleBackColor = true;
            this.btnG3020_X2.Click += new System.EventHandler(this.btnG3020_X2_Click);
            // 
            // btnG3020_X1
            // 
            resources.ApplyResources(this.btnG3020_X1, "btnG3020_X1");
            this.btnG3020_X1.Image = null;
            this.btnG3020_X1.Name = "btnG3020_X1";
            this.btnG3020_X1.UseVisualStyleBackColor = true;
            this.btnG3020_X1.Click += new System.EventHandler(this.btnG3020_X1_Click);
            // 
            // grpG80
            // 
            this.grpG80.BackColor = System.Drawing.SystemColors.Control;
            this.grpG80.Controls.Add(this.btnG80_X4);
            this.grpG80.Controls.Add(this.btnG80_X3);
            this.grpG80.Controls.Add(this.btnG80_X2);
            this.grpG80.Controls.Add(this.btnG80_X1);
            resources.ApplyResources(this.grpG80, "grpG80");
            this.grpG80.Name = "grpG80";
            this.grpG80.TabStop = false;
            // 
            // btnG80_X4
            // 
            resources.ApplyResources(this.btnG80_X4, "btnG80_X4");
            this.btnG80_X4.BackColor = System.Drawing.SystemColors.Control;
            this.btnG80_X4.FlatAppearance.BorderSize = 0;
            this.btnG80_X4.Image = null;
            this.btnG80_X4.Name = "btnG80_X4";
            this.btnG80_X4.UseVisualStyleBackColor = false;
            this.btnG80_X4.Click += new System.EventHandler(this.btnG80_X4_Click);
            // 
            // btnG80_X3
            // 
            resources.ApplyResources(this.btnG80_X3, "btnG80_X3");
            this.btnG80_X3.BackColor = System.Drawing.SystemColors.Control;
            this.btnG80_X3.FlatAppearance.BorderSize = 0;
            this.btnG80_X3.Image = null;
            this.btnG80_X3.Name = "btnG80_X3";
            this.btnG80_X3.UseVisualStyleBackColor = false;
            this.btnG80_X3.Click += new System.EventHandler(this.btnG80_X3_Click);
            // 
            // btnG80_X2
            // 
            resources.ApplyResources(this.btnG80_X2, "btnG80_X2");
            this.btnG80_X2.BackColor = System.Drawing.SystemColors.Control;
            this.btnG80_X2.FlatAppearance.BorderSize = 0;
            this.btnG80_X2.Image = null;
            this.btnG80_X2.Name = "btnG80_X2";
            this.btnG80_X2.UseVisualStyleBackColor = false;
            this.btnG80_X2.Click += new System.EventHandler(this.btnG80_X2_Click);
            // 
            // btnG80_X1
            // 
            resources.ApplyResources(this.btnG80_X1, "btnG80_X1");
            this.btnG80_X1.BackColor = System.Drawing.SystemColors.Control;
            this.btnG80_X1.FlatAppearance.BorderSize = 0;
            this.btnG80_X1.Image = null;
            this.btnG80_X1.Name = "btnG80_X1";
            this.btnG80_X1.UseVisualStyleBackColor = false;
            this.btnG80_X1.Click += new System.EventHandler(this.btnG80_X1_Click);
            // 
            // grpG59
            // 
            this.grpG59.Controls.Add(this.btnATT);
            this.grpG59.Controls.Add(this.btnHIGH_AF);
            this.grpG59.Controls.Add(this.btnHIGH_RF);
            resources.ApplyResources(this.grpG59, "grpG59");
            this.grpG59.Name = "grpG59";
            this.grpG59.TabStop = false;
            // 
            // grpZoom
            // 
            resources.ApplyResources(this.grpZoom, "grpZoom");
            this.grpZoom.Controls.Add(this.label2);
            this.grpZoom.Controls.Add(this.ptbDisplayZoom);
            this.grpZoom.Controls.Add(this.ptbDisplayPan);
            this.grpZoom.Controls.Add(this.label1);
            this.grpZoom.Controls.Add(this.radDisplayZoom32x);
            this.grpZoom.Controls.Add(this.radDisplayZoom1x);
            this.grpZoom.Controls.Add(this.radDisplayZoom2x);
            this.grpZoom.Controls.Add(this.radDisplayZoom16x);
            this.grpZoom.Controls.Add(this.radDisplayZoom4x);
            this.grpZoom.Controls.Add(this.radDisplayZoom8x);
            this.grpZoom.Name = "grpZoom";
            this.grpZoom.TabStop = false;
            // 
            // label2
            // 
            this.label2.BackColor = System.Drawing.SystemColors.Control;
            this.label2.Image = null;
            resources.ApplyResources(this.label2, "label2");
            this.label2.Name = "label2";
            // 
            // ptbDisplayZoom
            // 
            resources.ApplyResources(this.ptbDisplayZoom, "ptbDisplayZoom");
            this.ptbDisplayZoom.HeadImage = null;
            this.ptbDisplayZoom.LargeChange = 4;
            this.ptbDisplayZoom.Maximum = 128;
            this.ptbDisplayZoom.Minimum = 4;
            this.ptbDisplayZoom.Name = "ptbDisplayZoom";
            this.ptbDisplayZoom.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.ptbDisplayZoom.SmallChange = 1;
            this.ptbDisplayZoom.TabStop = false;
            this.ptbDisplayZoom.Value = 4;
            this.ptbDisplayZoom.OnWheel += new PowerSDR.PrettyTrackBar.WheelHandler(this.tbDisplayZoom_Wheel);
            this.ptbDisplayZoom.Scroll += new PowerSDR.PrettyTrackBar.ScrollHandler(this.tbDisplayZoom_Scroll);
            // 
            // ptbDisplayPan
            // 
            resources.ApplyResources(this.ptbDisplayPan, "ptbDisplayPan");
            this.ptbDisplayPan.HeadImage = null;
            this.ptbDisplayPan.LargeChange = 10;
            this.ptbDisplayPan.Maximum = 1000;
            this.ptbDisplayPan.Minimum = -1000;
            this.ptbDisplayPan.Name = "ptbDisplayPan";
            this.ptbDisplayPan.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.ptbDisplayPan.SmallChange = 10;
            this.ptbDisplayPan.TabStop = false;
            this.ptbDisplayPan.Value = 0;
            this.ptbDisplayPan.OnWheel += new PowerSDR.PrettyTrackBar.WheelHandler(this.tbDisplayPan_Wheel);
            this.ptbDisplayPan.Scroll += new PowerSDR.PrettyTrackBar.ScrollHandler(this.tbDisplayPan_Scroll);
            // 
            // label1
            // 
            this.label1.Image = null;
            resources.ApplyResources(this.label1, "label1");
            this.label1.Name = "label1";
            // 
            // radDisplayZoom32x
            // 
            resources.ApplyResources(this.radDisplayZoom32x, "radDisplayZoom32x");
            this.radDisplayZoom32x.FlatAppearance.BorderSize = 0;
            this.radDisplayZoom32x.Image = null;
            this.radDisplayZoom32x.Name = "radDisplayZoom32x";
            this.radDisplayZoom32x.UseVisualStyleBackColor = true;
            this.radDisplayZoom32x.Click += new System.EventHandler(this.radDisplayZoom32x_Click);
            // 
            // radDisplayZoom1x
            // 
            resources.ApplyResources(this.radDisplayZoom1x, "radDisplayZoom1x");
            this.radDisplayZoom1x.FlatAppearance.BorderSize = 0;
            this.radDisplayZoom1x.Image = null;
            this.radDisplayZoom1x.Name = "radDisplayZoom1x";
            this.radDisplayZoom1x.UseVisualStyleBackColor = true;
            this.radDisplayZoom1x.Click += new System.EventHandler(this.radDisplayZoom1x_Click);
            // 
            // radDisplayZoom2x
            // 
            resources.ApplyResources(this.radDisplayZoom2x, "radDisplayZoom2x");
            this.radDisplayZoom2x.FlatAppearance.BorderSize = 0;
            this.radDisplayZoom2x.Image = null;
            this.radDisplayZoom2x.Name = "radDisplayZoom2x";
            this.radDisplayZoom2x.UseVisualStyleBackColor = true;
            this.radDisplayZoom2x.Click += new System.EventHandler(this.radDisplayZoom2x_Click);
            // 
            // radDisplayZoom16x
            // 
            resources.ApplyResources(this.radDisplayZoom16x, "radDisplayZoom16x");
            this.radDisplayZoom16x.FlatAppearance.BorderSize = 0;
            this.radDisplayZoom16x.Image = null;
            this.radDisplayZoom16x.Name = "radDisplayZoom16x";
            this.radDisplayZoom16x.UseVisualStyleBackColor = true;
            this.radDisplayZoom16x.Click += new System.EventHandler(this.radDisplayZoom16x_Click);
            // 
            // radDisplayZoom4x
            // 
            resources.ApplyResources(this.radDisplayZoom4x, "radDisplayZoom4x");
            this.radDisplayZoom4x.FlatAppearance.BorderSize = 0;
            this.radDisplayZoom4x.Image = null;
            this.radDisplayZoom4x.Name = "radDisplayZoom4x";
            this.radDisplayZoom4x.UseVisualStyleBackColor = true;
            this.radDisplayZoom4x.Click += new System.EventHandler(this.radDisplayZoom4x_Click);
            // 
            // radDisplayZoom8x
            // 
            resources.ApplyResources(this.radDisplayZoom8x, "radDisplayZoom8x");
            this.radDisplayZoom8x.FlatAppearance.BorderSize = 0;
            this.radDisplayZoom8x.Image = null;
            this.radDisplayZoom8x.Name = "radDisplayZoom8x";
            this.radDisplayZoom8x.UseVisualStyleBackColor = true;
            this.radDisplayZoom8x.Click += new System.EventHandler(this.radDisplayZoom8x_Click);
            // 
            // grpSubRX
            // 
            resources.ApplyResources(this.grpSubRX, "grpSubRX");
            this.grpSubRX.Controls.Add(this.chkVACMute);
            this.grpSubRX.Controls.Add(this.ptbRX0Gain);
            this.grpSubRX.Controls.Add(this.chkEnableSubRX);
            this.grpSubRX.Controls.Add(this.ptbPanSubRX);
            this.grpSubRX.Controls.Add(this.ptbPanMainRX);
            this.grpSubRX.Controls.Add(this.ptbRX1Gain);
            this.grpSubRX.Name = "grpSubRX";
            this.grpSubRX.TabStop = false;
            // 
            // grpBandHF
            // 
            resources.ApplyResources(this.grpBandHF, "grpBandHF");
            this.grpBandHF.Controls.Add(this.radBandGEN);
            this.grpBandHF.Controls.Add(this.radBandWWV);
            this.grpBandHF.Controls.Add(this.radMoreBands);
            this.grpBandHF.Controls.Add(this.radBand2);
            this.grpBandHF.Controls.Add(this.radBand6);
            this.grpBandHF.Controls.Add(this.radBand10);
            this.grpBandHF.Controls.Add(this.radBand12);
            this.grpBandHF.Controls.Add(this.radBand15);
            this.grpBandHF.Controls.Add(this.radBand17);
            this.grpBandHF.Controls.Add(this.radBand20);
            this.grpBandHF.Controls.Add(this.radBand30);
            this.grpBandHF.Controls.Add(this.radBand40);
            this.grpBandHF.Controls.Add(this.radBand60);
            this.grpBandHF.Controls.Add(this.radBand80);
            this.grpBandHF.Controls.Add(this.radBand160);
            this.grpBandHF.Name = "grpBandHF";
            this.grpBandHF.TabStop = false;
            // 
            // grpVFOBetween
            // 
            resources.ApplyResources(this.grpVFOBetween, "grpVFOBetween");
            this.grpVFOBetween.Controls.Add(this.btnZAP);
            this.grpVFOBetween.Controls.Add(this.btnVFOA);
            this.grpVFOBetween.Controls.Add(this.txtMemory);
            this.grpVFOBetween.Controls.Add(this.lblMemoryNumber);
            this.grpVFOBetween.Controls.Add(this.chkVFOsinc);
            this.grpVFOBetween.Controls.Add(this.btnEraseMemory);
            this.grpVFOBetween.Controls.Add(this.chkVFOLock);
            this.grpVFOBetween.Controls.Add(this.btnMemoryQuickRecall);
            this.grpVFOBetween.Controls.Add(this.btnMemoryQuickSave);
            this.grpVFOBetween.Name = "grpVFOBetween";
            this.grpVFOBetween.TabStop = false;
            // 
            // txtMemory
            // 
            resources.ApplyResources(this.txtMemory, "txtMemory");
            this.txtMemory.Name = "txtMemory";
            // 
            // grpDisplay2
            // 
            resources.ApplyResources(this.grpDisplay2, "grpDisplay2");
            this.grpDisplay2.Controls.Add(this.chkDisplayPeak);
            this.grpDisplay2.Controls.Add(this.comboDisplayMode);
            this.grpDisplay2.Controls.Add(this.chkDisplayAVG);
            this.grpDisplay2.Name = "grpDisplay2";
            this.grpDisplay2.TabStop = false;
            // 
            // grpOptions
            // 
            resources.ApplyResources(this.grpOptions, "grpOptions");
            this.grpOptions.Controls.Add(this.chkRecordWav);
            this.grpOptions.Controls.Add(this.chkMUT);
            this.grpOptions.Controls.Add(this.chkMON);
            this.grpOptions.Controls.Add(this.chkTUN);
            this.grpOptions.Controls.Add(this.chkMOX);
            this.grpOptions.Controls.Add(this.chkPlayWav);
            this.grpOptions.Name = "grpOptions";
            this.grpOptions.TabStop = false;
            // 
            // btnChangeTuneStepLarger
            // 
            this.btnChangeTuneStepLarger.FlatAppearance.BorderSize = 0;
            resources.ApplyResources(this.btnChangeTuneStepLarger, "btnChangeTuneStepLarger");
            this.btnChangeTuneStepLarger.Image = null;
            this.btnChangeTuneStepLarger.Name = "btnChangeTuneStepLarger";
            this.btnChangeTuneStepLarger.Click += new System.EventHandler(this.btnChangeTuneStepLarger_Click);
            // 
            // btnTuneStepChangeSmaller
            // 
            this.btnTuneStepChangeSmaller.FlatAppearance.BorderSize = 0;
            resources.ApplyResources(this.btnTuneStepChangeSmaller, "btnTuneStepChangeSmaller");
            this.btnTuneStepChangeSmaller.Image = null;
            this.btnTuneStepChangeSmaller.Name = "btnTuneStepChangeSmaller";
            this.btnTuneStepChangeSmaller.Click += new System.EventHandler(this.btnChangeTuneStepSmaller_Click);
            // 
            // btnChangeTuneStepLargerSubRX
            // 
            this.btnChangeTuneStepLargerSubRX.FlatAppearance.BorderSize = 0;
            resources.ApplyResources(this.btnChangeTuneStepLargerSubRX, "btnChangeTuneStepLargerSubRX");
            this.btnChangeTuneStepLargerSubRX.Image = null;
            this.btnChangeTuneStepLargerSubRX.Name = "btnChangeTuneStepLargerSubRX";
            this.btnChangeTuneStepLargerSubRX.Click += new System.EventHandler(this.btnChangeTuneStepLargerSubRX_Click);
            // 
            // btnTuneStepChangeSmallerSubRX
            // 
            this.btnTuneStepChangeSmallerSubRX.FlatAppearance.BorderSize = 0;
            resources.ApplyResources(this.btnTuneStepChangeSmallerSubRX, "btnTuneStepChangeSmallerSubRX");
            this.btnTuneStepChangeSmallerSubRX.Image = null;
            this.btnTuneStepChangeSmallerSubRX.Name = "btnTuneStepChangeSmallerSubRX";
            this.btnTuneStepChangeSmallerSubRX.Click += new System.EventHandler(this.btnTuneStepChangeSmallerSubRX_Click);
            // 
            // grpModeSpecificDigital
            // 
            resources.ApplyResources(this.grpModeSpecificDigital, "grpModeSpecificDigital");
            this.grpModeSpecificDigital.Controls.Add(this.grpDIGSampleRate);
            this.grpModeSpecificDigital.Controls.Add(this.ptbVACTXGain);
            this.grpModeSpecificDigital.Controls.Add(this.ptbVACRXGain);
            this.grpModeSpecificDigital.Controls.Add(this.udVACTXGain);
            this.grpModeSpecificDigital.Controls.Add(this.udVACRXGain);
            this.grpModeSpecificDigital.Controls.Add(this.lblTXGain);
            this.grpModeSpecificDigital.Controls.Add(this.lblRXGain);
            this.grpModeSpecificDigital.Controls.Add(this.chkVACEnabled);
            this.grpModeSpecificDigital.Name = "grpModeSpecificDigital";
            this.grpModeSpecificDigital.TabStop = false;
            // 
            // grpDIGSampleRate
            // 
            resources.ApplyResources(this.grpDIGSampleRate, "grpDIGSampleRate");
            this.grpDIGSampleRate.Controls.Add(this.comboVACSampleRate);
            this.grpDIGSampleRate.Name = "grpDIGSampleRate";
            this.grpDIGSampleRate.TabStop = false;
            // 
            // ptbVACTXGain
            // 
            resources.ApplyResources(this.ptbVACTXGain, "ptbVACTXGain");
            this.ptbVACTXGain.HeadImage = null;
            this.ptbVACTXGain.LargeChange = 5;
            this.ptbVACTXGain.Maximum = 20;
            this.ptbVACTXGain.Minimum = -40;
            this.ptbVACTXGain.Name = "ptbVACTXGain";
            this.ptbVACTXGain.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.ptbVACTXGain.SmallChange = 1;
            this.ptbVACTXGain.TabStop = false;
            this.ptbVACTXGain.Value = 0;
            this.ptbVACTXGain.OnWheel += new PowerSDR.PrettyTrackBar.WheelHandler(this.tbVACTXGain_Wheel);
            this.ptbVACTXGain.Scroll += new PowerSDR.PrettyTrackBar.ScrollHandler(this.tbVACTXGain_Scroll);
            // 
            // ptbVACRXGain
            // 
            resources.ApplyResources(this.ptbVACRXGain, "ptbVACRXGain");
            this.ptbVACRXGain.HeadImage = null;
            this.ptbVACRXGain.LargeChange = 5;
            this.ptbVACRXGain.Maximum = 20;
            this.ptbVACRXGain.Minimum = -40;
            this.ptbVACRXGain.Name = "ptbVACRXGain";
            this.ptbVACRXGain.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.ptbVACRXGain.SmallChange = 1;
            this.ptbVACRXGain.TabStop = false;
            this.ptbVACRXGain.Value = 0;
            this.ptbVACRXGain.OnWheel += new PowerSDR.PrettyTrackBar.WheelHandler(this.tbVACRXGain_Wheel);
            this.ptbVACRXGain.Scroll += new PowerSDR.PrettyTrackBar.ScrollHandler(this.tbVACRXGain_Scroll);
            // 
            // lblTXGain
            // 
            this.lblTXGain.Image = null;
            resources.ApplyResources(this.lblTXGain, "lblTXGain");
            this.lblTXGain.Name = "lblTXGain";
            // 
            // lblRXGain
            // 
            this.lblRXGain.Image = null;
            resources.ApplyResources(this.lblRXGain, "lblRXGain");
            this.lblRXGain.Name = "lblRXGain";
            // 
            // lblTuneStep
            // 
            this.lblTuneStep.Image = null;
            resources.ApplyResources(this.lblTuneStep, "lblTuneStep");
            this.lblTuneStep.Name = "lblTuneStep";
            // 
            // grpDisplay
            // 
            resources.ApplyResources(this.grpDisplay, "grpDisplay");
            this.grpDisplay.Controls.Add(this.picWaterfall);
            this.grpDisplay.Controls.Add(this.txtDisplayPeakFreq);
            this.grpDisplay.Controls.Add(this.txtDisplayCursorFreq);
            this.grpDisplay.Controls.Add(this.txtDisplayCursorPower);
            this.grpDisplay.Controls.Add(this.txtDisplayPeakPower);
            this.grpDisplay.Controls.Add(this.txtDisplayCursorOffset);
            this.grpDisplay.Controls.Add(this.txtDisplayPeakOffset);
            this.grpDisplay.Controls.Add(this.picDisplay);
            this.grpDisplay.Name = "grpDisplay";
            this.grpDisplay.TabStop = false;
            // 
            // picWaterfall
            // 
            this.picWaterfall.BackColor = System.Drawing.Color.Black;
            resources.ApplyResources(this.picWaterfall, "picWaterfall");
            this.picWaterfall.Cursor = System.Windows.Forms.Cursors.Cross;
            this.picWaterfall.Name = "picWaterfall";
            this.picWaterfall.TabStop = false;
            this.picWaterfall.MouseLeave += new System.EventHandler(this.picWaterfall_MouseLeave);
            this.picWaterfall.MouseMove += new System.Windows.Forms.MouseEventHandler(this.picWaterfall_MouseMove);
            this.picWaterfall.Resize += new System.EventHandler(this.picWaterfall_Resize);
            this.picWaterfall.MouseDown += new System.Windows.Forms.MouseEventHandler(this.picWaterfall_MouseDown);
            this.picWaterfall.Paint += new System.Windows.Forms.PaintEventHandler(this.picWaterfall_Paint);
            this.picWaterfall.MouseUp += new System.Windows.Forms.MouseEventHandler(this.picWaterfall_MouseUp);
            // 
            // txtDisplayPeakFreq
            // 
            this.txtDisplayPeakFreq.BackColor = System.Drawing.Color.Black;
            this.txtDisplayPeakFreq.BorderStyle = System.Windows.Forms.BorderStyle.None;
            this.txtDisplayPeakFreq.Cursor = System.Windows.Forms.Cursors.Default;
            resources.ApplyResources(this.txtDisplayPeakFreq, "txtDisplayPeakFreq");
            this.txtDisplayPeakFreq.ForeColor = System.Drawing.Color.DodgerBlue;
            this.txtDisplayPeakFreq.Name = "txtDisplayPeakFreq";
            this.txtDisplayPeakFreq.ReadOnly = true;
            this.txtDisplayPeakFreq.Click += new System.EventHandler(this.txtDisplayPeakFreq_Click);
            // 
            // txtDisplayCursorFreq
            // 
            this.txtDisplayCursorFreq.BackColor = System.Drawing.Color.Black;
            this.txtDisplayCursorFreq.BorderStyle = System.Windows.Forms.BorderStyle.None;
            this.txtDisplayCursorFreq.Cursor = System.Windows.Forms.Cursors.Default;
            resources.ApplyResources(this.txtDisplayCursorFreq, "txtDisplayCursorFreq");
            this.txtDisplayCursorFreq.ForeColor = System.Drawing.Color.DodgerBlue;
            this.txtDisplayCursorFreq.Name = "txtDisplayCursorFreq";
            this.txtDisplayCursorFreq.ReadOnly = true;
            // 
            // txtDisplayCursorPower
            // 
            this.txtDisplayCursorPower.BackColor = System.Drawing.Color.Black;
            this.txtDisplayCursorPower.BorderStyle = System.Windows.Forms.BorderStyle.None;
            this.txtDisplayCursorPower.Cursor = System.Windows.Forms.Cursors.Default;
            resources.ApplyResources(this.txtDisplayCursorPower, "txtDisplayCursorPower");
            this.txtDisplayCursorPower.ForeColor = System.Drawing.Color.DodgerBlue;
            this.txtDisplayCursorPower.Name = "txtDisplayCursorPower";
            this.txtDisplayCursorPower.ReadOnly = true;
            // 
            // txtDisplayPeakPower
            // 
            this.txtDisplayPeakPower.BackColor = System.Drawing.Color.Black;
            this.txtDisplayPeakPower.BorderStyle = System.Windows.Forms.BorderStyle.None;
            this.txtDisplayPeakPower.Cursor = System.Windows.Forms.Cursors.Default;
            resources.ApplyResources(this.txtDisplayPeakPower, "txtDisplayPeakPower");
            this.txtDisplayPeakPower.ForeColor = System.Drawing.Color.DodgerBlue;
            this.txtDisplayPeakPower.Name = "txtDisplayPeakPower";
            this.txtDisplayPeakPower.ReadOnly = true;
            // 
            // txtDisplayCursorOffset
            // 
            this.txtDisplayCursorOffset.BackColor = System.Drawing.Color.Black;
            this.txtDisplayCursorOffset.BorderStyle = System.Windows.Forms.BorderStyle.None;
            this.txtDisplayCursorOffset.Cursor = System.Windows.Forms.Cursors.Default;
            resources.ApplyResources(this.txtDisplayCursorOffset, "txtDisplayCursorOffset");
            this.txtDisplayCursorOffset.ForeColor = System.Drawing.Color.DodgerBlue;
            this.txtDisplayCursorOffset.Name = "txtDisplayCursorOffset";
            this.txtDisplayCursorOffset.ReadOnly = true;
            this.txtDisplayCursorOffset.GotFocus += new System.EventHandler(this.HideFocus);
            // 
            // txtDisplayPeakOffset
            // 
            this.txtDisplayPeakOffset.BackColor = System.Drawing.Color.Black;
            this.txtDisplayPeakOffset.BorderStyle = System.Windows.Forms.BorderStyle.None;
            this.txtDisplayPeakOffset.Cursor = System.Windows.Forms.Cursors.Default;
            resources.ApplyResources(this.txtDisplayPeakOffset, "txtDisplayPeakOffset");
            this.txtDisplayPeakOffset.ForeColor = System.Drawing.Color.DodgerBlue;
            this.txtDisplayPeakOffset.Name = "txtDisplayPeakOffset";
            this.txtDisplayPeakOffset.ReadOnly = true;
            this.txtDisplayPeakOffset.GotFocus += new System.EventHandler(this.HideFocus);
            // 
            // picDisplay
            // 
            this.picDisplay.BackColor = System.Drawing.Color.Black;
            resources.ApplyResources(this.picDisplay, "picDisplay");
            this.picDisplay.Cursor = System.Windows.Forms.Cursors.Cross;
            this.picDisplay.Name = "picDisplay";
            this.picDisplay.TabStop = false;
            this.picDisplay.MouseLeave += new System.EventHandler(this.picDisplay_MouseLeave);
            this.picDisplay.MouseMove += new System.Windows.Forms.MouseEventHandler(this.picDisplay_MouseMove);
            this.picDisplay.Resize += new System.EventHandler(this.picDisplay_Resize);
            this.picDisplay.MouseDown += new System.Windows.Forms.MouseEventHandler(this.picDisplay_MouseDown);
            this.picDisplay.Paint += new System.Windows.Forms.PaintEventHandler(this.picDisplay_Paint);
            this.picDisplay.MouseUp += new System.Windows.Forms.MouseEventHandler(this.picDisplay_MouseUp);
            // 
            // grpMainRXFilter
            // 
            resources.ApplyResources(this.grpMainRXFilter, "grpMainRXFilter");
            this.grpMainRXFilter.ContextMenu = this.contextMenuFilter;
            this.grpMainRXFilter.Controls.Add(this.udFilterHigh);
            this.grpMainRXFilter.Controls.Add(this.udFilterLow);
            this.grpMainRXFilter.Controls.Add(this.ptbFilterWidth);
            this.grpMainRXFilter.Controls.Add(this.lblFilterWidth);
            this.grpMainRXFilter.Controls.Add(this.btnFilterShiftReset);
            this.grpMainRXFilter.Controls.Add(this.ptbFilterShift);
            this.grpMainRXFilter.Controls.Add(this.lblFilterShift);
            this.grpMainRXFilter.Controls.Add(this.radFilter1);
            this.grpMainRXFilter.Controls.Add(this.radFilter2);
            this.grpMainRXFilter.Controls.Add(this.radFilter3);
            this.grpMainRXFilter.Controls.Add(this.radFilter4);
            this.grpMainRXFilter.Controls.Add(this.radFilter5);
            this.grpMainRXFilter.Controls.Add(this.radFilter6);
            this.grpMainRXFilter.Controls.Add(this.radFilter7);
            this.grpMainRXFilter.Controls.Add(this.radFilter8);
            this.grpMainRXFilter.Controls.Add(this.radFilter9);
            this.grpMainRXFilter.Controls.Add(this.radFilter10);
            this.grpMainRXFilter.Controls.Add(this.radFilterVar1);
            this.grpMainRXFilter.Controls.Add(this.radFilterVar2);
            this.grpMainRXFilter.Controls.Add(this.lblFilterLow);
            this.grpMainRXFilter.Controls.Add(this.lblFilterHigh);
            this.grpMainRXFilter.Name = "grpMainRXFilter";
            this.grpMainRXFilter.TabStop = false;
            // 
            // lblFilterWidth
            // 
            this.lblFilterWidth.Image = null;
            resources.ApplyResources(this.lblFilterWidth, "lblFilterWidth");
            this.lblFilterWidth.Name = "lblFilterWidth";
            // 
            // lblFilterShift
            // 
            this.lblFilterShift.Image = null;
            resources.ApplyResources(this.lblFilterShift, "lblFilterShift");
            this.lblFilterShift.Name = "lblFilterShift";
            // 
            // radFilter1
            // 
            resources.ApplyResources(this.radFilter1, "radFilter1");
            this.radFilter1.FlatAppearance.BorderSize = 0;
            this.radFilter1.Image = null;
            this.radFilter1.Name = "radFilter1";
            this.radFilter1.CheckedChanged += new System.EventHandler(this.radFilter1_CheckedChanged);
            // 
            // radFilter2
            // 
            resources.ApplyResources(this.radFilter2, "radFilter2");
            this.radFilter2.FlatAppearance.BorderSize = 0;
            this.radFilter2.Image = null;
            this.radFilter2.Name = "radFilter2";
            this.radFilter2.CheckedChanged += new System.EventHandler(this.radFilter2_CheckedChanged);
            // 
            // radFilter3
            // 
            resources.ApplyResources(this.radFilter3, "radFilter3");
            this.radFilter3.FlatAppearance.BorderSize = 0;
            this.radFilter3.Image = null;
            this.radFilter3.Name = "radFilter3";
            this.radFilter3.CheckedChanged += new System.EventHandler(this.radFilter3_CheckedChanged);
            // 
            // radFilter4
            // 
            resources.ApplyResources(this.radFilter4, "radFilter4");
            this.radFilter4.FlatAppearance.BorderSize = 0;
            this.radFilter4.Image = null;
            this.radFilter4.Name = "radFilter4";
            this.radFilter4.CheckedChanged += new System.EventHandler(this.radFilter4_CheckedChanged);
            // 
            // radFilter5
            // 
            resources.ApplyResources(this.radFilter5, "radFilter5");
            this.radFilter5.FlatAppearance.BorderSize = 0;
            this.radFilter5.Image = null;
            this.radFilter5.Name = "radFilter5";
            this.radFilter5.CheckedChanged += new System.EventHandler(this.radFilter5_CheckedChanged);
            // 
            // radFilter6
            // 
            resources.ApplyResources(this.radFilter6, "radFilter6");
            this.radFilter6.FlatAppearance.BorderSize = 0;
            this.radFilter6.Image = null;
            this.radFilter6.Name = "radFilter6";
            this.radFilter6.CheckedChanged += new System.EventHandler(this.radFilter6_CheckedChanged);
            // 
            // radFilter7
            // 
            resources.ApplyResources(this.radFilter7, "radFilter7");
            this.radFilter7.FlatAppearance.BorderSize = 0;
            this.radFilter7.Image = null;
            this.radFilter7.Name = "radFilter7";
            this.radFilter7.CheckedChanged += new System.EventHandler(this.radFilter7_CheckedChanged);
            // 
            // radFilter8
            // 
            resources.ApplyResources(this.radFilter8, "radFilter8");
            this.radFilter8.FlatAppearance.BorderSize = 0;
            this.radFilter8.Image = null;
            this.radFilter8.Name = "radFilter8";
            this.radFilter8.CheckedChanged += new System.EventHandler(this.radFilter8_CheckedChanged);
            // 
            // radFilter9
            // 
            resources.ApplyResources(this.radFilter9, "radFilter9");
            this.radFilter9.FlatAppearance.BorderSize = 0;
            this.radFilter9.Image = null;
            this.radFilter9.Name = "radFilter9";
            this.radFilter9.CheckedChanged += new System.EventHandler(this.radFilter9_CheckedChanged);
            // 
            // radFilter10
            // 
            resources.ApplyResources(this.radFilter10, "radFilter10");
            this.radFilter10.FlatAppearance.BorderSize = 0;
            this.radFilter10.Image = null;
            this.radFilter10.Name = "radFilter10";
            this.radFilter10.CheckedChanged += new System.EventHandler(this.radFilter10_CheckedChanged);
            // 
            // radFilterVar1
            // 
            resources.ApplyResources(this.radFilterVar1, "radFilterVar1");
            this.radFilterVar1.FlatAppearance.BorderSize = 0;
            this.radFilterVar1.Image = null;
            this.radFilterVar1.Name = "radFilterVar1";
            this.radFilterVar1.CheckedChanged += new System.EventHandler(this.radFilterVar1_CheckedChanged);
            // 
            // radFilterVar2
            // 
            resources.ApplyResources(this.radFilterVar2, "radFilterVar2");
            this.radFilterVar2.FlatAppearance.BorderSize = 0;
            this.radFilterVar2.Image = null;
            this.radFilterVar2.Name = "radFilterVar2";
            this.radFilterVar2.CheckedChanged += new System.EventHandler(this.radFilterVar2_CheckedChanged);
            // 
            // lblFilterLow
            // 
            this.lblFilterLow.Image = null;
            resources.ApplyResources(this.lblFilterLow, "lblFilterLow");
            this.lblFilterLow.Name = "lblFilterLow";
            // 
            // lblFilterHigh
            // 
            this.lblFilterHigh.Image = null;
            resources.ApplyResources(this.lblFilterHigh, "lblFilterHigh");
            this.lblFilterHigh.Name = "lblFilterHigh";
            // 
            // lblCPUMeter
            // 
            this.lblCPUMeter.Image = null;
            resources.ApplyResources(this.lblCPUMeter, "lblCPUMeter");
            this.lblCPUMeter.Name = "lblCPUMeter";
            // 
            // grpDSPMainRX
            // 
            resources.ApplyResources(this.grpDSPMainRX, "grpDSPMainRX");
            this.grpDSPMainRX.Controls.Add(this.chkDSPNB2);
            this.grpDSPMainRX.Controls.Add(this.chkNB);
            this.grpDSPMainRX.Controls.Add(this.chkANF);
            this.grpDSPMainRX.Controls.Add(this.chkNR);
            this.grpDSPMainRX.Controls.Add(this.chkBIN);
            this.grpDSPMainRX.Name = "grpDSPMainRX";
            this.grpDSPMainRX.TabStop = false;
            // 
            // grpMultimeter
            // 
            resources.ApplyResources(this.grpMultimeter, "grpMultimeter");
            this.grpMultimeter.Controls.Add(this.comboMeterTXMode);
            this.grpMultimeter.Controls.Add(this.picMultiMeterDigital);
            this.grpMultimeter.Controls.Add(this.lblMultiSMeter);
            this.grpMultimeter.Controls.Add(this.comboMeterRXMode);
            this.grpMultimeter.Controls.Add(this.txtMultiText);
            this.grpMultimeter.Controls.Add(this.picMultimeterAnalog);
            this.grpMultimeter.Name = "grpMultimeter";
            this.grpMultimeter.TabStop = false;
            // 
            // picMultiMeterDigital
            // 
            this.picMultiMeterDigital.BackColor = System.Drawing.Color.Black;
            this.picMultiMeterDigital.BorderStyle = System.Windows.Forms.BorderStyle.Fixed3D;
            resources.ApplyResources(this.picMultiMeterDigital, "picMultiMeterDigital");
            this.picMultiMeterDigital.Name = "picMultiMeterDigital";
            this.picMultiMeterDigital.TabStop = false;
            this.picMultiMeterDigital.Paint += new System.Windows.Forms.PaintEventHandler(this.picMultiMeterDigital_Paint);
            // 
            // lblMultiSMeter
            // 
            this.lblMultiSMeter.Image = null;
            resources.ApplyResources(this.lblMultiSMeter, "lblMultiSMeter");
            this.lblMultiSMeter.Name = "lblMultiSMeter";
            // 
            // txtMultiText
            // 
            this.txtMultiText.BackColor = System.Drawing.Color.Black;
            this.txtMultiText.Cursor = System.Windows.Forms.Cursors.Default;
            resources.ApplyResources(this.txtMultiText, "txtMultiText");
            this.txtMultiText.ForeColor = System.Drawing.Color.Yellow;
            this.txtMultiText.Name = "txtMultiText";
            this.txtMultiText.ReadOnly = true;
            this.txtMultiText.GotFocus += new System.EventHandler(this.HideFocus);
            // 
            // picMultimeterAnalog
            // 
            this.picMultimeterAnalog.BackColor = System.Drawing.Color.Black;
            resources.ApplyResources(this.picMultimeterAnalog, "picMultimeterAnalog");
            this.picMultimeterAnalog.Name = "picMultimeterAnalog";
            this.picMultimeterAnalog.TabStop = false;
            // 
            // grpVFO
            // 
            resources.ApplyResources(this.grpVFO, "grpVFO");
            this.grpVFO.Controls.Add(this.btnChangeTuneStepLargerSubRX);
            this.grpVFO.Controls.Add(this.btnRITReset);
            this.grpVFO.Controls.Add(this.btnTuneStepChangeSmallerSubRX);
            this.grpVFO.Controls.Add(this.btnXITReset);
            this.grpVFO.Controls.Add(this.txtWheelTuneSubRX);
            this.grpVFO.Controls.Add(this.btnVFOSwap);
            this.grpVFO.Controls.Add(this.btnVFOBtoA);
            this.grpVFO.Controls.Add(this.btnVFOAtoB);
            this.grpVFO.Controls.Add(this.udXIT);
            this.grpVFO.Controls.Add(this.btnChangeTuneStepLarger);
            this.grpVFO.Controls.Add(this.chkXIT);
            this.grpVFO.Controls.Add(this.lblTuneStep);
            this.grpVFO.Controls.Add(this.chkRIT);
            this.grpVFO.Controls.Add(this.btnTuneStepChangeSmaller);
            this.grpVFO.Controls.Add(this.udRIT);
            this.grpVFO.Controls.Add(this.chkVFOSplit);
            this.grpVFO.Controls.Add(this.txtWheelTune);
            this.grpVFO.Name = "grpVFO";
            this.grpVFO.TabStop = false;
            // 
            // grpManualNotch
            // 
            resources.ApplyResources(this.grpManualNotch, "grpManualNotch");
            this.grpManualNotch.Controls.Add(this.labelTS6);
            this.grpManualNotch.Controls.Add(this.labelTS5);
            this.grpManualNotch.Controls.Add(this.btnNotchReset);
            this.grpManualNotch.Controls.Add(this.lblNotchLow);
            this.grpManualNotch.Controls.Add(this.lblNotchHigh);
            this.grpManualNotch.Controls.Add(this.chkManualNotchFilter);
            this.grpManualNotch.Controls.Add(this.lblNotchShift);
            this.grpManualNotch.Controls.Add(this.lblWidth);
            this.grpManualNotch.Controls.Add(this.ptbNotchWidth);
            this.grpManualNotch.Controls.Add(this.ptbNotchShift);
            this.grpManualNotch.Name = "grpManualNotch";
            this.grpManualNotch.TabStop = false;
            // 
            // labelTS6
            // 
            resources.ApplyResources(this.labelTS6, "labelTS6");
            this.labelTS6.Image = null;
            this.labelTS6.Name = "labelTS6";
            // 
            // labelTS5
            // 
            resources.ApplyResources(this.labelTS5, "labelTS5");
            this.labelTS5.Image = null;
            this.labelTS5.Name = "labelTS5";
            // 
            // lblNotchLow
            // 
            resources.ApplyResources(this.lblNotchLow, "lblNotchLow");
            this.lblNotchLow.BackColor = System.Drawing.Color.Transparent;
            this.lblNotchLow.Image = null;
            this.lblNotchLow.Name = "lblNotchLow";
            // 
            // lblNotchHigh
            // 
            resources.ApplyResources(this.lblNotchHigh, "lblNotchHigh");
            this.lblNotchHigh.BackColor = System.Drawing.Color.Transparent;
            this.lblNotchHigh.Image = null;
            this.lblNotchHigh.Name = "lblNotchHigh";
            // 
            // picSmallAGauge
            // 
            resources.ApplyResources(this.picSmallAGauge, "picSmallAGauge");
            this.picSmallAGauge.ContextMenuStrip = this.contextNewVFOSmeter;
            this.picSmallAGauge.Name = "picSmallAGauge";
            this.picSmallAGauge.TabStop = false;
            this.picSmallAGauge.Paint += new System.Windows.Forms.PaintEventHandler(this.picSmallAGauge_Paint);
            // 
            // grpSubRXFilter
            // 
            resources.ApplyResources(this.grpSubRXFilter, "grpSubRXFilter");
            this.grpSubRXFilter.ContextMenu = this.contextMenuFilter;
            this.grpSubRXFilter.Controls.Add(this.udSubRXFilterHigh);
            this.grpSubRXFilter.Controls.Add(this.udSubRXFilterLow);
            this.grpSubRXFilter.Controls.Add(this.ptbSubRXFilterWidth);
            this.grpSubRXFilter.Controls.Add(this.labelTS1);
            this.grpSubRXFilter.Controls.Add(this.btnSubRXFilterShiftReset);
            this.grpSubRXFilter.Controls.Add(this.ptbSubRXFilterShift);
            this.grpSubRXFilter.Controls.Add(this.labelTS2);
            this.grpSubRXFilter.Controls.Add(this.radSubRXFilter1);
            this.grpSubRXFilter.Controls.Add(this.radSubRXFilter2);
            this.grpSubRXFilter.Controls.Add(this.radSubRXFilter3);
            this.grpSubRXFilter.Controls.Add(this.radSubRXFilter4);
            this.grpSubRXFilter.Controls.Add(this.radSubRXFilter5);
            this.grpSubRXFilter.Controls.Add(this.radSubRXFilter6);
            this.grpSubRXFilter.Controls.Add(this.radSubRXFilter7);
            this.grpSubRXFilter.Controls.Add(this.radSubRXFilter8);
            this.grpSubRXFilter.Controls.Add(this.radSubRXFilter9);
            this.grpSubRXFilter.Controls.Add(this.radSubRXFilter10);
            this.grpSubRXFilter.Controls.Add(this.radSubRXFilterVar1);
            this.grpSubRXFilter.Controls.Add(this.radSubRXFilterVar2);
            this.grpSubRXFilter.Controls.Add(this.labelTS3);
            this.grpSubRXFilter.Controls.Add(this.labelTS4);
            this.grpSubRXFilter.Name = "grpSubRXFilter";
            this.grpSubRXFilter.TabStop = false;
            // 
            // labelTS1
            // 
            this.labelTS1.Image = null;
            resources.ApplyResources(this.labelTS1, "labelTS1");
            this.labelTS1.Name = "labelTS1";
            // 
            // labelTS2
            // 
            this.labelTS2.Image = null;
            resources.ApplyResources(this.labelTS2, "labelTS2");
            this.labelTS2.Name = "labelTS2";
            // 
            // radSubRXFilter1
            // 
            resources.ApplyResources(this.radSubRXFilter1, "radSubRXFilter1");
            this.radSubRXFilter1.Checked = true;
            this.radSubRXFilter1.FlatAppearance.BorderSize = 0;
            this.radSubRXFilter1.Image = null;
            this.radSubRXFilter1.Name = "radSubRXFilter1";
            this.radSubRXFilter1.TabStop = true;
            this.radSubRXFilter1.CheckedChanged += new System.EventHandler(this.radSubRXFilter1_CheckedChanged);
            // 
            // radSubRXFilter2
            // 
            resources.ApplyResources(this.radSubRXFilter2, "radSubRXFilter2");
            this.radSubRXFilter2.FlatAppearance.BorderSize = 0;
            this.radSubRXFilter2.Image = null;
            this.radSubRXFilter2.Name = "radSubRXFilter2";
            this.radSubRXFilter2.CheckedChanged += new System.EventHandler(this.radSubRXFilter2_CheckedChanged);
            // 
            // radSubRXFilter3
            // 
            resources.ApplyResources(this.radSubRXFilter3, "radSubRXFilter3");
            this.radSubRXFilter3.FlatAppearance.BorderSize = 0;
            this.radSubRXFilter3.Image = null;
            this.radSubRXFilter3.Name = "radSubRXFilter3";
            this.radSubRXFilter3.CheckedChanged += new System.EventHandler(this.radSubRXFilter3_CheckedChanged);
            // 
            // radSubRXFilter4
            // 
            resources.ApplyResources(this.radSubRXFilter4, "radSubRXFilter4");
            this.radSubRXFilter4.FlatAppearance.BorderSize = 0;
            this.radSubRXFilter4.Image = null;
            this.radSubRXFilter4.Name = "radSubRXFilter4";
            this.radSubRXFilter4.CheckedChanged += new System.EventHandler(this.radSubRXFilter4_CheckedChanged);
            // 
            // radSubRXFilter5
            // 
            resources.ApplyResources(this.radSubRXFilter5, "radSubRXFilter5");
            this.radSubRXFilter5.FlatAppearance.BorderSize = 0;
            this.radSubRXFilter5.Image = null;
            this.radSubRXFilter5.Name = "radSubRXFilter5";
            this.radSubRXFilter5.CheckedChanged += new System.EventHandler(this.radSubRXFilter5_CheckedChanged);
            // 
            // radSubRXFilter6
            // 
            resources.ApplyResources(this.radSubRXFilter6, "radSubRXFilter6");
            this.radSubRXFilter6.FlatAppearance.BorderSize = 0;
            this.radSubRXFilter6.Image = null;
            this.radSubRXFilter6.Name = "radSubRXFilter6";
            this.radSubRXFilter6.CheckedChanged += new System.EventHandler(this.radSubRXFilter6_CheckedChanged);
            // 
            // radSubRXFilter7
            // 
            resources.ApplyResources(this.radSubRXFilter7, "radSubRXFilter7");
            this.radSubRXFilter7.FlatAppearance.BorderSize = 0;
            this.radSubRXFilter7.Image = null;
            this.radSubRXFilter7.Name = "radSubRXFilter7";
            this.radSubRXFilter7.CheckedChanged += new System.EventHandler(this.radSubRXFilter7_CheckedChanged);
            // 
            // radSubRXFilter8
            // 
            resources.ApplyResources(this.radSubRXFilter8, "radSubRXFilter8");
            this.radSubRXFilter8.FlatAppearance.BorderSize = 0;
            this.radSubRXFilter8.Image = null;
            this.radSubRXFilter8.Name = "radSubRXFilter8";
            this.radSubRXFilter8.CheckedChanged += new System.EventHandler(this.radSubRXFilter8_CheckedChanged);
            // 
            // radSubRXFilter9
            // 
            resources.ApplyResources(this.radSubRXFilter9, "radSubRXFilter9");
            this.radSubRXFilter9.FlatAppearance.BorderSize = 0;
            this.radSubRXFilter9.Image = null;
            this.radSubRXFilter9.Name = "radSubRXFilter9";
            this.radSubRXFilter9.CheckedChanged += new System.EventHandler(this.radSubRXFilter9_CheckedChanged);
            // 
            // radSubRXFilter10
            // 
            resources.ApplyResources(this.radSubRXFilter10, "radSubRXFilter10");
            this.radSubRXFilter10.FlatAppearance.BorderSize = 0;
            this.radSubRXFilter10.Image = null;
            this.radSubRXFilter10.Name = "radSubRXFilter10";
            this.radSubRXFilter10.CheckedChanged += new System.EventHandler(this.radSubRXFilter10_CheckedChanged);
            // 
            // radSubRXFilterVar1
            // 
            resources.ApplyResources(this.radSubRXFilterVar1, "radSubRXFilterVar1");
            this.radSubRXFilterVar1.FlatAppearance.BorderSize = 0;
            this.radSubRXFilterVar1.Image = null;
            this.radSubRXFilterVar1.Name = "radSubRXFilterVar1";
            this.radSubRXFilterVar1.CheckedChanged += new System.EventHandler(this.radSubRXFilterVar1_CheckedChanged);
            // 
            // radSubRXFilterVar2
            // 
            resources.ApplyResources(this.radSubRXFilterVar2, "radSubRXFilterVar2");
            this.radSubRXFilterVar2.FlatAppearance.BorderSize = 0;
            this.radSubRXFilterVar2.Image = null;
            this.radSubRXFilterVar2.Name = "radSubRXFilterVar2";
            this.radSubRXFilterVar2.CheckedChanged += new System.EventHandler(this.radSubRXFilterVar2_CheckedChanged);
            // 
            // labelTS3
            // 
            this.labelTS3.Image = null;
            resources.ApplyResources(this.labelTS3, "labelTS3");
            this.labelTS3.Name = "labelTS3";
            // 
            // labelTS4
            // 
            this.labelTS4.Image = null;
            resources.ApplyResources(this.labelTS4, "labelTS4");
            this.labelTS4.Name = "labelTS4";
            // 
            // grpDSPSubRX
            // 
            resources.ApplyResources(this.grpDSPSubRX, "grpDSPSubRX");
            this.grpDSPSubRX.Controls.Add(this.chkNB2SubRX);
            this.grpDSPSubRX.Controls.Add(this.chkNBSubRX);
            this.grpDSPSubRX.Controls.Add(this.chkANFSubRX);
            this.grpDSPSubRX.Controls.Add(this.chkNRSubRX);
            this.grpDSPSubRX.Controls.Add(this.chkBINSubRX);
            this.grpDSPSubRX.Name = "grpDSPSubRX";
            this.grpDSPSubRX.TabStop = false;
            // 
            // grpSoundControls1
            // 
            resources.ApplyResources(this.grpSoundControls1, "grpSoundControls1");
            this.grpSoundControls1.Controls.Add(this.ptbPWR1);
            this.grpSoundControls1.Controls.Add(this.ptbRF1);
            this.grpSoundControls1.Controls.Add(this.ptbAF1);
            this.grpSoundControls1.Controls.Add(this.udRF1);
            this.grpSoundControls1.Controls.Add(this.lblRF1);
            this.grpSoundControls1.Controls.Add(this.lblPWR1);
            this.grpSoundControls1.Controls.Add(this.udPWR1);
            this.grpSoundControls1.Controls.Add(this.lblAF1);
            this.grpSoundControls1.Controls.Add(this.udAF1);
            this.grpSoundControls1.Name = "grpSoundControls1";
            this.grpSoundControls1.TabStop = false;
            // 
            // lblRF1
            // 
            this.lblRF1.Image = null;
            resources.ApplyResources(this.lblRF1, "lblRF1");
            this.lblRF1.Name = "lblRF1";
            // 
            // lblPWR1
            // 
            this.lblPWR1.Image = null;
            resources.ApplyResources(this.lblPWR1, "lblPWR1");
            this.lblPWR1.Name = "lblPWR1";
            // 
            // lblAF1
            // 
            this.lblAF1.Image = null;
            resources.ApplyResources(this.lblAF1, "lblAF1");
            this.lblAF1.Name = "lblAF1";
            // 
            // grpSubRXMode
            // 
            resources.ApplyResources(this.grpSubRXMode, "grpSubRXMode");
            this.grpSubRXMode.Controls.Add(this.radSUBRxModeAM);
            this.grpSubRXMode.Controls.Add(this.radSUBRxModeSAM);
            this.grpSubRXMode.Controls.Add(this.radSUBRxModeDSB);
            this.grpSubRXMode.Controls.Add(this.radSUBRxModeCWU);
            this.grpSubRXMode.Controls.Add(this.radSUBRxModeDIGU);
            this.grpSubRXMode.Controls.Add(this.radSUBRxModeDIGL);
            this.grpSubRXMode.Controls.Add(this.radSUBRxModeLSB);
            this.grpSubRXMode.Controls.Add(this.radSUBRxModeSPEC);
            this.grpSubRXMode.Controls.Add(this.radSUBRxModeDRM);
            this.grpSubRXMode.Controls.Add(this.radSUBRxModeFMN);
            this.grpSubRXMode.Controls.Add(this.radSUBRxModeUSB);
            this.grpSubRXMode.Controls.Add(this.radSUBRxModeCWL);
            this.grpSubRXMode.Name = "grpSubRXMode";
            this.grpSubRXMode.TabStop = false;
            // 
            // grpMainRXMode
            // 
            resources.ApplyResources(this.grpMainRXMode, "grpMainRXMode");
            this.grpMainRXMode.Controls.Add(this.radModeAM);
            this.grpMainRXMode.Controls.Add(this.radModeSAM);
            this.grpMainRXMode.Controls.Add(this.radModeDSB);
            this.grpMainRXMode.Controls.Add(this.radModeCWU);
            this.grpMainRXMode.Controls.Add(this.radModeDIGU);
            this.grpMainRXMode.Controls.Add(this.radModeDIGL);
            this.grpMainRXMode.Controls.Add(this.radModeLSB);
            this.grpMainRXMode.Controls.Add(this.radModeSPEC);
            this.grpMainRXMode.Controls.Add(this.radModeDRM);
            this.grpMainRXMode.Controls.Add(this.radModeFMN);
            this.grpMainRXMode.Controls.Add(this.radModeUSB);
            this.grpMainRXMode.Controls.Add(this.radModeWFM);
            this.grpMainRXMode.Name = "grpMainRXMode";
            this.grpMainRXMode.TabStop = false;
            // 
            // grpG11
            // 
            this.grpG11.Controls.Add(this.chkG11ATTbtn);
            this.grpG11.Controls.Add(this.chkG11AFbtn);
            this.grpG11.Controls.Add(this.chkG11RFbtn);
            resources.ApplyResources(this.grpG11, "grpG11");
            this.grpG11.Name = "grpG11";
            this.grpG11.TabStop = false;
            // 
            // grpMoreBands
            // 
            resources.ApplyResources(this.grpMoreBands, "grpMoreBands");
            this.grpMoreBands.Controls.Add(this.radBandX12);
            this.grpMoreBands.Controls.Add(this.radBandX11);
            this.grpMoreBands.Controls.Add(this.radBandHF);
            this.grpMoreBands.Controls.Add(this.radBandX10);
            this.grpMoreBands.Controls.Add(this.radBandX9);
            this.grpMoreBands.Controls.Add(this.radBandX8);
            this.grpMoreBands.Controls.Add(this.radBandX7);
            this.grpMoreBands.Controls.Add(this.radBandX6);
            this.grpMoreBands.Controls.Add(this.radBandX5);
            this.grpMoreBands.Controls.Add(this.radBandX4);
            this.grpMoreBands.Controls.Add(this.radBandX3);
            this.grpMoreBands.Controls.Add(this.radBandX2);
            this.grpMoreBands.Controls.Add(this.radBandX1);
            this.grpMoreBands.Controls.Add(this.radBand600);
            this.grpMoreBands.Controls.Add(this.radBand2190);
            this.grpMoreBands.Name = "grpMoreBands";
            this.grpMoreBands.TabStop = false;
            // 
            // radBandX12
            // 
            resources.ApplyResources(this.radBandX12, "radBandX12");
            this.radBandX12.FlatAppearance.BorderSize = 0;
            this.radBandX12.Image = null;
            this.radBandX12.Name = "radBandX12";
            this.radBandX12.Click += new System.EventHandler(this.radBandX12_Click);
            this.radBandX12.CheckedChanged += new System.EventHandler(this.radBandX12_CheckedChanged);
            // 
            // radBandX11
            // 
            resources.ApplyResources(this.radBandX11, "radBandX11");
            this.radBandX11.FlatAppearance.BorderSize = 0;
            this.radBandX11.Image = null;
            this.radBandX11.Name = "radBandX11";
            this.radBandX11.Click += new System.EventHandler(this.radBandX11_Click);
            this.radBandX11.CheckedChanged += new System.EventHandler(this.radBandX11_CheckedChanged);
            // 
            // radBandX10
            // 
            resources.ApplyResources(this.radBandX10, "radBandX10");
            this.radBandX10.FlatAppearance.BorderSize = 0;
            this.radBandX10.Image = null;
            this.radBandX10.Name = "radBandX10";
            this.radBandX10.Click += new System.EventHandler(this.radBandX10_Click);
            this.radBandX10.CheckedChanged += new System.EventHandler(this.radBandX10_CheckedChanged);
            // 
            // radBandX9
            // 
            resources.ApplyResources(this.radBandX9, "radBandX9");
            this.radBandX9.FlatAppearance.BorderSize = 0;
            this.radBandX9.Image = null;
            this.radBandX9.Name = "radBandX9";
            this.radBandX9.Click += new System.EventHandler(this.radBandX9_Click);
            this.radBandX9.CheckedChanged += new System.EventHandler(this.radBandX9_CheckedChanged);
            // 
            // radBandX8
            // 
            resources.ApplyResources(this.radBandX8, "radBandX8");
            this.radBandX8.FlatAppearance.BorderSize = 0;
            this.radBandX8.Image = null;
            this.radBandX8.Name = "radBandX8";
            this.radBandX8.Click += new System.EventHandler(this.radBandX8_Click);
            this.radBandX8.CheckedChanged += new System.EventHandler(this.radBandX8_CheckedChanged);
            // 
            // radBandX7
            // 
            resources.ApplyResources(this.radBandX7, "radBandX7");
            this.radBandX7.FlatAppearance.BorderSize = 0;
            this.radBandX7.Image = null;
            this.radBandX7.Name = "radBandX7";
            this.radBandX7.Click += new System.EventHandler(this.radBandX7_Click);
            this.radBandX7.CheckedChanged += new System.EventHandler(this.radBandX7_CheckedChanged);
            // 
            // radBandX6
            // 
            resources.ApplyResources(this.radBandX6, "radBandX6");
            this.radBandX6.FlatAppearance.BorderSize = 0;
            this.radBandX6.Image = null;
            this.radBandX6.Name = "radBandX6";
            this.radBandX6.Click += new System.EventHandler(this.radBandX6_Click);
            this.radBandX6.CheckedChanged += new System.EventHandler(this.radBandX6_CheckedChanged);
            // 
            // radBandX5
            // 
            resources.ApplyResources(this.radBandX5, "radBandX5");
            this.radBandX5.FlatAppearance.BorderSize = 0;
            this.radBandX5.Image = null;
            this.radBandX5.Name = "radBandX5";
            this.radBandX5.Click += new System.EventHandler(this.radBandX5_Click);
            this.radBandX5.CheckedChanged += new System.EventHandler(this.radBandX5_CheckedChanged);
            // 
            // radBandX4
            // 
            resources.ApplyResources(this.radBandX4, "radBandX4");
            this.radBandX4.FlatAppearance.BorderSize = 0;
            this.radBandX4.Image = null;
            this.radBandX4.Name = "radBandX4";
            this.radBandX4.Click += new System.EventHandler(this.radBandX4_Click);
            this.radBandX4.CheckedChanged += new System.EventHandler(this.radBandX4_CheckedChanged);
            // 
            // radBandX3
            // 
            resources.ApplyResources(this.radBandX3, "radBandX3");
            this.radBandX3.FlatAppearance.BorderSize = 0;
            this.radBandX3.Image = null;
            this.radBandX3.Name = "radBandX3";
            this.radBandX3.Click += new System.EventHandler(this.radBandX3_Click);
            this.radBandX3.CheckedChanged += new System.EventHandler(this.radBandX3_CheckedChanged);
            // 
            // radBandX2
            // 
            resources.ApplyResources(this.radBandX2, "radBandX2");
            this.radBandX2.FlatAppearance.BorderSize = 0;
            this.radBandX2.Image = null;
            this.radBandX2.Name = "radBandX2";
            this.radBandX2.Click += new System.EventHandler(this.radBandX2_Click);
            this.radBandX2.CheckedChanged += new System.EventHandler(this.radBandX2_CheckedChanged);
            // 
            // radBandX1
            // 
            resources.ApplyResources(this.radBandX1, "radBandX1");
            this.radBandX1.FlatAppearance.BorderSize = 0;
            this.radBandX1.Image = null;
            this.radBandX1.Name = "radBandX1";
            this.radBandX1.Click += new System.EventHandler(this.radBandX1_Click);
            this.radBandX1.CheckedChanged += new System.EventHandler(this.radBandX1_CheckedChanged);
            // 
            // grpModeSpecificFM
            // 
            resources.ApplyResources(this.grpModeSpecificFM, "grpModeSpecificFM");
            this.grpModeSpecificFM.Controls.Add(this.chkWFMstereo);
            this.grpModeSpecificFM.Controls.Add(this.udFMOffset);
            this.grpModeSpecificFM.Controls.Add(this.labelTS7);
            this.grpModeSpecificFM.Controls.Add(this.radFMModeHigh);
            this.grpModeSpecificFM.Controls.Add(this.radFMModeSimplex);
            this.grpModeSpecificFM.Controls.Add(this.radFMModeLow);
            this.grpModeSpecificFM.Controls.Add(this.chkCTCSS);
            this.grpModeSpecificFM.Controls.Add(this.comboFMCTCSSFreq);
            this.grpModeSpecificFM.Controls.Add(this.grpFMVoiceMsg);
            this.grpModeSpecificFM.Controls.Add(this.ptbFMMicGain);
            this.grpModeSpecificFM.Controls.Add(this.labelTS8);
            this.grpModeSpecificFM.Controls.Add(this.txtFMmemory);
            this.grpModeSpecificFM.Controls.Add(this.lblFMMemory);
            this.grpModeSpecificFM.Controls.Add(this.btnFMMC);
            this.grpModeSpecificFM.Controls.Add(this.btnFMMR);
            this.grpModeSpecificFM.Controls.Add(this.btnFMMS);
            this.grpModeSpecificFM.Name = "grpModeSpecificFM";
            this.grpModeSpecificFM.TabStop = false;
            // 
            // labelTS7
            // 
            resources.ApplyResources(this.labelTS7, "labelTS7");
            this.labelTS7.Image = null;
            this.labelTS7.Name = "labelTS7";
            // 
            // grpFMVoiceMsg
            // 
            this.grpFMVoiceMsg.Controls.Add(this.chkFMMsg6);
            this.grpFMVoiceMsg.Controls.Add(this.chkFMMsg5);
            this.grpFMVoiceMsg.Controls.Add(this.chkFMMsg4);
            this.grpFMVoiceMsg.Controls.Add(this.chkFMMsg3);
            this.grpFMVoiceMsg.Controls.Add(this.chkFMMsg2);
            this.grpFMVoiceMsg.Controls.Add(this.chkFMMsg1);
            resources.ApplyResources(this.grpFMVoiceMsg, "grpFMVoiceMsg");
            this.grpFMVoiceMsg.Name = "grpFMVoiceMsg";
            this.grpFMVoiceMsg.TabStop = false;
            // 
            // chkFMMsg6
            // 
            resources.ApplyResources(this.chkFMMsg6, "chkFMMsg6");
            this.chkFMMsg6.FlatAppearance.BorderSize = 0;
            this.chkFMMsg6.Image = null;
            this.chkFMMsg6.Name = "chkFMMsg6";
            this.chkFMMsg6.UseVisualStyleBackColor = true;
            this.chkFMMsg6.CheckedChanged += new System.EventHandler(this.chkFMMsg6_CheckedChanged);
            this.chkFMMsg6.MouseHover += new System.EventHandler(this.chkFMMsg6_MouseHover);
            // 
            // chkFMMsg5
            // 
            resources.ApplyResources(this.chkFMMsg5, "chkFMMsg5");
            this.chkFMMsg5.FlatAppearance.BorderSize = 0;
            this.chkFMMsg5.Image = null;
            this.chkFMMsg5.Name = "chkFMMsg5";
            this.chkFMMsg5.UseVisualStyleBackColor = true;
            this.chkFMMsg5.CheckedChanged += new System.EventHandler(this.chkFMMsg5_CheckedChanged);
            this.chkFMMsg5.MouseHover += new System.EventHandler(this.chkFMMsg5_MouseHover);
            // 
            // chkFMMsg4
            // 
            resources.ApplyResources(this.chkFMMsg4, "chkFMMsg4");
            this.chkFMMsg4.FlatAppearance.BorderSize = 0;
            this.chkFMMsg4.Image = null;
            this.chkFMMsg4.Name = "chkFMMsg4";
            this.chkFMMsg4.UseVisualStyleBackColor = true;
            this.chkFMMsg4.CheckedChanged += new System.EventHandler(this.chkFMMsg4_CheckedChanged);
            this.chkFMMsg4.MouseHover += new System.EventHandler(this.chkFMMsg4_MouseHover);
            // 
            // chkFMMsg3
            // 
            resources.ApplyResources(this.chkFMMsg3, "chkFMMsg3");
            this.chkFMMsg3.FlatAppearance.BorderSize = 0;
            this.chkFMMsg3.Image = null;
            this.chkFMMsg3.Name = "chkFMMsg3";
            this.chkFMMsg3.UseVisualStyleBackColor = true;
            this.chkFMMsg3.CheckedChanged += new System.EventHandler(this.chkFMMsg3_CheckedChanged);
            this.chkFMMsg3.MouseHover += new System.EventHandler(this.chkFMMsg3_MouseHover);
            // 
            // chkFMMsg2
            // 
            resources.ApplyResources(this.chkFMMsg2, "chkFMMsg2");
            this.chkFMMsg2.FlatAppearance.BorderSize = 0;
            this.chkFMMsg2.Image = null;
            this.chkFMMsg2.Name = "chkFMMsg2";
            this.chkFMMsg2.UseVisualStyleBackColor = true;
            this.chkFMMsg2.CheckedChanged += new System.EventHandler(this.chkFMMsg2_CheckedChanged);
            this.chkFMMsg2.MouseHover += new System.EventHandler(this.chkFMMsg2_MouseHover);
            // 
            // chkFMMsg1
            // 
            resources.ApplyResources(this.chkFMMsg1, "chkFMMsg1");
            this.chkFMMsg1.FlatAppearance.BorderSize = 0;
            this.chkFMMsg1.ForeColor = System.Drawing.SystemColors.ControlText;
            this.chkFMMsg1.Image = null;
            this.chkFMMsg1.Name = "chkFMMsg1";
            this.chkFMMsg1.UseVisualStyleBackColor = false;
            this.chkFMMsg1.CheckedChanged += new System.EventHandler(this.chkFMMsg1_CheckedChanged);
            this.chkFMMsg1.MouseHover += new System.EventHandler(this.chkFMMsg1_MouseHover);
            // 
            // labelTS8
            // 
            this.labelTS8.Image = null;
            resources.ApplyResources(this.labelTS8, "labelTS8");
            this.labelTS8.Name = "labelTS8";
            // 
            // txtFMmemory
            // 
            resources.ApplyResources(this.txtFMmemory, "txtFMmemory");
            this.txtFMmemory.Name = "txtFMmemory";
            // 
            // grpG6
            // 
            this.grpG6.Controls.Add(this.chkG6ATT_18dB);
            this.grpG6.Controls.Add(this.chkG6ATT_12dB);
            this.grpG6.Controls.Add(this.chkG6ATT_6dB);
            this.grpG6.Controls.Add(this.chkG6AF);
            this.grpG6.Controls.Add(this.chkG6RF);
            resources.ApplyResources(this.grpG6, "grpG6");
            this.grpG6.Name = "grpG6";
            this.grpG6.TabStop = false;
            // 
            // Console
            // 
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.None;
            this.BackColor = System.Drawing.SystemColors.Control;
            resources.ApplyResources(this, "$this");
            this.Controls.Add(this.grpG11);
            this.Controls.Add(this.grpModeSpecificPhone);
            this.Controls.Add(this.grpG6);
            this.Controls.Add(this.grpG59);
            this.Controls.Add(this.grpModeSpecificFM);
            this.Controls.Add(this.grpModeSpecificDigital);
            this.Controls.Add(this.grpMainRXMode);
            this.Controls.Add(this.grpSubRXMode);
            this.Controls.Add(this.grpVFOnew);
            this.Controls.Add(this.grpSoundControls);
            this.Controls.Add(this.grpSoundControls1);
            this.Controls.Add(this.grpVFOB);
            this.Controls.Add(this.menuStrip1);
            this.Controls.Add(this.btnUSB);
            this.Controls.Add(this.grpZoom);
            this.Controls.Add(this.grpSubRX);
            this.Controls.Add(this.grpVFOBetween);
            this.Controls.Add(this.grpDisplay2);
            this.Controls.Add(this.grpOptions);
            this.Controls.Add(this.grpVFO);
            this.Controls.Add(this.lblCPUMeter);
            this.Controls.Add(this.grpDisplay);
            this.Controls.Add(this.chkPower);
            this.Controls.Add(this.grpLOSC);
            this.Controls.Add(this.grpVFOA);
            this.Controls.Add(this.grpDSPMainRX);
            this.Controls.Add(this.grpDSPSubRX);
            this.Controls.Add(this.btnNetwork);
            this.Controls.Add(this.grpG500);
            this.Controls.Add(this.grpG137);
            this.Controls.Add(this.grpG40);
            this.Controls.Add(this.grpG160);
            this.Controls.Add(this.grpG3020);
            this.Controls.Add(this.grpG80);
            this.Controls.Add(this.grpMainRXFilter);
            this.Controls.Add(this.grpSubRXFilter);
            this.Controls.Add(this.grpBandHF);
            this.Controls.Add(this.grpModeSpecificCW);
            this.Controls.Add(this.grpManualNotch);
            this.Controls.Add(this.picSmallAGauge);
            this.Controls.Add(this.grpMultimeter);
            this.Controls.Add(this.grpMoreBands);
            this.DoubleBuffered = true;
            this.KeyPreview = true;
            this.MainMenuStrip = this.menuStrip1;
            this.Name = "Console";
            this.MouseWheel += new System.Windows.Forms.MouseEventHandler(this.Console_MouseWheel);
            this.SizeChanged += new System.EventHandler(this.Console_Resize);
            this.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.Console_KeyPress);
            this.KeyUp += new System.Windows.Forms.KeyEventHandler(this.Console_KeyUp);
            this.KeyDown += new System.Windows.Forms.KeyEventHandler(this.Console_KeyDown);
            ((System.ComponentModel.ISupportInitialize)(this.ptbPWR)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbRF)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbAF)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.udCWPitch)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.udCWSpeed)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbRX0Gain)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbPanSubRX)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbPanMainRX)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbRX1Gain)).EndInit();
            this.contextMenuMUTE.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.udFilterHigh)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.udFilterLow)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbFilterWidth)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbFilterShift)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.udXIT)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.udRIT)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.udVACTXGain)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.udVACRXGain)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.udSubRXFilterHigh)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.udSubRXFilterLow)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbSubRXFilterWidth)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbSubRXFilterShift)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbSQLMainRX)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.udSQLSubRX)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbSQLSubRX)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.udSQLMainRX)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbPWR1)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbRF1)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbAF1)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.udRF1)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.udPWR1)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.udAF1)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbNotchWidth)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbNotchShift)).EndInit();
            this.contextMemoryMenu.ResumeLayout(false);
            this.contextMenuFMMemory.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.udFMOffset)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbFMMicGain)).EndInit();
            this.contextLOSCMenu.ResumeLayout(false);
            this.menuStrip1.ResumeLayout(false);
            this.menuStrip1.PerformLayout();
            this.contextNewVFOSmeter.ResumeLayout(false);
            this.contextNewVFOSmeter.PerformLayout();
            this.grpG500.ResumeLayout(false);
            this.grpG137.ResumeLayout(false);
            this.grpG40.ResumeLayout(false);
            this.grpModeSpecificPhone.ResumeLayout(false);
            this.groupBoxTS1.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.udNoiseGate)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.udVOX)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbMIC)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.udCPDR)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbCPDR)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.udCOMP)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbCOMP)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.picNoiseGate)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbNoiseGate)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.picVOX)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbVOX)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.udMIC)).EndInit();
            this.grpVFOA.ResumeLayout(false);
            this.grpVFOA.PerformLayout();
            this.grpVFOnew.ResumeLayout(false);
            this.grpVFOnew.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)(this.picAGauge)).EndInit();
            this.grpSoundControls.ResumeLayout(false);
            this.grpSoundControls.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)(this.picSQLSubRX)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.picSQLMainRX)).EndInit();
            this.grpModeSpecificCW.ResumeLayout(false);
            this.grpCWX.ResumeLayout(false);
            this.grpCWPitch.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.ptbCWSpeed)).EndInit();
            this.grpVFOB.ResumeLayout(false);
            this.grpVFOB.PerformLayout();
            this.grpLOSC.ResumeLayout(false);
            this.grpLOSC.PerformLayout();
            this.grpG160.ResumeLayout(false);
            this.grpG3020.ResumeLayout(false);
            this.grpG80.ResumeLayout(false);
            this.grpG59.ResumeLayout(false);
            this.grpZoom.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.ptbDisplayZoom)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbDisplayPan)).EndInit();
            this.grpSubRX.ResumeLayout(false);
            this.grpSubRX.PerformLayout();
            this.grpBandHF.ResumeLayout(false);
            this.grpVFOBetween.ResumeLayout(false);
            this.grpVFOBetween.PerformLayout();
            this.grpDisplay2.ResumeLayout(false);
            this.grpOptions.ResumeLayout(false);
            this.grpModeSpecificDigital.ResumeLayout(false);
            this.grpDIGSampleRate.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.ptbVACTXGain)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbVACRXGain)).EndInit();
            this.grpDisplay.ResumeLayout(false);
            this.grpDisplay.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)(this.picWaterfall)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.picDisplay)).EndInit();
            this.grpMainRXFilter.ResumeLayout(false);
            this.grpDSPMainRX.ResumeLayout(false);
            this.grpMultimeter.ResumeLayout(false);
            this.grpMultimeter.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)(this.picMultiMeterDigital)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.picMultimeterAnalog)).EndInit();
            this.grpVFO.ResumeLayout(false);
            this.grpVFO.PerformLayout();
            this.grpManualNotch.ResumeLayout(false);
            this.grpManualNotch.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)(this.picSmallAGauge)).EndInit();
            this.grpSubRXFilter.ResumeLayout(false);
            this.grpDSPSubRX.ResumeLayout(false);
            this.grpSoundControls1.ResumeLayout(false);
            this.grpSubRXMode.ResumeLayout(false);
            this.grpMainRXMode.ResumeLayout(false);
            this.grpG11.ResumeLayout(false);
            this.grpMoreBands.ResumeLayout(false);
            this.grpModeSpecificFM.ResumeLayout(false);
            this.grpModeSpecificFM.PerformLayout();
            this.grpFMVoiceMsg.ResumeLayout(false);
            this.grpG6.ResumeLayout(false);
            this.ResumeLayout(false);
            this.PerformLayout();

        }
        #endregion

        #region Main

        [STAThread]
        static void Main(string[] args)
        {
            try
            {
#if(WIN32)
                if (!File.Exists(Application.StartupPath + "\\wisdom"))
                {
                    if (File.Exists(Application.StartupPath + "\\fftw_wisdom.exe"))
                    {
                        Process p = Process.Start(Application.StartupPath + "\\fftw_wisdom.exe", ".\\");
                        MessageBox.Show("Running one time optimization.  Please wait patiently for " +
                            "this process to finish.\nTypically the optimization takes no more than 3-5 minutes.",
                            "Optimizing...",
                            MessageBoxButtons.OK,
                            MessageBoxIcon.Information);
                        p.WaitForExit();
                    }
                    else
                    {
                        MessageBox.Show("Error:missing fftw_wisdom.exe!", "Error!", MessageBoxButtons.OK,
                            MessageBoxIcon.Information);
                    }
                }
#endif

#if(WIN64)
                if (!File.Exists(Application.StartupPath + "\\wisdom"))
                {
                    if (File.Exists(Application.StartupPath + "\\fftw_wisdom.exe"))
                    {
                        ProcessStartInfo startInfo = new ProcessStartInfo();
                        startInfo.CreateNoWindow = false;
                        startInfo.UseShellExecute = false;
                        startInfo.FileName = "fftw_wisdom.exe";
                        startInfo.WindowStyle = ProcessWindowStyle.Normal;
                        startInfo.RedirectStandardOutput = true;
                        startInfo.Arguments = "cif16 cif32 cif64 cif128 cif256 cif512 cif1024 cif2048 cif4096 cif8192 cib64 cib128 cib256 cib512 cib1024 cib2048 cib4096 cib8192";

                        MessageBox.Show("Running one time optimization.  Please wait patiently for " +
                            "this process to finish.\nTypically the optimization takes few minutes.",
                            "Optimizing...",
                            MessageBoxButtons.OK,
                            MessageBoxIcon.Information);

                        using (Process process = Process.Start(startInfo))
                        {
                            using (StreamReader reader = process.StandardOutput)
                            {
                                string result = reader.ReadToEnd();
                                File.WriteAllText("wisdom", result);
                            }

                            process.WaitForExit();
                        }
                    }
                    else
                    {
                        MessageBox.Show("Error:missing fftw_wisdom.exe!", "Error!", MessageBoxButtons.OK,
                            MessageBoxIcon.Information);
                    }
                }
#endif

                try
                {
                    if (!CheckForOpenProcesses())
                        return;
                }
                catch (Exception)
                {

                }

                Application.EnableVisualStyles();
                Application.DoEvents();
                Application.Run(new Console(args));
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message + "\n\n" + ex.StackTrace.ToString(), "Fatal Error",
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void eventWatcher_EventArrived(object sender, EventArrivedEventArgs e)   // yt7pwr
        {
            if (current_model == Model.GENESIS_G59NET)
            {
                net_device.Disconnect();
                network_event.Set();                                                    // removall ethernet cable
            }

        }

        protected override void WndProc(ref Message m)  // yt7pwr
        {
            // Purpose    : Overrides WndProc to enable checking for and handling
            //            : WM_DEVICECHANGE(messages)
            // Accepts    : m - a Windows Message

            try
            {
                switch (m.Msg)
                {
                    case WM_SIZE:
                        {
                            if (debug_enabled)
                                Invoke(new DebugCallbackFunction(DebugCallback),
                                    "WM_SIZE message!\n" + m.WParam.ToString());

                            if (m.HWnd == this.Handle)
                            {
                                //this.Console_Resize(this, EventArgs.Empty);
                            }
                        }
                        break;

                    case WM_EXITSIZEMOVE:
                        {
                            if (debug_enabled)
                                Invoke(new DebugCallbackFunction(DebugCallback),
                                    "WM_EXITSIZEMOVE message!\n" + m.WParam.ToString());

                            if (m.HWnd == this.Handle)
                            {
                                //this.Console_Resize(this, EventArgs.Empty);
                            }
                        }
                        break;
                    default:
                        {
                            //if (debug_enabled)
                                //Invoke(new DebugCallbackFunction(DebugCallback),
                                    //"Wnd message!\n" + m.WParam.ToString());
                            // Let the base form process the message.
                            base.WndProc(ref m);
                        }
                        break;
                }

                if (!booting)
                {
                    // The OnDeviceChange routine processes WM_DEVICECHANGE messages.
                    if (m.WParam.ToInt32() == DBT_DEVICEARRIVAL || m.WParam.ToInt32() == 0x0007)            // device arrival
                    {
                        switch (current_model)
                        {
                            case (Model.GENESIS_G59USB):
                                {
                                    if (!g59.Connected)
                                    {
                                        g59.OnDeviceChange(m);
                                        Thread.Sleep(300);

                                        if (g59.Connected)
                                        {
                                            G59Init();
                                            btnUSB.BackColor = Color.Green;
                                        }
                                        else
                                            btnUSB.BackColor = Color.Red;
                                    }
                                }
                                break;

                            case (Model.GENESIS_G11):
                                {
                                    if (!g11.Connected)
                                    {
                                        g11.OnDeviceChange(m);
                                        Thread.Sleep(300);

                                        if (g11.Connected)
                                        {
                                            G11Init();
                                            btnUSB.BackColor = Color.Green;
                                        }
                                        else
                                            btnUSB.BackColor = Color.Red;
                                    }
                                }
                                break;

                            case Model.GENESIS_G6:
                                //g6.OnDeviceChange(m);
                                Thread.Sleep(300);

                                if (g6.Connected)
                                {
                                    G6Init();
                                    btnUSB.BackColor = Color.Green;
                                }
                                else
                                    btnUSB.BackColor = Color.Red;
                                break;

                            case Model.RTL_SDR:
                                RTL_SDR.InitUSB();

                                if (RTL_SDR.connected)
                                    btnUSB.BackColor = Color.Green;
                                else
                                    btnUSB.BackColor = Color.Red;
                                break;

                            case Model.QRP2000:
                                ReInit_USB();
                                break;

                            default:
                                {
                                    SetupForm.chkGeneralUSBPresent.Checked = true;                                   // try to connect Si570
                                }
                                break;
                        }
                    }
                    else if (m.WParam.ToInt32() == DBT_DEVICEREMOVECOMPLETE || m.WParam.ToInt32() == 0x0007)         // removal
                    {
                        switch (current_model)
                        {
                            case Model.GENESIS_G59USB:
                                {
                                    if (g59.Connected)
                                    {
                                        if (!g59.OnDeviceChange(m))
                                            btnUSB.BackColor = Color.Red;
                                        else
                                            btnUSB.BackColor = Color.Green;
                                    }
                                }
                                break;

                            case Model.GENESIS_G11:
                                if (g11.Connected)
                                {
                                    if (!g11.OnDeviceChange(m))
                                        btnUSB.BackColor = Color.Red;
                                    else
                                        btnUSB.BackColor = Color.Green;
                                }
                                break;

                            case Model.GENESIS_G6:
                                if (g6.Connected)
                                {
                                    /*if (!g6.OnDeviceChange(m))
                                        btnUSB.BackColor = Color.Red;
                                    else
                                        btnUSB.BackColor = Color.Green;*/
                                }
                                break;

                            case Model.QRP2000:
                                ReInit_USB();
                                break;

                            default:
                                if (usb_si570_enable)
                                    btnUSB.BackColor = Color.Red;
                                break;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.Write("WndProc error!\n\n" + ex.StackTrace.ToString());
            }
        }

        private void minimalisticToolStripMenuItem_Click(object sender, EventArgs e)    // yt7pwr
        {
            if (minimal_screen)
            {
                minimal_screen = false;
                minimalisticToolStripMenuItem.Text = "Compact screen";
            }
            else
            {
                minimal_screen = true;
                minimalisticToolStripMenuItem.Text = "Normal screen";
            }

            Console_Resize(null, null);
            Console_Resize(null, null);
        }

        private void ShowGroup()
        {
            System.Drawing.Point Visible_group_position = new System.Drawing.Point(0, 0);
            int tmp_x = 0;
            int tmp_y = 0;

            grpModeSpecificFM.Visible = false;
            grpModeSpecificPhone.Visible = false;
            grpModeSpecificDigital.Visible = false;
            grpModeSpecificCW.Visible = false;
            grpMainRXFilter.Visible = false;
            grpSubRXFilter.Visible = false;

            if (vfo_new_look)
            {
                switch (current_visible_group)
                {
                    case VisibleGroup.ZERO:
                        grpVFOnew.Width = grpDisplay.Width;
                        Visible_group_position.X = grpDisplay.Location.X;
                        Visible_group_position.Y = 31;
                        grpVFOnew.Location = Visible_group_position;
                        break;
                    case VisibleGroup.Multimeter:
                        switch (current_meter_display_mode)
                        {
                            case MultiMeterDisplayMode.Analog:
                                {
                                    grpMultimeter.Visible = false;
                                    picSmallAGauge.Visible = true;
                                    picSmallAGauge.BringToFront();
                                    Visible_group_position.X = this.Width - picSmallAGauge.Width - 18;
                                    Visible_group_position.Y = grpVFOnew.Location.Y + (grpVFOnew.Height - picSmallAGauge.Height) / 2;
                                    picSmallAGauge.Location = Visible_group_position;
                                    Visible_group_position.X = grpDisplay.Location.X;
                                    Visible_group_position.Y = 31;
                                    grpVFOnew.Location = Visible_group_position;
                                    grpVFOnew.Width = (this.Width - picSmallAGauge.Width - 28);
                                    grpDisplay.Height = (this.Height - picSmallAGauge.Height - 78);
                                    Visible_group_position.X = 4;
                                    Visible_group_position.Y = (grpVFO.Location.Y + picSmallAGauge.Height);
                                    grpDisplay.Location = Visible_group_position;
                                }
                                break;

                            default:
                                {
                                    picSmallAGauge.Visible = false;
                                    grpMultimeter.Visible = true;
                                    grpMultimeter.BringToFront();
                                    Visible_group_position.X = this.Width - grpMultimeter.Width - 18;
                                    Visible_group_position.Y = grpVFOnew.Location.Y + (grpVFOnew.Height - grpMultimeter.Height) / 2;
                                    grpMultimeter.Location = Visible_group_position;
                                    Visible_group_position.X = grpDisplay.Location.X;
                                    Visible_group_position.Y = 31;
                                    grpVFOnew.Location = Visible_group_position;
                                    grpVFOnew.Width = (this.Width - grpMultimeter.Width - 28);
                                    grpDisplay.Height = (this.Height - grpMultimeter.Height - 78);
                                    Visible_group_position.X = 4;
                                    Visible_group_position.Y = (grpVFO.Location.Y + grpMultimeter.Height);
                                    grpDisplay.Location = Visible_group_position;
                                }
                                break;
                        }
                        break;
                    case VisibleGroup.Options:
                        grpOptions.Visible = true;
                        Visible_group_position.X = this.Width - grpOptions.Width - 18;
                        Visible_group_position.Y = grpVFOnew.Location.Y + (grpVFOnew.Height - grpOptions.Height) / 2;
                        grpOptions.Location = Visible_group_position;
                        Visible_group_position.X = grpDisplay.Location.X;
                        Visible_group_position.Y = 31;
                        grpVFOnew.Location = Visible_group_position;
                        grpVFOnew.Width = (this.Width - grpOptions.Width - 28);
                        grpDisplay.Height = (this.Height - grpOptions.Height - 78);
                        Visible_group_position.X = 4;
                        Visible_group_position.Y = (grpVFO.Location.Y + grpOptions.Height);
                        grpDisplay.Location = Visible_group_position;
                        break;
                    case VisibleGroup.SoundControl:
                        grpSoundControls1.Visible = true;
                        Visible_group_position.X = this.Width - grpSoundControls.Width - 18;
                        Visible_group_position.Y = 31;
                        grpSoundControls1.Location = Visible_group_position;
                        grpVFOnew.Width = (grpDisplay.Width - grpSoundControls1.Width - 28);
                        Visible_group_position.X = grpDisplay.Location.X;
                        grpVFOnew.Location = Visible_group_position;
                        grpVFOnew.Width = (this.Width - grpSoundControls.Width - 28);
                        break;
                    case VisibleGroup.VFO:
                        grpVFO.Visible = true;
                        Visible_group_position.X = this.Width - grpVFO.Width - 20;
                        Visible_group_position.Y = 31;
                        grpVFO.Location = Visible_group_position;
                        Visible_group_position.X = grpDisplay.Location.X;
                        grpVFOnew.Location = Visible_group_position;
                        grpVFOnew.Width = (grpDisplay.Width - grpVFO.Width - 8);
                        break;
                    case VisibleGroup.VFOBetween:
                        grpVFOBetween.Visible = true;
                        Visible_group_position.X = this.Width - grpVFOBetween.Width - 20;
                        Visible_group_position.Y = 31;
                        grpVFOBetween.Location = Visible_group_position;
                        grpVFOnew.Width = (grpDisplay.Width - grpVFOBetween.Width - 8);
                        Visible_group_position.X = grpDisplay.Location.X;
                        grpVFOnew.Location = Visible_group_position;
                        break;
                    case VisibleGroup.DSPMainRX:
                        grpDSPMainRX.Visible = true;
                        grpDSPMainRX.BringToFront();
                        Visible_group_position.X = this.Width - grpDSPMainRX.Width - 20;
                        Visible_group_position.Y = grpVFOnew.Location.Y + (grpVFOnew.Height - grpDSPMainRX.Height) / 2;
                        grpDSPMainRX.Location = Visible_group_position;
                        Visible_group_position.X = grpDisplay.Location.X;
                        Visible_group_position.Y = 31;
                        grpVFOnew.Location = Visible_group_position;
                        grpVFOnew.Width = (grpDisplay.Width - grpDSPMainRX.Width - 8);
                        break;
                    case VisibleGroup.DSPSubRX:
                        grpDSPSubRX.Visible = true;
                        Visible_group_position.X = this.Width - grpDSPSubRX.Width - 20;
                        Visible_group_position.Y = grpVFOnew.Location.Y + (grpVFOnew.Height - grpDSPSubRX.Height) / 2;
                        grpDSPSubRX.Location = Visible_group_position;
                        grpVFOnew.Width = (grpDisplay.Width - grpDSPSubRX.Width - 8);
                        Visible_group_position.X = grpDisplay.Location.X;
                        Visible_group_position.Y = 31;
                        grpVFOnew.Location = Visible_group_position;
                        break;
                    case VisibleGroup.Display2:
                        grpDisplay2.Visible = true;
                        Visible_group_position.X = this.Width - grpDisplay2.Width - 20;
                        Visible_group_position.Y = grpVFOnew.Location.Y + (grpVFOnew.Height - grpDisplay2.Height) / 2;
                        grpDisplay2.Location = Visible_group_position;
                        grpVFOnew.Width = (grpDisplay.Width - grpDisplay2.Width - 20);
                        Visible_group_position.X = grpDisplay.Location.X;
                        Visible_group_position.Y = 31;
                        grpVFOnew.Location = Visible_group_position;
                        grpVFOnew.Width = (grpDisplay.Width - grpDisplay2.Width - 8);
                        break;
                    case VisibleGroup.ModeSpecificPhone:
                        grpModeSpecificPhone.Visible = true;
                        Visible_group_position.X = this.Width - grpModeSpecificPhone.Width - 20;
                        Visible_group_position.Y = 31;
                        grpModeSpecificPhone.Location = Visible_group_position;
                        grpVFOnew.Width = (this.Width - grpModeSpecificPhone.Width - 28);
                        Visible_group_position.X = grpDisplay.Location.X;
                        Visible_group_position.Y = 31;
                        grpVFOnew.Location = Visible_group_position;
                        break;
                    case VisibleGroup.ModeSpecificFM:
                        grpModeSpecificFM.Visible = true;
                        Visible_group_position.X = this.Width - grpModeSpecificFM.Width - 20;
                        Visible_group_position.Y = 31;
                        grpModeSpecificFM.Location = Visible_group_position;
                        grpVFOnew.Width = (this.Width - grpModeSpecificFM.Width - 28);
                        Visible_group_position.X = grpDisplay.Location.X;
                        Visible_group_position.Y = 31;
                        grpVFOnew.Location = Visible_group_position;
                        break;
                    case VisibleGroup.ModeSpecificCW:
                        grpModeSpecificCW.Visible = true;
                        Visible_group_position.X = this.Width - grpModeSpecificCW.Width - 20;
                        Visible_group_position.Y = 31;
                        grpModeSpecificCW.Location = Visible_group_position;
                        grpVFOnew.Width = (this.Width - grpModeSpecificCW.Width - 28);
                        Visible_group_position.X = grpDisplay.Location.X;
                        Visible_group_position.Y = 31;
                        grpVFOnew.Location = Visible_group_position;
                        break;
                    case VisibleGroup.ModeSpecificDigital:
                        grpModeSpecificDigital.Visible = true;
                        Visible_group_position.X = this.Width - grpModeSpecificDigital.Width - 20;
                        Visible_group_position.Y = 31;
                        grpModeSpecificDigital.Location = Visible_group_position;
                        grpVFOnew.Width = (this.Width - grpModeSpecificDigital.Width - 28);
                        Visible_group_position.X = grpDisplay.Location.X;
                        Visible_group_position.Y = 31;
                        grpVFOnew.Location = Visible_group_position;
                        break;
                    case VisibleGroup.Zoom:
                        grpZoom.Visible = true;
                        grpVFOnew.Width = (grpDisplay.Width - grpZoom.Width - 8);
                        Visible_group_position.X = grpDisplay.Location.X;
                        Visible_group_position.Y = 31;
                        grpVFOnew.Location = Visible_group_position;
                        tmp_x = (grpDisplay.Width - (grpVFOnew.Width + grpZoom.Width)) / 2;
                        tmp_y = (grpVFOnew.Height - grpZoom.Height) / 2;
                        Visible_group_position.X = grpVFOnew.Location.X + grpVFOnew.Width + 2 * tmp_x;
                        Visible_group_position.Y = grpVFOnew.Location.Y + tmp_y;
                        grpZoom.Location = Visible_group_position;
                        break;
                    case VisibleGroup.BandHF:
                        grpBandHF.Visible = true;
                        grpVFOnew.Width = (grpDisplay.Width - grpBandHF.Width - 8);
                        Visible_group_position.X = grpDisplay.Location.X;
                        Visible_group_position.Y = 31;
                        grpVFOnew.Location = Visible_group_position;
                        tmp_x = (grpDisplay.Width - (grpVFOnew.Width + grpBandHF.Width)) / 2;
                        tmp_y = (grpVFOnew.Height - grpBandHF.Height) / 2;
                        Visible_group_position.X = grpVFOnew.Location.X + grpVFOnew.Width + 2 * tmp_x;
                        Visible_group_position.Y = grpVFOnew.Location.Y + tmp_y;
                        grpBandHF.Location = Visible_group_position;
                        grpMoreBands.Location = Visible_group_position;
                        break;
                    case VisibleGroup.RXSettings:
                        grpManualNotch.Visible = true;
                        grpManualNotch.BringToFront();
                        grpVFOnew.Width = (grpDisplay.Width - grpManualNotch.Width - 8);
                        Visible_group_position.X = grpDisplay.Location.X;
                        Visible_group_position.Y = 31;
                        grpVFOnew.Location = Visible_group_position;
                        tmp_x = (grpDisplay.Width - (grpVFOnew.Width + grpManualNotch.Width)) / 2;
                        tmp_y = (grpVFOnew.Height - grpManualNotch.Height) / 2;
                        Visible_group_position.X = grpVFOnew.Location.X + grpVFOnew.Width + 2 * tmp_x;
                        Visible_group_position.Y = grpVFOnew.Location.Y + tmp_y;
                        grpManualNotch.Location = Visible_group_position;
                        break;
                    case VisibleGroup.MainRXMode:
                        grpMainRXMode.Visible = true;
                        grpMainRXMode.BringToFront();
                        grpVFOnew.Width = (grpDisplay.Width - grpMainRXMode.Width - 8);
                        Visible_group_position.X = grpDisplay.Location.X;
                        Visible_group_position.Y = 31;
                        grpVFOnew.Location = Visible_group_position;
                        tmp_x = (grpDisplay.Width - (grpVFOnew.Width + grpMainRXMode.Width)) / 2;
                        tmp_y = (grpVFOnew.Height - grpMainRXMode.Height) / 2;
                        Visible_group_position.X = grpVFOnew.Location.X + grpVFOnew.Width + 2 * tmp_x;
                        Visible_group_position.Y = grpVFOnew.Location.Y + tmp_y;
                        grpMainRXMode.Location = Visible_group_position;
                        break;
                    case VisibleGroup.MainRXFilter:
                        grpMainRXFilter.Visible = true;
                        grpMainRXFilter.BringToFront();
                        grpVFOnew.Width = (grpDisplay.Width - grpMainRXFilter.Width - 8);
                        Visible_group_position.X = grpDisplay.Location.X;
                        Visible_group_position.Y = 31;
                        grpVFOnew.Location = Visible_group_position;
                        tmp_x = (grpDisplay.Width - (grpVFOnew.Width + grpMainRXFilter.Width)) / 2;
                        tmp_y = (grpVFOnew.Height - grpMainRXFilter.Height) / 2;
                        Visible_group_position.X = grpVFOnew.Location.X + grpVFOnew.Width + 2 * tmp_x;
                        Visible_group_position.Y = grpVFOnew.Location.Y;
                        grpMainRXFilter.Location = Visible_group_position;
                        break;
                    case VisibleGroup.SubRXMode:
                        grpSubRXMode.Visible = true;
                        grpSubRXMode.BringToFront();
                        Visible_group_position.X = this.Width - grpSubRXMode.Width - 18;
                        Visible_group_position.Y = grpVFOnew.Location.Y + (grpVFOnew.Height - grpSubRXMode.Height) / 2;
                        grpSubRXMode.Location = Visible_group_position;
                        grpVFOnew.Width = (grpDisplay.Width - grpSubRXMode.Width - 4);
                        Visible_group_position.X = grpDisplay.Location.X;
                        Visible_group_position.Y = 31;
                        grpVFOnew.Location = Visible_group_position;
                        break;
                    case VisibleGroup.SubRXFilter:
                        grpSubRXFilter.Visible = true;
                        grpSubRXFilter.BringToFront();
                        Visible_group_position.X = this.Width - grpSubRXFilter.Width - 20;
                        Visible_group_position.Y = grpVFOnew.Location.Y;
                        grpSubRXFilter.Location = Visible_group_position;
                        grpVFOnew.Width = (grpDisplay.Width - grpSubRXFilter.Width - 8);
                        Visible_group_position.X = grpDisplay.Location.X;
                        Visible_group_position.Y = 31;
                        grpVFOnew.Location = Visible_group_position;
                        break;
                    case VisibleGroup.G160:
                        grpG160.Visible = true;
                        grpG160.BringToFront();
                        grpVFOnew.Width = (grpDisplay.Width - grpG160.Width - 8);
                        Visible_group_position.X = grpDisplay.Location.X;
                        Visible_group_position.Y = 31;
                        grpVFOnew.Location = Visible_group_position;
                        tmp_x = (grpDisplay.Width - (grpVFOnew.Width + grpG160.Width)) / 2;
                        tmp_y = (grpVFOnew.Height - grpG160.Height) / 2;
                        Visible_group_position.X = grpVFOnew.Location.X + grpVFOnew.Width + 2 * tmp_x;
                        Visible_group_position.Y = grpVFOnew.Location.Y + tmp_y;
                        grpG160.Location = Visible_group_position;
                        break;
                    case VisibleGroup.G80:
                        grpG80.Visible = true;
                        grpG80.BringToFront();
                        grpVFOnew.Width = (grpDisplay.Width - grpG80.Width - 8);
                        Visible_group_position.X = grpDisplay.Location.X;
                        Visible_group_position.Y = 31;
                        grpVFOnew.Location = Visible_group_position;
                        tmp_x = (grpDisplay.Width - (grpVFOnew.Width + grpG80.Width)) / 2;
                        tmp_y = (grpVFOnew.Height - grpG80.Height) / 2;
                        Visible_group_position.X = grpVFOnew.Location.X + grpVFOnew.Width + 2 * tmp_x;
                        Visible_group_position.Y = grpVFOnew.Location.Y + tmp_y;
                        grpG80.Location = Visible_group_position;
                        break;
                    case VisibleGroup.G137:
                        grpG137.Visible = true;
                        grpG137.BringToFront();
                        grpVFOnew.Width = (grpDisplay.Width - grpG137.Width - 8);
                        Visible_group_position.X = grpDisplay.Location.X;
                        Visible_group_position.Y = 31;
                        grpVFOnew.Location = Visible_group_position;
                        tmp_x = (grpDisplay.Width - (grpVFOnew.Width + grpG137.Width)) / 2;
                        tmp_y = (grpVFOnew.Height - grpG137.Height) / 2;
                        Visible_group_position.X = grpVFOnew.Location.X + grpVFOnew.Width + 2 * tmp_x;
                        Visible_group_position.Y = grpVFOnew.Location.Y + tmp_y;
                        grpG137.Location = Visible_group_position;
                        break;
                    case VisibleGroup.G500:
                        grpG500.Visible = true;
                        grpVFOnew.Width = (grpDisplay.Width - grpG500.Width - 8);
                        Visible_group_position.X = grpDisplay.Location.X;
                        Visible_group_position.Y = 31;
                        grpVFOnew.Location = Visible_group_position;
                        tmp_x = (grpDisplay.Width - (grpVFOnew.Width + grpG500.Width)) / 2;
                        tmp_y = (grpVFOnew.Height - grpG500.Height) / 2;
                        Visible_group_position.X = grpVFOnew.Location.X + grpVFOnew.Width + 2 * tmp_x;
                        Visible_group_position.Y = grpVFOnew.Location.Y + tmp_y;
                        grpG500.Location = Visible_group_position;
                        break;
                    case VisibleGroup.G40:
                        grpG40.Visible = true;
                        grpG40.BringToFront();
                        grpVFOnew.Width = (grpDisplay.Width - grpG40.Width - 8);
                        Visible_group_position.X = grpDisplay.Location.X;
                        Visible_group_position.Y = 31;
                        grpVFOnew.Location = Visible_group_position;
                        tmp_x = (grpDisplay.Width - (grpVFOnew.Width + grpG40.Width)) / 2;
                        tmp_y = (grpVFOnew.Height - grpG40.Height) / 2;
                        Visible_group_position.X = grpVFOnew.Location.X + grpVFOnew.Width + 2 * tmp_x;
                        Visible_group_position.Y = grpVFOnew.Location.Y + tmp_y;
                        grpG40.Location = Visible_group_position;
                        break;
                    case VisibleGroup.G3020:
                        grpG3020.Visible = true;
                        grpG3020.BringToFront();
                        grpVFOnew.Width = (grpDisplay.Width - grpG3020.Width - 8);
                        Visible_group_position.X = grpDisplay.Location.X;
                        Visible_group_position.Y = 31;
                        grpVFOnew.Location = Visible_group_position;
                        tmp_x = (grpDisplay.Width - (grpVFOnew.Width + grpG3020.Width)) / 2;
                        tmp_y = (grpVFOnew.Height - grpG3020.Height) / 2;
                        Visible_group_position.X = grpVFOnew.Location.X + grpVFOnew.Width + 2 * tmp_x;
                        Visible_group_position.Y = grpVFOnew.Location.Y + tmp_y;
                        grpG3020.Location = Visible_group_position;
                        break;
                    case VisibleGroup.G59:
                        grpG59.Visible = true;
                        grpG59.BringToFront();
                        grpVFOnew.Width = (grpDisplay.Width - grpG59.Width - 8);
                        Visible_group_position.X = grpDisplay.Location.X;
                        Visible_group_position.Y = 31;
                        grpVFOnew.Location = Visible_group_position;
                        tmp_x = (grpDisplay.Width - (grpVFOnew.Width + grpG59.Width)) / 2;
                        tmp_y = (grpVFOnew.Height - grpG59.Height) / 2;
                        Visible_group_position.X = grpVFOnew.Location.X + grpVFOnew.Width + 2 * tmp_x;
                        Visible_group_position.Y = grpVFOnew.Location.Y + tmp_y;
                        grpG59.Location = Visible_group_position;
                        break;
                    case VisibleGroup.G11:
                        grpG11.Visible = true;
                        grpG11.BringToFront();
                        grpVFOnew.Width = (grpDisplay.Width - grpG11.Width - 8);
                        Visible_group_position.X = grpDisplay.Location.X;
                        Visible_group_position.Y = 31;
                        grpVFOnew.Location = Visible_group_position;
                        tmp_x = (grpDisplay.Width - (grpVFOnew.Width + grpG11.Width)) / 2;
                        tmp_y = (grpVFOnew.Height - grpG11.Height) / 2;
                        Visible_group_position.X = grpVFOnew.Location.X + grpVFOnew.Width + 2 * tmp_x;
                        Visible_group_position.Y = grpVFOnew.Location.Y + tmp_y;
                        grpG11.Location = Visible_group_position;
                        break;
                    case VisibleGroup.G6:
                        grpG6.Visible = true;
                        grpG6.BringToFront();
                        grpVFOnew.Width = (grpDisplay.Width - grpG6.Width - 8);
                        Visible_group_position.X = grpDisplay.Location.X;
                        Visible_group_position.Y = 31;
                        grpVFOnew.Location = Visible_group_position;
                        tmp_x = (grpDisplay.Width - (grpVFOnew.Width + grpG6.Width)) / 2;
                        tmp_y = (grpVFOnew.Height - grpG6.Height) / 2;
                        Visible_group_position.X = grpVFOnew.Location.X + grpVFOnew.Width + 2 * tmp_x;
                        Visible_group_position.Y = grpVFOnew.Location.Y + tmp_y;
                        grpG6.Location = Visible_group_position;
                        break;
                }
            }
            else                                    // clasic
            {
                switch (current_visible_group)
                {
                    case VisibleGroup.ZERO:
                        tmp_x = (this.Width - (3 * grpVFOA.Width)) / 4;
                        grpDisplay.Height = this.Height - grpVFOA.Height - 78;
                        tmp_y = (this.Height - grpDisplay.Height - grpVFOA.Height) / 2;
                        Visible_group_position.X = 4;
                        Visible_group_position.Y = tmp_y + grpVFOA.Height;
                        grpDisplay.Location = Visible_group_position;
                        Visible_group_position.X = tmp_x;
                        Visible_group_position.Y = tmp_y;
                        grpVFOA.Location = Visible_group_position;
                        Visible_group_position.X = grpVFOA.Location.X + grpVFOA.Width + tmp_x;
                        grpVFOB.Location = Visible_group_position;
                        Visible_group_position.X = grpVFOB.Location.X + grpVFOB.Width + tmp_x;
                        grpLOSC.Location = Visible_group_position;
                        Visible_group_position.X = grpLOSC.Location.X + grpLOSC.Width + tmp_x;
                        break;
                    case VisibleGroup.Multimeter:
                        switch (current_meter_display_mode)
                        {
                            case MultiMeterDisplayMode.Analog:
                                {
                                    grpMultimeter.Visible = false;
                                    picSmallAGauge.Visible = true;
                                    picSmallAGauge.BringToFront();
                                    tmp_x = (this.Width - (3 * grpVFOA.Width + picSmallAGauge.Width)) / 5;
                                    grpDisplay.Height = (this.Height - picSmallAGauge.Height - 78);
                                    tmp_y = (this.Height - (grpDisplay.Height + picSmallAGauge.Height)) / 2;
                                    Visible_group_position.X = 4;
                                    Visible_group_position.Y = tmp_y + picSmallAGauge.Height;
                                    grpDisplay.Location = Visible_group_position;
                                    Visible_group_position.X = tmp_x;
                                    Visible_group_position.Y = (picSmallAGauge.Height - grpVFOA.Height) / 2 + tmp_y;
                                    grpVFOA.Location = Visible_group_position;
                                    Visible_group_position.X = grpVFOA.Location.X + grpVFOA.Width + tmp_x;
                                    grpVFOB.Location = Visible_group_position;
                                    Visible_group_position.X = grpVFOB.Location.X + grpVFOB.Width + tmp_x;
                                    grpLOSC.Location = Visible_group_position;
                                    Visible_group_position.X = grpLOSC.Location.X + grpLOSC.Width + tmp_x;
                                    Visible_group_position.Y = tmp_y;
                                    picSmallAGauge.Location = Visible_group_position;
                                }
                                break;

                            default:
                                {
                                    grpMultimeter.Visible = true;
                                    grpMultimeter.BringToFront();
                                    tmp_x = (this.Width - (3 * grpVFOA.Width + grpMultimeter.Width)) / 5;
                                    grpDisplay.Height = (this.Height - grpMultimeter.Height - 78);
                                    tmp_y = (this.Height - (grpDisplay.Height + grpMultimeter.Height)) / 2;
                                    Visible_group_position.X = 4;
                                    Visible_group_position.Y = tmp_y + grpMultimeter.Height;
                                    grpDisplay.Location = Visible_group_position;
                                    Visible_group_position.X = tmp_x;
                                    Visible_group_position.Y = (grpMultimeter.Height - grpVFOA.Height) / 2 + tmp_y;
                                    grpVFOA.Location = Visible_group_position;
                                    Visible_group_position.X = grpVFOA.Location.X + grpVFOA.Width + tmp_x;
                                    grpVFOB.Location = Visible_group_position;
                                    Visible_group_position.X = grpVFOB.Location.X + grpVFOB.Width + tmp_x;
                                    grpLOSC.Location = Visible_group_position;
                                    Visible_group_position.X = grpLOSC.Location.X + grpLOSC.Width + tmp_x;
                                    Visible_group_position.Y = tmp_y;
                                    grpMultimeter.Location = Visible_group_position;
                                }
                                break;
                        }
                        break;
                    case VisibleGroup.Options:
                        grpOptions.Visible = true;
                        tmp_x = (this.Width - (3 * grpVFOA.Width + grpOptions.Width)) / 5;
                        grpDisplay.Height = (this.Height - grpOptions.Height - 78);
                        tmp_y = (this.Height - (grpDisplay.Height + grpOptions.Height)) / 2;
                        Visible_group_position.X = 4;
                        Visible_group_position.Y = tmp_y + grpOptions.Height;
                        grpDisplay.Location = Visible_group_position;
                        Visible_group_position.X = tmp_x;
                        Visible_group_position.Y = (grpOptions.Height - grpVFOA.Height) / 2 + tmp_y;
                        grpVFOA.Location = Visible_group_position;
                        Visible_group_position.X = grpVFOA.Location.X + grpVFOA.Width + tmp_x;
                        grpVFOB.Location = Visible_group_position;
                        Visible_group_position.X = grpVFOB.Location.X + grpVFOB.Width + tmp_x;
                        grpLOSC.Location = Visible_group_position;
                        Visible_group_position.X = grpLOSC.Location.X + grpLOSC.Width + tmp_x;
                        Visible_group_position.Y = tmp_y;
                        grpOptions.Location = Visible_group_position;
                        break;
                    case VisibleGroup.SoundControl:
                        grpSoundControls1.Visible = true;
                        tmp_x = (this.Width - (3 * grpVFOA.Width + grpSoundControls1.Width)) / 5;
                        grpDisplay.Height = (this.Height - grpSoundControls1.Height - 78);
                        tmp_y = (this.Height - (grpDisplay.Height + grpSoundControls1.Height)) / 2;
                        Visible_group_position.X = 4;
                        Visible_group_position.Y = tmp_y + grpSoundControls1.Height;
                        grpDisplay.Location = Visible_group_position;
                        Visible_group_position.X = tmp_x;
                        Visible_group_position.Y = (grpSoundControls1.Height - grpVFOA.Height) / 2 + tmp_y;
                        grpVFOA.Location = Visible_group_position;
                        Visible_group_position.X = grpVFOA.Location.X + grpVFOA.Width + tmp_x;
                        grpVFOB.Location = Visible_group_position;
                        Visible_group_position.X = grpVFOB.Location.X + grpVFOB.Width + tmp_x;
                        grpLOSC.Location = Visible_group_position;
                        Visible_group_position.X = grpLOSC.Location.X + grpLOSC.Width + tmp_x;
                        Visible_group_position.Y = tmp_y;
                        grpSoundControls1.Location = Visible_group_position;
                        break;
                    case VisibleGroup.VFO:
                        grpVFO.Visible = true;
                        tmp_x = (this.Width - (3 * grpVFOA.Width + grpVFO.Width)) / 5;
                        grpDisplay.Height = (this.Height - grpVFO.Height - 78);
                        tmp_y = (this.Height - (grpDisplay.Height + grpVFO.Height)) / 2;
                        Visible_group_position.X = 4;
                        Visible_group_position.Y = tmp_y + grpVFO.Height;
                        grpDisplay.Location = Visible_group_position;
                        Visible_group_position.X = tmp_x;
                        Visible_group_position.Y = (grpVFO.Height - grpVFOA.Height) / 2 + tmp_y;
                        grpVFOA.Location = Visible_group_position;
                        Visible_group_position.X = grpVFOA.Location.X + grpVFOA.Width + tmp_x;
                        grpVFOB.Location = Visible_group_position;
                        Visible_group_position.X = grpVFOB.Location.X + grpVFOB.Width + tmp_x;
                        grpLOSC.Location = Visible_group_position;
                        Visible_group_position.X = grpLOSC.Location.X + grpLOSC.Width + tmp_x;
                        Visible_group_position.Y = tmp_y;
                        grpVFO.Location = Visible_group_position;
                        break;
                    case VisibleGroup.VFOBetween:
                        grpVFOBetween.Visible = true;
                        tmp_x = (this.Width - (3 * grpVFOA.Width + grpVFOBetween.Width)) / 5;
                        grpDisplay.Height = (this.Height - grpVFOBetween.Height - 78);
                        tmp_y = (this.Height - (grpDisplay.Height + grpVFOBetween.Height)) / 2;
                        Visible_group_position.X = 4;
                        Visible_group_position.Y = tmp_y + grpVFOBetween.Height;
                        grpDisplay.Location = Visible_group_position;
                        Visible_group_position.X = tmp_x;
                        Visible_group_position.Y = (grpVFOBetween.Height - grpVFOA.Height) / 2 + tmp_y;
                        grpVFOA.Location = Visible_group_position;
                        Visible_group_position.X = grpVFOA.Location.X + grpVFOA.Width + tmp_x;
                        grpVFOB.Location = Visible_group_position;
                        Visible_group_position.X = grpVFOB.Location.X + grpVFOB.Width + tmp_x;
                        grpLOSC.Location = Visible_group_position;
                        Visible_group_position.X = grpLOSC.Location.X + grpLOSC.Width + tmp_x;
                        Visible_group_position.Y = tmp_y;
                        grpVFOBetween.Location = Visible_group_position;
                        break;
                    case VisibleGroup.DSPMainRX:
                        grpDSPMainRX.Visible = true;
                        grpDSPMainRX.BringToFront();
                        tmp_x = (this.Width - (3 * grpVFOA.Width + grpDSPMainRX.Width)) / 5;
                        grpDisplay.Height = (this.Height - grpDSPMainRX.Height - 78);
                        tmp_y = (this.Height - (grpDisplay.Height + grpDSPMainRX.Height)) / 2;
                        Visible_group_position.X = 4;
                        Visible_group_position.Y = tmp_y + grpDSPMainRX.Height;
                        grpDisplay.Location = Visible_group_position;
                        Visible_group_position.X = tmp_x;
                        Visible_group_position.Y = (grpDSPMainRX.Height - grpVFOA.Height) / 2 + tmp_y;
                        grpVFOA.Location = Visible_group_position;
                        Visible_group_position.X = grpVFOA.Location.X + grpVFOA.Width + tmp_x;
                        grpVFOB.Location = Visible_group_position;
                        Visible_group_position.X = grpVFOB.Location.X + grpVFOB.Width + tmp_x;
                        grpLOSC.Location = Visible_group_position;
                        Visible_group_position.X = grpLOSC.Location.X + grpLOSC.Width + tmp_x;
                        Visible_group_position.Y = tmp_y;
                        grpDSPMainRX.Location = Visible_group_position;
                        break;
                    case VisibleGroup.DSPSubRX:
                        grpDSPSubRX.Visible = true;
                        tmp_x = (this.Width - (3 * grpVFOA.Width + grpDSPSubRX.Width)) / 5;
                        grpDisplay.Height = (this.Height - grpDSPSubRX.Height - 78);
                        tmp_y = (this.Height - (grpDisplay.Height + grpDSPSubRX.Height)) / 2;
                        Visible_group_position.X = 4;
                        Visible_group_position.Y = tmp_y + grpDSPSubRX.Height;
                        grpDisplay.Location = Visible_group_position;
                        Visible_group_position.X = tmp_x;
                        Visible_group_position.Y = (grpDSPSubRX.Height - grpVFOA.Height) / 2 + tmp_y;
                        grpVFOA.Location = Visible_group_position;
                        Visible_group_position.X = grpVFOA.Location.X + grpVFOA.Width + tmp_x;
                        grpVFOB.Location = Visible_group_position;
                        Visible_group_position.X = grpVFOB.Location.X + grpVFOB.Width + tmp_x;
                        grpLOSC.Location = Visible_group_position;
                        Visible_group_position.X = grpLOSC.Location.X + grpLOSC.Width + tmp_x;
                        Visible_group_position.Y = tmp_y;
                        grpDSPSubRX.Location = Visible_group_position;
                        break;
                    case VisibleGroup.Display2:
                        grpDisplay2.Visible = true;
                        tmp_x = (this.Width - (3 * grpVFOA.Width + grpDisplay2.Width)) / 5;
                        grpDisplay.Height = (this.Height - grpDisplay2.Height - 78);
                        tmp_y = (this.Height - (grpDisplay.Height + grpDisplay2.Height)) / 2;
                        Visible_group_position.X = 4;
                        Visible_group_position.Y = tmp_y + grpDisplay2.Height;
                        grpDisplay.Location = Visible_group_position;
                        Visible_group_position.X = tmp_x;
                        Visible_group_position.Y = (grpDisplay2.Height - grpVFOA.Height) / 2 + tmp_y;
                        grpVFOA.Location = Visible_group_position;
                        Visible_group_position.X = grpVFOA.Location.X + grpVFOA.Width + tmp_x;
                        grpVFOB.Location = Visible_group_position;
                        Visible_group_position.X = grpVFOB.Location.X + grpVFOB.Width + tmp_x;
                        grpLOSC.Location = Visible_group_position;
                        Visible_group_position.X = grpLOSC.Location.X + grpLOSC.Width + tmp_x;
                        Visible_group_position.Y = tmp_y;
                        grpDisplay2.Location = Visible_group_position;
                        break;
                    case VisibleGroup.ModeSpecificPhone:
                        grpModeSpecificPhone.Visible = true;
                        tmp_x = (this.Width - (3 * grpVFOA.Width + grpModeSpecificPhone.Width)) / 5;
                        grpDisplay.Height = (this.Height - grpModeSpecificPhone.Height - 78);
                        tmp_y = (this.Height - (grpDisplay.Height + grpModeSpecificPhone.Height)) / 2;
                        Visible_group_position.X = 4;
                        Visible_group_position.Y = tmp_y + grpModeSpecificPhone.Height;
                        grpDisplay.Location = Visible_group_position;
                        Visible_group_position.X = tmp_x;
                        Visible_group_position.Y = (grpModeSpecificPhone.Height - grpVFOA.Height) / 2 + tmp_y;
                        grpVFOA.Location = Visible_group_position;
                        Visible_group_position.X = grpVFOA.Location.X + grpVFOA.Width + tmp_x;
                        grpVFOB.Location = Visible_group_position;
                        Visible_group_position.X = grpVFOB.Location.X + grpVFOB.Width + tmp_x;
                        grpLOSC.Location = Visible_group_position;
                        Visible_group_position.X = grpLOSC.Location.X + grpLOSC.Width + tmp_x;
                        Visible_group_position.Y = tmp_y;
                        grpModeSpecificPhone.Location = Visible_group_position;
                        break;
                    case VisibleGroup.ModeSpecificFM:
                        grpModeSpecificFM.Visible = true;
                        tmp_x = (this.Width - (3 * grpVFOA.Width + grpModeSpecificFM.Width)) / 5;
                        grpDisplay.Height = (this.Height - grpModeSpecificFM.Height - 78);
                        tmp_y = (this.Height - (grpDisplay.Height + grpModeSpecificFM.Height)) / 2;
                        Visible_group_position.X = 4;
                        Visible_group_position.Y = tmp_y + grpModeSpecificFM.Height;
                        grpDisplay.Location = Visible_group_position;
                        Visible_group_position.X = tmp_x;
                        Visible_group_position.Y = (grpModeSpecificFM.Height - grpVFOA.Height) / 2 + tmp_y;
                        grpVFOA.Location = Visible_group_position;
                        Visible_group_position.X = grpVFOA.Location.X + grpVFOA.Width + tmp_x;
                        grpVFOB.Location = Visible_group_position;
                        Visible_group_position.X = grpVFOB.Location.X + grpVFOB.Width + tmp_x;
                        grpLOSC.Location = Visible_group_position;
                        Visible_group_position.X = grpLOSC.Location.X + grpLOSC.Width + tmp_x;
                        Visible_group_position.Y = tmp_y;
                        grpModeSpecificFM.Location = Visible_group_position;
                        break;
                    case VisibleGroup.ModeSpecificCW:
                        grpModeSpecificCW.Visible = true;
                        tmp_x = (this.Width - (3 * grpVFOA.Width + grpModeSpecificCW.Width)) / 5;
                        grpDisplay.Height = (this.Height - grpModeSpecificCW.Height - 78);
                        tmp_y = (this.Height - (grpDisplay.Height + grpModeSpecificCW.Height)) / 2;
                        Visible_group_position.X = 4;
                        Visible_group_position.Y = tmp_y + grpModeSpecificCW.Height;
                        grpDisplay.Location = Visible_group_position;
                        Visible_group_position.X = tmp_x;
                        Visible_group_position.Y = (grpModeSpecificCW.Height - grpVFOA.Height) / 2 + tmp_y;
                        grpVFOA.Location = Visible_group_position;
                        Visible_group_position.X = grpVFOA.Location.X + grpVFOA.Width + tmp_x;
                        grpVFOB.Location = Visible_group_position;
                        Visible_group_position.X = grpVFOB.Location.X + grpVFOB.Width + tmp_x;
                        grpLOSC.Location = Visible_group_position;
                        Visible_group_position.X = grpLOSC.Location.X + grpLOSC.Width + tmp_x;
                        Visible_group_position.Y = tmp_y;
                        grpModeSpecificCW.Location = Visible_group_position;
                        break;
                    case VisibleGroup.ModeSpecificDigital:
                        grpModeSpecificDigital.Visible = true;
                        tmp_x = (this.Width - (3 * grpVFOA.Width + grpModeSpecificDigital.Width)) / 5;
                        grpDisplay.Height = (this.Height - grpModeSpecificDigital.Height - 78);
                        tmp_y = (this.Height - (grpDisplay.Height + grpModeSpecificDigital.Height)) / 2;
                        Visible_group_position.X = 4;
                        Visible_group_position.Y = tmp_y + grpModeSpecificDigital.Height;
                        grpDisplay.Location = Visible_group_position;
                        Visible_group_position.X = tmp_x;
                        Visible_group_position.Y = (grpModeSpecificDigital.Height - grpVFOA.Height) / 2 + tmp_y;
                        grpVFOA.Location = Visible_group_position;
                        Visible_group_position.X = grpVFOA.Location.X + grpVFOA.Width + tmp_x;
                        grpVFOB.Location = Visible_group_position;
                        Visible_group_position.X = grpVFOB.Location.X + grpVFOB.Width + tmp_x;
                        grpLOSC.Location = Visible_group_position;
                        Visible_group_position.X = grpLOSC.Location.X + grpLOSC.Width + tmp_x;
                        Visible_group_position.Y = tmp_y;
                        grpModeSpecificDigital.Location = Visible_group_position;
                        break;
                    case VisibleGroup.Zoom:
                        grpZoom.Visible = true;
                        tmp_x = (this.Width - (3 * grpVFOA.Width + grpZoom.Width)) / 5;
                        grpDisplay.Height = (this.Height - grpZoom.Height - 78);
                        tmp_y = (this.Height - (grpDisplay.Height + grpZoom.Height)) / 2;
                        Visible_group_position.X = 4;
                        Visible_group_position.Y = tmp_y + grpZoom.Height;
                        grpDisplay.Location = Visible_group_position;
                        Visible_group_position.X = tmp_x;
                        Visible_group_position.Y = (grpZoom.Height - grpVFOA.Height) / 2 + tmp_y;
                        grpVFOA.Location = Visible_group_position;
                        Visible_group_position.X = grpVFOA.Location.X + grpVFOA.Width + tmp_x;
                        grpVFOB.Location = Visible_group_position;
                        Visible_group_position.X = grpVFOB.Location.X + grpVFOB.Width + tmp_x;
                        grpLOSC.Location = Visible_group_position;
                        Visible_group_position.X = grpLOSC.Location.X + grpLOSC.Width + tmp_x;
                        Visible_group_position.Y = tmp_y;
                        grpZoom.Location = Visible_group_position;
                        break;
                    case VisibleGroup.BandHF:
                        grpBandHF.Visible = true;
                        tmp_x = (this.Width - (3 * grpVFOA.Width + grpBandHF.Width)) / 5;
                        grpDisplay.Height = (this.Height - grpBandHF.Height - 78);
                        tmp_y = (this.Height - (grpDisplay.Height + grpBandHF.Height)) / 2;
                        Visible_group_position.X = 4;
                        Visible_group_position.Y = tmp_y + grpBandHF.Height;
                        grpDisplay.Location = Visible_group_position;
                        Visible_group_position.X = tmp_x;
                        Visible_group_position.Y = (grpBandHF.Height - grpVFOA.Height) / 2 + tmp_y;
                        grpVFOA.Location = Visible_group_position;
                        Visible_group_position.X = grpVFOA.Location.X + grpVFOA.Width + tmp_x;
                        grpVFOB.Location = Visible_group_position;
                        Visible_group_position.X = grpVFOB.Location.X + grpVFOB.Width + tmp_x;
                        grpLOSC.Location = Visible_group_position;
                        Visible_group_position.X = grpLOSC.Location.X + grpLOSC.Width + tmp_x;
                        Visible_group_position.Y = tmp_y;
                        grpBandHF.Location = Visible_group_position;
                        grpMoreBands.Location = Visible_group_position;
                        break;
                    case VisibleGroup.RXSettings:
                        grpManualNotch.Visible = true;
                        grpManualNotch.BringToFront();
                        tmp_x = (this.Width - (3 * grpVFOA.Width + grpManualNotch.Width)) / 5;
                        grpDisplay.Height = (this.Height - grpManualNotch.Height - 78);
                        tmp_y = (this.Height - (grpDisplay.Height + grpManualNotch.Height)) / 2;
                        Visible_group_position.X = 4;
                        Visible_group_position.Y = tmp_y + grpManualNotch.Height;
                        grpDisplay.Location = Visible_group_position;
                        Visible_group_position.X = tmp_x;
                        Visible_group_position.Y = (grpManualNotch.Height - grpVFOA.Height) / 2 + tmp_y;
                        grpVFOA.Location = Visible_group_position;
                        Visible_group_position.X = grpVFOA.Location.X + grpVFOA.Width + tmp_x;
                        grpVFOB.Location = Visible_group_position;
                        Visible_group_position.X = grpVFOB.Location.X + grpVFOB.Width + tmp_x;
                        grpLOSC.Location = Visible_group_position;
                        Visible_group_position.X = grpLOSC.Location.X + grpLOSC.Width + tmp_x;
                        Visible_group_position.Y = tmp_y;
                        grpManualNotch.Location = Visible_group_position;
                        break;
                    case VisibleGroup.MainRXMode:
                        grpMainRXMode.Visible = true;
                        grpMainRXMode.BringToFront();
                        tmp_x = (this.Width - (3 * grpVFOA.Width + grpMainRXMode.Width)) / 5;
                        grpDisplay.Height = (this.Height - grpMainRXMode.Height - 78);
                        tmp_y = (this.Height - (grpDisplay.Height + grpMainRXMode.Height)) / 2;
                        Visible_group_position.X = 4;
                        Visible_group_position.Y = tmp_y + grpMainRXMode.Height;
                        grpDisplay.Location = Visible_group_position;
                        Visible_group_position.X = tmp_x;
                        Visible_group_position.Y = (grpMainRXMode.Height - grpVFOA.Height) / 2 + tmp_y;
                        grpVFOA.Location = Visible_group_position;
                        Visible_group_position.X = grpVFOA.Location.X + grpVFOA.Width + tmp_x;
                        grpVFOB.Location = Visible_group_position;
                        Visible_group_position.X = grpVFOB.Location.X + grpVFOB.Width + tmp_x;
                        grpLOSC.Location = Visible_group_position;
                        Visible_group_position.X = grpLOSC.Location.X + grpLOSC.Width + tmp_x;
                        Visible_group_position.Y = tmp_y;
                        grpMainRXMode.Location = Visible_group_position;
                        break;
                    case VisibleGroup.MainRXFilter:
                        grpMainRXFilter.Visible = true;
                        grpMainRXFilter.BringToFront();
                        tmp_x = (this.Width - (3 * grpVFOA.Width + grpMainRXFilter.Width)) / 5;
                        grpDisplay.Height = (this.Height - grpMainRXFilter.Height - 78);
                        tmp_y = (this.Height - (grpDisplay.Height + grpMainRXFilter.Height)) / 2;
                        Visible_group_position.X = 4;
                        Visible_group_position.Y = tmp_y + grpMainRXFilter.Height;
                        grpDisplay.Location = Visible_group_position;
                        Visible_group_position.X = tmp_x;
                        Visible_group_position.Y = (grpMainRXFilter.Height - grpVFOA.Height) / 2 + tmp_y;
                        grpVFOA.Location = Visible_group_position;
                        Visible_group_position.X = grpVFOA.Location.X + grpVFOA.Width + tmp_x;
                        grpVFOB.Location = Visible_group_position;
                        Visible_group_position.X = grpVFOB.Location.X + grpVFOB.Width + tmp_x;
                        grpLOSC.Location = Visible_group_position;
                        Visible_group_position.X = grpLOSC.Location.X + grpLOSC.Width + tmp_x;
                        Visible_group_position.Y = tmp_y;
                        grpMainRXFilter.Location = Visible_group_position;
                        break;
                    case VisibleGroup.SubRXMode:
                        grpSubRXMode.Visible = true;
                        grpSubRXMode.BringToFront();
                        tmp_x = (this.Width - (3 * grpVFOA.Width + grpSubRXMode.Width)) / 5;
                        grpDisplay.Height = (this.Height - grpSubRXMode.Height - 78);
                        tmp_y = (this.Height - (grpDisplay.Height + grpSubRXMode.Height)) / 2;
                        Visible_group_position.X = 4;
                        Visible_group_position.Y = tmp_y + grpSubRXMode.Height;
                        grpDisplay.Location = Visible_group_position;
                        Visible_group_position.X = tmp_x;
                        Visible_group_position.Y = (grpSubRXMode.Height - grpVFOA.Height) / 2 + tmp_y;
                        grpVFOA.Location = Visible_group_position;
                        Visible_group_position.X = grpVFOA.Location.X + grpVFOA.Width + tmp_x;
                        grpVFOB.Location = Visible_group_position;
                        Visible_group_position.X = grpVFOB.Location.X + grpVFOB.Width + tmp_x;
                        grpLOSC.Location = Visible_group_position;
                        Visible_group_position.X = grpLOSC.Location.X + grpLOSC.Width + tmp_x;
                        Visible_group_position.Y = tmp_y;
                        grpSubRXMode.Location = Visible_group_position;
                        break;
                    case VisibleGroup.SubRXFilter:
                        grpSubRXFilter.Visible = true;
                        grpSubRXFilter.BringToFront();
                        tmp_x = (this.Width - (3 * grpVFOA.Width + grpSubRXFilter.Width)) / 5;
                        grpDisplay.Height = (this.Height - grpSubRXFilter.Height - 78);
                        tmp_y = (this.Height - (grpDisplay.Height + grpSubRXFilter.Height)) / 2;
                        Visible_group_position.X = 4;
                        Visible_group_position.Y = tmp_y + grpSubRXFilter.Height;
                        grpDisplay.Location = Visible_group_position;
                        Visible_group_position.X = tmp_x;
                        Visible_group_position.Y = (grpSubRXFilter.Height - grpVFOA.Height) / 2 + tmp_y;
                        grpVFOA.Location = Visible_group_position;
                        Visible_group_position.X = grpVFOA.Location.X + grpVFOA.Width + tmp_x;
                        grpVFOB.Location = Visible_group_position;
                        Visible_group_position.X = grpVFOB.Location.X + grpVFOB.Width + tmp_x;
                        grpLOSC.Location = Visible_group_position;
                        Visible_group_position.X = grpLOSC.Location.X + grpLOSC.Width + tmp_x;
                        Visible_group_position.Y = tmp_y;
                        grpSubRXFilter.Location = Visible_group_position;
                        break;
                    case VisibleGroup.G160:
                        grpG160.Visible = true;
                        grpLOSC.BringToFront();
                        tmp_x = (this.Width - (3 * grpVFOA.Width + grpG160.Width)) / 5;
                        grpDisplay.Height = (this.Height - grpG160.Height - 78);
                        tmp_y = (this.Height - (grpDisplay.Height + grpG160.Height)) / 2;
                        Visible_group_position.X = 4;
                        Visible_group_position.Y = tmp_y + grpG160.Height;
                        grpDisplay.Location = Visible_group_position;
                        Visible_group_position.X = tmp_x;
                        Visible_group_position.Y = (grpG160.Height - grpVFOA.Height) / 2 + tmp_y;
                        grpVFOA.Location = Visible_group_position;
                        Visible_group_position.X = grpVFOA.Location.X + grpVFOA.Width + tmp_x;
                        grpVFOB.Location = Visible_group_position;
                        Visible_group_position.X = grpVFOB.Location.X + grpVFOB.Width + tmp_x;
                        grpLOSC.Location = Visible_group_position;
                        Visible_group_position.X = grpLOSC.Location.X + grpLOSC.Width + tmp_x;
                        Visible_group_position.Y = tmp_y;
                        grpG160.Location = Visible_group_position;
                        break;
                    case VisibleGroup.G80:
                        grpG80.Visible = true;
                        grpG80.BringToFront();
                        tmp_x = (this.Width - (3 * grpVFOA.Width + grpG80.Width)) / 5;
                        grpDisplay.Height = (this.Height - grpG80.Height - 78);
                        tmp_y = (this.Height - (grpDisplay.Height + grpG80.Height)) / 2;
                        Visible_group_position.X = 4;
                        Visible_group_position.Y = tmp_y + grpG80.Height;
                        grpDisplay.Location = Visible_group_position;
                        Visible_group_position.X = tmp_x;
                        Visible_group_position.Y = (grpG80.Height - grpVFOA.Height) / 2 + tmp_y;
                        grpVFOA.Location = Visible_group_position;
                        Visible_group_position.X = grpVFOA.Location.X + grpVFOA.Width + tmp_x;
                        grpVFOB.Location = Visible_group_position;
                        Visible_group_position.X = grpVFOB.Location.X + grpVFOB.Width + tmp_x;
                        grpLOSC.Location = Visible_group_position;
                        Visible_group_position.X = grpLOSC.Location.X + grpLOSC.Width + tmp_x;
                        Visible_group_position.Y = tmp_y;
                        grpG80.Location = Visible_group_position;
                        break;
                    case VisibleGroup.G137:
                        grpG137.Visible = true;
                        grpG137.BringToFront();
                        tmp_x = (this.Width - (3 * grpVFOA.Width + grpG137.Width)) / 5;
                        grpDisplay.Height = (this.Height - grpG137.Height - 78);
                        tmp_y = (this.Height - (grpDisplay.Height + grpG137.Height)) / 2;
                        Visible_group_position.X = 4;
                        Visible_group_position.Y = (tmp_y + grpG137.Height);
                        grpDisplay.Location = Visible_group_position;
                        Visible_group_position.X = tmp_x;
                        Visible_group_position.Y = (grpG137.Height - grpVFOA.Height) / 2 + tmp_y;
                        grpVFOA.Location = Visible_group_position;
                        Visible_group_position.X = grpVFOA.Location.X + grpVFOA.Width + tmp_x;
                        grpVFOB.Location = Visible_group_position;
                        Visible_group_position.X = grpVFOB.Location.X + grpVFOB.Width + tmp_x;
                        grpLOSC.Location = Visible_group_position;
                        Visible_group_position.X = grpLOSC.Location.X + grpLOSC.Width + tmp_x;
                        Visible_group_position.Y = tmp_y;
                        grpG137.Location = Visible_group_position;
                        break;
                    case VisibleGroup.G500:
                        grpG500.Visible = true;
                        tmp_x = (this.Width - (3 * grpVFOA.Width + grpG500.Width)) / 5;
                        grpDisplay.Height = (this.Height - grpG500.Height - 78);
                        tmp_y = (this.Height - (grpDisplay.Height + grpG500.Height)) / 2;
                        Visible_group_position.X = 4;
                        Visible_group_position.Y = (tmp_y + grpG500.Height);
                        grpDisplay.Location = Visible_group_position;
                        Visible_group_position.X = tmp_x;
                        Visible_group_position.Y = (grpG500.Height - grpVFOA.Height) / 2 + tmp_y;
                        grpVFOA.Location = Visible_group_position;
                        Visible_group_position.X = grpVFOA.Location.X + grpVFOA.Width + tmp_x;
                        grpVFOB.Location = Visible_group_position;
                        Visible_group_position.X = grpVFOB.Location.X + grpVFOB.Width + tmp_x;
                        grpLOSC.Location = Visible_group_position;
                        Visible_group_position.X = grpLOSC.Location.X + grpLOSC.Width + tmp_x;
                        Visible_group_position.Y = tmp_y;
                        grpG500.Location = Visible_group_position;
                        break;
                    case VisibleGroup.G40:
                        grpG40.Visible = true;
                        tmp_x = (this.Width - (3 * grpVFOA.Width + grpG40.Width)) / 5;
                        grpDisplay.Height = (this.Height - grpG40.Height - 78);
                        tmp_y = (this.Height - (grpDisplay.Height + grpG40.Height)) / 2;
                        Visible_group_position.X = 4;
                        Visible_group_position.Y = (tmp_y + grpG40.Height);
                        grpDisplay.Location = Visible_group_position;
                        Visible_group_position.X = tmp_x;
                        Visible_group_position.Y = (grpG40.Height - grpVFOA.Height) / 2 + tmp_y;
                        grpVFOA.Location = Visible_group_position;
                        Visible_group_position.X = grpVFOA.Location.X + grpVFOA.Width + tmp_x;
                        grpVFOB.Location = Visible_group_position;
                        Visible_group_position.X = grpVFOB.Location.X + grpVFOB.Width + tmp_x;
                        grpLOSC.Location = Visible_group_position;
                        Visible_group_position.X = grpLOSC.Location.X + grpLOSC.Width + tmp_x;
                        Visible_group_position.Y = tmp_y;
                        grpG40.Location = Visible_group_position;
                        break;
                    case VisibleGroup.G3020:
                        grpG3020.Visible = true;
                        grpG3020.BringToFront();
                        tmp_x = (this.Width - (3 * grpVFOA.Width + grpG3020.Width)) / 5;
                        grpDisplay.Height = (this.Height - grpG3020.Height - 78);
                        tmp_y = (this.Height - (grpDisplay.Height + grpG3020.Height)) / 2;
                        Visible_group_position.X = 4;
                        Visible_group_position.Y = tmp_y + grpG3020.Height;
                        grpDisplay.Location = Visible_group_position;
                        Visible_group_position.X = tmp_x;
                        Visible_group_position.Y = (grpG3020.Height - grpVFOA.Height) / 2 + tmp_y;
                        grpVFOA.Location = Visible_group_position;
                        Visible_group_position.X = grpVFOA.Location.X + grpVFOA.Width + tmp_x;
                        grpVFOB.Location = Visible_group_position;
                        Visible_group_position.X = grpVFOB.Location.X + grpVFOB.Width + tmp_x;
                        grpLOSC.Location = Visible_group_position;
                        Visible_group_position.X = grpLOSC.Location.X + grpLOSC.Width + tmp_x;
                        Visible_group_position.Y = tmp_y;
                        grpG3020.Location = Visible_group_position;
                        break;
                    case VisibleGroup.G59:
                        grpG59.Visible = true;
                        grpG59.BringToFront();
                        tmp_x = (this.Width - (3 * grpVFOA.Width + grpG59.Width)) / 5;
                        grpDisplay.Height = (this.Height - grpG59.Height - 78);
                        tmp_y = (this.Height - (grpDisplay.Height + grpG59.Height)) / 2;
                        Visible_group_position.X = 4;
                        Visible_group_position.Y = tmp_y + grpG59.Height;
                        grpDisplay.Location = Visible_group_position;
                        Visible_group_position.X = tmp_x;
                        Visible_group_position.Y = (grpG59.Height - grpVFOA.Height) / 2 + tmp_y;
                        grpVFOA.Location = Visible_group_position;
                        Visible_group_position.X = grpVFOA.Location.X + grpVFOA.Width + tmp_x;
                        grpVFOB.Location = Visible_group_position;
                        Visible_group_position.X = grpVFOB.Location.X + grpVFOB.Width + tmp_x;
                        grpLOSC.Location = Visible_group_position;
                        Visible_group_position.X = grpLOSC.Location.X + grpLOSC.Width + tmp_x;
                        Visible_group_position.Y = tmp_y;
                        grpG59.Location = Visible_group_position;
                        break;
                    case VisibleGroup.G11:
                        grpG11.Visible = true;
                        grpG11.BringToFront();
                        tmp_x = (this.Width - (3 * grpVFOA.Width + grpG11.Width)) / 5;
                        grpDisplay.Height = (this.Height - grpG11.Height - 78);
                        tmp_y = (this.Height - (grpDisplay.Height + grpG11.Height)) / 2;
                        Visible_group_position.X = 4;
                        Visible_group_position.Y = tmp_y + grpG11.Height;
                        grpDisplay.Location = Visible_group_position;
                        Visible_group_position.X = tmp_x;
                        Visible_group_position.Y = (grpG11.Height - grpVFOA.Height) / 2 + tmp_y;
                        grpVFOA.Location = Visible_group_position;
                        Visible_group_position.X = grpVFOA.Location.X + grpVFOA.Width + tmp_x;
                        grpVFOB.Location = Visible_group_position;
                        Visible_group_position.X = grpVFOB.Location.X + grpVFOB.Width + tmp_x;
                        grpLOSC.Location = Visible_group_position;
                        Visible_group_position.X = grpLOSC.Location.X + grpLOSC.Width + tmp_x;
                        Visible_group_position.Y = tmp_y;
                        grpG11.Location = Visible_group_position;
                        break;
                    case VisibleGroup.G6:
                        grpG6.Visible = true;
                        grpG6.BringToFront();
                        tmp_x = (this.Width - (3 * grpVFOA.Width + grpG6.Width)) / 5;
                        grpDisplay.Height = (this.Height - grpG6.Height - 78);
                        tmp_y = (this.Height - (grpDisplay.Height + grpG6.Height)) / 2;
                        Visible_group_position.X = 4;
                        Visible_group_position.Y = tmp_y + grpG6.Height;
                        grpDisplay.Location = Visible_group_position;
                        Visible_group_position.X = tmp_x;
                        Visible_group_position.Y = (grpG6.Height - grpVFOA.Height) / 2 + tmp_y;
                        grpVFOA.Location = Visible_group_position;
                        Visible_group_position.X = grpVFOA.Location.X + grpVFOA.Width + tmp_x;
                        grpVFOB.Location = Visible_group_position;
                        Visible_group_position.X = grpVFOB.Location.X + grpVFOB.Width + tmp_x;
                        grpLOSC.Location = Visible_group_position;
                        Visible_group_position.X = grpLOSC.Location.X + grpLOSC.Width + tmp_x;
                        Visible_group_position.Y = tmp_y;
                        grpG6.Location = Visible_group_position;
                        break;
                }
            }
        }

        public bool pause_Resize = false;
        public bool pause_DisplayThread = false;
        public void Console_Resize(object sender, EventArgs e)  // yt7pwr
        {
            try
            {
                if (pause_Resize)
                    return;

                //display_mutex.WaitOne(100);
                pause_Resize = true;

                if (!booting)
                { 
                    int tmp_x = 0;

                    if (!ConsoleClosing)
                    {
                        if (!minimal_screen)
                        {
                            if (this.Width < 1024 && this.WindowState != FormWindowState.Minimized)
                                this.Width = 1024;
                            if (this.Height < 768 && this.WindowState != FormWindowState.Minimized)
                                this.Height = 768;
                        }

                        pause_DisplayThread = true;

                        #region compact screen

                        if (minimal_screen && (this.Width >= 1024 && this.Height >= 600))
                        {
                            chkPower.Visible = false;
                            btnNetwork.Visible = false;
                            btnUSB.Visible = false;
                            lblCPUMeter.Visible = false;
                            grpG3020.Visible = false;
                            grpBandHF.Visible = false;
                            grpMoreBands.Visible = false;
                            grpDSPMainRX.Visible = false;
                            grpDSPSubRX.Visible = false;
                            grpG160.Visible = false;
                            grpG40.Visible = false;
                            grpG137.Visible = false;
                            grpG500.Visible = false;
                            grpG59.Visible = false;
                            grpG11.Visible = false;
                            grpG6.Visible = false;
                            grpG80.Visible = false;
                            grpMainRXMode.Visible = false;
                            grpMultimeter.Visible = false;
                            picSmallAGauge.Visible = false;
                            grpOptions.Visible = false;
                            grpManualNotch.Visible = false;
                            grpSoundControls.Visible = false;
                            grpSoundControls1.Visible = false;
                            grpSubRX.Visible = false;
                            grpMainRXFilter.Visible = false;
                            grpSubRXFilter.Visible = false;
                            grpSubRXMode.Visible = false;
                            grpVFO.Visible = false;
                            grpVFOBetween.Visible = false;
                            grpZoom.Visible = false;
                            grpDisplay2.Visible = false;

                            if (digital_smeter)
                            {
                                switch (SMeter_type)
                                {
                                    case SMeterType.type1:
                                        sMeterDigital1.Visible = true;
                                        sMeterDigital2.Visible = false;
                                        picAGauge.Visible = false;
                                        break;

                                    case SMeterType.type2:
                                        sMeterDigital2.Visible = true;
                                        sMeterDigital1.Visible = false;
                                        picAGauge.Visible = false;
                                        break;
                                }
                            }
                            else
                            {
                                picAGauge.Visible = true;
                                sMeterDigital1.Visible = false;
                                sMeterDigital2.Visible = false;
                            }                          

                            System.Drawing.Point grpDisplay_position = new System.Drawing.Point(4, 140);
                            System.Drawing.Point grpVFOnew_position = new System.Drawing.Point(4, 31);
                            System.Drawing.Point grp_position = new System.Drawing.Point(0, 0);

                            ShowGroup();

                            if (!vfo_new_look)
                            {
                                grpLOSC.Visible = true;
                                grpVFOB.Visible = true;
                                grpDisplay_position = grpDisplay.Location;
                                grpDisplay.Width = this.Width - 24;
                                grpDisplay.Location = grpDisplay_position;
                            }
                            else
                            {
                                grpLOSC.Visible = false;
                                grpVFOB.Visible = false;

                                switch (current_visible_group)
                                {
                                    case VisibleGroup.MainRXFilter:
                                    case VisibleGroup.SubRXFilter:
                                        {
                                            grpDisplay_position.Y = grpMainRXFilter.Height + 35;
                                            grpDisplay.Height = this.Height - 78 - grpMainRXFilter.Height;
                                            grpDisplay.Width = this.Width - 24;
                                            grpDisplay.Location = grpDisplay_position;
                                        }
                                        break;
                                    default:
                                        grpDisplay_position.Y = grpVFOnew.Height + 35;
                                        grpDisplay.Height = this.Height - 78 - grpVFOnew.Height;
                                        grpDisplay.Width = this.Width - 24;
                                        grpDisplay.Location = grpDisplay_position;
                                        break;
                                }

                                System.Drawing.Point NewVFO_grp_position = new System.Drawing.Point(this.Width - 175, 31);
                                int distance = 1;

                                if (vfo_new_look)
                                {
                                    distance = (((grpVFOnew.Width -
                                        (picAGauge.Width + txtNewVFOBand.Width + txtLOSCnew.Width))) / 4);
                                    NewVFO_grp_position.X = distance;

                                    NewVFO_grp_position.Y = picAGauge.Location.Y;
                                    picAGauge.Location = NewVFO_grp_position;     // NewVFOSignalGauge
                                    sMeterDigital1.Location = NewVFO_grp_position;
                                    sMeterDigital2.Location = NewVFO_grp_position;
                                    NewVFO_grp_position.X = picAGauge.Location.X + picAGauge.Width + 38 + distance;
                                    NewVFO_grp_position.Y = lblVFOA.Location.Y;
                                    lblVFOA.Location = NewVFO_grp_position;                 // lblVFOA
                                    NewVFO_grp_position.X = lblVFOA.Location.X + 54;
                                    lblVFOATX.Location = NewVFO_grp_position;               // lblVFOATX
                                    NewVFO_grp_position.X = lblVFOATX.Location.X + 38;
                                    lblAFNewVFO.Location = NewVFO_grp_position;             // lblAF
                                    NewVFO_grp_position.X = lblAFNewVFO.Location.X + 33;
                                    lblRFNewVFO.Location = NewVFO_grp_position;             // lblRF
                                    NewVFO_grp_position.X = lblRFNewVFO.Location.X + 34;
                                    lblATTNewVFO.Location = NewVFO_grp_position;            // lblATT
                                    NewVFO_grp_position.X = lblATTNewVFO.Location.X + 42;
                                    lblRX2.Location = NewVFO_grp_position;                  // lblRX2
                                    NewVFO_grp_position.X = lblVFOA.Location.X;
                                    NewVFO_grp_position.Y = txtVFOAnew.Location.Y;
                                    txtVFOAnew.Location = NewVFO_grp_position;              // txtVFOAnew
                                    NewVFO_grp_position.Y = panelVFOAnewHover.Location.Y;
                                    panelVFOAnewHover.Location = NewVFO_grp_position;   // panelVFOAnewHover
                                    NewVFO_grp_position.X = picAGauge.Location.X + picAGauge.Width + distance;
                                    NewVFO_grp_position.Y = txtNewVFOBand.Location.Y;
                                    txtNewVFOBand.Location = NewVFO_grp_position;   // txtVFOBnew
                                    NewVFO_grp_position.X = txtNewVFOBand.Location.X + txtNewVFOBand.Width + distance;
                                    NewVFO_grp_position.Y = lblVFOB.Location.Y;
                                    lblVFOB.Location = NewVFO_grp_position;         // lblVFOB
                                    NewVFO_grp_position.Y = txtVFOBnew.Location.Y;
                                    txtVFOBnew.Location = NewVFO_grp_position;      // txtVFOBnew
                                    NewVFO_grp_position.Y = panelVFOBnewHover.Location.Y;
                                    panelVFOBnewHover.Location = NewVFO_grp_position;  // panelVFOBnewHover
                                    NewVFO_grp_position.X = lblVFOB.Location.X + 50;
                                    NewVFO_grp_position.Y = lblVFOBTX.Location.Y;
                                    lblVFOBTX.Location = NewVFO_grp_position;       // lblVFOBTX
                                    NewVFO_grp_position.X = lblVFOB.Location.X;
                                    NewVFO_grp_position.Y = lblLOSC.Location.Y;
                                    lblLOSC.Location = NewVFO_grp_position;         // lblLOSC
                                    NewVFO_grp_position.X = lblLOSC.Location.X;
                                    NewVFO_grp_position.Y = txtLOSCnew.Location.Y;
                                    txtLOSCnew.Location = NewVFO_grp_position;      // txtLOSCnew
                                    NewVFO_grp_position.Y = panelLOSCnewHover.Location.Y;
                                    panelLOSCnewHover.Location = NewVFO_grp_position;  // panelLOSCnewHover
                                }
                            }

                            switch (comboDisplayMode.Text)
                            {
                                case "Panadapter":
                                case "Phase":
                                case "Phase2":
                                case "Scope":
                                case "Spectrum":
                                case "Histogram":
                                    {
                                        System.Drawing.Point picDisplay_position = new System.Drawing.Point(10, 15);
                                        picDisplay.Height = grpDisplay.Height - 40;    // picDisplay
                                        picDisplay.Width = grpDisplay.Width - 19;
                                        picDisplay.Location = picDisplay_position;
                                    }
                                    break;

                                case "Waterfall":
                                    {
                                        System.Drawing.Point picWaterfall_position = new System.Drawing.Point(10, 15);
                                        picWaterfall.Height = grpDisplay.Height - 19;    // waterfall
                                        picWaterfall.Width = grpDisplay.Width - 19;
                                        picWaterfall.Location = picWaterfall_position;
                                    }
                                    break;

                                case "Panafall":
                                case "Panascope":
                                case "Off":
                                    {
                                        System.Drawing.Point picWaterfall_position = new System.Drawing.Point(10, 15);
                                        System.Drawing.Point picDisplay_position = new System.Drawing.Point(0, 0);
                                        picWaterfall.Height = (grpDisplay.Height - 40) / 2;       // panafall           
                                        picWaterfall.Width = grpDisplay.Width - 19;
                                        picWaterfall.Location = picWaterfall_position;

                                        picDisplay_position = picWaterfall.Location;
                                        picDisplay_position.Y = picWaterfall.Height + 15;
                                        picDisplay.Location = picDisplay_position;
                                        picDisplay.Height = (grpDisplay.Height - 40) / 2;
                                        picDisplay.Width = grpDisplay.Width - 19;
                                    }
                                    break;

                                case "Panafall_inv":
                                    {
                                        System.Drawing.Point picWaterfall_position = new System.Drawing.Point(10, 15);
                                        System.Drawing.Point picDisplay_position = new System.Drawing.Point(0, 0);
                                        picDisplay.Height = (grpDisplay.Height - 40) / 2;       // panafall           
                                        picDisplay.Width = grpDisplay.Width - 19;
                                        picDisplay.Location = picWaterfall_position;

                                        picDisplay_position = picDisplay.Location;
                                        picDisplay_position.Y = picDisplay.Height + 15;
                                        picWaterfall.Location = picDisplay_position;
                                        picWaterfall.Height = (grpDisplay.Height - 40) / 2;
                                        picWaterfall.Width = grpDisplay.Width - 19;
                                    }
                                    break;
                            }

                            switch (current_display_mode)
                            {
                                case DisplayMode.PANADAPTER:
                                case DisplayMode.PANAFALL:
                                case DisplayMode.PANAFALL_INV:
                                case DisplayMode.OFF:
                                case DisplayMode.PHASE:
                                case DisplayMode.PHASE2:
                                case DisplayMode.SCOPE:
                                case DisplayMode.SPECTRUM:
                                case DisplayMode.HISTOGRAM:
                                case DisplayMode.PANASCOPE:
                                    txtDisplayPeakFreq.Width = picDisplay.Width - (txtDisplayCursorOffset.Width
                                        + txtDisplayCursorPower.Width + txtDisplayCursorFreq.Width +
                                        txtDisplayPeakPower.Width + txtDisplayPeakOffset.Width);
                                    break;
                                case DisplayMode.WATERFALL:
                                    txtDisplayPeakFreq.Width = picWaterfall.Width - (txtDisplayCursorOffset.Width
                                        + txtDisplayCursorPower.Width + txtDisplayCursorFreq.Width +
                                        txtDisplayPeakPower.Width + txtDisplayPeakOffset.Width);
                                    break;
                            }

                            int txt_width = picDisplay.Width / 6;
                            txtDisplayPeakFreq.Width = txt_width;
                            txtDisplayCursorOffset.Width = txt_width;
                            txtDisplayCursorPower.Width = txt_width;
                            txtDisplayCursorFreq.Width = txt_width;
                            txtDisplayPeakPower.Width = txt_width;
                            txtDisplayPeakOffset.Width = txt_width;

                            grp_position.X = grpDisplay.Location.X;
                            grp_position.Y = grpDisplay.Height - 20;
                            txtDisplayCursorOffset.Location = grp_position;
                            grp_position = txtDisplayCursorPower.Location;
                            grp_position.Y = grpDisplay.Height - 20;
                            grp_position.X = txt_width + picDisplay.Location.X;
                            txtDisplayCursorPower.Location = grp_position;
                            grp_position = txtDisplayCursorFreq.Location;
                            grp_position.Y = grpDisplay.Height - 20;
                            grp_position.X = 2 * txt_width + picDisplay.Location.X;
                            txtDisplayCursorFreq.Location = grp_position;
                            grp_position = txtDisplayPeakPower.Location;
                            grp_position.Y = grpDisplay.Height - 20;
                            grp_position.X = 3 * txt_width + picDisplay.Location.X;
                            txtDisplayPeakPower.Location = grp_position;
                            grp_position = txtDisplayPeakOffset.Location;
                            grp_position.Y = grpDisplay.Height - 20;
                            grp_position.X = 4 * txt_width + picDisplay.Location.X;
                            txtDisplayPeakOffset.Location = grp_position;
                            grp_position = txtDisplayPeakFreq.Location;
                            grp_position.Y = grpDisplay.Height - 20;
                            grp_position.X = 5 * txt_width + picDisplay.Location.X;
                            txtDisplayPeakFreq.Location = grp_position;
                        }

                        #endregion

                        #region normal screen

                        else if (!minimal_screen)
                        {
                            if (digital_smeter)
                            {
                                switch (SMeter_type)
                                {
                                    case SMeterType.type1:
                                        sMeterDigital1.Visible = true;
                                        sMeterDigital2.Visible = false;
                                        picAGauge.Visible = false;
                                        break;

                                    case SMeterType.type2:
                                        sMeterDigital2.Visible = true;
                                        sMeterDigital1.Visible = false;
                                        picAGauge.Visible = false;
                                        break;
                                }
                            }
                            else
                            {
                                picAGauge.Visible = true;
                                sMeterDigital1.Visible = false;
                                sMeterDigital2.Visible = false;
                            }

                            grpModeSpecificFM.Visible = true;
                            grpModeSpecificPhone.Visible = true;
                            grpModeSpecificDigital.Visible = true;
                            grpModeSpecificCW.Visible = true;
                            grpMainRXFilter.Visible = true;
                            grpMainRXFilter.BringToFront();
                            grpSubRXFilter.Visible = true;
                            grpSubRXFilter.BringToFront();

                            chkPower.Visible = true;

                            if (!vfo_new_look)
                            {
                                grpVFOA.Visible = true;
                                grpVFOA.BringToFront();
                                grpVFOB.Visible = true;
                                grpVFOB.BringToFront();
                                grpLOSC.Visible = true;
                                grpLOSC.BringToFront();
                            }
                            else
                            {
                                grpLOSC.Visible = false;
                                grpVFOnew.Visible = true;
                                grpVFOnew.BringToFront();
                                grpManualNotch.Visible = true;
                                grpManualNotch.BringToFront();
                            }

                            lblCPUMeter.Visible = true;

                            switch (current_model)
                            {
                                case Model.QRP2000:
                                    grpG3020.Visible = false;
                                    grpG160.Visible = false;
                                    grpG40.Visible = false;
                                    grpG137.Visible = false;
                                    grpG59.Visible = false;
                                    grpG80.Visible = false;
                                    btnUSB.Visible = true;
                                    btnNetwork.Visible = false;
                                    grpG500.Visible = false;
                                    grpG11.Visible = false;
                                    grpG6.Visible = false;
                                    break;
                                case Model.GENESIS_G3020:
                                    grpG3020.Visible = true;
                                    grpG3020.BringToFront();
                                    grpG160.Visible = false;
                                    grpG40.Visible = false;
                                    grpG59.Visible = false;
                                    grpG80.Visible = false;
                                    grpG137.Visible = false;
                                    grpG500.Visible = false;
                                    grpG11.Visible = false;
                                    grpG6.Visible = false;
                                    break;
                                case Model.GENESIS_G160:
                                    grpG160.Visible = true;
                                    grpG160.BringToFront();
                                    grpG40.Visible = false;
                                    grpG59.Visible = false;
                                    grpG80.Visible = false;
                                    grpG3020.Visible = false;
                                    grpG137.Visible = false;
                                    grpG500.Visible = false;
                                    grpG11.Visible = false;
                                    grpG6.Visible = false;
                                    break;
                                case Model.GENESIS_G40:
                                    grpG160.Visible = false;
                                    grpG40.Visible = true;
                                    grpG40.BringToFront();
                                    grpG59.Visible = false;
                                    grpG80.Visible = false;
                                    grpG3020.Visible = false;
                                    grpG137.Visible = false;
                                    grpG500.Visible = false;
                                    grpG11.Visible = false;
                                    grpG6.Visible = false;
                                    break;
                                case Model.GENESIS_G500:
                                    grpG160.Visible = false;
                                    grpG40.Visible = false;
                                    grpG59.Visible = false;
                                    grpG80.Visible = false;
                                    grpG3020.Visible = false;
                                    grpG137.Visible = false;
                                    grpG500.Visible = true;
                                    grpG11.Visible = false;
                                    grpG6.Visible = false;
                                    break;
                                case Model.GENESIS_G137:
                                    grpG160.Visible = false;
                                    grpG40.Visible = false;
                                    grpG59.Visible = false;
                                    grpG80.Visible = false;
                                    grpG3020.Visible = false;
                                    grpG137.Visible = true;
                                    grpG137.BringToFront();
                                    grpG500.Visible = false;
                                    grpG11.Visible = false;
                                    grpG6.Visible = false;
                                    break;
                                case Model.GENESIS_G59USB:
                                    btnUSB.Visible = true;
                                    btnNetwork.Visible = false;
                                    grpG160.Visible = false;
                                    grpG40.Visible = false;
                                    grpG59.Visible = true;
                                    grpG59.BringToFront();
                                    grpG80.Visible = false;
                                    grpG3020.Visible = false;
                                    grpG137.Visible = false;
                                    grpG500.Visible = false;
                                    grpG11.Visible = false;
                                    grpG6.Visible = false;
                                    break;
                                case Model.GENESIS_G11:
                                    btnUSB.Visible = true;
                                    btnNetwork.Visible = false;
                                    grpG160.Visible = false;
                                    grpG40.Visible = false;
                                    grpG59.Visible = false;
                                    grpG11.Visible = true;
                                    grpG11.BringToFront();
                                    grpG80.Visible = false;
                                    grpG3020.Visible = false;
                                    grpG137.Visible = false;
                                    grpG500.Visible = false;
                                    grpG6.Visible = false;
                                    break;
                                case Model.GENESIS_G59NET:
                                    btnNetwork.Visible = true;
                                    btnUSB.Visible = false;
                                    grpG160.Visible = false;
                                    grpG40.Visible = false;
                                    grpG59.Visible = true;
                                    grpG59.BringToFront();
                                    grpG80.Visible = false;
                                    grpG3020.Visible = false;
                                    grpG137.Visible = false;
                                    grpG500.Visible = false;
                                    grpG11.Visible = false;
                                    grpG6.Visible = false;
                                    break;
                                case Model.GENESIS_G80:
                                    grpG160.Visible = false;
                                    grpG40.Visible = false;
                                    grpG59.Visible = false;
                                    grpG80.Visible = true;
                                    grpG80.BringToFront();
                                    grpG3020.Visible = false;
                                    grpG137.Visible = false;
                                    grpG500.Visible = false;
                                    grpG11.Visible = false;
                                    grpG6.Visible = false;
                                    break;
                                case Model.GENESIS_G6:
                                    btnUSB.Visible = true;
                                    btnNetwork.Visible = false;
                                    grpG160.Visible = false;
                                    grpG40.Visible = false;
                                    grpG59.Visible = false;
                                    grpG6.Visible = true;
                                    grpG6.BringToFront();
                                    grpG80.Visible = false;
                                    grpG3020.Visible = false;
                                    grpG137.Visible = false;
                                    grpG500.Visible = false;
                                    grpG11.Visible = false;
                                    break;
                                case Model.RTL_SDR:
                                    btnUSB.Visible = true;
                                    btnNetwork.Visible = false;
                                    grpG160.Visible = false;
                                    grpG40.Visible = false;
                                    grpG59.Visible = false;
                                    grpG6.Visible = false;
                                    grpG80.Visible = false;
                                    grpG3020.Visible = false;
                                    grpG137.Visible = false;
                                    grpG500.Visible = false;
                                    grpG11.Visible = false;
                                    break;

                            }
                            if (current_model != Model.GENESIS_G59NET &&
                                current_model != Model.GENESIS_G59USB &&
                                current_model != Model.GENESIS_G11 &&
                                current_model != Model.QRP2000 &&
                                current_model != Model.GENESIS_G6 &&
                                current_model != Model.RTL_SDR)
                            {
                                if (usb_si570_enable)
                                    btnUSB.Visible = true;
                                else
                                    btnUSB.Visible = false;
                            }

                            if (show_more_bands)
                            {
                                grpMoreBands.Visible = true;
                                grpBandHF.Visible = false;
                            }
                            else
                            {
                                grpBandHF.Visible = true;
                                grpMoreBands.Visible = false;
                            }

                            grpSoundControls1.Visible = false;

                            switch (current_meter_display_mode)
                            {
                                case MultiMeterDisplayMode.Analog:
                                    picSmallAGauge.Visible = true;
                                    picSmallAGauge.BringToFront();
                                    break;

                                default:
                                    grpMultimeter.Visible = true;
                                    grpMultimeter.BringToFront();
                                    break;
                            }

                            grpOptions.Visible = true;
                            grpManualNotch.Visible = true;
                            grpManualNotch.BringToFront();
                            grpSoundControls.Visible = true;
                            grpVFO.Visible = true;
                            grpVFOBetween.Visible = true;
                            grpZoom.Visible = true;
                            grpDisplay2.Visible = true;
                            grpSubRX.Visible = true;

                            switch (current_dsp_mode)
                            {
                                case DSPMode.CWL:
                                case DSPMode.CWU:
                                    grpModeSpecificCW.BringToFront();
                                    grpModeSpecificDigital.SendToBack();
                                    grpModeSpecificPhone.SendToBack();
                                    grpModeSpecificFM.SendToBack();
                                    break;
                                case DSPMode.DIGL:
                                case DSPMode.DIGU:
                                    grpModeSpecificDigital.BringToFront();
                                    grpModeSpecificCW.SendToBack();
                                    grpModeSpecificPhone.SendToBack();
                                    grpModeSpecificFM.SendToBack();
                                    break;
                                case DSPMode.FMN:
                                    grpModeSpecificDigital.SendToBack();
                                    grpModeSpecificCW.SendToBack();
                                    grpModeSpecificPhone.SendToBack();
                                    grpModeSpecificFM.BringToFront();
                                    break;
                                case DSPMode.WFM:
                                    grpModeSpecificDigital.SendToBack();
                                    grpModeSpecificCW.SendToBack();
                                    grpModeSpecificPhone.SendToBack();
                                    grpModeSpecificFM.BringToFront();
                                    break;
                                default:
                                    grpModeSpecificPhone.BringToFront();
                                    grpModeSpecificFM.SendToBack();
                                    grpModeSpecificDigital.SendToBack();
                                    grpModeSpecificCW.SendToBack();
                                    break;
                            }

                            if (current_click_tune_mode == ClickTuneMode.VFOB)
                            {
                                grpDSPSubRX.Visible = true;
                                grpSubRXFilter.BringToFront();
                                grpMainRXFilter.SendToBack();
                                grpSubRXMode.Visible = true;
                                grpSubRXMode.BringToFront();
                                grpMainRXMode.Visible = false;
                                grpDSPMainRX.Visible = false;
                            }
                            else
                            {
                                grpMainRXFilter.BringToFront();
                                grpSubRXFilter.SendToBack();
                                grpMainRXMode.Visible = true;
                                grpMainRXMode.BringToFront();
                                grpDSPMainRX.Visible = true;
                                grpDSPMainRX.BringToFront();
                                grpDSPSubRX.Visible = false;
                                grpSubRXMode.Visible = false;
                            }

                            if (this.Width >= 1024 && this.Height >= 768)
                            {
                                int distance = 4;

                                System.Drawing.Point grp_position = new System.Drawing.Point(0, 0);
                                System.Drawing.Point NewVFO_position = new System.Drawing.Point(0, 15);
                                grpDisplay.Height = this.Height - grpVFO.Height - 180;    // picDisplay

                                grp_position.X = distance;
                                grp_position.Y = 61;
                                grpOptions.Location = grp_position;
                                grp_position.Y = 146;
                                grpSoundControls.Location = grp_position;
                                grp_position.X = 13;
                                grp_position.Y = 411;
                                grpG160.Location = grp_position;
                                grpG80.Location = grp_position;
                                grpG40.Location = grp_position;
                                grpG137.Location = grp_position;
                                grpG500.Location = grp_position;
                                grpG3020.Location = grp_position;
                                grpG59.Location = grp_position;
                                grpG11.Location = grp_position;
                                grpG6.Location = grp_position;

                                if (vfo_new_look)
                                {
                                    NewVFO_position = grpVFOnew.Location;
                                    grpDisplay.Width = this.Width - (8 * distance + grpBandHF.Width + grpOptions.Width);
                                    grpVFOnew.Width = grpDisplay.Width;
                                    NewVFO_position.X = (grpOptions.Location.X + grpOptions.Width + distance);
                                    grpVFOnew.Location = NewVFO_position;
                                    picSmallAGauge.Visible = false;
                                    grpManualNotch.Visible = true;
                                    grpManualNotch.BringToFront();
                                    grpMultimeter.Visible = false;
                                    grp_position.X = grpVFOnew.Location.X + grpVFOnew.Width + distance;
                                    grp_position.Y = grpVFOnew.Location.Y;
                                    grpManualNotch.Location = grp_position;
                                    grp_position.Y = (((grpDisplay.Location.Y + grpDisplay.Height) - 540) / 4)
                                        + grpManualNotch.Location.Y + grpManualNotch.Height;

                                    System.Drawing.Point NewVFO_grp_position = new System.Drawing.Point(this.Width - 175, 31);

                                    distance = (((grpVFOnew.Width -
                                        (picAGauge.Width + txtNewVFOBand.Width + txtLOSCnew.Width))) / 4);
                                    NewVFO_grp_position.X = distance;

                                    NewVFO_grp_position.Y = picAGauge.Location.Y;
                                    picAGauge.Location = NewVFO_grp_position;     // NewVFOSignalGauge
                                    sMeterDigital1.Location = NewVFO_grp_position;
                                    sMeterDigital2.Location = NewVFO_grp_position;
                                    NewVFO_grp_position.X = picAGauge.Location.X + picAGauge.Width + 38 + distance;
                                    NewVFO_grp_position.Y = lblVFOA.Location.Y;
                                    lblVFOA.Location = NewVFO_grp_position;                 // lblVFOA
                                    NewVFO_grp_position.X = lblVFOA.Location.X + 54;
                                    lblVFOATX.Location = NewVFO_grp_position;               // lblVFOATX
                                    NewVFO_grp_position.X = lblVFOATX.Location.X + 38;
                                    lblAFNewVFO.Location = NewVFO_grp_position;             // lblAF
                                    NewVFO_grp_position.X = lblAFNewVFO.Location.X + 33;
                                    lblRFNewVFO.Location = NewVFO_grp_position;             // lblRF
                                    NewVFO_grp_position.X = lblRFNewVFO.Location.X + 34;
                                    lblATTNewVFO.Location = NewVFO_grp_position;            // lblATT
                                    NewVFO_grp_position.X = lblATTNewVFO.Location.X + 42;
                                    lblRX2.Location = NewVFO_grp_position;                  // lblRX2
                                    NewVFO_grp_position.X = lblVFOA.Location.X;
                                    NewVFO_grp_position.Y = txtVFOAnew.Location.Y;
                                    txtVFOAnew.Location = NewVFO_grp_position;      // txtVFOAnew
                                    NewVFO_grp_position.Y = panelVFOAnewHover.Location.Y;
                                    panelVFOAnewHover.Location = NewVFO_grp_position;   // panelVFOAnewHover
                                    NewVFO_grp_position.X = picAGauge.Location.X + picAGauge.Width + distance;
                                    NewVFO_grp_position.Y = txtNewVFOBand.Location.Y;
                                    txtNewVFOBand.Location = NewVFO_grp_position;   // txtVFOBnew
                                    NewVFO_grp_position.X = txtNewVFOBand.Location.X + txtNewVFOBand.Width + distance;
                                    NewVFO_grp_position.Y = lblVFOB.Location.Y;
                                    lblVFOB.Location = NewVFO_grp_position;         // lblVFOB
                                    NewVFO_grp_position.Y = txtVFOBnew.Location.Y;
                                    txtVFOBnew.Location = NewVFO_grp_position;      // txtVFOBnew
                                    NewVFO_grp_position.Y = panelVFOBnewHover.Location.Y;
                                    panelVFOBnewHover.Location = NewVFO_grp_position;  // panelVFOBnewHover
                                    NewVFO_grp_position.X = lblVFOB.Location.X + 50;
                                    NewVFO_grp_position.Y = lblVFOBTX.Location.Y;
                                    lblVFOBTX.Location = NewVFO_grp_position;       // lblVFOBTX
                                    NewVFO_grp_position.X = lblVFOB.Location.X;
                                    NewVFO_grp_position.Y = lblLOSC.Location.Y;
                                    lblLOSC.Location = NewVFO_grp_position;         // lblLOSC
                                    NewVFO_grp_position.X = lblLOSC.Location.X;
                                    NewVFO_grp_position.Y = txtLOSCnew.Location.Y;
                                    txtLOSCnew.Location = NewVFO_grp_position;      // txtLOSCnew
                                    NewVFO_grp_position.Y = panelLOSCnewHover.Location.Y;
                                    panelLOSCnewHover.Location = NewVFO_grp_position;  // panelLOSCnewHover
                                }
                                else
                                {
                                    grpDisplay.Width = this.Width - (8 * distance + grpBandHF.Width + grpOptions.Width);
                                    tmp_x = (this.Width - (3 * grpVFOA.Width)) / 4;
                                    grp_position.X = tmp_x;
                                    grp_position.Y = 31;
                                    grpVFOA.Location = grp_position;
                                    grp_position.X = grpVFOA.Location.X + grpVFOA.Width + tmp_x;
                                    grpVFOB.Location = grp_position;
                                    grp_position.X = grpVFOB.Location.X + grpVFOB.Width + tmp_x;
                                    grpLOSC.Location = grp_position;
                                    grp_position.X = grpLOSC.Location.X + grpLOSC.Width + tmp_x;
                                }

                                switch (current_display_mode)
                                {
                                    case DisplayMode.PANADAPTER:
                                    case DisplayMode.PANAFALL:
                                    case DisplayMode.PANAFALL_INV:
                                    case DisplayMode.OFF:
                                    case DisplayMode.PHASE:
                                    case DisplayMode.PHASE2:
                                    case DisplayMode.SCOPE:
                                    case DisplayMode.SPECTRUM:
                                    case DisplayMode.HISTOGRAM:
                                    case DisplayMode.PANASCOPE:
                                        txtDisplayPeakFreq.Width = picDisplay.Width - (txtDisplayCursorOffset.Width
                                            + txtDisplayCursorPower.Width + txtDisplayCursorFreq.Width +
                                            txtDisplayPeakPower.Width + txtDisplayPeakOffset.Width);
                                        break;
                                    case DisplayMode.WATERFALL:
                                        txtDisplayPeakFreq.Width = picWaterfall.Width - (txtDisplayCursorOffset.Width
                                            + txtDisplayCursorPower.Width + txtDisplayCursorFreq.Width +
                                            txtDisplayPeakPower.Width + txtDisplayPeakOffset.Width);
                                        break;
                                }

                                grp_position = grpLOSC.Location;
                                grp_position.X = grpMultimeter.Location.X - 211;
                                grpLOSC.Location = grp_position;

                                switch (comboDisplayMode.Text)
                                {
                                    case "Panadapter":
                                    case "Phase":
                                    case "Phase2":
                                    case "Scope":
                                    case "Spectrum":
                                    case "Histogram":
                                        {
                                            if (vfo_new_look)
                                            {
                                                System.Drawing.Point picDisplay_position = new System.Drawing.Point(10, 15);
                                                grpDisplay.Height = this.Height - grpVFOnew.Height - 250;
                                                grpDisplay.Width = grpVFOnew.Width;
                                                picDisplay.Location = picDisplay_position;
                                                grp_position = grpVFOnew.Location;
                                                grp_position.Y = grpVFOnew.Height + 31;
                                                grpDisplay.Location = grp_position;                                                
                                                picDisplay.Height = (grpDisplay.Height - 40);
                                                picDisplay.Width = grpDisplay.Width - 19;
                                            }
                                            else
                                            {
                                                System.Drawing.Point picDisplay_position = new System.Drawing.Point(10, 15);
                                                grpDisplay.Height = this.Height - grpVFO.Height - 180;    // picDisplay
                                                grpDisplay.Width = this.Width - grpBandHF.Width - grpOptions.Width - 8 * distance;
                                                picDisplay.Location = picDisplay_position;
                                                grp_position.X = grpOptions.Width + 2 * distance;
                                                grp_position.Y = grpVFOA.Height + 35;
                                                grpDisplay.Location = grp_position;
                                                picDisplay.Height = (grpDisplay.Height - 40);
                                                picDisplay.Width = grpDisplay.Width - 19;
                                            }
                                        }
                                        break;

                                    case "Waterfall":
                                        {
                                            if (vfo_new_look)
                                            {
                                                System.Drawing.Point picWaterfall_position = new System.Drawing.Point(10, 15);
                                                grpDisplay.Height = this.Height - grpVFOnew.Height - 240;
                                                grpDisplay.Width = grpVFOnew.Width;
                                                picWaterfall.Location = picWaterfall_position;
                                                grp_position = grpVFOnew.Location;
                                                grp_position.Y = grpVFOnew.Height + 31;
                                                grpDisplay.Location = grp_position;
                                                picWaterfall.Height = (grpDisplay.Height - 40);
                                                picWaterfall.Width = grpDisplay.Width - 19;
                                            }
                                            else
                                            {
                                                grp_position = grpVFOnew.Location;
                                                grpDisplay.Width = this.Width - (8 * distance + grpBandHF.Width + grpOptions.Width);
                                                grpDisplay.Height = this.Height - grpVFO.Height - 180;
                                                grp_position.X = (grpOptions.Location.X + grpOptions.Width + distance);
                                                grp_position.Y = grpVFOA.Height + 35;
                                                grpDisplay.Location = grp_position;
                                                System.Drawing.Point picWaterfall_position = new System.Drawing.Point(10, 15);
                                                grpDisplay.Height = this.Height - grpVFO.Height - 180;    // waterfall
                                                grpDisplay.Width = this.Width - grpBandHF.Width - grpOptions.Width - 8 * distance;
                                                picWaterfall.Location = picWaterfall_position;
                                                picWaterfall.Height = (grpDisplay.Height - 40);
                                                picWaterfall.Width = grpDisplay.Width - 19;
                                            }
                                        }
                                        break;

                                    case "Panafall":
                                    case "Panascope":
                                    case "Off":
                                        {
                                            if (vfo_new_look)
                                            {
                                                System.Drawing.Point picWaterfall_position = new System.Drawing.Point(10, 15);
                                                grpDisplay.Height = this.Height - grpVFOnew.Height - 240;
                                                grpDisplay.Width = grpVFOnew.Width;
                                                picWaterfall.Location = picWaterfall_position;
                                                grp_position = grpVFOnew.Location;
                                                grp_position.Y = grpVFOnew.Height + 31;
                                                grpDisplay.Location = grp_position;
                                                picWaterfall.Height = (grpDisplay.Height - 40) / 2;       // panafall           
                                                picWaterfall.Width = grpDisplay.Width - 19;
                                                picDisplay.Height = (grpDisplay.Height - 40) / 2;
                                                picDisplay.Width = grpDisplay.Width - 19;
                                                grp_position.X = 10;
                                                grp_position.Y = 15;
                                                picWaterfall.Location = grp_position;
                                                grp_position.Y += picWaterfall.Height;
                                                picDisplay.Location = grp_position;
                                            }
                                            else
                                            {
                                                System.Drawing.Point picWaterfall_position = new System.Drawing.Point(10, 15);
                                                grpDisplay.Height = this.Height - grpVFO.Height - 180;
                                                grpDisplay.Width = this.Width - grpBandHF.Width - grpOptions.Width - 8 * distance;
                                                picWaterfall.Location = picWaterfall_position;

                                                grp_position.X = grpOptions.Width + 8;
                                                grp_position.Y = grpVFOA.Height + 35;
                                                grpDisplay.Location = grp_position;

                                                picWaterfall.Height = (grpDisplay.Height - 40) / 2;       // panafall           
                                                picWaterfall.Width = grpDisplay.Width - 19;
                                                grp_position = picWaterfall.Location;
                                                grp_position.Y = picWaterfall.Height + 15;
                                                picDisplay.Location = grp_position;
                                                picDisplay.Height = (grpDisplay.Height - 40) / 2;
                                                picDisplay.Width = grpDisplay.Width - 19;
                                            }
                                        }
                                        break;

                                    case "Panafall_inv":
                                        {
                                            if (vfo_new_look)
                                            {
                                                System.Drawing.Point picWaterfall_position = new System.Drawing.Point(10, 15);
                                                grpDisplay.Height = this.Height - grpVFOnew.Height - 240;
                                                grpDisplay.Width = grpVFOnew.Width;
                                                picDisplay.Location = picWaterfall_position;
                                                grp_position = grpVFOnew.Location;
                                                grp_position.Y = grpVFOnew.Height + 31;
                                                grpDisplay.Location = grp_position;
                                                picDisplay.Height = (grpDisplay.Height - 40) / 2;       // panafall           
                                                picDisplay.Width = grpDisplay.Width - 19;
                                                picWaterfall.Height = (grpDisplay.Height - 40) / 2;
                                                picWaterfall.Width = grpDisplay.Width - 19;
                                                grp_position.X = 10;
                                                grp_position.Y = 15;
                                                picDisplay.Location = grp_position;
                                                grp_position.Y += picDisplay.Height;
                                                picWaterfall.Location = grp_position;
                                            }
                                            else
                                            {
                                                System.Drawing.Point picWaterfall_position = new System.Drawing.Point(10, 15);
                                                grpDisplay.Height = this.Height - grpVFO.Height - 180;
                                                grpDisplay.Width = this.Width - grpBandHF.Width - grpOptions.Width - 8 * distance;
                                                picDisplay.Location = picWaterfall_position;

                                                grp_position.X = grpOptions.Width + 15;
                                                grp_position.Y = grpVFOA.Height + 35;
                                                grpDisplay.Location = grp_position;

                                                picDisplay.Height = (grpDisplay.Height - 40) / 2;       // panafall_inv           
                                                picDisplay.Width = grpDisplay.Width - 19;
                                                grp_position = picDisplay.Location;
                                                grp_position.Y = picDisplay.Height + 15;
                                                picWaterfall.Location = grp_position;
                                                picWaterfall.Height = (grpDisplay.Height - 40) / 2;
                                                picWaterfall.Width = grpDisplay.Width - 19;
                                            }
                                        }
                                        break;
                                }

                                if (vfo_new_look)
                                {
                                    grp_position.X = grpManualNotch.Location.X;
                                    grp_position.Y = (((grpDisplay.Location.Y + grpDisplay.Height) - 540) / 4)
                                        + grpManualNotch.Location.Y + grpManualNotch.Height;
                                }
                                else
                                {
                                    grp_position.X = grpDisplay.Location.X + grpDisplay.Width + distance;
                                    grp_position.Y = 31;
                                    grpManualNotch.Visible = false;

                                    switch (current_meter_display_mode)
                                    {
                                        case MultiMeterDisplayMode.Analog:
                                            grpMultimeter.Visible = false;
                                            picSmallAGauge.Visible = true;
                                            picSmallAGauge.BringToFront();
                                            picSmallAGauge.Location = grp_position;                  // AGauge
                                            grp_position.Y = (((grpDisplay.Location.Y + grpDisplay.Height) - 540) / 4)
                                                + picSmallAGauge.Location.Y + picSmallAGauge.Height;
                                            grp_position.X = picSmallAGauge.Location.X;
                                            break;

                                        default:
                                            {
                                                picSmallAGauge.Visible = false;
                                                grpMultimeter.Visible = true;
                                                grpMultimeter.BringToFront();
                                                grpMultimeter.Location = grp_position;                  // multimeter grp
                                                grp_position.Y = (((grpDisplay.Location.Y + grpDisplay.Height) - 540) / 4)
                                                    + grpMultimeter.Location.Y + grpMultimeter.Height;
                                                grp_position.X = grpMultimeter.Location.X;
                                            }
                                            break;
                                    }
                                }

                                grpBandHF.Location = grp_position;
                                grpMoreBands.Location = grp_position;
                                grpMoreBands.Location = grp_position;
                                grp_position.Y = (((grpDisplay.Location.Y + grpDisplay.Height) - 540) / 4)
                                    + grpBandHF.Location.Y + grpBandHF.Height;
                                grpMainRXMode.Location = grp_position;
                                grpSubRXMode.Location = grp_position;
                                grp_position.Y = (((grpDisplay.Location.Y + grpDisplay.Height) - 540) / 4)
                                    + grpMainRXMode.Location.Y + grpMainRXMode.Height;
                                grpMainRXFilter.Location = grp_position;
                                grpSubRXFilter.Location = grp_position;
                                grp_position = grpVFOBetween.Location;
                                grp_position.X = ((this.Width - 1006) / 6) + 21;
                                grp_position.Y = this.Height - 205;                     // VFO between
                                grpVFOBetween.Location = grp_position;
                                grp_position = grpVFO.Location;
                                grp_position.X = ((this.Width - 1006) / 6) + grpVFOBetween.Location.X + grpVFOBetween.Width;
                                grp_position.Y = this.Height - 205;                     // VFO grp
                                grpVFO.Location = grp_position;
                                grp_position = grpDSPMainRX.Location;
                                grp_position.X = ((this.Width - 1006) / 6) + grpVFO.Location.X + grpVFO.Width;
                                grp_position.Y = this.Height - 205;                     // DSP grp
                                grpDSPMainRX.Location = grp_position;
                                grpDSPSubRX.Location = grp_position;
                                grp_position = grpSubRX.Location;
                                grp_position.X = ((this.Width - 1006) / 6) + grpVFO.Location.X + grpVFO.Width;
                                grp_position.Y = this.Height - 117;                     // subRX grp
                                grpSubRX.Location = grp_position;
                                grp_position = grpDisplay2.Location;
                                grp_position.X = ((this.Width - 1006) / 6) + grpVFO.Location.X + grpVFO.Width + 128;
                                grp_position.Y = this.Height - 205;                     // display type grp
                                grpDisplay2.Location = grp_position;
                                grp_position = grpModeSpecificPhone.Location;
                                grp_position.X = ((this.Width - 1006) / 6) + grpDSPMainRX.Location.X + grpSubRX.Width;
                                grp_position.Y = this.Height - 205;                     // Phone grp
                                grpModeSpecificPhone.Location = grp_position;
                                grpModeSpecificDigital.Location = grp_position;         // Digital grp
                                grpModeSpecificCW.Location = grp_position;              // CW grp
                                grpModeSpecificFM.Location = grp_position;              // FM grp
                                grp_position = grpZoom.Location;
                                grp_position.X = ((this.Width - 1006) / 6) + grpModeSpecificPhone.Location.X + grpModeSpecificPhone.Width;
                                grp_position.Y = this.Height - 205;                     // Zoom
                                grpZoom.Location = grp_position;

                                grp_position = grpVFOA.Location;                         // VFOA
                                grp_position.X = ((grpDisplay.Width - 615) / 4) + 116;
                                grpVFOA.Location = grp_position;
                                grp_position.X = ((grpDisplay.Width - 615) / 4) + (grpVFOA.Location.X + grpVFOA.Width);
                                grpVFOB.Location = grp_position;                        // VFOB
                                grp_position.X = ((grpDisplay.Width - 615) / 4) + (grpVFOB.Location.X + grpVFOB.Width);
                                grpLOSC.Location = grp_position;                        // LOSC

                                if (vfo_new_look)
                                {
                                    int txt_width = 0;

                                    switch (current_display_mode)
                                    {
                                        case DisplayMode.WATERFALL:
                                            {
                                                txt_width = picWaterfall.Width / 6;
                                                grp_position = txtDisplayCursorOffset.Location;
                                                grp_position.Y = grpDisplay.Height - 21;
                                                grp_position.X = picWaterfall.Location.X;
                                            }
                                            break;
                                        default:
                                            {
                                                txt_width = picDisplay.Width / 6;
                                                grp_position = txtDisplayCursorOffset.Location;
                                                grp_position.Y = grpDisplay.Height - 21;
                                                grp_position.X = picDisplay.Location.X;
                                            }
                                            break;
                                    }

                                    txtDisplayPeakFreq.Width = txt_width;
                                    txtDisplayCursorOffset.Width = txt_width;
                                    txtDisplayCursorPower.Width = txt_width;
                                    txtDisplayCursorFreq.Width = txt_width;
                                    txtDisplayPeakPower.Width = txt_width;
                                    txtDisplayPeakOffset.Width = txt_width;

                                    txtDisplayCursorOffset.Location = grp_position;
                                    grp_position = txtDisplayCursorPower.Location;
                                    grp_position.Y = grpDisplay.Height - 21;
                                    grp_position.X = txt_width + picDisplay.Location.X;
                                    txtDisplayCursorPower.Location = grp_position;
                                    grp_position = txtDisplayCursorFreq.Location;
                                    grp_position.Y = grpDisplay.Height - 21;
                                    grp_position.X = 2 * txt_width + picDisplay.Location.X;
                                    txtDisplayCursorFreq.Location = grp_position;
                                    grp_position = txtDisplayPeakPower.Location;
                                    grp_position.Y = grpDisplay.Height - 21;
                                    grp_position.X = 3 * txt_width + picDisplay.Location.X;
                                    txtDisplayPeakPower.Location = grp_position;
                                    grp_position = txtDisplayPeakOffset.Location;
                                    grp_position.Y = grpDisplay.Height - 21;
                                    grp_position.X = 4 * txt_width + picDisplay.Location.X;
                                    txtDisplayPeakOffset.Location = grp_position;
                                    grp_position = txtDisplayPeakFreq.Location;
                                    grp_position.Y = grpDisplay.Height - 21;
                                    grp_position.X = 5 * txt_width + picDisplay.Location.X;
                                    txtDisplayPeakFreq.Location = grp_position;
                                }
                                else
                                {
                                    int txt_width = 0;

                                    switch (current_display_mode)
                                    {
                                        case DisplayMode.WATERFALL:
                                            {
                                                txt_width = picWaterfall.Width / 6;
                                                grp_position = txtDisplayCursorOffset.Location;
                                                grp_position.Y = grpDisplay.Height - 21;
                                                grp_position.X = picWaterfall.Location.X;
                                            }
                                            break;
                                        default:
                                            {
                                                txt_width = picDisplay.Width / 6;
                                                grp_position = txtDisplayCursorOffset.Location;
                                                grp_position.Y = grpDisplay.Height - 21;
                                                grp_position.X = picDisplay.Location.X;
                                            }
                                            break;
                                    }

                                    txtDisplayPeakFreq.Width = txt_width;
                                    txtDisplayCursorOffset.Width = txt_width;
                                    txtDisplayCursorPower.Width = txt_width;
                                    txtDisplayCursorFreq.Width = txt_width;
                                    txtDisplayPeakPower.Width = txt_width;
                                    txtDisplayPeakOffset.Width = txt_width;

                                    grp_position = txtDisplayCursorOffset.Location;
                                    grp_position.Y = this.Height - 360;
                                    grp_position.X = picDisplay.Location.X;
                                    txtDisplayCursorOffset.Location = grp_position;
                                    grp_position = txtDisplayCursorPower.Location;
                                    grp_position.Y = this.Height - 360;
                                    grp_position.X = txt_width + picDisplay.Location.X;
                                    txtDisplayCursorPower.Location = grp_position;
                                    grp_position = txtDisplayCursorFreq.Location;
                                    grp_position.Y = this.Height - 360;
                                    grp_position.X = 2 * txt_width + picDisplay.Location.X;
                                    txtDisplayCursorFreq.Location = grp_position;
                                    grp_position = txtDisplayPeakPower.Location;
                                    grp_position.Y = this.Height - 360;
                                    grp_position.X = 3 * txt_width + picDisplay.Location.X;
                                    txtDisplayPeakPower.Location = grp_position;
                                    grp_position = txtDisplayPeakOffset.Location;
                                    grp_position.Y = this.Height - 360;
                                    grp_position.X = 4 * txt_width + picDisplay.Location.X;
                                    txtDisplayPeakOffset.Location = grp_position;
                                    grp_position = txtDisplayPeakFreq.Location;
                                    grp_position.Y = this.Height - 360;
                                    grp_position.X = 5 * txt_width + picDisplay.Location.X;
                                    txtDisplayPeakFreq.Location = grp_position;
                                }

                            }
                        }

                        #endregion

                        pause_DisplayThread = false;
                        meter_data_ready = false;
                    }
                }

                //display_mutex.ReleaseMutex();
                pause_Resize = false;
            }
            catch (Exception ex)
            {
                pause_Resize = false;
                Debug.Write(ex.ToString());
                //display_mutex.ReleaseMutex();
            }
        }

        #endregion

        #region Misc Routines
        // ======================================================
        // Misc Routines
        // ======================================================

        private void NetworkThread()    // yt7pwr
        {
            bool result = false;

            Thread.Sleep(100);

            while (network_thread_running)
            {
                if (net_device != null && net_device.Connected)
                    network_event.WaitOne();
                else if (net_device != null && !net_device.Connected)
                    result = InitNetworkDevice();
            }
            try
            {
                net_device.Disconnect();
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        public bool InitNetworkDevice()     // yt7pwr
        {
            if (!booting)
            {
                if (current_model == Model.GENESIS_G59NET)
                {
                    string host = "192.168.10.166";
                    int HostPort = 14345;
                    int RemotePort = 14346;
                    btnNetwork.BackColor = Color.Red;
                    net_device.Connected = false;

                    if (File.Exists("NetworkControl.dll"))
                    {
                        if (net_device == null)
                        {
                            net_device = new NetBox(Handle);
                        }

                        net_device.Connect(host, HostPort, RemotePort);
                        Thread.Sleep(5000);
                        if (net_device.Connected)
                        {
                            btnNetwork.BackColor = Color.Green;
                            return true;
                        }
                        else
                        {
                            btnNetwork.BackColor = Color.Red;
                            return false;
                        }
                    }
                    else
                    {
                        net_device = null;
                        return false;
                    }
                }
            }
            return false;
        }

        public void TX_phase_gain() // yt7pwr
        {
            try
            {
                if (!booting)
                {
                    SetupForm.udDSPImageGainTX.Value = (decimal)tx_image_gain_table[(int)current_band];
                    SetupForm.udDSPImagePhaseTX.Value = (decimal)tx_image_phase_table[(int)current_band];
                    DttSP.SetTXIQPhase(thread_no, (double)tx_image_phase_table[(int)current_band]);
                    DttSP.SetTXIQGain(thread_no, (double)tx_image_gain_table[(int)current_band]);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error in TX_phase_gain \n\n" + ex.ToString());
            }
        }

        public void RX_phase_gain()     // yt7pwr
        {
            try
            {
                if (!booting)
                {
                    SetupForm.udRXGain.Value = (decimal)rx_image_gain_table[(int)current_band];
                    SetupForm.udRXPhase.Value = (decimal)rx_image_phase_table[(int)current_band];
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error in RX_phase_gain \n\n" + ex.ToString());
            }
        }

        private void InitConsole()      // changes yt7pwr
        {
            this.Text = this.Text + GSDR_version + GSDR_revision;
            WinVer = WindowsVersion.WindowsXP;      // default
            OSInfo = System.Environment.OSVersion;
            Mixer.console = this;

            switch (OSInfo.Version.Major)
            {
                case 5:
                    {
                        switch (OSInfo.Version.Minor)
                        {
                            case 0:
                                WinVer = WindowsVersion.Windows2000;
                                break;
                            case 1:
                                WinVer = WindowsVersion.WindowsXP;
                                break;
                        }
                    }
                    break;
                case 6:
                    {
                        switch (OSInfo.Version.Minor)
                        {
                            case 0:
                                WinVer = WindowsVersion.WindowsVista;
                                break;
                            case 1:
                                WinVer = WindowsVersion.Windows7;
                                break;
                            case 2:
                                WinVer = WindowsVersion.Windows8;
                                break;
                            case 3:
                                WinVer = WindowsVersion.Windows8;
                                break;
                            default:
                                WinVer = WindowsVersion.WindowsVista;
                                break;
                        }
                    }
                    break;
                default:
                    WinVer = WindowsVersion.WindowsXP;
                    break;
            }

            booting = true;
            skin = new Skin(this);
            VoiceMsgForm = new VoiceMessages(this);
            g59 = new GenesisG59.G59(Handle);
            g59.booting = true;
            g11 = new GenesisG11.G11(Handle);
            g11.booting = true;
            g6 = new GenesisG6.G6(Handle);
            g6.booting = true;
            g6.SetCallback(GenesisG6CommandCallback);
            g6.SetIQCallback(Audio.G6AudioCallback);
            //g6.SetIQCallback(Audio.G6ADCaudioCallback);
            //g6.SetDACcallback(Audio.G6DACaudioCallback);
            net_device = new GenesisNetBox.NetBox(Handle);
            net_device.booting = true;
            qrp2000 = new QRP2000(this);
            AnalogSignalGauge = new AGauge(this);
            NewVFOSignalGauge = new AGauge(this);

            try
            {
                ServerSocket = new ServerSendData(this);    // error!
                ClientSocket = new ClientRecvData(this);
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error1 in network configuration!\nCheck your network settings!\n" +
                    ex.ToString());
            }

            try
            {
                CAT_server_socket = new CAToverEthernetServer(this);
                CAT_client_socket = new CAToverEthernetClient(this);
            }
            catch (Exception ex)
            {
                Debug.Write("Error while creating network CAT!\n" +
                    ex.ToString());
            }

            try
            {
                MultiPSKServer = new MultiPSKEthernetServer(this);
            }
            catch (Exception ex)
            {
                Debug.Write("Error in MultiPSK network configuration!\nCheck your network settings!\n" +
                    ex.ToString());
            }

            UpdateBandStackRegisters();

            Audio.console = this;
            chkDSPNB2.Enabled = true;
            Display_GDI.console = this;     // for GDI+
#if(DirectX)
            try
            {
                Display_DirectX.console = this; // for DirectX
            }
            catch (Exception ex)
            {
                MessageBox.Show("DirectX general fault!\n" + ex.ToString());
            }
#endif

            if (CmdLineArgs != null)
            {
                for (int i = 0; i < CmdLineArgs.Length; i++)
                {
                    switch (CmdLineArgs[i])
                    {
                        case "--disable-swr-prot-at-my-risk":
                            DisableSWRProtection = true;
                            this.Text = this.Text + "  *** SWR Protection Disabled! ***";
                            break;
                        case "--high-pwr-am":
                            Audio.high_pwr_am = true;
                            MessageBox.Show("high power am");
                            break;
                        case "--debug-enable":
                            debug_enabled = true;
                            debug = new DebugForm(this, true);
                            debug.StartPosition = FormStartPosition.Manual;
                            debug.Show();
                            debug.Focus();
                            Win32.SetWindowPos(debug.Handle.ToInt32(),
                                -1, this.Left, this.Top, debug.Width, debug.Height, 0);
                            this.Text = this.Text + " Debug enabled!";
                            break;
                    }
                }
            }

            losc_hover_digit = -1;
            vfoA_hover_digit = -1;
            vfoB_hover_digit = -1;
            run_setup_wizard = true;

            // get culture specific decimal separator
            separator = CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator;

            last_band = "";						// initialize bandstack

            wheel_tune_list = new double[15];		// initialize wheel tuning list array
            wheel_tune_list[0] = 0.000001;
            wheel_tune_list[1] = 0.000010;
            wheel_tune_list[2] = 0.000050;
            wheel_tune_list[3] = 0.000100;
            wheel_tune_list[4] = 0.000250;
            wheel_tune_list[5] = 0.000500;
            wheel_tune_list[6] = 0.001000;
            wheel_tune_list[7] = 0.005000;
            wheel_tune_list[8] = 0.009000;
            wheel_tune_list[9] = 0.010000;
            wheel_tune_list[10] = 0.100000;
            wheel_tune_list[11] = 0.250000;
            wheel_tune_list[12] = 0.500000;
            wheel_tune_list[13] = 1.000000;
            wheel_tune_list[14] = 10.000000;
            wheel_tune_index = 6;
            wheel_tune_index_subRX = 6;

            meter_text_history = new float[multimeter_text_peak_samples];
            current_meter_data = -200.0f;
            this.ActiveControl = chkPower;		// Power has focus initially

            Display_GDI.Target = picDisplay;
            Display_GDI.Init();					// Initialize Display variables
            InitDisplayModes();					// Initialize Display Modes
            InitAGCModes();						// Initialize AGC Modes
            InitMultiMeterModes();				// Initialize MultiMeter Modes

            ProcessSampleThreadController[] pstc = new ProcessSampleThreadController[1];
            audio_process_thread = new Thread[1];

            for (uint proc_thread = 0; proc_thread < 1; proc_thread++)
            {
                pstc[proc_thread] = new ProcessSampleThreadController(proc_thread);
                audio_process_thread[proc_thread] = new Thread(new ThreadStart(pstc[proc_thread].ProcessSampleThread));
                audio_process_thread[proc_thread].Name = "Audio Process Thread " + proc_thread.ToString();
                audio_process_thread[proc_thread].Priority = ThreadPriority.Highest;
                audio_process_thread[proc_thread].IsBackground = true;
                audio_process_thread[proc_thread].Start();
            }

            siolisten = new SIOListenerII(this);

            Keyer = new CWKeyer2(this);			// create new Keyer
            CWXForm = new CWX(this);            // create CWX form
            CWXForm.stopButton_Click(null, null);
            EQForm = new EQForm();
            XTRVForm = new XTRV(this);
            UpdateBandStackRegisters();

            InitFilterPresets(ref filter_presets, ref filter_presets_subRX);					// Initialize filter values

            SI570 = new ExtIO_si570_usb(this);
            RTL_SDR = new ExtIO_RTL(this);

            ir_remote = new WinLIRC(this);

            rx_image_real_table = new float[(int)Band.LAST + 1];
            rx_image_imag_table = new float[(int)Band.LAST + 1];
            tx_image_phase_table = new float[(int)Band.LAST + 1];
            tx_image_gain_table = new float[(int)Band.LAST + 1];
            rx_image_phase_table = new float[(int)Band.LAST + 1];
            rx_image_gain_table = new float[(int)Band.LAST + 1];

            SetupForm = new Setup(this);		// create Setup form
            SetupForm.StartPosition = FormStartPosition.Manual;

            SetupForm.GetTxProfiles();
            UpdateTXProfile();

            WaveForm = new WaveControl(this);	// create Wave form
            WaveForm.StartPosition = FormStartPosition.Manual;

            CurrentAGCMode = AGCMode.MED;				// Initialize front panel controls
            vfob_dsp_mode = DSPMode.LSB;
            vfob_filter = Filter.F3;
            comboDisplayMode.Text = "Panafall";
            comboMeterRXMode.SelectedIndex = 0;
            ptbPWR.Value = 10;

            CurrentDSPMode = DSPMode.CWU;
            CurrentDSPModeSubRX = DSPMode.CWU;
            old_dsp_mode = DSPMode.CWU;
            old_dsp_mode_subRX = DSPMode.CWU;
            Splash.SetStatus("Restore Console state...");
            GetState();							// recall saved state

            if (current_dsp_mode == DSPMode.FIRST || current_dsp_mode == DSPMode.LAST)
                radModeLSB.Checked = true;
            if (current_dsp_mode_subRX == DSPMode.FIRST || current_dsp_mode == DSPMode.LAST)
                radSUBRxModeLSB.Checked = true;
            if (current_filter == Filter.FIRST || current_filter == Filter.LAST ||
                (current_filter == Filter.NONE && current_dsp_mode != DSPMode.DRM && current_dsp_mode != DSPMode.SPEC))
                radFilter3.Checked = true;
            if (current_filter_subRX == Filter.FIRST || current_filter_subRX == Filter.LAST ||
                (current_filter_subRX == Filter.NONE && current_dsp_mode_subRX != DSPMode.DRM &&
                current_dsp_mode_subRX != DSPMode.SPEC))
                radSubRXFilter3.Checked = true;

            booting = false;
            EQForm.Init();                  // set EQU parameter
            SetupForm.DSPBufferSize = 0;    // force refresh
            VFOAFreq = vfoAFreq;
            VFOBFreq = vfoBFreq;
            LOSCFreq = loscFreq;
            PWR_ValueChanged();
            udMIC_ValueChanged(this, EventArgs.Empty);
            tbRX0Gain_Scroll(this, EventArgs.Empty);
            tbRX1Gain_Scroll(this, EventArgs.Empty);
            tbPanMainRX_Scroll(this, EventArgs.Empty);
            tbPanSubRX_Scroll(this, EventArgs.Empty);
            ptbPanMainRX.Value = pan_main_rx;
            ptbPanSubRX.Value = pan_sub_rx;
            ptbDisplayZoom.Value = 4;
            CalcDisplayFreq();

            wheel_tune_index--;					// Setup wheel tuning
            wheel_tune_index_subRX--;
            ChangeWheelTuneLeft();
            ChangeWheelTuneLeftSubRX();

            SetupForm.initCATandPTTprops();   // wjt added -- get console props setup for cat and ptt 

            if (comboMeterTXMode.Items.Count > 0 && comboMeterTXMode.SelectedIndex < 0)
                comboMeterTXMode.SelectedIndex = 0;
            chkMOX.Enabled = false;

            CheckSkins();

#if(DirectX)
            if (CurrentDisplayEngine == DisplayEngine.DIRECT_X)
            {
                CurrentDisplayEngine = current_display_engine;
            }
#endif

            // yt7pwr
            if (!skins_enabled)
            {
                radDisplayZoom1x.BackColor = button_selected_color;
                radDisplayZoom2x.BackColor = SystemColors.Control;
                radDisplayZoom4x.BackColor = SystemColors.Control;
                radDisplayZoom8x.BackColor = SystemColors.Control;
            }
            else
                radDisplayZoom1x.Checked = true;

            Splash.SetStatus("Initializing Genesis radio communication");	// Set progress point
            g59.booting = false;
            g11.booting = false;
            g6.booting = false;
            net_device.booting = false;
            g59.si570_i2c_address = (int)SetupForm.udSi570_address.Value;
            g59.si570_fxtal = (int)SetupForm.udSi570_xtal1.Value;
            g59.HSDiv = (int)SetupForm.udSi570_divisor.Value;
            g11.si570_i2c_address = (int)SetupForm.udSi570_address.Value;
            g11.si570_fxtal = (int)SetupForm.udSi570_xtal1.Value;
            g11.HSDiv = (int)SetupForm.udSi570_divisor.Value;
            g6.si570_i2c_address = (int)SetupForm.udSi570_address.Value;
            g6.si570_fxtal = (int)SetupForm.udSi570_xtal1.Value;
            g6.HSDiv = (int)SetupForm.udSi570_divisor.Value;
            net_device.si570_i2c_address = (int)SetupForm.udSi570_address.Value;
            net_device.si570_fxtal = (int)SetupForm.udSi570_xtal1.Value;
            net_device.si570_div = (int)SetupForm.udSi570_divisor.Value;

            if (CurrentModel == Model.GENESIS_G59USB)
            {
                bool conn = false;
                g59.USB_Serial = SetupForm.USB_serial_No;
                conn = g59.Connect();

                if (conn)
                {
                    G59Init();
                    btnUSB.BackColor = Color.Green;
                }
                else
                {
                    btnUSB.BackColor = Color.Red;
                }
            }
            else if (CurrentModel == Model.GENESIS_G11)
            {
                bool conn = false;
                g11.USB_Serial = SetupForm.USB_serial_No;
                conn = g11.Connect();

                if (conn)
                {
                    G11Init();
                    btnUSB.BackColor = Color.Green;
                }
                else
                {
                    btnUSB.BackColor = Color.Red;
                }
            }
            else if (CurrentModel == Model.GENESIS_G6)
            {
                bool conn = false;
                g6.USB_Serial = SetupForm.USB_serial_No;
                conn = g6.Connect();

                if (conn)
                {
                    G11Init();
                    btnUSB.BackColor = Color.Green;
                }
                else
                {
                    btnUSB.BackColor = Color.Red;
                }
            }
            else if (current_model == Model.QRP2000)
            {
                ReInit_USB();
            }
            else if (current_model == Model.RTL_SDR)
            {
                bool result = RTL_SDR.InitUSB();

                if (result)
                {
                    btnUSB.Visible = true;
                    btnUSB.BackColor = Color.Green;
                }
                else
                {
                    btnUSB.BackColor = Color.Red;
                }
            }
            else if (SetupForm.chkGeneralUSBPresent.Checked)
            {
                bool result = SI570.Init_USB();

                if (result)
                {
                    btnUSB.Visible = true;
                    btnUSB.BackColor = Color.Green;
                }
                else
                {
                    btnUSB.BackColor = Color.Red;
                }
            }

            txtMemory_fill();
            txtFMmemory_fill();

            SetTXOscFreqs(false, false);

            btnG3020_X1.Text = G3020Xtal1.ToString();
            btnG3020_X2.Text = G3020Xtal2.ToString();
            btnG3020_X3.Text = G3020Xtal3.ToString();
            btnG3020_X4.Text = G3020Xtal4.ToString();
            btnG160_X1.Text = G160Xtal1.ToString();
            btnG160_X2.Text = G160Xtal2.ToString();
            btnG80_X1.Text = G80Xtal1.ToString();
            btnG80_X2.Text = G80Xtal2.ToString();
            btnG80_X3.Text = G80Xtal3.ToString();
            btnG80_X4.Text = G80Xtal4.ToString();
            btnG40_X1.Text = G40Xtal1.ToString();
            btnG137_X1.Text = G137Xtal1.ToString();
            btnG500_X1.Text = G500Xtal1.ToString();

            txtVFOAMSD.Font = vfo_large_font;
            txtVFOBMSD.Font = vfo_large_font;
            txtLOSCMSD.Font = (vfo_large_font);
            txtVFOAFreq.Font = vfo_large_font;
            txtVFOBFreq.Font = vfo_large_font;
            txtLOSCFreq.Font = vfo_large_font;
            txtVFOALSD.Font = vfo_small_font;
            txtVFOBLSD.Font = vfo_small_font;
            txtLOSCLSD.Font = vfo_small_font;
            NewVFOLargeFont = new_vfo_large_font;     // refresh
            NewVFOSmallFont = new_vfo_small_font;
            VFOLargeFont = vfo_large_font;
            VFOSmallFont = vfo_small_font;
            network_event = new AutoResetEvent(false);
            sMeterDigital2.MeterForeColor = vfo_text_dark_color;
            sMeterDigital1.MeterForeColor = vfo_text_dark_color;

            try
            {
                eventWatcher = new ManagementEventWatcher("root\\wmi", "SELECT * FROM MSNdis_StatusMediaDisconnect");
                eventWatcher.EventArrived += new
                EventArrivedEventHandler(eventWatcher_EventArrived);
                eventWatcher.Start();
            }
            catch (Exception ex)
            {
                //MessageBox.Show("Error starting Network watcher!\nCheck you network settings!\n" +
                    //ex.ToString());
            }

            if (current_model == Model.GENESIS_G59NET)
                NetworkThreadRunning = true;

            SetupForm.StartEthernetCATServer();       // try ethernet CAT 
            SetupForm.StartEthernetCATClient();
            SetupForm.StartMultiPSKServer();

            InitSMeterModes();

            if (File.Exists(SetupForm.txtLoopDll.Text + "\\loop.dll") &&
                SetupForm.chkAudioEnableVAC.Checked &&
                SetupForm.comboAudioInputVAC.Text == "loop.dll" &&
                SetupForm.comboAudioOutputVAC.Text == "loop.dll")
            {
                loopDLL = new LoopDLL(this);
                Audio.loopDLL_enabled = true;
            }
            else
                Audio.loopDLL_enabled = false;

            chkVFOSplit.Enabled = false;

            switch (current_model)
            {
                case Model.GENESIS_G59NET:
                case Model.GENESIS_G59USB:
                    if (SetupForm.chkG59RX2.Checked)
                        lblRX2.BackColor = Color.Red;
                    else
                        lblRX2.BackColor = NewBackgroundVFOColor;
                    break;

                case Model.GENESIS_G11:
                    if (SetupForm.chkG11RX2.Checked)
                        lblRX2.BackColor = Color.Red;
                    else
                        lblRX2.BackColor = NewBackgroundVFOColor;
                    break;
            }

            EQForm.RestoreSettings();
            band_button_height = radMoreBands.Height;
            band_button_width = radMoreBands.Width;
            AF_ValueChanged();
            SetupForm.MultimeterCalOffset = multimeter_cal_offset;
            SetupForm.DisplayCalOffset = display_cal_offset;
            FilterUpdate();
            PWR_ValueChanged();

            if (radMoreBands.Checked)
            {
                radMoreBands_Click(this, EventArgs.Empty);
            }

            IR_Remote_enabled = ir_remote_enabled;      // try WinLIRC
            SetTXOscFreqs(true, true);
            SetTXOscFreqs(false, true);

            SetupForm.ForceAllEvents();
        }

        public void ExitConsole()
        {
            try
            {
                pause_multimeter_thread = true;
#if(DirectX)
                pause_DisplayThread = true;
                Display_DirectX.DirectXRelease();
                AnalogSignalGauge.DirectXRelease();
                NewVFOSignalGauge.DirectXRelease();

                foreach (var item in ObjectTable.Objects)
                    item.Dispose();

                pause_DisplayThread = false;
#endif
                if (MultiPSKServer != null)
                    MultiPSKServer.close();

                if (g59 != null && g59.Connected)
                {
                    g59.Disconnect();
                    g59.CloseUSB();
                }
                if (g11 != null && g11.Connected)
                {
                    g11.Disconnect();
                    g11.CloseUSB();
                }
                if (g6 != null)
                {
                    //g6.Exit();
                    g6.CloseUSB();
                }

                if (usb_si570_enable && SI570.connected)
                    SI570.CloseUSB();

                if (RTL_SDR != null)
                    RTL_SDR.CloseUSB();

                if (XTRVForm != null)
                    XTRVForm.Dispose();

                if (SetupForm != null)		// make sure Setup form is deallocated
                    SetupForm.Dispose();

                if (CWXForm != null)		// make sure CWX form is deallocated
                    CWXForm.Dispose();

                if (VoiceMsgForm != null)
                    VoiceMsgForm.Dispose();

                if (CAT_server_socket != null)
                    CAT_server_socket.Stop();

                if (CAT_client_socket != null)
                    CAT_client_socket.Stop();

                /*if (WaveForm != null)
                    WaveForm.SaveSettings();*/

                DB.Exit();					// close and save database
                PA19.PA_Terminate();		// terminate audio interface
                DttSP.Exit();				// deallocate DSP variables
                Thread.Sleep(200);
            }
            catch (Exception ex)
            {
                MessageBox.Show("Console exit error!\n" + ex.ToString());
            }
        }

        public void SaveState()
        {
            // Automatically saves all control settings to the database in the tab
            // pages on this form of the following types: CheckBox, ComboBox,
            // NumericUpDown, RadioButton, TextBox, and TrackBar (slider)

            try
            {
                chkPower.Checked = false;		// turn off the power first

                string s;
                ArrayList a = new ArrayList();

                foreach (Control c in this.Controls)			// For each control
                {
                    if (c.GetType() == typeof(GroupBoxTS))		// if it is a groupbox, check for sub controls
                    {
                        foreach (Control c2 in ((GroupBoxTS)c).Controls)	// for each sub-control
                        {	// check to see if it is a value type we need to save
                            if (c2.Enabled)
                            {
                                if (c2.GetType() == typeof(CheckBoxTS))
                                    a.Add(c2.Name + "/" + ((CheckBoxTS)c2).Checked.ToString());
                                else if (c2.GetType() == typeof(PrettyTrackBar))
                                    a.Add(c2.Name + "/" + ((PrettyTrackBar)c2).Value.ToString());
                                else if (c2.GetType() == typeof(ComboBoxTS))
                                {
                                    if (((ComboBoxTS)c2).Items.Count > 0)
                                        a.Add(c2.Name + "/" + ((ComboBoxTS)c2).Text);
                                }
                                else if (c2.GetType() == typeof(NumericUpDownTS))
                                    a.Add(c2.Name + "/" + ((NumericUpDownTS)c2).Value.ToString());
                                else if (c2.GetType() == typeof(RadioButtonTS))
                                    a.Add(c2.Name + "/" + ((RadioButtonTS)c2).Checked.ToString());
                                else if (c2.GetType() == typeof(TextBoxTS))
                                {
                                    if (((TextBoxTS)c2).ReadOnly == false)
                                        a.Add(c2.Name + "/" + ((TextBoxTS)c2).Text);
                                }
                                else if (c2.GetType() == typeof(TrackBarTS))
                                    a.Add(c2.Name + "/" + ((TrackBarTS)c2).Value.ToString());
#if(DEBUG)
                                else if (c2.GetType() == typeof(GroupBox) ||
                                    c2.GetType() == typeof(CheckBoxTS) ||
                                    c2.GetType() == typeof(ComboBoxTS) ||
                                    c2.GetType() == typeof(NumericUpDownTS) ||
                                    c2.GetType() == typeof(RadioButtonTS) ||
                                    c2.GetType() == typeof(TextBoxTS) ||
                                    c2.GetType() == typeof(TrackBarTS))
                                    Debug.WriteLine(c2.Name + " needs to be converted to a Thread Safe control.");
#endif
                            }
                        }
                    }
                    else // it is not a group box
                    {	// check to see if it is a value type we need to save
                        if (c.Enabled)
                        {
                            if (c.GetType() == typeof(CheckBoxTS))
                                a.Add(c.Name + "/" + ((CheckBoxTS)c).Checked.ToString());
                            else if (c.GetType() == typeof(PrettyTrackBar))
                                a.Add(c.Name + "/" + ((PrettyTrackBar)c).Value.ToString());
                            else if (c.GetType() == typeof(ComboBoxTS))
                            {
                                if (((ComboBoxTS)c).SelectedIndex >= 0)
                                    a.Add(c.Name + "/" + ((ComboBoxTS)c).Text);
                            }
                            else if (c.GetType() == typeof(NumericUpDownTS))
                                a.Add(c.Name + "/" + ((NumericUpDownTS)c).Value.ToString());
                            else if (c.GetType() == typeof(RadioButtonTS))
                                a.Add(c.Name + "/" + ((RadioButtonTS)c).Checked.ToString());
                            else if (c.GetType() == typeof(TextBoxTS))
                            {
                                if (((TextBoxTS)c).ReadOnly == false)
                                    a.Add(c.Name + "/" + ((TextBoxTS)c).Text);
                            }
                            else if (c.GetType() == typeof(TrackBarTS))
                                a.Add(c.Name + "/" + ((TrackBarTS)c).Value.ToString());
#if(DEBUG)
                            else if (c.GetType() == typeof(GroupBoxTS) ||
                                c.GetType() == typeof(CheckBoxTS) ||
                                c.GetType() == typeof(ComboBoxTS) ||
                                c.GetType() == typeof(NumericUpDownTS) ||
                                c.GetType() == typeof(RadioButtonTS) ||
                                c.GetType() == typeof(TextBoxTS) ||
                                c.GetType() == typeof(TrackBarTS))
                                Debug.WriteLine(c.Name + " needs to be converted to a Thread Safe control.");
#endif
                        }
                    }
                    Thread.Sleep(1);
                }

                a.Add("display_cal_offset/" + display_cal_offset.ToString("f3"));
                a.Add("multimeter_cal_offset/" + multimeter_cal_offset);

                for (int m = (int)DSPMode.FIRST + 1; m < (int)DSPMode.LAST; m++)
                {	// save filter settings per mode
                    for (Filter f = Filter.FIRST + 1; f < Filter.LAST; f++)
                    {
                        a.Add("filter_presets[" + m.ToString() + "][" + ((int)f).ToString() + "]/" + filter_presets[m].ToString(f));
                        a.Add("filter_presets_subRX[" + m.ToString() + "][" + ((int)f).ToString() + "]/" + filter_presets_subRX[m].ToString(f));
                    }
                    a.Add("last_filter[" + m.ToString() + "]/" + filter_presets[m].LastFilter.ToString());
                    a.Add("last_filter_subRX[" + m.ToString() + "]/" + filter_presets_subRX[m].LastFilter.ToString());
                }

                a.Add("band_160m_index/" + band_160m_index.ToString());
                a.Add("band_80m_index/" + band_80m_index.ToString());
                a.Add("band_60m_index/" + band_60m_index.ToString());
                a.Add("band_40m_index/" + band_40m_index.ToString());
                a.Add("band_30m_index/" + band_30m_index.ToString());
                a.Add("band_20m_index/" + band_20m_index.ToString());
                a.Add("band_17m_index/" + band_17m_index.ToString());
                a.Add("band_15m_index/" + band_15m_index.ToString());
                a.Add("band_12m_index/" + band_12m_index.ToString());
                a.Add("band_10m_index/" + band_10m_index.ToString());
                a.Add("band_6m_index/" + band_6m_index.ToString());
                a.Add("band_2m_index/" + band_2m_index.ToString());
                a.Add("band_wwv_index/" + band_wwv_index.ToString());
                a.Add("band_gen_index/" + band_gen_index.ToString());
                a.Add("band_2190m_index/" + band_2190m_index.ToString());
                a.Add("band_600m_index/" + band_600m_index.ToString());
                a.Add("band_X1_index/" + band_X1_index.ToString());
                a.Add("band_X2_index/" + band_X2_index.ToString());
                a.Add("band_X3_index/" + band_X3_index.ToString());
                a.Add("band_X4_index/" + band_X4_index.ToString());
                a.Add("band_X5_index/" + band_X5_index.ToString());
                a.Add("band_X6_index/" + band_X6_index.ToString());
                a.Add("band_X7_index/" + band_X7_index.ToString());
                a.Add("band_X8_index/" + band_X8_index.ToString());
                a.Add("band_X9_index/" + band_X9_index.ToString());
                a.Add("band_X10_index/" + band_X10_index.ToString());
                a.Add("band_X11_index/" + band_X11_index.ToString());
                a.Add("band_X12_index/" + band_X12_index.ToString());

                a.Add("wheel_tune_index/" + wheel_tune_index.ToString());		// Save wheel tune value
                a.Add("wheel_tune_index_subRX/" + wheel_tune_index_subRX.ToString());		// for SubRX

                a.Add("vfob_dsp_mode/" + ((int)vfob_dsp_mode).ToString());			// Save VFO B values 
                a.Add("vfob_filter/" + ((int)vfob_filter).ToString());

                if (this.WindowState == FormWindowState.Minimized)
                {
                    a.Add("console_top/" + "0");		// save form positions
                    a.Add("console_left/" + "0");
                }
                else
                {
                    a.Add("console_top/" + this.Top.ToString());		// save form positions
                    a.Add("console_left/" + this.Left.ToString());
                }

                a.Add("console_width/" + Math.Max(1024, this.Width).ToString());
                a.Add("console_height/" + Math.Max(600, this.Height).ToString());
                a.Add("setup_top/" + SetupForm.Top.ToString());
                a.Add("setup_left/" + SetupForm.Left.ToString());

                a.Add("CompactLook/" + minimal_screen.ToString());

                a.Add("Version/" + this.Text);		// save the current version

                s = "rx_image_real_table/";
                for (int i = 0; i <= (int)Band.BX12; i++)
                    s += rx_image_real_table[i].ToString("R") + "|";
                s = s.Substring(0, s.Length - 1);
                a.Add(s);

                s = "rx_image_imag_table/";
                for (int i = 0; i <= (int)Band.BX12; i++)
                    s += rx_image_imag_table[i].ToString("R") + "|";
                s = s.Substring(0, s.Length - 1);
                a.Add(s);

                s = "tx_image_real_table/";
                for (int i = 0; i <= (int)Band.BX12; i++)
                    s += tx_image_phase_table[i].ToString("R") + "|";
                s = s.Substring(0, s.Length - 1);
                a.Add(s);

                s = "tx_image_imag_table/";
                for (int i = 0; i <= (int)Band.BX12; i++)
                    s += tx_image_gain_table[i].ToString("R") + "|";
                s = s.Substring(0, s.Length - 1);
                a.Add(s);

                s = "rx_image_phase_table/";
                for (int i = 0; i <= (int)Band.BX12; i++)
                    s += rx_image_phase_table[i].ToString("R") + "|";
                s = s.Substring(0, s.Length - 1);
                a.Add(s);

                s = "rx_image_gain_table/";
                for (int i = 0; i <= (int)Band.BX12; i++)
                    s += rx_image_gain_table[i].ToString("R") + "|";
                s = s.Substring(0, s.Length - 1);
                a.Add(s);

                if (!run_setup_wizard)
                    a.Add("SetupWizard/1");

                DB.SaveVars("State", ref a);		// save the values to the DB
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error in SaveState!\n" + ex.ToString());
            }
        }

        public void GetState()
        {
            // Automatically restores all controls from the database in the
            // tab pages on this form of the following types: CheckBox, ComboBox,
            // NumericUpDown, RadioButton, TextBox, and TrackBar (slider)

            ArrayList checkbox_list = new ArrayList();
            ArrayList combobox_list = new ArrayList();
            ArrayList numericupdown_list = new ArrayList();
            ArrayList radiobutton_list = new ArrayList();
            ArrayList textbox_list = new ArrayList();
            ArrayList trackbar_list = new ArrayList();
            ArrayList pretty_trackbar_list = new ArrayList();

            try
            {
                //ArrayList controls = new ArrayList();	// list of controls to restore
                foreach (Control c in this.Controls)
                {
                    if (c.GetType() == typeof(GroupBoxTS))	// if control is a groupbox, retrieve all subcontrols
                    {
                        foreach (Control c2 in ((GroupBoxTS)c).Controls)
                        {
                            if (c2.Enabled)
                            {
                                if (c2.GetType() == typeof(CheckBoxTS))			// the control is a CheckBox
                                    checkbox_list.Add(c2);
                                else if (c2.GetType() == typeof(ComboBoxTS))		// the control is a ComboBox
                                    combobox_list.Add(c2);
                                else if (c2.GetType() == typeof(NumericUpDownTS))	// the control is a NumericUpDown
                                    numericupdown_list.Add(c2);
                                else if (c2.GetType() == typeof(RadioButtonTS))	// the control is a RadioButton
                                    radiobutton_list.Add(c2);
                                else if (c2.GetType() == typeof(TextBoxTS))		// the control is a TextBox
                                    textbox_list.Add(c2);
                                else if (c2.GetType() == typeof(TrackBarTS))		// the control is a TrackBar (slider)
                                    trackbar_list.Add(c2);
                                else if (c2.GetType() == typeof(PrettyTrackBar))		// the control is a PrettyTrackBar (slider)
                                    pretty_trackbar_list.Add(c2);
                            }
                        }
                    }
                    else
                    {
                        if (c.Enabled)
                        {
                            if (c.GetType() == typeof(CheckBoxTS))				// the control is a CheckBox
                                checkbox_list.Add(c);
                            else if (c.GetType() == typeof(ComboBoxTS))		// the control is a ComboBox
                                combobox_list.Add(c);
                            else if (c.GetType() == typeof(NumericUpDownTS))	// the control is a NumericUpDown
                                numericupdown_list.Add(c);
                            else if (c.GetType() == typeof(RadioButtonTS))		// the control is a RadioButton
                                radiobutton_list.Add(c);
                            else if (c.GetType() == typeof(TextBoxTS))			// the control is a TextBox
                                textbox_list.Add(c);
                            else if (c.GetType() == typeof(TrackBarTS))		// the control is a TrackBar (slider)
                                trackbar_list.Add(c);
                            else if (c.GetType() == typeof(PrettyTrackBar))		// the control is a PrettyTrackBar (slider)
                                pretty_trackbar_list.Add(c);
                        }
                    }
                }

                ArrayList a = DB.GetVars("State");							// Get the saved list of controls
                a.Sort();

                foreach (string s in a)				// string is in the format "name,value"
                {
                    string[] vals = s.Split('/');
                    if (vals.Length > 2)
                    {
                        for (int i = 2; i < vals.Length; i++)
                            vals[1] += "/" + vals[i];
                    }

                    string name = vals[0];
                    string val = vals[1];
                    int num = 0;

                    if (name.StartsWith("filter_presets["))
                    {
                        int start = name.IndexOf("[") + 1;
                        int length = name.IndexOf("]") - start;
                        int mode_index = Int32.Parse(name.Substring(start, length));

                        start = name.LastIndexOf("[") + 1;
                        length = name.LastIndexOf("]") - start;
                        int filter_mode = Int32.Parse(name.Substring(start, length));

                        length = val.IndexOf(":");
                        string n = val.Substring(0, length);

                        start = val.IndexOf(":") + 2;
                        length = val.IndexOf(",") - start;
                        int low = Int32.Parse(val.Substring(start, length));

                        start = val.IndexOf(",") + 1;
                        int high = Int32.Parse(val.Substring(start));

                        filter_presets[mode_index].SetFilter((Filter)filter_mode, low, high, n);
                    }
                    else if (name.StartsWith("filter_presets_subRX["))
                    {
                        int start = name.IndexOf("[") + 1;
                        int length = name.IndexOf("]") - start;
                        int mode_index = Int32.Parse(name.Substring(start, length));

                        start = name.LastIndexOf("[") + 1;
                        length = name.LastIndexOf("]") - start;
                        int filter_mode = Int32.Parse(name.Substring(start, length));

                        length = val.IndexOf(":");
                        string n = val.Substring(0, length);

                        start = val.IndexOf(":") + 2;
                        length = val.IndexOf(",") - start;
                        int low = Int32.Parse(val.Substring(start, length));

                        start = val.IndexOf(",") + 1;
                        int high = Int32.Parse(val.Substring(start));

                        filter_presets_subRX[mode_index].SetFilter((Filter)filter_mode, low, high, n);
                    }
                    else if (name.StartsWith("last_filter["))
                    {
                        int start = name.IndexOf("[") + 1;
                        int length = name.IndexOf("]") - start;
                        int mode_index = Int32.Parse(name.Substring(start, length));

                        filter_presets[mode_index].LastFilter = (Filter)Enum.Parse(typeof(Filter), val);
                    }
                    else if (name.StartsWith("last_filter_subRX["))
                    {
                        int start = name.IndexOf("[") + 1;
                        int length = name.IndexOf("]") - start;
                        int mode_index = Int32.Parse(name.Substring(start, length));

                        filter_presets_subRX[mode_index].LastFilter = (Filter)Enum.Parse(typeof(Filter), val);
                    }

                    switch (name)
                    {
                        case "rx_image_real_table":
                            string[] list = val.Split('|');
                            for (int i = 0; i <= (int)Band.BX12 && i < list.Length; i++)
                            {
                                if (float.Parse(list[i]) > -400.0f && float.Parse(list[i]) < 400.0f)
                                    rx_image_real_table[i] = float.Parse(list[i]);
                                else
                                    rx_image_real_table[i] = 0.0f;
                            }
                            break;
                        case "rx_image_imag_table":
                            list = val.Split('|');
                            for (int i = 0; i <= (int)Band.BX12 && i < list.Length; i++)
                            {
                                if (float.Parse(list[i]) > -400.0f && float.Parse(list[i]) < 400.0f)
                                {
                                    rx_image_imag_table[i] = float.Parse(list[i]);
                                }
                                else
                                    rx_image_imag_table[i] = 0.0f;
                            }
                            break;
                        case "tx_image_real_table":
                            list = val.Split('|');
                            for (int i = 0; i <= (int)Band.BX12 && i < list.Length; i++)
                            {
                                if (float.Parse(list[i]) > -400.0f && float.Parse(list[i]) < 400.0f)
                                {
                                    tx_image_phase_table[i] = float.Parse(list[i]);
                                }
                                else
                                    tx_image_phase_table[i] = 0.0f;
                            }
                            break;
                        case "tx_image_imag_table":
                            list = val.Split('|');
                            for (int i = 0; i <= (int)Band.BX12 && i < list.Length; i++)
                            {
                                if (float.Parse(list[i]) > -400.0f && float.Parse(list[i]) < 400.0f)
                                {
                                    tx_image_gain_table[i] = float.Parse(list[i]);
                                }
                                else
                                    tx_image_gain_table[i] = 0.0f;
                            }
                            break;
                        case "rx_image_phase_table":
                            list = val.Split('|');
                            for (int i = 0; i <= (int)Band.BX12 && i < list.Length; i++)
                            {
                                if (float.Parse(list[i]) > -400.0f && float.Parse(list[i]) < 400.0f)
                                {
                                    rx_image_phase_table[i] = float.Parse(list[i]);
                                }
                                else
                                    rx_image_phase_table[i] = 0.0f;
                            }
                            break;
                        case "rx_image_gain_table":
                            list = val.Split('|');
                            for (int i = 0; i <= (int)Band.BX12 && i < list.Length; i++)
                            {
                                if (float.Parse(list[i]) > -400.0f && float.Parse(list[i]) < 400.0f)
                                {
                                    rx_image_gain_table[i] = float.Parse(list[i]);
                                }
                                else
                                    rx_image_gain_table[i] = 0.0f;
                            }
                            break;
                        case "band_160m_index":
                            band_160m_index = Math.Min(Int32.Parse(val), 3);
                            break;
                        case "band_80m_index":
                            band_80m_index = Math.Min(Int32.Parse(val), 3);
                            break;
                        case "band_60m_index":
                            band_60m_index = Math.Min(Int32.Parse(val), 3);
                            break;
                        case "band_40m_index":
                            band_40m_index = Math.Min(Int32.Parse(val), 3);
                            break;
                        case "band_30m_index":
                            band_30m_index = Math.Min(Int32.Parse(val), 3);
                            break;
                        case "band_20m_index":
                            band_20m_index = Math.Min(Int32.Parse(val), 3);
                            break;
                        case "band_17m_index":
                            band_17m_index = Math.Min(Int32.Parse(val), 3);
                            break;
                        case "band_15m_index":
                            band_15m_index = Math.Min(Int32.Parse(val), 3);
                            break;
                        case "band_12m_index":
                            band_12m_index = Math.Min(Int32.Parse(val), 3);
                            break;
                        case "band_10m_index":
                            band_10m_index = Math.Min(Int32.Parse(val), 3);
                            break;
                        case "band_6m_index":
                            band_6m_index = Math.Min(Int32.Parse(val), 3);
                            break;
                        case "band_2m_index":
                            band_2m_index = Math.Min(Int32.Parse(val), 3);
                            break;
                        case "band_wwv_index":
                            band_wwv_index = Math.Min(Int32.Parse(val), 5);
                            break;
                        case "band_gen_index":
                            band_gen_index = Math.Min(Int32.Parse(val), 5);
                            break;
                        case "band_2190m_index":
                            band_2190m_index = Math.Min(Int32.Parse(val), 3);
                            break;
                        case "band_600m_index":
                            band_600m_index = Math.Min(Int32.Parse(val), 3);
                            break;
                        case "band_X1_index":
                            band_X1_index = Math.Min(Int32.Parse(val), 3);
                            break;
                        case "band_X2_index":
                            band_X2_index = Math.Min(Int32.Parse(val), 3);
                            break;
                        case "band_X3_index":
                            band_X3_index = Math.Min(Int32.Parse(val), 3);
                            break;
                        case "band_X4_index":
                            band_X4_index = Math.Min(Int32.Parse(val), 3);
                            break;
                        case "band_X5_index":
                            band_X5_index = Math.Min(Int32.Parse(val), 3);
                            break;
                        case "band_X6_index":
                            band_X6_index = Math.Min(Int32.Parse(val), 3);
                            break;
                        case "band_X7_index":
                            band_X7_index = Math.Min(Int32.Parse(val), 3);
                            break;
                        case "band_X8_index":
                            band_X8_index = Math.Min(Int32.Parse(val), 3);
                            break;
                        case "band_X9_index":
                            band_X9_index = Math.Min(Int32.Parse(val), 3);
                            break;
                        case "band_X10_index":
                            band_X10_index = Math.Min(Int32.Parse(val), 3);
                            break;
                        case "band_X11_index":
                            band_X11_index = Math.Min(Int32.Parse(val), 3);
                            break;
                        case "band_X12_index":
                            band_X12_index = Math.Min(Int32.Parse(val), 3);
                            break;
                        case "current_datetime_mode":
                            CurrentDateTimeMode = (DateTimeMode)(Int32.Parse(val));
                            break;
                        case "wheel_tune_index":
                            wheel_tune_index = Math.Min(Int32.Parse(val), 14);
                            break;
                        case "wheel_tune_index_subRX":
                            wheel_tune_index_subRX = Math.Min(Int32.Parse(val), 14);
                            break;
                        case "display_cal_offset":
                            if (float.Parse(val) > -150.0f && float.Parse(val) < 150.0f)
                                DisplayCalOffset = float.Parse(val);
                            else
                                DisplayCalOffset = 0.0f;
                            break;
                        case "multimeter_cal_offset":
                            if (float.Parse(val) > -150.0f && float.Parse(val) < 150.0f)
                                multimeter_cal_offset = float.Parse(val);
                            else
                                multimeter_cal_offset = 0.0f;
                            break;
                        case "vfob_dsp_mode":
                            vfob_dsp_mode = (DSPMode)(Math.Min(Int32.Parse(val), 11));
                            break;
                        case "vfob_filter":
                            vfob_filter = (Filter)(Math.Min(Int32.Parse(val), 11));
                            break;
                        case "SetupWizard":
                            if (val == "1")
                                run_setup_wizard = false;
                            break;
                    }
                }

                // restore saved values to the controls
                foreach (string s in a)				// string is in the format "name,value"
                {
                    string[] vals = s.Split('/');
                    string name = vals[0];
                    string val = vals[1];

                    if (s.StartsWith("chk"))			// control is a CheckBox
                    {
                        for (int i = 0; i < checkbox_list.Count; i++)
                        {	// look through each control to find the matching name
                            CheckBoxTS c = (CheckBoxTS)checkbox_list[i];
                            if (c.Name.Equals(name))		// name found
                            {
                                c.Checked = bool.Parse(val);	// restore value
                                i = checkbox_list.Count + 1;
                            }

                            if (i == checkbox_list.Count)
                                MessageBox.Show("Control not found: " + name, "GetState Error",
                                    MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        }
                    }
                    else if (s.StartsWith("combo"))	// control is a ComboBox
                    {
                        for (int i = 0; i < combobox_list.Count; i++)
                        {	// look through each control to find the matching name
                            ComboBoxTS c = (ComboBoxTS)combobox_list[i];
                            if (c.Name.Equals(name))		// name found
                            {
                                c.Text = val;	// restore value
                                i = combobox_list.Count + 1;
                            }
                            if (i == combobox_list.Count)
                                MessageBox.Show("Control not found: " + name, "GetState Error",
                                    MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        }
                    }
                    else if (s.StartsWith("ud"))
                    {
                        for (int i = 0; i < numericupdown_list.Count; i++)
                        {	// look through each control to find the matching name
                            NumericUpDownTS c = (NumericUpDownTS)numericupdown_list[i];
                            if (c.Name.Equals(name))		                // name found
                            {
                                decimal num = decimal.Parse(val);

                                if (num > c.Maximum) 
                                    num = c.Maximum;		                // check endpoints
                                else if (num < c.Minimum)
                                    num = c.Minimum;

                                c.Value = num;			                    // restore value
                                i = numericupdown_list.Count + 1;
                            }
                            if (i == numericupdown_list.Count)
                                MessageBox.Show("Control not found: " + name, "GetState Error",
                                    MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        }
                    }
                    else if (s.StartsWith("rad"))
                    {	// look through each control to find the matching name
                        for (int i = 0; i < radiobutton_list.Count; i++)
                        {
                            RadioButtonTS c = (RadioButtonTS)radiobutton_list[i];

                            if (c.Name.Equals(name))		                // name found
                            {
                                if (!val.ToLower().Equals("true") && !val.ToLower().Equals("false"))
                                    val = "True";
                                c.Checked = bool.Parse(val);	            // restore value
                                i = radiobutton_list.Count + 1;
                            }

                            if (i == radiobutton_list.Count)
                                MessageBox.Show("Control not found: " + name, "GetState Error",
                                    MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        }
                    }
                    else if (s.StartsWith("txt"))
                    {	// look through each control to find the matching name
                        for (int i = 0; i < textbox_list.Count; i++)
                        {
                            TextBoxTS c = (TextBoxTS)textbox_list[i];
                            if (c.Name.Equals(name))		                // name found
                            {
                                c.Text = val;	                            // restore value
                                i = textbox_list.Count + 1;
                            }
                            if (i == textbox_list.Count)
                                MessageBox.Show("Control not found: " + name, "GetState Error",
                                    MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        }

                        if (s.StartsWith("txtLOSCFreq"))
                            loscFreq = double.Parse(vals[1]);
                        else if (s.StartsWith("txtVFOAnew"))
                            vfoAFreq = double.Parse(vals[1]);
                        else if (s.StartsWith("txtVFOBnew"))
                            vfoBFreq = double.Parse(vals[1]);
                    }
                    else if (s.StartsWith("tb"))
                    {
                        // look through each control to find the matching name
                        for (int i = 0; i < trackbar_list.Count; i++)
                        {
                            TrackBarTS c = (TrackBarTS)trackbar_list[i];
                            if (c.Name.Equals(name))		                // name found
                            {
                                int num = Int32.Parse(val);

                                if (num > c.Maximum)
                                    num = c.Maximum;		                // check endpoints
                                else if (num < c.Minimum)
                                    num = c.Minimum;
                                
                                c.Value = num;
                                i = trackbar_list.Count + 1;
                            }
                            if (i == trackbar_list.Count)
                                MessageBox.Show("Control not found: " + name, "GetState Error",
                                    MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        }
                    }
                    else if (s.StartsWith("ptb"))
                    {
                        // look through each control to find the matching name
                        for (int i = 0; i < pretty_trackbar_list.Count; i++)
                        {
                            PrettyTrackBar c = (PrettyTrackBar)pretty_trackbar_list[i];
                            if (c.Name.Equals(name))		                // name found
                            {
                                int num = Int32.Parse(val);

                                if (num > c.Maximum)
                                    num = c.Maximum;		                // check endpoints
                                else if (num < c.Minimum)
                                    num = c.Minimum;

                                c.Value = num;
                                i = pretty_trackbar_list.Count + 1;
                            }
                            if (i == pretty_trackbar_list.Count)
                                MessageBox.Show("Control not found: " + name, "GetState Error",
                                    MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        }
                    }
                    else if (s.StartsWith("console_top"))
                    {
                        int top = Int32.Parse(vals[1]);
                        this.Top = top;
                    }
                    else if (s.StartsWith("console_left"))
                    {
                        int left = Int32.Parse(vals[1]);
                        this.Left = left;
                    }
                    else if (s.StartsWith("console_width"))
                    {
                        int width = Int32.Parse(vals[1]);
                        this.Width = width;
                    }
                    else if (s.StartsWith("console_height"))
                    {
                        int height = Int32.Parse(vals[1]);
                        this.Height = height;
                    }
                    else if (s.StartsWith("setup_top"))
                    {
                        int top = Int32.Parse(vals[1]);
                        this.SetupForm.Top = top;
                    }
                    else if (s.StartsWith("setup_left"))
                    {
                        int left = Int32.Parse(vals[1]);
                        this.SetupForm.Left = left;
                    }
                    else if (s.StartsWith("CompactLook"))
                    {
                        bool min_screen = bool.Parse(vals[1]);
                        this.MinimalScreen = min_screen;

                        if (minimal_screen)
                        {
                            minimalisticToolStripMenuItem.Text = "Normal screen";
                        }
                        else
                        {
                            minimalisticToolStripMenuItem.Text = "Compact screen";
                        }
                    }
                }

                losc_change = true;
                if (VFOnewlook)
                {
                    txtLOSCnew_LostFocus(null, null);
                    txtVFOAnew_LostFocus(null, null);
                    txtVFOBnew_LostFocus(null, null);
                }
                else
                {
                    txtLOSCFreq_LostFocus(null, null);
                    txtVFOAFreq_LostFocus(null, null);
                    txtVFOBFreq_LostFocus(null, null);
                }

                losc_change = false;
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error in GetState()" + ex.ToString());
            }
        }

        public FilterPreset[] filter_presets = new FilterPreset[(int)DSPMode.LAST];
        public FilterPreset[] filter_presets_subRX = new FilterPreset[(int)DSPMode.LAST];
        public void InitFilterPresets(ref FilterPreset[] f_presets, ref FilterPreset[] f_presets_subrx)
        {
            // used to initialize all the filter variables
            for (int m = (int)DSPMode.FIRST + 1; m < (int)DSPMode.LAST; m++)
            {
                f_presets[m] = new FilterPreset();
                f_presets_subrx[m] = new FilterPreset();

                for (Filter f = Filter.F1; f != Filter.LAST; f++)
                {
                    switch (m)
                    {
                        case (int)DSPMode.LSB:
                        case (int)DSPMode.DIGL:
                            switch (f)
                            {
                                case Filter.F1:
                                    f_presets[m].SetFilter(f, -5150, -150, "5.0k");
                                    f_presets_subrx[m].SetFilter(f, -5150, -150, "5.0k");
                                    break;
                                case Filter.F2:
                                    f_presets[m].SetFilter(f, -4550, -150, "4.4k");
                                    f_presets_subrx[m].SetFilter(f, -4550, -150, "4.4k");
                                    break;
                                case Filter.F3:
                                    f_presets[m].SetFilter(f, -3950, -150, "3.8k");
                                    f_presets_subrx[m].SetFilter(f, -3950, -150, "3.8k");
                                    break;
                                case Filter.F4:
                                    f_presets[m].SetFilter(f, -3450, -150, "3.3k");
                                    f_presets_subrx[m].SetFilter(f, -3450, -150, "3.3k");
                                    break;
                                case Filter.F5:
                                    f_presets[m].SetFilter(f, -3050, -150, "2.9k");
                                    f_presets_subrx[m].SetFilter(f, -3050, -150, "2.9k");
                                    break;
                                case Filter.F6:
                                    f_presets[m].SetFilter(f, -2850, -150, "2.7k");
                                    f_presets_subrx[m].SetFilter(f, -2850, -150, "2.7k");
                                    break;
                                case Filter.F7:
                                    f_presets[m].SetFilter(f, -2550, -150, "2.4k");
                                    f_presets_subrx[m].SetFilter(f, -2550, -150, "2.4k");
                                    break;
                                case Filter.F8:
                                    f_presets[m].SetFilter(f, -2250, -150, "2.1k");
                                    f_presets_subrx[m].SetFilter(f, -2250, -150, "2.1k");
                                    break;
                                case Filter.F9:
                                    f_presets[m].SetFilter(f, -1950, -150, "1.8k");
                                    f_presets_subrx[m].SetFilter(f, -1950, -150, "1.8k");
                                    break;
                                case Filter.F10:
                                    f_presets[m].SetFilter(f, -1150, -150, "1.0k");
                                    f_presets_subrx[m].SetFilter(f, -1150, -150, "1.0k");
                                    break;
                                case Filter.VAR1:
                                    f_presets[m].SetFilter(f, -2850, -150, "Var 1");
                                    f_presets_subrx[m].SetFilter(f, -2850, -150, "Var 1");
                                    break;
                                case Filter.VAR2:
                                    f_presets[m].SetFilter(f, -2850, -150, "Var 2");
                                    f_presets_subrx[m].SetFilter(f, -2850, -150, "Var 2");
                                    break;
                            }
                            f_presets[m].LastFilter = Filter.F6;
                            f_presets_subrx[m].LastFilter = Filter.F6;
                            break;
                        case (int)DSPMode.USB:
                        case (int)DSPMode.DIGU:
                            switch (f)
                            {
                                case Filter.F1:
                                    f_presets[m].SetFilter(f, 150, 5150, "5.0k");
                                    f_presets_subrx[m].SetFilter(f, 150, 5150, "5.0k");
                                    break;
                                case Filter.F2:
                                    f_presets[m].SetFilter(f, 150, 4550, "4.4k");
                                    f_presets_subrx[m].SetFilter(f, 150, 4550, "4.4k");
                                    break;
                                case Filter.F3:
                                    f_presets[m].SetFilter(f, 150, 3950, "3.8k");
                                    f_presets_subrx[m].SetFilter(f, 150, 3950, "3.8k");
                                    break;
                                case Filter.F4:
                                    f_presets[m].SetFilter(f, 150, 3450, "3.3k");
                                    f_presets_subrx[m].SetFilter(f, 150, 3450, "3.3k");
                                    break;
                                case Filter.F5:
                                    f_presets[m].SetFilter(f, 150, 3050, "2.9k");
                                    f_presets_subrx[m].SetFilter(f, 150, 3050, "2.9k");
                                    break;
                                case Filter.F6:
                                    f_presets[m].SetFilter(f, 150, 2850, "2.7k");
                                    f_presets_subrx[m].SetFilter(f, 150, 2850, "2.7k");
                                    break;
                                case Filter.F7:
                                    f_presets[m].SetFilter(f, 150, 2550, "2.4k");
                                    f_presets_subrx[m].SetFilter(f, 150, 2550, "2.4k");
                                    break;
                                case Filter.F8:
                                    f_presets[m].SetFilter(f, 150, 2250, "2.1k");
                                    f_presets_subrx[m].SetFilter(f, 150, 2250, "2.1k");
                                    break;
                                case Filter.F9:
                                    f_presets[m].SetFilter(f, 150, 1950, "1.8k");
                                    f_presets_subrx[m].SetFilter(f, 150, 1950, "1.8k");
                                    break;
                                case Filter.F10:
                                    f_presets[m].SetFilter(f, 150, 1150, "1.0k");
                                    f_presets_subrx[m].SetFilter(f, 150, 1150, "1.0k");
                                    break;
                                case Filter.VAR1:
                                    f_presets[m].SetFilter(f, 150, 2850, "Var 1");
                                    f_presets_subrx[m].SetFilter(f, 150, 2850, "Var 1");
                                    break;
                                case Filter.VAR2:
                                    f_presets[m].SetFilter(f, 150, 2850, "Var 2");
                                    f_presets_subrx[m].SetFilter(f, 150, 2850, "Var 2");
                                    break;
                            }
                            f_presets[m].LastFilter = Filter.F6;
                            f_presets_subrx[m].LastFilter = Filter.F6;
                            break;
                        case (int)DSPMode.CWL:
                            switch (f)
                            {
                                case Filter.F1:
                                    f_presets[m].SetFilter(f, -cw_pitch - 500, -cw_pitch + 500, "1.0k");
                                    f_presets_subrx[m].SetFilter(f, -cw_pitch - 500, -cw_pitch + 500, "1.0k");
                                    break;
                                case Filter.F2:
                                    f_presets[m].SetFilter(f, -cw_pitch - 400, -cw_pitch + 400, "800");
                                    f_presets_subrx[m].SetFilter(f, -cw_pitch - 400, -cw_pitch + 400, "800");
                                    break;
                                case Filter.F3:
                                    f_presets[m].SetFilter(f, -cw_pitch - 375, -cw_pitch + 375, "750");
                                    f_presets_subrx[m].SetFilter(f, -cw_pitch - 375, -cw_pitch + 375, "750");
                                    break;
                                case Filter.F4:
                                    f_presets[m].SetFilter(f, -cw_pitch - 300, -cw_pitch + 300, "600");
                                    f_presets_subrx[m].SetFilter(f, -cw_pitch - 300, -cw_pitch + 300, "600");
                                    break;
                                case Filter.F5:
                                    f_presets[m].SetFilter(f, -cw_pitch - 250, -cw_pitch + 250, "500");
                                    f_presets_subrx[m].SetFilter(f, -cw_pitch - 250, -cw_pitch + 250, "500");
                                    break;
                                case Filter.F6:
                                    f_presets[m].SetFilter(f, -cw_pitch - 200, -cw_pitch + 200, "400");
                                    f_presets_subrx[m].SetFilter(f, -cw_pitch - 200, -cw_pitch + 200, "400");
                                    break;
                                case Filter.F7:
                                    f_presets[m].SetFilter(f, -cw_pitch - 125, -cw_pitch + 125, "250");
                                    f_presets_subrx[m].SetFilter(f, -cw_pitch - 125, -cw_pitch + 125, "250");
                                    break;
                                case Filter.F8:
                                    f_presets[m].SetFilter(f, -cw_pitch - 50, -cw_pitch + 50, "100");
                                    f_presets_subrx[m].SetFilter(f, -cw_pitch - 50, -cw_pitch + 50, "100");
                                    break;
                                case Filter.F9:
                                    f_presets[m].SetFilter(f, -cw_pitch - 25, -cw_pitch + 25, "50");
                                    f_presets_subrx[m].SetFilter(f, -cw_pitch - 25, -cw_pitch + 25, "50");
                                    break;
                                case Filter.F10:
                                    f_presets[m].SetFilter(f, -cw_pitch - 13, -cw_pitch + 13, "25");
                                    f_presets_subrx[m].SetFilter(f, -cw_pitch - 13, -cw_pitch + 13, "25");
                                    break;
                                case Filter.VAR1:
                                    f_presets[m].SetFilter(f, -cw_pitch - 250, -cw_pitch + 250, "Var 1");
                                    f_presets_subrx[m].SetFilter(f, -cw_pitch - 250, -cw_pitch + 250, "Var 1");
                                    break;
                                case Filter.VAR2:
                                    f_presets[m].SetFilter(f, -cw_pitch - 250, -cw_pitch + 250, "Var 2");
                                    f_presets_subrx[m].SetFilter(f, -cw_pitch - 250, -cw_pitch + 250, "Var 2");
                                    break;
                            }
                            f_presets[m].LastFilter = Filter.F5;
                            f_presets_subrx[m].LastFilter = Filter.F5;
                            break;
                        case (int)DSPMode.CWU:
                            switch (f)
                            {
                                case Filter.F1:
                                    f_presets[m].SetFilter(f, cw_pitch - 500, cw_pitch + 500, "1.0k");
                                    f_presets_subrx[m].SetFilter(f, cw_pitch - 500, cw_pitch + 500, "1.0k");
                                    break;
                                case Filter.F2:
                                    f_presets[m].SetFilter(f, cw_pitch - 400, cw_pitch + 400, "800");
                                    f_presets_subrx[m].SetFilter(f, cw_pitch - 400, cw_pitch + 400, "800");
                                    break;
                                case Filter.F3:
                                    f_presets[m].SetFilter(f, cw_pitch - 375, cw_pitch + 375, "750");
                                    f_presets_subrx[m].SetFilter(f, cw_pitch - 375, cw_pitch + 375, "750");
                                    break;
                                case Filter.F4:
                                    f_presets[m].SetFilter(f, cw_pitch - 300, cw_pitch + 300, "600");
                                    f_presets_subrx[m].SetFilter(f, cw_pitch - 300, cw_pitch + 300, "600");
                                    break;
                                case Filter.F5:
                                    f_presets[m].SetFilter(f, cw_pitch - 250, cw_pitch + 250, "500");
                                    f_presets_subrx[m].SetFilter(f, cw_pitch - 250, cw_pitch + 250, "500");
                                    break;
                                case Filter.F6:
                                    f_presets[m].SetFilter(f, cw_pitch - 200, cw_pitch + 200, "400");
                                    f_presets_subrx[m].SetFilter(f, cw_pitch - 200, cw_pitch + 200, "400");
                                    break;
                                case Filter.F7:
                                    f_presets[m].SetFilter(f, cw_pitch - 125, cw_pitch + 125, "250");
                                    f_presets_subrx[m].SetFilter(f, cw_pitch - 125, cw_pitch + 125, "250");
                                    break;
                                case Filter.F8:
                                    f_presets[m].SetFilter(f, cw_pitch - 50, cw_pitch + 50, "100");
                                    f_presets_subrx[m].SetFilter(f, cw_pitch - 50, cw_pitch + 50, "100");
                                    break;
                                case Filter.F9:
                                    f_presets[m].SetFilter(f, cw_pitch - 25, cw_pitch + 25, "50");
                                    f_presets_subrx[m].SetFilter(f, cw_pitch - 25, cw_pitch + 25, "50");
                                    break;
                                case Filter.F10:
                                    f_presets[m].SetFilter(f, cw_pitch - 13, cw_pitch + 13, "25");
                                    f_presets_subrx[m].SetFilter(f, cw_pitch - 13, cw_pitch + 13, "25");
                                    break;
                                case Filter.VAR1:
                                    f_presets[m].SetFilter(f, cw_pitch - 250, cw_pitch + 250, "Var 1");
                                    f_presets_subrx[m].SetFilter(f, cw_pitch - 250, cw_pitch + 250, "Var 1");
                                    break;
                                case Filter.VAR2:
                                    f_presets[m].SetFilter(f, cw_pitch - 250, cw_pitch + 250, "Var 2");
                                    f_presets_subrx[m].SetFilter(f, cw_pitch - 250, cw_pitch + 250, "Var 2");
                                    break;
                            }
                            f_presets[m].LastFilter = Filter.F5;
                            f_presets_subrx[m].LastFilter = Filter.F5;
                            break;
                        case (int)DSPMode.AM:
                        case (int)DSPMode.SAM:
                        case (int)DSPMode.FMN:
                        case (int)DSPMode.DSB:
                            switch (f)
                            {
                                case Filter.F1:
                                    f_presets[m].SetFilter(f, -8000, 8000, "16k");
                                    f_presets_subrx[m].SetFilter(f, -8000, 8000, "16k");
                                    break;
                                case Filter.F2:
                                    f_presets[m].SetFilter(f, -6000, 6000, "12k");
                                    f_presets_subrx[m].SetFilter(f, -6000, 6000, "12k");
                                    break;
                                case Filter.F3:
                                    f_presets[m].SetFilter(f, -5000, 5000, "10k");
                                    f_presets_subrx[m].SetFilter(f, -5000, 5000, "10k");
                                    break;
                                case Filter.F4:
                                    f_presets[m].SetFilter(f, -4000, 4000, "8.0k");
                                    f_presets_subrx[m].SetFilter(f, -4000, 4000, "8.0k");
                                    break;
                                case Filter.F5:
                                    f_presets[m].SetFilter(f, -3300, 3300, "6.6k");
                                    f_presets_subrx[m].SetFilter(f, -3300, 3300, "6.6k");
                                    break;
                                case Filter.F6:
                                    f_presets[m].SetFilter(f, -2600, 2600, "5.2k");
                                    f_presets_subrx[m].SetFilter(f, -2600, 2600, "5.2k");
                                    break;
                                case Filter.F7:
                                    f_presets[m].SetFilter(f, -2000, 2000, "4.0k");
                                    f_presets_subrx[m].SetFilter(f, -2000, 2000, "4.0k");
                                    break;
                                case Filter.F8:
                                    f_presets[m].SetFilter(f, -1550, 1550, "3.1k");
                                    f_presets_subrx[m].SetFilter(f, -1550, 1550, "3.1k");
                                    break;
                                case Filter.F9:
                                    f_presets[m].SetFilter(f, -1450, 1450, "2.9k");
                                    f_presets_subrx[m].SetFilter(f, -1450, 1450, "2.9k");
                                    break;
                                case Filter.F10:
                                    f_presets[m].SetFilter(f, -1200, 1200, "2.4k");
                                    f_presets_subrx[m].SetFilter(f, -1200, 1200, "2.4k");
                                    break;
                                case Filter.VAR1:
                                    f_presets[m].SetFilter(f, -3300, 3300, "Var 1");
                                    f_presets_subrx[m].SetFilter(f, -3300, 3300, "Var 1");
                                    break;
                                case Filter.VAR2:
                                    f_presets[m].SetFilter(f, -3300, 3300, "Var 2");
                                    f_presets_subrx[m].SetFilter(f, -3300, 3300, "Var 2");
                                    break;
                            }
                            f_presets[m].LastFilter = Filter.F5;
                            f_presets_subrx[m].LastFilter = Filter.F5;
                            break;
                        case (int)DSPMode.WFM:
                            switch (f)
                            {
                                case Filter.F1:
                                    f_presets[m].SetFilter(f, -90000, 90000, "180k");
                                    f_presets_subrx[m].SetFilter(f, -8000, 8000, "16k");
                                    break;
                                case Filter.F2:
                                    f_presets[m].SetFilter(f, -75000, 75000, "150k");
                                    f_presets_subrx[m].SetFilter(f, -8000, 8000, "16k");
                                    break;
                                case Filter.F3:
                                    f_presets[m].SetFilter(f, -60000, 60000, "120k");
                                    f_presets_subrx[m].SetFilter(f, -6000, 6000, "12k");
                                    break;
                                case Filter.F4:
                                    f_presets[m].SetFilter(f, -50000, 50000, "100k");
                                    f_presets_subrx[m].SetFilter(f, -5000, 5000, "10k");
                                    break;
                                case Filter.F5:
                                    f_presets[m].SetFilter(f, -40000, 40000, "80k");
                                    f_presets_subrx[m].SetFilter(f, -4000, 4000, "8.0k");
                                    break;
                                case Filter.F6:
                                    f_presets[m].SetFilter(f, -30000, 30000, "60k");
                                    f_presets_subrx[m].SetFilter(f, -3300, 3300, "6.6k");
                                    break;
                                case Filter.F7:
                                    f_presets[m].SetFilter(f, -24000, 24000, "48k");
                                    f_presets_subrx[m].SetFilter(f, -2600, 2600, "5.2k");
                                    break;
                                case Filter.F8:
                                    f_presets[m].SetFilter(f, -16000, 16000, "32k");
                                    f_presets_subrx[m].SetFilter(f, -2000, 2000, "4.0k");
                                    break;
                                case Filter.F9:
                                    f_presets[m].SetFilter(f, -12000, 12000, "24k");
                                    f_presets_subrx[m].SetFilter(f, -1550, 1550, "3.1k");
                                    break;
                                case Filter.F10:
                                    f_presets[m].SetFilter(f, -8000, 8000, "16k");
                                    f_presets_subrx[m].SetFilter(f, -1450, 1450, "2.9k");
                                    break;
                                case Filter.VAR1:
                                    f_presets[m].SetFilter(f, -3300, 3300, "Var 1");
                                    f_presets_subrx[m].SetFilter(f, -3300, 3300, "Var 1");
                                    break;
                                case Filter.VAR2:
                                    f_presets[m].SetFilter(f, -3300, 3300, "Var 2");
                                    f_presets_subrx[m].SetFilter(f, -3300, 3300, "Var 2");
                                    break;
                            }
                            f_presets[m].LastFilter = Filter.F5;
                            f_presets_subrx[m].LastFilter = Filter.F5;
                            break;
                        default:
                            f_presets[m].LastFilter = Filter.NONE;
                            f_presets_subrx[m].LastFilter = Filter.NONE;
                            break;
                    }
                }
            }
        }

        private void InitDisplayModes()
        {
            // populate the display mode list
            for (DisplayMode dm = DisplayMode.FIRST + 1; dm < DisplayMode.LAST; dm++)
            {
                string s = dm.ToString().ToLower();
                s = s.Substring(0, 1).ToUpper() + s.Substring(1, s.Length - 1);
                comboDisplayMode.Items.Add(s);
            }
        }

        private void InitAGCModes()
        {
            // populate the AGC mode list
            for (AGCMode agc = AGCMode.FIRST + 1; agc < AGCMode.LAST; agc++)
            {
                string s = agc.ToString().ToLower();
                s = s.Substring(0, 1).ToUpper() + s.Substring(1, s.Length - 1);
                comboAGCMainRX.Items.Add(s);
                comboAGCSubRX.Items.Add(s);
            }
        }

        private void InitMultiMeterModes()
        {
            comboMeterRXMode.Items.Add("Signal");
            comboMeterRXMode.Items.Add("Sig Avg");
            comboMeterRXMode.Items.Add("ADC L");
            comboMeterRXMode.Items.Add("ADC R");
            comboMeterRXMode.Items.Add("Off");

            comboMeterTXMode.Items.Add("Fwd Pwr");
            comboMeterTXMode.Items.Add("Ref Pwr");
            comboMeterTXMode.Items.Add("SWR");
            comboMeterTXMode.Items.Add("Mic");
            comboMeterTXMode.Items.Add("EQ");
            comboMeterTXMode.Items.Add("Leveler");
            comboMeterTXMode.Items.Add("Lev Gain");
            comboMeterTXMode.Items.Add("COMP");
            comboMeterTXMode.Items.Add("CPDR");
            comboMeterTXMode.Items.Add("ALC");
            comboMeterTXMode.Items.Add("ALC Comp");
            comboMeterTXMode.Items.Add("Off");
        }

        private void GetLOSCCharWidth()
        {
            Graphics g = txtLOSCFreq.CreateGraphics();

            SizeF size = g.MeasureString("0", txtLOSCFreq.Font, 1000, StringFormat.GenericTypographic);
            losc_char_width = (int)Math.Round(size.Width - 2.0f, 0);
            float float_char_width = size.Width - 2.0f;

            size = g.MeasureString("00", txtLOSCFreq.Font, 1000, StringFormat.GenericTypographic);
            losc_char_space = (int)Math.Round(size.Width - 2.0f - 2 * float_char_width, 0);

            size = g.MeasureString(separator, txtLOSCFreq.Font, 1000, StringFormat.GenericTypographic);
            losc_decimal_width = (int)(size.Width - 2.0f);

            size = g.MeasureString("0" + separator + "0", txtLOSCFreq.Font, 1000, StringFormat.GenericTypographic);
            losc_decimal_space = (int)Math.Round(size.Width - 2.0f - 2 * float_char_width, 0);

            size = g.MeasureString("1234.678901", txtLOSCFreq.Font, 1000, StringFormat.GenericTypographic);
            losc_pixel_offset = (int)Math.Round(size.Width - 2.0f, 0);

            size = g.MeasureString("0", txtLOSCLSD.Font, 1000, StringFormat.GenericTypographic);
            losc_small_char_width = (int)Math.Round(size.Width - 2.0f, 0);
            float_char_width = size.Width - 2.0f;

            size = g.MeasureString("00", txtLOSCLSD.Font, 1000, StringFormat.GenericTypographic);
            losc_small_char_space = (int)Math.Round(size.Width - 2.0f - 2 * float_char_width, 0);

            g.Dispose();
        }

        private void GetVFOCharWidth(int vfo)
        {
            // This function calculates the pixel width of the VFO display.
            // This information is used for mouse wheel hover tuning.
            switch (vfo)
            {
                case (1):  // VFOA
                    {
                        Graphics g = txtVFOAFreq.CreateGraphics();

                        SizeF size = g.MeasureString("0", txtVFOAFreq.Font, 1000, StringFormat.GenericTypographic);
                        vfoA_char_width = (int)Math.Round(size.Width - 2.0f, 0);	// subtract 2 since measure string includes 1 pixel border on each side
                        float float_char_width = size.Width - 2.0f;

                        size = g.MeasureString("00", txtVFOAFreq.Font, 1000, StringFormat.GenericTypographic);
                        vfoA_char_space = (int)Math.Round(size.Width - 2.0f - 2 * float_char_width, 0);

                        size = g.MeasureString(separator, txtVFOAFreq.Font, 1000, StringFormat.GenericTypographic);
                        vfoA_decimal_width = (int)(size.Width - 2.0f);

                        size = g.MeasureString("0" + separator + "0", txtVFOAFreq.Font, 1000, StringFormat.GenericTypographic);
                        vfoA_decimal_space = (int)Math.Round(size.Width - 2.0f - 2 * float_char_width, 0);

                        size = g.MeasureString("1234.678901", txtVFOAFreq.Font, 1000, StringFormat.GenericTypographic);
                        vfoA_pixel_offset = (int)Math.Round(size.Width - 2.0f, 0);

                        size = g.MeasureString("0", txtVFOALSD.Font, 1000, StringFormat.GenericTypographic);
                        vfoA_small_char_width = (int)Math.Round(size.Width - 2.0f, 0);
                        float_char_width = size.Width - 2.0f;

                        size = g.MeasureString("00", txtVFOALSD.Font, 1000, StringFormat.GenericTypographic);
                        vfoA_small_char_space = (int)Math.Round(size.Width - 2.0f - 2 * float_char_width, 0);
                        g.Dispose();
                    }
                    break;
                case (2):  // VFOB
                    {
                        Graphics g = txtVFOBFreq.CreateGraphics();

                        SizeF size = g.MeasureString("0", txtVFOBFreq.Font, 1000, StringFormat.GenericTypographic);
                        vfoB_char_width = (int)Math.Round(size.Width - 2.0f, 0);	// subtract 2 since measure string includes 1 pixel border on each side
                        float float_char_width = size.Width - 2.0f;

                        size = g.MeasureString("00", txtVFOBFreq.Font, 1000, StringFormat.GenericTypographic);
                        vfoB_char_space = (int)Math.Round(size.Width - 2.0f - 2 * float_char_width, 0);

                        size = g.MeasureString(separator, txtVFOBFreq.Font, 1000, StringFormat.GenericTypographic);
                        vfoB_decimal_width = (int)(size.Width - 2.0f);

                        size = g.MeasureString("0" + separator + "0", txtVFOBFreq.Font, 1000, StringFormat.GenericTypographic);
                        vfoB_decimal_space = (int)Math.Round(size.Width - 2.0f - 2 * float_char_width, 0);

                        size = g.MeasureString("1234.678901", txtVFOBFreq.Font, 1000, StringFormat.GenericTypographic);
                        vfoB_pixel_offset = (int)Math.Round(size.Width - 2.0f, 0);

                        size = g.MeasureString("0", txtVFOBLSD.Font, 1000, StringFormat.GenericTypographic);
                        vfoB_small_char_width = (int)Math.Round(size.Width - 2.0f, 0);
                        float_char_width = size.Width - 2.0f;

                        size = g.MeasureString("00", txtVFOBLSD.Font, 1000, StringFormat.GenericTypographic);
                        vfoB_small_char_space = (int)Math.Round(size.Width - 2.0f - 2 * float_char_width, 0);
                        g.Dispose();
                    }
                    break;
            }
        }

        public void SaveBand() // changes yt7pwr
        {
            // Used in Bandstacking algorithm
            Band b = Band.FIRST;
            double freqA = Math.Round(VFOAFreq, 6);
            double freqB = Math.Round(VFOBFreq, 6);
            double losc_freq = Math.Round(LOSCFreq, 6);
            string filterMainRX = current_filter.ToString();
            string filterSubRX = current_filter_subRX.ToString();
            string modeMainRX = current_dsp_mode.ToString();
            string modeSubRX = current_dsp_mode_subRX.ToString();
            DB.GetBandLimits(freqA, out b);


            if (!extended)
            {
                switch (current_band)
                {
                    case Band.B160M:
                        if (b == Band.B160M)
                            DB.SaveBandStack("160M", band_160m_index, modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq,
                                AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked, SquelchSubRX, chkSQLSubRX.Checked);
                        break;
                    case Band.B80M:
                        if (b == Band.B80M)
                            DB.SaveBandStack("80M", band_80m_index, modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq,
                                AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked, SquelchSubRX, chkSQLSubRX.Checked);
                        break;
                    case Band.B60M:
                        if (b == Band.B60M)
                            DB.SaveBandStack("60M", band_60m_index, modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq,
                                AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked, SquelchSubRX, chkSQLSubRX.Checked);
                        break;
                    case Band.B40M:
                        if (b == Band.B40M)
                            DB.SaveBandStack("40M", band_40m_index, modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq,
                                AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked, SquelchSubRX, chkSQLSubRX.Checked);
                        break;
                    case Band.B30M:
                        if (b == Band.B30M)
                            DB.SaveBandStack("30M", band_30m_index, modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq,
                                AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked, SquelchSubRX, chkSQLSubRX.Checked);
                        break;
                    case Band.B20M:
                        if (b == Band.B20M)
                            DB.SaveBandStack("20M", band_20m_index, modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq,
                                AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked, SquelchSubRX, chkSQLSubRX.Checked);
                        break;
                    case Band.B17M:
                        if (b == Band.B17M)
                            DB.SaveBandStack("17M", band_17m_index, modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq,
                                AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked, SquelchSubRX, chkSQLSubRX.Checked);
                        break;
                    case Band.B15M:
                        if (b == Band.B15M)
                            DB.SaveBandStack("15M", band_15m_index, modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq,
                                AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked, SquelchSubRX, chkSQLSubRX.Checked);
                        break;
                    case Band.B12M:
                        if (b == Band.B12M)
                            DB.SaveBandStack("12M", band_12m_index, modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq,
                                AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked, SquelchSubRX, chkSQLSubRX.Checked);
                        break;
                    case Band.B10M:
                        if (b == Band.B10M)
                            DB.SaveBandStack("10M", band_10m_index, modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq,
                                AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked, SquelchSubRX, chkSQLSubRX.Checked);
                        break;
                    case Band.B6M:
                        if (b == Band.B6M)
                            DB.SaveBandStack("6M", band_6m_index, modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq,
                                AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked, SquelchSubRX, chkSQLSubRX.Checked);
                        break;
                    case Band.B2M:
                        if (b == Band.B2M)
                            DB.SaveBandStack("2M", band_2m_index, modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq,
                                AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked, SquelchSubRX, chkSQLSubRX.Checked);
                        break;
                    case Band.WWV:
                        if (b == Band.WWV)
                            DB.SaveBandStack("WWV", band_wwv_index, modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq,
                                AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked, SquelchSubRX, chkSQLSubRX.Checked);
                        break;
                    case Band.GEN:
                        DB.SaveBandStack("GEN", band_gen_index, modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq,
                                AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked, SquelchSubRX, chkSQLSubRX.Checked);
                        break;
                    case Band.B2190M:
                        if (b == Band.B2190M)
                            DB.SaveBandStack("2190M", band_2190m_index, modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq,
                                AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked, SquelchSubRX, chkSQLSubRX.Checked);
                        break;
                    case Band.B600M:
                        if (b == Band.B600M)
                            DB.SaveBandStack("600M", band_600m_index, modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq,
                                    AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked, SquelchSubRX, chkSQLSubRX.Checked);
                        break;
                    case Band.BX1:
                        if (freqA >= xBand[1].freq_min && freqA < xBand[1].freq_max)
                            DB.SaveBandStack(xBand[1].name, band_X1_index, modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq,
                                AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked, SquelchSubRX, chkSQLSubRX.Checked);
                        break;
                    case Band.BX2:
                        if (freqA >= xBand[2].freq_min && freqA < xBand[2].freq_max)
                            DB.SaveBandStack(xBand[2].name, band_X2_index, modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq,
                                AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked, SquelchSubRX, chkSQLSubRX.Checked);
                        break;
                    case Band.BX3:
                        if (freqA >= xBand[3].freq_min && freqA < xBand[3].freq_max)
                            DB.SaveBandStack(xBand[3].name, band_X3_index, modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq,
                                AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked, SquelchSubRX, chkSQLSubRX.Checked);
                        break;
                    case Band.BX4:
                        if (freqA >= xBand[4].freq_min && freqA < xBand[4].freq_max)
                            DB.SaveBandStack(xBand[4].name, band_X4_index, modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq,
                                AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked, SquelchSubRX, chkSQLSubRX.Checked);
                        break;
                    case Band.BX5:
                        if (freqA >= xBand[5].freq_min && freqA < xBand[5].freq_max)
                            DB.SaveBandStack(xBand[5].name, band_X5_index, modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq,
                                AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked, SquelchSubRX, chkSQLSubRX.Checked);
                        break;
                    case Band.BX6:
                        if (freqA >= xBand[6].freq_min && freqA < xBand[6].freq_max)
                            DB.SaveBandStack(xBand[6].name, band_X6_index, modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq,
                                AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked, SquelchSubRX, chkSQLSubRX.Checked);
                        break;
                    case Band.BX7:
                        if (freqA >= xBand[7].freq_min && freqA < xBand[7].freq_max)
                            DB.SaveBandStack(xBand[7].name, band_X7_index, modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq,
                                AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked, SquelchSubRX, chkSQLSubRX.Checked);
                        break;
                    case Band.BX8:
                        if (freqA >= xBand[8].freq_min && freqA < xBand[8].freq_max)
                            DB.SaveBandStack(xBand[8].name, band_X8_index, modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq,
                                AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked, SquelchSubRX, chkSQLSubRX.Checked);
                        break;
                    case Band.BX9:
                        if (freqA >= xBand[9].freq_min && freqA < xBand[9].freq_max)
                            DB.SaveBandStack(xBand[9].name, band_X9_index, modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq,
                                AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked, SquelchSubRX, chkSQLSubRX.Checked);
                        break;
                    case Band.BX10:
                        if (freqA >= xBand[10].freq_min && freqA < xBand[10].freq_max)
                            DB.SaveBandStack(xBand[10].name, band_X10_index, modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq,
                                AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked, SquelchSubRX, chkSQLSubRX.Checked);
                        break;
                    case Band.BX11:
                        if (freqA >= xBand[11].freq_min && freqA < xBand[11].freq_max)
                            DB.SaveBandStack(xBand[11].name, band_X11_index, modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq,
                                AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked, SquelchSubRX, chkSQLSubRX.Checked);
                        break;
                    case Band.BX12:
                        if (freqA >= xBand[12].freq_min && freqA < xBand[12].freq_max)
                            DB.SaveBandStack(xBand[12].name, band_X12_index, modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq,
                                AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked, SquelchSubRX, chkSQLSubRX.Checked);
                        break;
                }
            }
            else
            {
                switch (current_band)
                {
                    case Band.B160M:
                        if (freqA >= 1.0 && freqA < 2.75)
                            DB.SaveBandStack("160M", band_160m_index, modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq,
                                AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked, SquelchSubRX, chkSQLSubRX.Checked);
                        break;
                    case Band.B80M:
                        if (freqA >= 2.75 && freqA < 5.2)
                            DB.SaveBandStack("80M", band_80m_index, modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq,
                                AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked, SquelchSubRX, chkSQLSubRX.Checked);
                        break;
                    case Band.B60M:
                        if (freqA >= 5.2 && freqA < 7.0)
                            DB.SaveBandStack("60M", band_60m_index, modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq,
                                AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked, SquelchSubRX, chkSQLSubRX.Checked);
                        break;
                    case Band.B40M:
                        if (freqA >= 7.0 && freqA < 8.7)
                            DB.SaveBandStack("40M", band_40m_index, modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq,
                                AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked, SquelchSubRX, chkSQLSubRX.Checked);
                        break;
                    case Band.B30M:
                        if (freqA >= 8.7 && freqA < 12.075)
                            DB.SaveBandStack("30M", band_30m_index, modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq,
                                AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked, SquelchSubRX, chkSQLSubRX.Checked);
                        break;
                    case Band.B20M:
                        if (freqA >= 12.075 && freqA < 16.209)
                            DB.SaveBandStack("20M", band_20m_index, modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq,
                                AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked, SquelchSubRX, chkSQLSubRX.Checked);
                        break;
                    case Band.B17M:
                        if (freqA >= 16.209 && freqA < 19.584)
                            DB.SaveBandStack("17M", band_17m_index, modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq,
                                AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked, SquelchSubRX, chkSQLSubRX.Checked);
                        break;
                    case Band.B15M:
                        if (freqA >= 19.584 && freqA < 23.17)
                            DB.SaveBandStack("15M", band_15m_index, modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq,
                                AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked, SquelchSubRX, chkSQLSubRX.Checked);
                        break;
                    case Band.B12M:
                        if (freqA >= 23.17 && freqA < 26.495)
                            DB.SaveBandStack("12M", band_12m_index, modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq,
                                AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked, SquelchSubRX, chkSQLSubRX.Checked);
                        break;
                    case Band.B10M:
                        if (freqA >= 26.495 && freqA < 30.0)
                            DB.SaveBandStack("10M", band_10m_index, modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq,
                                AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked, SquelchSubRX, chkSQLSubRX.Checked);
                        break;
                    case Band.B6M:
                        if (freqA >= 50.0 && freqA < 54.0)
                            DB.SaveBandStack("6M", band_6m_index, modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq,
                                AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked, SquelchSubRX, chkSQLSubRX.Checked);
                        break;
                    case Band.B2M:
                        if (freqA >= 144.0 && freqA < 148.0)
                            DB.SaveBandStack("2M", band_2m_index, modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq,
                                AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked, SquelchSubRX, chkSQLSubRX.Checked);
                        break;
                    case Band.WWV:
                        if (freqA == 2.5 || freqA == 5.0 || freqA == 10.0 || freqA == 15.0 || freqA == 20.0)
                            DB.SaveBandStack("WWV", band_wwv_index, modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq,
                                AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked, SquelchSubRX, chkSQLSubRX.Checked);
                        break;
                    case Band.GEN:
                        DB.SaveBandStack("GEN", band_gen_index, modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq,
                                AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked, SquelchSubRX, chkSQLSubRX.Checked);
                        break;
                    case Band.B2190M:
                        if (freqA >= 0.1 && freqA < 0.15)
                            DB.SaveBandStack("2190M", band_2190m_index, modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq,
                                AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked, SquelchSubRX, chkSQLSubRX.Checked);
                        break;
                    case Band.B600M:
                        if (freqA >= 0.4 && freqA < 0.6)
                            DB.SaveBandStack("600M", band_600m_index, modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq,
                                AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked, SquelchSubRX, chkSQLSubRX.Checked);
                        break;
                    case Band.BX1:
                        if (freqA >= xBand[1].freq_min && freqA < xBand[1].freq_max)
                            DB.SaveBandStack(xBand[1].name, band_X1_index, modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq,
                                AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked, SquelchSubRX, chkSQLSubRX.Checked);
                        break;
                    case Band.BX2:
                        if (freqA >= xBand[2].freq_min && freqA < xBand[2].freq_max)
                            DB.SaveBandStack(xBand[2].name, band_X2_index, modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq,
                                AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked, SquelchSubRX, chkSQLSubRX.Checked);
                        break;
                    case Band.BX3:
                        if (freqA >= xBand[3].freq_min && freqA < xBand[3].freq_max)
                            DB.SaveBandStack(xBand[3].name, band_X3_index, modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq,
                                AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked, SquelchSubRX, chkSQLSubRX.Checked);
                        break;
                    case Band.BX4:
                        if (freqA >= xBand[4].freq_min && freqA < xBand[4].freq_max)
                            DB.SaveBandStack(xBand[4].name, band_X4_index, modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq,
                                AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked, SquelchSubRX, chkSQLSubRX.Checked);
                        break;
                    case Band.BX5:
                        if (freqA >= xBand[5].freq_min && freqA < xBand[5].freq_max)
                            DB.SaveBandStack(xBand[5].name, band_X5_index, modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq,
                                AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked, SquelchSubRX, chkSQLSubRX.Checked);
                        break;
                    case Band.BX6:
                        if (freqA >= xBand[6].freq_min && freqA < xBand[6].freq_max)
                            DB.SaveBandStack(xBand[6].name, band_X6_index, modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq,
                                AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked, SquelchSubRX, chkSQLSubRX.Checked);
                        break;
                    case Band.BX7:
                        if (freqA >= xBand[7].freq_min && freqA < xBand[7].freq_max)
                            DB.SaveBandStack(xBand[7].name, band_X7_index, modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq,
                                AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked, SquelchSubRX, chkSQLSubRX.Checked);
                        break;
                    case Band.BX8:
                        if (freqA >= xBand[8].freq_min && freqA < xBand[8].freq_max)
                            DB.SaveBandStack(xBand[8].name, band_X8_index, modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq,
                                AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked, SquelchSubRX, chkSQLSubRX.Checked);
                        break;
                    case Band.BX9:
                        if (freqA >= xBand[9].freq_min && freqA < xBand[9].freq_max)
                            DB.SaveBandStack(xBand[9].name, band_X9_index, modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq,
                                AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked, SquelchSubRX, chkSQLSubRX.Checked);
                        break;
                    case Band.BX10:
                        if (freqA >= xBand[10].freq_min && freqA < xBand[10].freq_max)
                            DB.SaveBandStack(xBand[10].name, band_X10_index, modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq,
                                AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked, SquelchSubRX, chkSQLSubRX.Checked);
                        break;
                    case Band.BX11:
                        if (freqA >= xBand[11].freq_min && freqA < xBand[11].freq_max)
                            DB.SaveBandStack(xBand[11].name, band_X11_index, modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq,
                                AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked, SquelchSubRX, chkSQLSubRX.Checked);
                        break;
                    case Band.BX12:
                        if (freqA >= xBand[12].freq_min && freqA < xBand[12].freq_max)
                            DB.SaveBandStack(xBand[12].name, band_X12_index, modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq,
                                AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked, SquelchSubRX, chkSQLSubRX.Checked);
                        break;
                }
            }
        }

        private bool band_locked = false;       // yt7pwr
        private void SetBand(string modeMainRX, string modeSubRX, string filterMainRX, string filterSubRX,
            double freqA, double freqB, double losc, int af, int rf, double pwr, int sql1,
            bool sql1_on, int sql2, bool sql2_on) // changes yt7pwr
        {
            // Set mode, filter, and frequency according to passed parameters
            band_locked = true;
            lock_dsp_mode = true;
            old_dsp_mode = current_dsp_mode;
            old_dsp_mode_subRX = current_dsp_mode_subRX;
            CurrentDSPMode = (DSPMode)Enum.Parse(typeof(DSPMode), modeMainRX, true);
            CurrentDSPModeSubRX = (DSPMode)Enum.Parse(typeof(DSPMode), modeSubRX, true);
            lock_dsp_mode = false;

            if (current_dsp_mode != DSPMode.DRM &&
                current_dsp_mode != DSPMode.SPEC)
            {
                CurrentFilter = (Filter)Enum.Parse(typeof(Filter), filterMainRX, true);
            }

            if (current_dsp_mode_subRX != DSPMode.DRM &&
                current_dsp_mode_subRX != DSPMode.SPEC)
            {
                CurrentFilterSubRX = (Filter)Enum.Parse(typeof(Filter), filterSubRX, true);
            }

            memory = false;
            losc_change = true;
            LOSCFreq = losc;
            VFOAFreq = freqA;
            VFOBFreq = freqB;
            losc_change = false;
            wbir_delay_adapt = true;
            band_locked = false;
            AF = af;
            RF = rf;
            PWR = pwr;
            SquelchMainRX = sql1;
            chkSQLMainRX.Checked = sql1_on;
            SquelchSubRX = sql2;
            chkSQLSubRX.Checked = sql2_on;
        }

        public void MemoryRecall(int mode, int filter, double freq, double losc, int step, int agc, int squelch) // changes yt7pwr
        {
            // Set mode, filter, and frequency, mouse wheel tune step
            // and AGC according to passed parameters

            SaveBand();
            last_band = "";
            CurrentDSPMode = (DSPMode)mode;
            if (current_dsp_mode != DSPMode.DRM &&
                current_dsp_mode != DSPMode.SPEC)
                CurrentFilter = (Filter)filter;
            losc_change = true;
            LOSCFreq = Math.Round(losc, 6);

            if(loscFreq != losc)
                LOSCFreq = Math.Round(losc, 6);

            VFOAFreq = Math.Round(freq, 6);

            if (vfoAFreq != freq)
                VFOAFreq = Math.Round(freq, 6);

            losc_change = false;
            comboAGCMainRX.SelectedIndex = agc;
            udSQLMainRX.Value = squelch;
            wheel_tune_index = step;
            switch (wheel_tune_index)
            {
                case 0:
                    txtWheelTune.Text = "1Hz";
                    break;
                case 1:
                    txtWheelTune.Text = "10Hz";
                    break;
                case 2:
                    txtWheelTune.Text = "50Hz";
                    break;
                case 3:
                    txtWheelTune.Text = "100Hz";
                    break;
                case 4:
                    txtWheelTune.Text = "250Hz";
                    break;
                case 5:
                    txtWheelTune.Text = "500Hz";
                    break;
                case 6:
                    txtWheelTune.Text = "1kHz";
                    break;
                case 7:
                    txtWheelTune.Text = "5kHz";
                    break;
                case 8:
                    txtWheelTune.Text = "10kHz";
                    break;
                case 9:
                    txtWheelTune.Text = "100kHz";
                    break;
                case 10:
                    txtWheelTune.Text = "1MHz";
                    break;
                case 11:
                    txtWheelTune.Text = "10MHz";
                    break;
            }
        }

        private void ChangeWheelTuneLeftSubRX()      // yt7pwr
        {
            // change mouse wheel tuning step one digit to the left
            wheel_tune_index_subRX = (wheel_tune_index_subRX + 1) % wheel_tune_list.Length;
            switch (wheel_tune_index_subRX)
            {
                case 0:
                    txtWheelTuneSubRX.Text = "1Hz";
                    break;
                case 1:
                    txtWheelTuneSubRX.Text = "10Hz";
                    break;
                case 2:
                    txtWheelTuneSubRX.Text = "50Hz";
                    break;
                case 3:
                    txtWheelTuneSubRX.Text = "100Hz";
                    break;
                case 4:
                    txtWheelTuneSubRX.Text = "250Hz";
                    break;
                case 5:
                    txtWheelTuneSubRX.Text = "500Hz";
                    break;
                case 6:
                    txtWheelTuneSubRX.Text = "1kHz";
                    break;
                case 7:
                    txtWheelTuneSubRX.Text = "5kHz";
                    break;
                case 8:
                    txtWheelTuneSubRX.Text = "9kHz";
                    break;
                case 9:
                    txtWheelTuneSubRX.Text = "10kHz";
                    break;
                case 10:
                    txtWheelTuneSubRX.Text = "100kHz";
                    break;
                case 11:
                    txtWheelTuneSubRX.Text = "250KHz";
                    break;
                case 12:
                    txtWheelTuneSubRX.Text = "500kHz";
                    break;
                case 13:
                    txtWheelTuneSubRX.Text = "1MHz";
                    break;
                case 14:
                    txtWheelTuneSubRX.Text = "10MHz";
                    break;
            }

            if (EthCATIsActive)
                CAT_client_socket.ClientServerSync("ZZSV;");     // sync with server
        }

        private void ChangeWheelTuneLeft()
        {
            // change mouse wheel tuning step one digit to the left
            wheel_tune_index = (wheel_tune_index + 1) % wheel_tune_list.Length;
            switch (wheel_tune_index)
            {
                case 0:
                    txtWheelTune.Text = "1Hz";
                    break;
                case 1:
                    txtWheelTune.Text = "10Hz";
                    break;
                case 2:
                    txtWheelTune.Text = "50Hz";
                    break;
                case 3:
                    txtWheelTune.Text = "100Hz";
                    break;
                case 4:
                    txtWheelTune.Text = "250Hz";
                    break;
                case 5:
                    txtWheelTune.Text = "500Hz";
                    break;
                case 6:
                    txtWheelTune.Text = "1kHz";
                    break;
                case 7:
                    txtWheelTune.Text = "5kHz";
                    break;
                case 8:
                    txtWheelTune.Text = "9kHz";
                    break;
                case 9:
                    txtWheelTune.Text = "10kHz";
                    break;
                case 10:
                    txtWheelTune.Text = "100kHz";
                    break;
                case 11:
                    txtWheelTune.Text = "250KHz";
                    break;
                case 12:
                    txtWheelTune.Text = "500kHz";
                    break;
                case 13:
                    txtWheelTune.Text = "1MHz";
                    break;
                case 14:
                    txtWheelTune.Text = "10MHz";
                    break;
            }

            if (EthCATIsActive)
                CAT_client_socket.ClientServerSync("ZZST;");     // sync with server
        }

        private void ChangeWheelTuneRightSubRX()     // yt7pwr
        {
            // change mouse wheel tuning step one digit to the right
            int length = wheel_tune_list.Length;
            wheel_tune_index_subRX = (wheel_tune_index_subRX - 1 + length) % length;
            switch (wheel_tune_index_subRX)
            {
                case 0:
                    txtWheelTuneSubRX.Text = "1Hz";
                    break;
                case 1:
                    txtWheelTuneSubRX.Text = "10Hz";
                    break;
                case 2:
                    txtWheelTuneSubRX.Text = "50Hz";
                    break;
                case 3:
                    txtWheelTuneSubRX.Text = "100Hz";
                    break;
                case 4:
                    txtWheelTuneSubRX.Text = "250Hz";
                    break;
                case 5:
                    txtWheelTuneSubRX.Text = "500Hz";
                    break;
                case 6:
                    txtWheelTuneSubRX.Text = "1kHz";
                    break;
                case 7:
                    txtWheelTuneSubRX.Text = "5kHz";
                    break;
                case 8:
                    txtWheelTuneSubRX.Text = "9kHz";
                    break;
                case 9:
                    txtWheelTuneSubRX.Text = "10kHz";
                    break;
                case 10:
                    txtWheelTuneSubRX.Text = "100kHz";
                    break;
                case 11:
                    txtWheelTuneSubRX.Text = "250KHz";
                    break;
                case 12:
                    txtWheelTuneSubRX.Text = "500kHz";
                    break;
                case 13:
                    txtWheelTuneSubRX.Text = "1MHz";
                    break;
                case 14:
                    txtWheelTuneSubRX.Text = "10MHz";
                    break;
            }

            if (EthCATIsActive)
                CAT_client_socket.ClientServerSync("ZZSV;");     // sync with server
        }

        private void ChangeWheelTuneRight()
        {
            // change mouse wheel tuning step one digit to the right
            int length = wheel_tune_list.Length;
            wheel_tune_index = (wheel_tune_index - 1 + length) % length;
            switch (wheel_tune_index)
            {
                case 0:
                    txtWheelTune.Text = "1Hz";
                    break;
                case 1:
                    txtWheelTune.Text = "10Hz";
                    break;
                case 2:
                    txtWheelTune.Text = "50Hz";
                    break;
                case 3:
                    txtWheelTune.Text = "100Hz";
                    break;
                case 4:
                    txtWheelTune.Text = "250Hz";
                    break;
                case 5:
                    txtWheelTune.Text = "500Hz";
                    break;
                case 6:
                    txtWheelTune.Text = "1kHz";
                    break;
                case 7:
                    txtWheelTune.Text = "5kHz";
                    break;
                case 8:
                    txtWheelTune.Text = "9kHz";
                    break;
                case 9:
                    txtWheelTune.Text = "10kHz";
                    break;
                case 10:
                    txtWheelTune.Text = "100kHz";
                    break;
                case 11:
                    txtWheelTune.Text = "250KHz";
                    break;
                case 12:
                    txtWheelTune.Text = "500kHz";
                    break;
                case 13:
                    txtWheelTune.Text = "1MHz";
                    break;
                case 14:
                    txtWheelTune.Text = "10MHz";
                    break;
            }

            if (EthCATIsActive)
                CAT_client_socket.ClientServerSync("ZZST;");     // sync with server
        }

        private bool IsXTRV(double freq)            // yt7pwr
        {
            bool result = false;

            switch(current_model)
            {
                case Model.GENESIS_G6:
                    switch (current_band)
                    {
                        //case Band.BX1:
                        case Band.BX2:
                        case Band.BX3:
                        case Band.BX4:
                        case Band.BX5:
                        case Band.BX6:
                        case Band.BX7:
                        case Band.BX8:
                        case Band.BX9:
                        case Band.BX10:
                        case Band.BX11:
                        case Band.BX12:
                            result = true;
                            break;

                        default:
                            result = false;
                            break;
                    }
                    break;

                default:
                    {
                        switch (current_band)
                        {
                            case Band.B2M:
                            case Band.BX1:
                            case Band.BX2:
                            case Band.BX3:
                            case Band.BX4:
                            case Band.BX5:
                            case Band.BX6:
                            case Band.BX7:
                            case Band.BX8:
                            case Band.BX9:
                            case Band.BX10:
                            case Band.BX11:
                            case Band.BX12:
                                result = true;
                                break;

                            default:
                                result = false;
                                break;
                        }
                        break;
                    }
            }

            return result;
        }

        public Band BandByFreq(double freq)     // changes yt7pwr
        {
            Band b = Band.GEN;

            if (freq >= 144.0 && freq <= 148.0)
            {
                b = Band.B2M;
            }
            else if (freq >= xBand[1].freq_min && freq <= xBand[1].freq_max)
            {
                b = Band.BX1;
            }
            else if (freq >= xBand[2].freq_min && freq <= xBand[2].freq_max)
            {
                b = Band.BX2;
            }
            else if (freq >= xBand[3].freq_min && freq <= xBand[3].freq_max)
            {
                b = Band.BX3;
            }
            else if (freq >= xBand[4].freq_min && freq <= xBand[4].freq_max)
            {
                b = Band.BX4;
            }
            else if (freq >= xBand[5].freq_min && freq <= xBand[5].freq_max)
            {
                b = Band.BX5;
            }
            else if (freq >= xBand[6].freq_min && freq <= xBand[6].freq_max)
            {
                b = Band.BX6;
            }
            else if (freq >= xBand[7].freq_min && freq <= xBand[7].freq_max)
            {
                b = Band.BX7;
            }
            else if (freq >= xBand[8].freq_min && freq <= xBand[8].freq_max)
            {
                b = Band.BX8;
            }
            else if (freq >= xBand[9].freq_min && freq <= xBand[9].freq_max)
            {
                b = Band.BX9;
            }
            else if (freq >= xBand[10].freq_min && freq <= xBand[10].freq_max)
            {
                b = Band.BX10;
            }
            else if (freq >= xBand[11].freq_min && freq <= xBand[11].freq_max)
            {
                b = Band.BX11;
            }
            else if (freq >= xBand[12].freq_min && freq <= xBand[12].freq_max)
            {
                b = Band.BX12;
            }
            else 
            {
                DB.GetBandLimits(freq, out b);
            }
            /*else
            {
                b = Band.GEN;
            }*/

            return b;
        }

        private Band BandFilterByFreq(double freq)     // yt7pwr
        {
            try
            {
                Band f = Band.GEN;

                if (IsXTRV(freq))
                {
                    if (freq >= xBand[1].freq_min && freq <= xBand[1].freq_max)
                    {
                        freq -= xBand[1].losc;
                    }
                    else if (freq >= xBand[2].freq_min && freq <= xBand[2].freq_max)
                    {
                        freq -= xBand[2].losc;
                    }
                    else if (freq >= xBand[3].freq_min && freq <= xBand[3].freq_max)
                    {
                        freq -= xBand[3].losc;
                    }
                    else if (freq >= xBand[4].freq_min && freq <= xBand[4].freq_max)
                    {
                        freq -= xBand[4].losc;
                    }
                    else if (freq >= xBand[5].freq_min && freq <= xBand[5].freq_max)
                    {
                        freq -= xBand[5].losc;
                    }
                    else if (freq >= xBand[6].freq_min && freq <= xBand[6].freq_max)
                    {
                        freq -= xBand[6].losc;
                    }
                    else if (freq >= xBand[7].freq_min && freq <= xBand[7].freq_max)
                    {
                        freq -= xBand[7].losc;
                    }
                    else if (freq >= xBand[8].freq_min && freq <= xBand[8].freq_max)
                    {
                        freq -= xBand[8].losc;
                    }
                    else if (freq >= xBand[9].freq_min && freq <= xBand[9].freq_max)
                    {
                        freq -= xBand[9].losc;
                    }
                    else if (freq >= xBand[10].freq_min && freq <= xBand[10].freq_max)
                    {
                        freq -= xBand[10].losc;
                    }
                    else if (freq >= xBand[11].freq_min && freq <= xBand[11].freq_max)
                    {
                        freq -= xBand[11].losc;
                    }
                    else if (freq >= xBand[12].freq_min && freq <= xBand[12].freq_max)
                    {
                        freq -= xBand[12].losc;
                    }
                    else if (freq >= 144.0 && freq <= 146.0)
                    {
                        if (current_model == Model.GENESIS_G11)
                            freq -= g11_Xtrv_losc_freq / 1e6;
                        else if (current_model == Model.GENESIS_G59NET || current_model == Model.GENESIS_G59USB)
                            freq -= g59_2m_Xtrv_losc_freq / 1e6;
                    }
                }

                DB.GetBandFilters(current_model, freq, out f);

                return f;
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
                return Band.GEN;
            }
        }

        private void SetCurrentBand(Band b)
        {
            if (band_locked)
                return;

            CurrentBand = b;

            if (tuned_band != b &&
                tuned_band != Band.FIRST)
            {
                tuned_band = Band.FIRST;
                chkTUN.BackColor = SystemColors.Control;
            }
        }

        private float GainByBand(double freq)
        {
            float retval = 0.0f;

            Band b = BandByFreq(freq); // Band.GEN;

            /*if(current_model == Model.GENESIS_G6)
                DB.GetBandLimits(freq, out b);
            else
                DB.GetBandFilters(current_model, freq, out b);*/

            switch (b)
            {
                case Band.B160M:
                    retval = SetupForm.PAGain160;
                    break;
                case Band.B80M:
                    retval = SetupForm.PAGain80;
                    break;
                case Band.B60M:
                    retval = SetupForm.PAGain60;
                    break;
                case Band.B40M:
                    retval = SetupForm.PAGain40;
                    break;
                case Band.B30M:
                    retval = SetupForm.PAGain30;
                    break;
                case Band.B20M:
                    retval = SetupForm.PAGain20;
                    break;
                case Band.B17M:
                    retval = SetupForm.PAGain17;
                    break;
                case Band.B15M:
                    retval = SetupForm.PAGain15;
                    break;
                case Band.B12M:
                    retval = SetupForm.PAGain12;
                    break;
                case Band.B10M:
                    retval = SetupForm.PAGain10;
                    break;
                case Band.B6M:
                    retval = SetupForm.PAGain6;
                    break;
                case Band.B2M:
                    retval = SetupForm.PAGain2;
                    break;
                case Band.BX1:
                    retval = (float)xBand[1].pa_gain;
                    break;
                case Band.BX2:
                    retval = (float)xBand[2].pa_gain;
                    break;
                case Band.BX3:
                    retval = (float)xBand[3].pa_gain;
                    break;
                case Band.BX4:
                    retval = (float)xBand[4].pa_gain;
                    break;
                case Band.BX5:
                    retval = (float)xBand[5].pa_gain;
                    break;
                case Band.BX6:
                    retval = (float)xBand[6].pa_gain;
                    break;
                case Band.BX7:
                    retval = (float)xBand[7].pa_gain;
                    break;
                case Band.BX8:
                    retval = (float)xBand[8].pa_gain;
                    break;
                case Band.BX9:
                    retval = (float)xBand[9].pa_gain;
                    break;
                case Band.BX10:
                    retval = (float)xBand[10].pa_gain;
                    break;
                case Band.BX11:
                    retval = (float)xBand[11].pa_gain;
                    break;
                case Band.BX12:
                    retval = (float)xBand[12].pa_gain;
                    break;
                default:
                    retval = 48.0f;
                    break;
            }

            return retval;
        }

        public void CheckTxtButtonColor()
        {
            // used when changing the background color of selected buttons
            foreach (Control c in this.Controls)
            {
                c.ForeColor = SkinsButtonTxtColor;

                if (c.GetType() == typeof(GroupBoxTS))
                {
                    foreach (Control c2 in ((GroupBoxTS)c).Controls)
                    {
                        if (c2.GetType() == typeof(GroupBoxTS))
                        {
                            c2.ForeColor = skins_button_txt_color;

                            foreach (Control c3 in ((GroupBoxTS)c2).Controls)
                            {
                                if (c3.GetType() == typeof(GroupBoxTS))
                                {
                                    GroupBoxTS r = (GroupBoxTS)c3;
                                    r.ForeColor = skins_button_txt_color;
                                }
                                else if (c3.GetType() == typeof(ButtonTS))
                                {
                                    ButtonTS r = (ButtonTS)c3;
                                    r.ForeColor = skins_button_txt_color;
                                }
                                else if (c3.GetType() == typeof(CheckBoxTS))
                                {
                                    CheckBoxTS r = (CheckBoxTS)c3;
                                    r.ForeColor = skins_button_txt_color;
                                }
                                else if (c3.GetType() == typeof(LabelTS))
                                {
                                    LabelTS r = (LabelTS)c3;
                                    r.ForeColor = skins_button_txt_color;
                                }
                            }
                        }
                        else if (c2.GetType() == typeof(RadioButtonTS))
                        {
                            RadioButtonTS r = (RadioButtonTS)c2;
                            r.ForeColor = skins_button_txt_color;
                        }
                        else if (c2.GetType() == typeof(CheckBoxTS))
                        {
                            CheckBoxTS chk = (CheckBoxTS)c2;
                            chk.ForeColor = skins_button_txt_color;
                        }
                        else if (c2.GetType() == typeof(ButtonTS))
                        {
                            ButtonTS b = (ButtonTS)c2;
                            b.ForeColor = skins_button_txt_color;
                        }
                        else if (c2.GetType() == typeof(LabelTS))
                        {
                            LabelTS b = (LabelTS)c2;
                            if (c2.Name != "lblVFOA" && c2.Name != "lblVFOATX" && c2.Name != "lblRX2" &&
                                c2.Name != "lblAFNewVFO" && c2.Name != "lblRFNewVFO" && c2.Name != "lblATTNewVFO" &&
                                c2.Name != "lblVFOB" && c2.Name != "lblVFOBTX" &&
                                c2.Name != "lblLOSC" && c2.Name != "lblZoom" &&
                                c2.Name != "lblPan")
                                b.ForeColor = skins_button_txt_color;
                        }
                    }
                }
                else if (c.GetType() == typeof(RadioButtonTS))
                {
                    RadioButtonTS r = (RadioButtonTS)c;
                    r.ForeColor = skins_button_txt_color;
                }
                else if (c.GetType() == typeof(CheckBoxTS))
                {
                    CheckBoxTS chk = (CheckBoxTS)c;
                    chk.ForeColor = skins_button_txt_color;
                }
                /*                else if (c.GetType() == typeof(NumericUpDownTS))
                                {
                                    NumericUpDownTS ud = (NumericUpDownTS)c;
                                    ud.ForeColor = skins_button_txt_color;
                                }*/
                else if (c.GetType() == typeof(ButtonTS))
                {
                    ButtonTS b = (ButtonTS)c;
                    b.ForeColor = skins_button_txt_color;
                }
                else if (c.GetType() == typeof(LabelTS))
                {
                    LabelTS b = (LabelTS)c;
                    b.ForeColor = skins_button_txt_color;
                }
            }

            menuStrip1.ForeColor = skins_button_txt_color;
        }

        public void CheckSelectedButtonColor()
        {
            // used when changing the background color of selected buttons
            foreach (Control c in this.Controls)
            {
                if (c.GetType() == typeof(GroupBoxTS))
                {
                    foreach (Control c2 in ((GroupBoxTS)c).Controls)
                    {
                        if (c2.GetType() == typeof(RadioButtonTS))
                        {
                            RadioButtonTS r = (RadioButtonTS)c2;
                            if (r.Checked && r.BackColor != SystemColors.Control)
                            {
                                c2.BackColor = button_selected_color;
                            }
                        }
                        else if (c2.GetType() == typeof(CheckBoxTS))
                        {
                            CheckBoxTS chk = (CheckBoxTS)c2;
                            if (chk.Checked && chk.BackColor != SystemColors.Control)
                            {
                                c2.BackColor = button_selected_color;
                            }
                        }
                        else if (c2.GetType() == typeof(NumericUpDownTS))
                        {
                            NumericUpDownTS ud = (NumericUpDownTS)c2;
                            if (ud.BackColor != SystemColors.Window)
                            {
                                c2.BackColor = button_selected_color;
                            }
                        }
                        else if (c2.GetType() == typeof(ButtonTS))
                        {
                            ButtonTS b = (ButtonTS)c2;
                            if (b.BackColor != SystemColors.Control)
                            {
                                c2.BackColor = button_selected_color;
                            }
                        }
                    }
                }
                else if (c.GetType() == typeof(RadioButtonTS))
                {
                    RadioButtonTS r = (RadioButtonTS)c;
                    if (r.Checked && r.BackColor != SystemColors.Control)
                        c.BackColor = button_selected_color;
                }
                else if (c.GetType() == typeof(CheckBoxTS))
                {
                    CheckBoxTS chk = (CheckBoxTS)c;
                    if (chk.Checked && chk.BackColor != SystemColors.Control)
                        c.BackColor = button_selected_color;
                }
                else if (c.GetType() == typeof(NumericUpDownTS))
                {
                    NumericUpDownTS ud = (NumericUpDownTS)c;
                    if (ud.BackColor != SystemColors.Window)
                        c.BackColor = button_selected_color;
                }
                else if (c.GetType() == typeof(ButtonTS))
                {
                    ButtonTS b = (ButtonTS)c;
                    if (b.BackColor != SystemColors.Control)
                        c.BackColor = button_selected_color;
                }
            }
        }

        private double PABandOffset(Band b)
        {
            double num = 0;
            switch (b)
            {
                case Band.B2190M:
                    num = SetupForm.PAADC2190;
                    break;
                case Band.B600M:
                    num = SetupForm.PAADC600;
                    break;
                case Band.B160M:
                    num = SetupForm.PAADC160;
                    break;
                case Band.B80M:
                    num = SetupForm.PAADC80;
                    break;
                case Band.B60M:
                    num = SetupForm.PAADC60;
                    break;
                case Band.B40M:
                    num = SetupForm.PAADC40;
                    break;
                case Band.B30M:
                    num = SetupForm.PAADC30;
                    break;
                case Band.B20M:
                    num = SetupForm.PAADC20;
                    break;
                case Band.B17M:
                    num = SetupForm.PAADC17;
                    break;
                case Band.B15M:
                    num = SetupForm.PAADC15;
                    break;
                case Band.B12M:
                    num = SetupForm.PAADC12;
                    break;
                case Band.B10M:
                    num = SetupForm.PAADC10;
                    break;
                case Band.B6M:
                    num = SetupForm.PAADC6;
                    break;
                case Band.B2M:
                    num = SetupForm.PAADC2;
                    break;
            }

            if (num == 0) return 0;
            //return 100000 / Math.Pow(num, 2);
            return (double)108 / num;
        }

        private double SWR(int adc_fwd, int adc_rev)
        {
            adc_rev = Math.Max(adc_rev, 1);
            adc_fwd = Math.Max(adc_fwd, adc_rev);

            if (adc_rev == adc_fwd)
                return 1.0;

            if (adc_fwd == 0 && adc_rev == 0)
                return 1.0;
            else if (adc_rev > adc_fwd)
            {
                HighSWR = true;
                return 50.0;
            }

            //double swr = (adc_fwd + adc_rev) / (adc_fwd - adc_rev);

            double Ef = ScaledVoltage(adc_fwd);
            double Er = ScaledVoltage(adc_rev);

            double swr = (Ef + Er) / (Ef - Er);

            if (swr > 3.0)
                HighSWR = true;
            else
                HighSWR = false;

            return Math.Min(50.0, swr);
        }

        private double ScaledVoltage(int adc)
        {
            double v_det = adc * 0.062963;			// scale factor in V/bit including pot ratio
            double v_out = v_det * 10.39853;		// scale factor in V/V for bridge output to detector voltage
            return v_out * PABandOffset(CurrentBand);
        }

        private double ADCtodBm(int adc_data)
        {
            if (adc_data == 0)
                return 0;

            double mult = 100000 / Math.Pow(225 / PABandOffset(CurrentBand), 2);
            return 10 * Math.Log10(mult * Math.Pow(adc_data, 2));
        }

        public float PAPower(int adc)  // changes yt7pwr
        {
            double v_out = ScaledVoltage(adc);
            double pow = Math.Pow(v_out, 2) / 50;
            pow = Math.Max(pow, 0.0);
            return (float)pow / 1000;
        }

        private double WattsTodBm(double watts)
        {
            return 10 * Math.Log10(watts / 0.001);
        }

        private double dBmToWatts(double dBm)
        {
            return Math.Pow(10, dBm / 10) * 0.001;
        }

        private static bool CheckForOpenProcesses()
        {
            // find all open PowerSDR processes
            Process[] p = Process.GetProcessesByName("Genesis");
            if (p.Length > 1)
            {
                DialogResult dr = MessageBox.Show("There are other Genesis instances running.\n" +
                    "Are you sure you want to continue?",
                    "Continue?",
                    MessageBoxButtons.YesNo,
                    MessageBoxIcon.Question);
                if (dr == DialogResult.No)
                {
                    return false;
                }
            }
            return true;
        }

        public int VersionTextToInt(string version)	// takes a version string like "1.0.6" 
        {											// and converts it to an int like 010006.
            string[] nums = version.Split('.');
            if (nums.Length < 3 || nums.Length > 4) return -1;

            int num1 = Int32.Parse(nums[0]);
            int num2 = Int32.Parse(nums[1]);
            int num3 = Int32.Parse(nums[2]);
            int num4 = 0;
            if (nums.Length == 4) num4 = Int32.Parse(nums[3]);

            return num1 * 1000000 + num2 * 10000 + num3 * 100 + num4;
        }

        public bool IsHamBand(BandPlan b, double f)
        {
            string txt = "";

            if (extended || current_xvtr_index > -1)
                return true;
            else if (current_model == Model.GENESIS_G11 && g11_multiband)
            {
                if (!SplitAB_TX && (current_band_filter == Band.GEN || current_band_filter == Band.WWV))
                    return false;
            }

            if (DB.GetBandText((int)b, f, out txt))
                return true;
            else
                return false;
        }

        public void SelectVarFilterSubRX()
        {
            if (current_filter_subRX == Filter.VAR1) return;
            if (current_filter_subRX == Filter.VAR2) return;

            // save current filter bounds, reset to var, set filter bounds 
            int high = (int)udSubRXFilterHigh.Value;
            int low = (int)udSubRXFilterLow.Value;
            radSubRXFilterVar1.Checked = true;
            //SetFilter(Filter.VAR1); 
            UpdateFiltersSubRX(low, high);
        }

        public void SelectVarFilter()
        {
            if (current_filter == Filter.VAR1) return;
            if (current_filter == Filter.VAR2) return;

            // save current filter bounds, reset to var, set filter bounds 
            int high = (int)udFilterHigh.Value;
            int low = (int)udFilterLow.Value;
            radFilterVar1.Checked = true;
            //SetFilter(Filter.VAR1); 
            UpdateFilters(low, high);
        }

        // Added 06/24/05 BT for CAT commands
        public void CATMemoryQS()
        {
            btnMemoryQuickSave_Click(this.btnMemoryQuickSave, EventArgs.Empty);
        }

        // Added 06/25/05 BT for CAT commands
        public void CATMemoryQR()
        {
            btnMemoryQuickRestore_Click(this.btnMemoryQuickRecall, EventArgs.Empty);
        }

        // BT 06/30/05 Added for CAT commands
        public int CATBandGroup
        {
            get
            {
                if (grpBandHF.Visible)
                    return 0;
                else
                    return 1;
            }
            set
            {
                if (value==0)
                {
                    radBandHF_Click(this, EventArgs.Empty);
                }
                else
                {
                    radMoreBands_Click(this, EventArgs.Empty);
                }
            }
        }

        //BT 06/17/05 added for CAT commands
        public void SetCATBand(Band pBand)
        {
            Band b = pBand;
            switch (b)
            {
                case Band.B160M:
                    btnBand160_CheckedChanged(this.radBand160, EventArgs.Empty);
                    break;
                case Band.B80M:
                    btnBand80_CheckedChanged(this.radBand80, EventArgs.Empty);
                    break;
                case Band.B60M:
                    btnBand60_CheckedChanged(this.radBand60, EventArgs.Empty);
                    break;
                case Band.B40M:
                    btnBand40_CheckedChanged(this.radBand40, EventArgs.Empty);
                    break;
                case Band.B30M:
                    btnBand30_CheckedChanged(this.radBand30, EventArgs.Empty);
                    break;
                case Band.B20M:
                    btnBand20_CheckedChanged(this.radBand20, EventArgs.Empty);
                    break;
                case Band.B17M:
                    btnBand17_CheckedChanged(this.radBand17, EventArgs.Empty);
                    break;
                case Band.B15M:
                    btnBand15_CheckedChanged(this.radBand15, EventArgs.Empty);
                    break;
                case Band.B12M:
                    btnBand12_CheckedChanged(this.radBand12, EventArgs.Empty);
                    break;
                case Band.B10M:
                    btnBand10_CheckedChanged(this.radBand10, EventArgs.Empty);
                    break;
                case Band.B6M:
                    btnBand6_CheckedChanged(this.radBand6, EventArgs.Empty);
                    break;
                case Band.B2M:
                    btnBand2_CheckedChanged(this.radBand2, EventArgs.Empty);
                    break;
                case Band.GEN:
                    btnBandGEN_CheckedChanged(this.radBandGEN, EventArgs.Empty);
                    break;
                case Band.WWV:
                    btnBandWWV_CheckedChanged(this.radBandWWV, EventArgs.Empty);
                    break;
                default:
                    btnBandGEN_CheckedChanged(this.radBandGEN, EventArgs.Empty);
                    break;
            }
        }

        public void SetVHFText(int index, string text)
        {
        }

        public void SetVHFEnabled(int index, bool b)
        {
        }

        private void UpdateBandStackRegisters()
        {
            int[] band_stacks = DB.GetBandStackNum(xBand[1].name, xBand[2].name, xBand[3].name,
            xBand[4].name, xBand[5].name, xBand[6].name, xBand[7].name, xBand[8].name, xBand[9].name, xBand[10].name,
            xBand[11].name, xBand[12].name);
            band_160m_register = band_stacks[0];
            band_80m_register = band_stacks[1];
            band_60m_register = band_stacks[2];
            band_40m_register = band_stacks[3];
            band_30m_register = band_stacks[4];
            band_20m_register = band_stacks[5];
            band_17m_register = band_stacks[6];
            band_15m_register = band_stacks[7];
            band_12m_register = band_stacks[8];
            band_10m_register = band_stacks[9];
            band_6m_register = band_stacks[10];
            band_2m_register = band_stacks[11];
            band_wwv_register = band_stacks[12];
            band_gen_register = band_stacks[13];
            band_X1_register = band_stacks[14];
            band_X2_register = band_stacks[15];
            band_X3_register = band_stacks[16];
            band_X4_register = band_stacks[17];
            band_X5_register = band_stacks[18];
            band_X6_register = band_stacks[19];
            band_X7_register = band_stacks[20];
            band_X8_register = band_stacks[21];
            band_X9_register = band_stacks[22];
            band_X10_register = band_stacks[23];
            band_X11_register = band_stacks[24];
            band_X12_register = band_stacks[25];
            band_2190m_register = band_stacks[26];
            band_600m_register = band_stacks[27];
        }

        public void UpdateFilters(int low, int high)
        {
            // System.Console.WriteLine("updf lo: " + low + " hi: " + high); 
            // qualify settings
            //if(low > high) return;
            switch (current_dsp_mode)
            {
                case DSPMode.LSB:
                case DSPMode.DIGL:
                case DSPMode.CWL:
                    if (low > high - 10) low = high - 10;
                    break;
                case DSPMode.USB:
                case DSPMode.DIGU:
                case DSPMode.CWU:
                    if (high < low + 10) high = low + 10;
                    break;
                case DSPMode.AM:
                case DSPMode.SAM:
                case DSPMode.FMN:
                case DSPMode.DSB:
                    if (high < low + 20)
                    {
                        if (Math.Abs(high) < Math.Abs(low))
                            high = low + 20;
                        else
                            low = high - 20;
                    }
                    break;
            }

            if (low < -125000)
                low = -125000;
            if (high > 125000)
                high = 125000;

            // send the settings to the DSP
            if (low < high - 10)
                DttSP.SetRXFilters(low, high);

            // update var filter controls
            udFilterLow.Value = low;
            udFilterHigh.Value = high;

            // update Filter Shift
            tbFilterShift_Update(low, high);

            // update Filter Width
            tbFilterWidth_Update(low, high);

            // set XIT step rate
            if ((high - low) > 250)
            {
                udXIT.Increment = 10;
                udRIT.Increment = 10;
            }
            else
            {
                udXIT.Increment = 5;
                udRIT.Increment = 5;
            }

            /*if (filterForm != null && !filterForm.IsDisposed)
            {
                if (filterForm.CurrentDSPMode == current_dsp_mode)
                    filterForm.CurrentFilter = current_filter;
            }*/

            if (high > low + 10)
            {
                DttSP.RXFilterLowCut = low;
                DttSP.RXFilterHighCut = high;
            }

            if (EthCATIsActive)
                CAT_client_socket.ClientServerSync("ZZFI;");        // sync with server
        }

        public void UpdateFilterPresetNames(Filter f, bool subRX)
        {
            if (subRX)
            {
                switch (f)
                {
                    case Filter.F1:
                        radFilter1.Text = filter_presets[(int)current_dsp_mode].GetName(Filter.F1);
                        break;
                    case Filter.F2:
                        radFilter2.Text = filter_presets[(int)current_dsp_mode].GetName(Filter.F2);
                        break;
                    case Filter.F3:
                        radFilter3.Text = filter_presets[(int)current_dsp_mode].GetName(Filter.F3);
                        break;
                    case Filter.F4:
                        radFilter4.Text = filter_presets[(int)current_dsp_mode].GetName(Filter.F4);
                        break;
                    case Filter.F5:
                        radFilter5.Text = filter_presets[(int)current_dsp_mode].GetName(Filter.F5);
                        break;
                    case Filter.F6:
                        radFilter6.Text = filter_presets[(int)current_dsp_mode].GetName(Filter.F6);
                        break;
                    case Filter.F7:
                        radFilter7.Text = filter_presets[(int)current_dsp_mode].GetName(Filter.F7);
                        break;
                    case Filter.F8:
                        radFilter8.Text = filter_presets[(int)current_dsp_mode].GetName(Filter.F8);
                        break;
                    case Filter.F9:
                        radFilter9.Text = filter_presets[(int)current_dsp_mode].GetName(Filter.F9);
                        break;
                    case Filter.F10:
                        radFilter10.Text = filter_presets[(int)current_dsp_mode].GetName(Filter.F10);
                        break;
                    case Filter.VAR1:
                        radFilterVar1.Text = filter_presets[(int)current_dsp_mode].GetName(Filter.VAR1);
                        break;
                    case Filter.VAR2:
                        radFilterVar2.Text = filter_presets[(int)current_dsp_mode].GetName(Filter.VAR2);
                        break;
                }

                if (f == current_filter_subRX)
                    grpSubRXFilter.Text = "VFO B Filter - " + filter_presets_subRX[(int)current_dsp_mode_subRX].GetName(f);
            }
            else
            {
                switch (f)
                {
                    case Filter.F1:
                        radFilter1.Text = filter_presets[(int)current_dsp_mode].GetName(Filter.F1);
                        break;
                    case Filter.F2:
                        radFilter2.Text = filter_presets[(int)current_dsp_mode].GetName(Filter.F2);
                        break;
                    case Filter.F3:
                        radFilter3.Text = filter_presets[(int)current_dsp_mode].GetName(Filter.F3);
                        break;
                    case Filter.F4:
                        radFilter4.Text = filter_presets[(int)current_dsp_mode].GetName(Filter.F4);
                        break;
                    case Filter.F5:
                        radFilter5.Text = filter_presets[(int)current_dsp_mode].GetName(Filter.F5);
                        break;
                    case Filter.F6:
                        radFilter6.Text = filter_presets[(int)current_dsp_mode].GetName(Filter.F6);
                        break;
                    case Filter.F7:
                        radFilter7.Text = filter_presets[(int)current_dsp_mode].GetName(Filter.F7);
                        break;
                    case Filter.F8:
                        radFilter8.Text = filter_presets[(int)current_dsp_mode].GetName(Filter.F8);
                        break;
                    case Filter.F9:
                        radFilter9.Text = filter_presets[(int)current_dsp_mode].GetName(Filter.F9);
                        break;
                    case Filter.F10:
                        radFilter10.Text = filter_presets[(int)current_dsp_mode].GetName(Filter.F10);
                        break;
                    case Filter.VAR1:
                        radFilterVar1.Text = filter_presets[(int)current_dsp_mode].GetName(Filter.VAR1);
                        break;
                    case Filter.VAR2:
                        radFilterVar2.Text = filter_presets[(int)current_dsp_mode].GetName(Filter.VAR2);
                        break;
                }

                if (f == current_filter)
                    grpMainRXFilter.Text = "VFO A Filter - " + filter_presets[(int)current_dsp_mode].GetName(f);
            }
        }

        public void UpdateLOSCFreq(string freq)  // yt7pwr
        {	// only do this routine if there are six digits after the decimal point.
            txtLOSCFreq.Text = freq;
            txtLOSCMSD.Text = freq;

            txtLOSCnew.Text = freq;

            string temp = freq;
            int index = temp.IndexOf(separator) + 4;
            txtLOSCLSD.Text = temp.Remove(0, index);
        }

        public void UpdateVFOAFreq(double freq)
        {
            string temp = "";
            int index = 0;
            freq = Math.Round(freq, 6);

            // only do this routine if there are six digits after the decimal point.
            txtVFOAFreq.Text = freq.ToString("f6");
            txtVFOAMSD.Text = freq.ToString("f6");
            txtVFOAnew.Text = freq.ToString("f6");
            temp = freq.ToString("f6");
            index = temp.IndexOf(separator) + 4;
            txtVFOALSD.Text = temp.Remove(0, index);
        }

        public void UpdateVFOBFreq(double freq)
        {
            string temp = "";
            int index = 0;

            // only do this routine if there are six digits after the decimal point.
            txtVFOBFreq.Text = freq.ToString("f6");
            txtVFOBMSD.Text = freq.ToString("f6");
            txtVFOBnew.Text = freq.ToString("f6");
            temp = freq.ToString("f6");
            index = temp.IndexOf(separator) + 4;
            txtVFOBLSD.Text = temp.Remove(0, index);
        }

        public void CalcDisplayFreq()                           // changes yt7pwr
        {
            double zoom_factor = 0.0;
            double pan_factor = 0.0;
            double vfo = 0.0;
            int abs_low = (int)(-sample_rate1 / 2);
            int abs_high = -abs_low;
            double correction = 0.0;
            int low = 0, high = 0, low_tmp = 0, high_tmp = 0;

            if (current_display_mode == DisplayMode.SPECTRUM)
            {
                UpdateRXDisplayVars((int)udFilterLow.Value, (int)udFilterHigh.Value);
            }
            else
            {
                if (MOX)
                {
                    zoom_factor = ptbDisplayZoom.Value / 4;
                    pan_factor = ptbDisplayPan.Value;
                    //vfo = LOSCFreq * 1e6 - DttSP.TXFilterHighCut / 2;
                    correction = 2 * (pan_factor * abs_high) / ptbDisplayPan.Maximum;
                    low = (int)(abs_low / zoom_factor);
                    high -= low;
                }

                switch (current_click_tune_mode)
                {
                    case ClickTuneMode.VFOA:
                    case ClickTuneMode.Off:
                        {
                            if (!MOX)
                            {
                                zoom_factor = ptbDisplayZoom.Value / 4;
                                pan_factor = ptbDisplayPan.Value;
                                vfo = -((LOSCFreq - VFOAFreq) * 1e6);
                                correction = 2 * (pan_factor * abs_high) / ptbDisplayPan.Maximum;
                                low = (int)(-sample_rate1 / (zoom_factor * 2));
                                high = (int)(sample_rate1 / (zoom_factor * 2));

                                if (ptbDisplayZoom.Value == 4)
                                {
                                    ptbDisplayPan.Value = 0;
                                    low = (int)(-sample_rate1 / 2);
                                    high = -low;
                                }
                                else
                                {
                                    if (LOSCFreq < VFOAFreq)
                                    {
                                        switch (CurrentDSPMode)
                                        {
                                            case (DSPMode.LSB):
                                            case (DSPMode.DIGL):
                                                vfo += DttSP.RXFilterLowCut / 2;
                                                break;
                                            case (DSPMode.USB):
                                            case (DSPMode.DIGU):
                                                vfo += DttSP.RXFilterHighCut / 2;
                                                break;
                                        }

                                        high_tmp = ((int)vfo + high + (int)correction);

                                        if (high_tmp > abs_high)
                                        {
                                            high = abs_high;
                                            low = (abs_high + low * 2);
                                        }
                                        else
                                        {
                                            low = (high_tmp + low * 2);
                                            if (low < abs_low)
                                            {
                                                low = abs_low;
                                                high = low + high * 2;
                                            }
                                            else
                                                high = high_tmp;
                                        }
                                    }
                                    else
                                    {
                                        if (LOSCFreq > VFOAFreq)
                                        {
                                            switch (CurrentDSPMode)
                                            {
                                                case (DSPMode.LSB):
                                                case (DSPMode.DIGL):
                                                    vfo += DttSP.RXFilterLowCut / 2;
                                                    break;
                                                case (DSPMode.USB):
                                                case (DSPMode.DIGU):
                                                    vfo += DttSP.RXFilterHighCut / 2;
                                                    break;
                                            }

                                            low_tmp = ((int)vfo + low + (int)correction);
                                            if (low_tmp < abs_low)
                                            {
                                                low = abs_low;
                                                high = abs_low + high * 2;
                                            }
                                            else
                                            {
                                                high = (low_tmp + high * 2);
                                                if (high > abs_high)
                                                {
                                                    high = abs_high;
                                                    low = abs_high + low * 2;
                                                }
                                                else
                                                    low = low_tmp;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        break;

                    case ClickTuneMode.VFOB:
                        {
                            if (!MOX)
                            {
                                zoom_factor = ptbDisplayZoom.Value / 4;
                                pan_factor = ptbDisplayPan.Value;
                                vfo = -((LOSCFreq - VFOBFreq) * 1e6);
                                correction = 2 * (pan_factor * abs_high) / ptbDisplayPan.Maximum;
                                low = (int)(-sample_rate1 / (zoom_factor * 2));
                                high = (int)(sample_rate1 / (zoom_factor * 2));

                                if (ptbDisplayZoom.Value == 4)
                                {
                                    ptbDisplayPan.Value = 0;
                                    low = (int)(-sample_rate1 / 2);
                                    high = -low;
                                }
                                else
                                {
                                    if (LOSCFreq < VFOBFreq)
                                    {
                                        switch (CurrentDSPMode)
                                        {
                                            case (DSPMode.LSB):
                                            case (DSPMode.DIGL):
                                                vfo += DttSP.RXFilterLowCut / 2;
                                                break;
                                            case (DSPMode.USB):
                                            case (DSPMode.DIGU):
                                                vfo += DttSP.RXFilterHighCut / 2;
                                                break;
                                        }

                                        high_tmp = ((int)vfo + high + (int)correction);
                                        if (high_tmp > abs_high)
                                        {
                                            high = abs_high;
                                            low = (abs_high + low * 2);
                                        }
                                        else
                                        {
                                            low = (high_tmp + low * 2);
                                            if (low < abs_low)
                                            {
                                                low = abs_low;
                                                high = low + high * 2;
                                            }
                                            else
                                                high = high_tmp;
                                        }
                                    }
                                    else
                                    {
                                        if (LOSCFreq > VFOBFreq)
                                        {
                                            switch (CurrentDSPMode)
                                            {
                                                case (DSPMode.LSB):
                                                case (DSPMode.DIGL):
                                                    vfo += DttSP.RXFilterLowCut / 2;
                                                    break;
                                                case (DSPMode.USB):
                                                case (DSPMode.DIGU):
                                                    vfo += DttSP.RXFilterHighCut / 2;
                                                    break;
                                            }

                                            low_tmp = ((int)vfo + low + (int)correction);
                                            if (low_tmp < abs_low)
                                            {
                                                low = abs_low;
                                                high = abs_low + high * 2;
                                            }
                                            else
                                            {
                                                high = (low_tmp + high * 2);
                                                if (high > abs_high)
                                                {
                                                    high = abs_high;
                                                    low = abs_high + low * 2;
                                                }
                                                else
                                                    low = low_tmp;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        break;
                }

                DttSP.RXDisplayLow = DttSP.TXDisplayLow = low;
                DttSP.RXDisplayHigh = DttSP.TXDisplayHigh = high;

#if DirectX

                Display_DirectX.RefreshPanadapterGrid = true;
#endif
            }
        }

        public void UpdateTXProfile()
        {
            try
            {
                if (SetupForm == null) return;

                string old = comboTXProfile.Text;
                comboTXProfile.Items.Clear();
                string[] s = SetupForm.GetTXProfileStrings();
                for (int i = 0; i < s.Length; i++)
                    comboTXProfile.Items.Add(s[i]);
                if (old != "") comboTXProfile.Text = old;
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        #endregion

        #region Test and Calibration Routines

        public bool CalibrateLevel(float level, float freq) // changes yt7pwr
        {
            // Calibration routine called by Setup Form.
            bool ret_val = false;
            int progress = 0;

            if (!PowerOn)
            {
                MessageBox.Show("Power must be on in order to calibrate.", "Power Is Off",
                    MessageBoxButtons.OK, MessageBoxIcon.Stop);
                return false;
            }

            if (chkEnableSubRX.Checked)
                chkEnableSubRX.Checked = false;

            bool rx_only = SetupForm.RXOnly;					// Save RX Only Setting
            SetupForm.RXOnly = true;

            double vfoa = VFOAFreq;								// save current VFOA
            double saved_losc = LOSCFreq;						// save current LOSC
            double losc_freq = LOSCFreq;
            string losc_freq_text = txtLOSCFreq.Text;

            string display_mode = comboDisplayMode.Text;		// save current display mode
            comboDisplayMode.Text = "Spectrum";					// set display mode to spectrum

            bool polyphase = SetupForm.Polyphase;				// save current polyphase setting
            SetupForm.Polyphase = false;						// disable polyphase

            int dsp_buf_size = SetupForm.DSPBufferSize;			// save current DSP buffer size
            SetupForm.DSPBufferSize = 2048;						// set DSP Buffer Size to 2048

            Filter filter = CurrentFilter;						// save current filter
            DSPMode dsp_mode = current_dsp_mode;				// save current DSP demod mode
            CurrentDSPMode = DSPMode.AM;						// set mode to AM
            LOSCFreq = freq - 0.010;
            losc_freq = loscFreq;
            losc_freq *= 1e6;

            if (usb_si570_enable)
                SI570.Set_SI570_osc((long)losc_freq);
            else
            {
                if (IsXTRV(freq))
                {
                    switch (current_band)
                    {
                        case Band.B2M:
                            if(current_model == Model.GENESIS_G11)
                                losc_freq -= g11_Xtrv_losc_freq;
                            else if(current_model == Model.GENESIS_G59USB || current_model == Model.GENESIS_G59NET)
                                losc_freq -= g59_2m_Xtrv_losc_freq;
                            break;
                        case Band.BX1:
                            losc_freq -= xBand[1].losc;
                            break;
                        case Band.BX2:
                            losc_freq -= xBand[2].losc;
                            break;
                        case Band.BX3:
                            losc_freq -= xBand[3].losc;
                            break;
                        case Band.BX4:
                            losc_freq -= xBand[4].losc;
                            break;
                        case Band.BX5:
                            losc_freq -= xBand[5].losc;
                            break;
                        case Band.BX6:
                            losc_freq -= xBand[6].losc;
                            break;
                        case Band.BX7:
                            losc_freq -= xBand[7].losc;
                            break;
                        case Band.BX8:
                            losc_freq -= xBand[8].losc;
                            break;
                        case Band.BX9:
                            losc_freq -= xBand[9].losc;
                            break;
                        case Band.BX10:
                            losc_freq -= xBand[10].losc;
                            break;
                        case Band.BX11:
                            losc_freq -= xBand[11].losc;
                            break;
                        case Band.BX12:
                            losc_freq -= xBand[12].losc;
                            break;
                    }
                }

                if (current_model == Model.GENESIS_G59USB)
                {
                    g59.Set_frequency((long)Math.Round(losc_freq, 6), true);
                }
                else if (current_model == Model.GENESIS_G11)
                {
                    g11.Set_frequency((long)Math.Round(losc_freq, 6), true);
                }
                else if (current_model == Model.GENESIS_G59NET)
                {
                    net_device.SetLOSC((long)losc_freq, true);
                }
                else if (current_model == Model.QRP2000)
                {
                    if (QRP2000_XTRV_enabled && current_band == Band.B2M)
                        losc_freq -= 116000000.0 + QRP2000_IF_Freq;

                    qrp2000.Set_SI570_freq((losc_freq / 1e6) * qrp2000_freq_multiplier);
                }
                else if (current_model == Model.RTL_SDR)
                {
                    RTL_SDR.SetLOSC((Int32)losc_freq);
                }
            }

            VFOAFreq = freq - 0.001;   							// set VFOA frequency image
            Filter am_filter = CurrentFilter;					// save current AM filter
            CurrentFilter = Filter.F8;							// set filter to 3.1KHz
            MeterRXMode rx_meter = CurrentMeterRXMode;			// save current RX Meter mode
            CurrentMeterRXMode = MeterRXMode.OFF;				// turn RX Meter off
            bool display_avg = chkDisplayAVG.Checked;			// save current average state
            chkDisplayAVG.Checked = false;
            chkDisplayAVG.Checked = true;						// set average state to off
            float old_multimeter_cal = multimeter_cal_offset;
            float old_display_cal = display_cal_offset;
            comboDisplayMode.Enabled = false;
            comboMeterRXMode.Enabled = false;
            SetupForm.progressCalibration.Value = 0;
            int counter = 0;
            Thread.Sleep(2000);
            chkDisplayAVG.Checked = false;
            Thread.Sleep(200);
            grpMainRXMode.Enabled = false;
            grpSubRXMode.Enabled = false;
            grpMainRXFilter.Enabled = false;
            grpSubRXFilter.Enabled = false;
            float max = 0;
            float avg = 0;
            int max_index = 0;
            int low = 0;
            int high = 0;

            while (CalibrationInProgress)
            {
                switch (current_display_engine)
                {
                    case DisplayEngine.GDI_PLUS:
                        {

                            fixed (float* ptr = &Display_GDI.new_display_data[0])
                                DttSP.GetSpectrum(0, ptr);		// get the spectrum values

                            max = float.MinValue;
                            avg = 0;

                            max_index = 0;
                            low = Display_GDI.BUFFER_SIZE >> 1;
                            high = low;
                            low += (int)((DttSP.RXDisplayLow * Display_GDI.BUFFER_SIZE) / DttSP.SampleRate);
                            high += (int)((DttSP.RXDisplayHigh * Display_GDI.BUFFER_SIZE) / DttSP.SampleRate);

                            for (int i = low; i < high; i++)						// find the maximum signal
                            {
                                avg += Display_GDI.new_display_data[i];
                                if (Display_GDI.new_display_data[i] > max)
                                {
                                    max = Display_GDI.new_display_data[i];
                                    max_index = i;
                                }
                            }
                        }
                        break;
#if(DirectX)
                    case DisplayEngine.DIRECT_X:
                        {
                            fixed (float* ptr = &Display_DirectX.new_display_data[0])
                                DttSP.GetSpectrum(0, ptr);		// get the spectrum values

                            max = float.MinValue;
                            avg = 0;

                            max_index = 0;
                            low = Display_DirectX.BUFFER_SIZE >> 1;
                            high = low;
                            low += (int)((DttSP.RXDisplayLow * Display_DirectX.BUFFER_SIZE) / DttSP.SampleRate);
                            high += (int)((DttSP.RXDisplayHigh * Display_DirectX.BUFFER_SIZE) / DttSP.SampleRate);

                            for (int i = low; i < high; i++)						// find the maximum signal
                            {
                                avg += Display_DirectX.new_display_data[i];
                                if (Display_DirectX.new_display_data[i] > max)
                                {
                                    max = Display_DirectX.new_display_data[i];
                                    max_index = i;
                                }
                            }
                        }
                        break;
#endif
                }
                avg -= max;
                avg /= (high - low - 1);

                if (max < (avg + 30))
                {
                    MessageBox.Show("Peak is less than 30dB from the noise floor.  " +
                        "Please use a larger signal for frequency calibration.",
                        "Calibration Error - Weak Signal",
                        MessageBoxButtons.OK,
                        MessageBoxIcon.Error);
                    ret_val = false;
                    CalibrationInProgress = false;
                    goto end;
                }

                multimeter_cal_offset = 0.0f;
                display_cal_offset = 0.0f;
                float num = 0.0f, num2 = 0.0f, avg2 = 0.0f;
                avg = 0.0f;
                // get the value of the signal strength meter
                for (int i = 0; i < 50; i++)
                {
                    num += DttSP.CalculateRXMeter(0, 0, DttSP.MeterType.SIGNAL_STRENGTH);
                    Thread.Sleep(50);

                    progress = ((int)((float)counter++ / 5));
                    if (progress > 0 && progress < 100)
                        SetupForm.progressCalibration.Value = progress;
                }
                avg = num / 50.0f;
                Thread.Sleep(100);

                // get the value of the signal strength meter
                num2 = 0.0f;
                for (int i = 0; i < 50; i++)
                {
                    num2 += DttSP.CalculateRXMeter(0, 0, DttSP.MeterType.SIGNAL_STRENGTH);
                    Thread.Sleep(50);

                    progress = ((int)((float)counter++ / 5));
                    if (progress > 0 && progress < 100)
                        SetupForm.progressCalibration.Value = progress;
                }

                avg2 = num2 / 50.0f;
                float gain_offset = avg2 - avg;
                Thread.Sleep(100);

                num2 = 0.0f;
                for (int i = 0; i < 20; i++)
                {
                    switch (current_display_engine)
                    {
                        case DisplayEngine.GDI_PLUS:
                            {
                                fixed (float* ptr = &Display_GDI.new_display_data[0])
                                    DttSP.GetSpectrum(0, ptr);		// read again to clear out changed DSP

                                max = float.MinValue;						// find the max spectrum value
                                for (int j = 0; j < Display_GDI.BUFFER_SIZE; j++)
                                    if (Display_GDI.new_display_data[j] > max) max = Display_GDI.new_display_data[j];
                            }
                            break;
#if(DirectX)
                        case DisplayEngine.DIRECT_X:
                            {
                                fixed (float* ptr = &Display_DirectX.new_display_data[0])
                                    DttSP.GetSpectrum(0, ptr);		// read again to clear out changed DSP

                                max = float.MinValue;						// find the max spectrum value
                                for (int j = 0; j < Display_DirectX.BUFFER_SIZE; j++)
                                    if (Display_DirectX.new_display_data[j] > max) max = Display_DirectX.new_display_data[j];
                            }
                            break;
#endif
                    }
                    num2 += max;

                    Thread.Sleep(100);

                    progress = ((int)((float)counter++ / 5));
                    if (progress > 0 && progress < 100)
                        SetupForm.progressCalibration.Value = progress;
                }

                avg2 = num2 / 20.0f;

                // calculate the difference between the current value and the correct multimeter value
                float diff = level - (avg + multimeter_cal_offset);
                multimeter_cal_offset += diff;

                // calculate the difference between the current value and the correct spectrum value
                diff = level - (avg2 + display_cal_offset);
                DisplayCalOffset += diff;

                ret_val = true;
                CalibrationInProgress = false;
            }

        end:
            grpMainRXFilter.Enabled = true;
            grpSubRXFilter.Enabled = true;
            grpMainRXMode.Enabled = true;
            grpSubRXMode.Enabled = true;
            VFOLock = false;
            comboDisplayMode.Enabled = true;
            comboMeterRXMode.Enabled = true;

            if (ret_val == false)
            {
                multimeter_cal_offset = old_multimeter_cal;
                display_cal_offset = old_display_cal;
            }

            SetupForm.DisplayCalOffset = display_cal_offset;
            SetupForm.MultimeterCalOffset = multimeter_cal_offset;
            SetupForm.RXOnly = rx_only;							// restore RX Only			
            DisplayAVG = display_avg;							// restore AVG value
            CurrentFilter = am_filter;							// restore AM filter
            CurrentDSPMode = dsp_mode;							// restore DSP mode
            CurrentFilter = filter;								// restore filter

            if (dsp_buf_size != 2048)
                chkPower.Checked = false;						// go to standby

            SetupForm.DSPBufferSize = dsp_buf_size;				// restore DSP Buffer Size
            LOSCFreq = saved_losc;                              // restore LOSC
            VFOAFreq = vfoa;									// restore vfo frequency
            losc_freq = loscFreq;
            losc_freq *= 1e6;

            if (usb_si570_enable)
                SI570.Set_SI570_osc((long)losc_freq);
            else
            {
                if (current_model == Model.GENESIS_G59USB)
                {
                    if (IsXTRV(freq))
                    {
                        switch (current_band)
                        {
                            case Band.B2M:
                                losc_freq -= g59_2m_Xtrv_losc_freq;
                                break;
                            case Band.BX1:
                                losc_freq -= xBand[1].losc;
                                break;
                            case Band.BX2:
                                losc_freq -= xBand[2].losc;
                                break;
                            case Band.BX3:
                                losc_freq -= xBand[3].losc;
                                break;
                            case Band.BX4:
                                losc_freq -= xBand[4].losc;
                                break;
                            case Band.BX5:
                                losc_freq -= xBand[5].losc;
                                break;
                            case Band.BX6:
                                losc_freq -= xBand[6].losc;
                                break;
                            case Band.BX7:
                                losc_freq -= xBand[7].losc;
                                break;
                            case Band.BX8:
                                losc_freq -= xBand[8].losc;
                                break;
                            case Band.BX9:
                                losc_freq -= xBand[9].losc;
                                break;
                            case Band.BX10:
                                losc_freq -= xBand[10].losc;
                                break;
                            case Band.BX11:
                                losc_freq -= xBand[11].losc;
                                break;
                            case Band.BX12:
                                losc_freq -= xBand[12].losc;
                                break;
                        }
                    }

                    g59.Set_frequency((long)Math.Round(losc_freq, 6), true);
                }
                else if (current_model == Model.GENESIS_G11)
                {
                    if (IsXTRV(freq))
                    {
                        switch (current_band)
                        {
                            case Band.B2M:
                                losc_freq -= g11_Xtrv_losc_freq;
                                break;
                            case Band.BX1:
                                losc_freq -= xBand[1].losc;
                                break;
                            case Band.BX2:
                                losc_freq -= xBand[2].losc;
                                break;
                            case Band.BX3:
                                losc_freq -= xBand[3].losc;
                                break;
                            case Band.BX4:
                                losc_freq -= xBand[4].losc;
                                break;
                            case Band.BX5:
                                losc_freq -= xBand[5].losc;
                                break;
                            case Band.BX6:
                                losc_freq -= xBand[6].losc;
                                break;
                            case Band.BX7:
                                losc_freq -= xBand[7].losc;
                                break;
                            case Band.BX8:
                                losc_freq -= xBand[8].losc;
                                break;
                            case Band.BX9:
                                losc_freq -= xBand[9].losc;
                                break;
                            case Band.BX10:
                                losc_freq -= xBand[10].losc;
                                break;
                            case Band.BX11:
                                losc_freq -= xBand[11].losc;
                                break;
                            case Band.BX12:
                                losc_freq -= xBand[12].losc;
                                break;
                        }
                    }

                    g11.Set_frequency((long)Math.Round(losc_freq, 6), true);
                }
                else if (current_model == Model.GENESIS_G59NET)
                {
                    if (IsXTRV(freq))
                    {
                        switch (current_band)
                        {
                            case Band.B2M:
                                losc_freq -= g59_2m_Xtrv_losc_freq;
                                break;
                            case Band.BX1:
                                losc_freq -= xBand[1].losc;
                                break;
                            case Band.BX2:
                                losc_freq -= xBand[2].losc;
                                break;
                            case Band.BX3:
                                losc_freq -= xBand[3].losc;
                                break;
                            case Band.BX4:
                                losc_freq -= xBand[4].losc;
                                break;
                            case Band.BX5:
                                losc_freq -= xBand[5].losc;
                                break;
                            case Band.BX6:
                                losc_freq -= xBand[6].losc;
                                break;
                            case Band.BX7:
                                losc_freq -= xBand[7].losc;
                                break;
                            case Band.BX8:
                                losc_freq -= xBand[8].losc;
                                break;
                            case Band.BX9:
                                losc_freq -= xBand[9].losc;
                                break;
                            case Band.BX10:
                                losc_freq -= xBand[10].losc;
                                break;
                            case Band.BX11:
                                losc_freq -= xBand[11].losc;
                                break;
                            case Band.BX12:
                                losc_freq -= xBand[12].losc;
                                break;
                        }
                    }

                    net_device.SetLOSC((long)losc_freq, true);
                }
                else if (current_model == Model.QRP2000)
                {
                    if (QRP2000_XTRV_enabled && current_band == Band.B2M)
                        losc_freq -= 116000000.0 + QRP2000_IF_Freq;
                    else if (QRP2000_XTRV_enabled)
                    {
                        switch (current_band)
                        {
                            case Band.BX1:
                                losc_freq -= xBand[1].losc;
                                break;
                            case Band.BX2:
                                losc_freq -= xBand[2].losc;
                                break;
                            case Band.BX3:
                                losc_freq -= xBand[3].losc;
                                break;
                            case Band.BX4:
                                losc_freq -= xBand[4].losc;
                                break;
                            case Band.BX5:
                                losc_freq -= xBand[5].losc;
                                break;
                            case Band.BX6:
                                losc_freq -= xBand[6].losc;
                                break;
                            case Band.BX7:
                                losc_freq -= xBand[7].losc;
                                break;
                            case Band.BX8:
                                losc_freq -= xBand[8].losc;
                                break;
                            case Band.BX9:
                                losc_freq -= xBand[9].losc;
                                break;
                            case Band.BX10:
                                losc_freq -= xBand[10].losc;
                                break;
                            case Band.BX11:
                                losc_freq -= xBand[11].losc;
                                break;
                            case Band.BX12:
                                losc_freq -= xBand[12].losc;
                                break;
                        }
                    }

                    qrp2000.Set_SI570_freq((losc_freq / 1e6) * qrp2000_freq_multiplier);
                }
            }

            if (dsp_buf_size != 2048)
            {
                Thread.Sleep(100);
                chkPower.Checked = true;
            }
            CurrentMeterRXMode = rx_meter;						// restore RX Meter mode
            SetupForm.Polyphase = polyphase;					// restore polyphase
            comboDisplayMode.Text = display_mode;				// restore display mode
            CalibrationInProgress = false;

            VFOAFreq = vfoAFreq;

            return ret_val;
        }

        public bool SaveCalibrateRXImage()
        {
            float real, imag;
            //DttSP.SetCorrectIQMu(0, 0, 0);
            DttSP.GetCorrectRXIQw(0, 0, &real, &imag, 1);
            rx_image_real_table[(int)current_band] = real;
            rx_image_imag_table[(int)current_band] = imag;
            DttSP.SetCorrectRXIQw(0, 0, rx_image_real_table[(int)current_band],
                rx_image_imag_table[(int)current_band], 100);                       // for backup
            DttSP.SetCorrectRXIQw(0, 1, rx_image_real_table[(int)current_band],
                rx_image_imag_table[(int)current_band], 100);                       // for backup
            Debug.WriteLine("RX Image Real: " + real.ToString("f6") + "  Imag: " + imag.ToString("f6"));
            //DttSP.SetCorrectIQMu(0, 0, 1);
            return true;
        }

        private bool callibrating = false;
        public bool ResetCalibrateRXImage()
        {
            if (PowerOn)
            {
                Thread.Sleep(1000);

                if (wbir_thread == null || !wbir_thread.IsAlive)
                {
                    wbir_thread = new Thread(new ThreadStart(WBIR_thread));
                    wbir_thread.Name = "WBIR Thread";
                    wbir_thread.Priority = ThreadPriority.Normal;
                    wbir_thread.IsBackground = true;
                    wbir_thread.Start();
                }

                rx_image_real_table[(int)current_band] = 0.0f;
                rx_image_imag_table[(int)current_band] = 0.0f;

                WBIR_state = WBIR_State.NoAdapt;
                wbir_tuned = true;
            }
            return true;
        }

        public bool AbortPa10Calibration = false;
        // changes yt7pwr
        public bool CalibratePAgain(Progress progress, bool[] run, int target_watts)                // calibrate PA Gain values
        {
            try
            {
                bool ret_val = false;
                bool Iambic_status = CWIambic;
                Model rig = current_model;

                if (!PowerOn)
                {
                    MessageBox.Show("Power must be on in order to calibrate.", "Power Is Off",
                        MessageBoxButtons.OK, MessageBoxIcon.Stop);
                    return false;
                }

                AbortPa10Calibration = false;

                if (chkEnableSubRX.Checked)
                    chkEnableSubRX.Checked = false;

                DSPMode dsp_mode = current_dsp_mode;			// save current dsp mode

                string losc_freq_text = txtLOSCFreq.Text;
                double losc_freq = LOSCFreq;
                double vfo_freq = VFOAFreq;						// save current frequency

                int pwr = (int)ptbPWR.Value;						// save current pwr level

                comboDisplayMode.Enabled = false;

                int on_time = 2500;
                int off_time = 2500;

                switch (current_soundcard)
                {
                    case SoundCard.AUDIGY_2_ZS:
                        on_time = 3000;
                        off_time = 4000;
                        break;
                    case SoundCard.DELTA_44:
                        on_time = 2000;
                        off_time = 2000;
                        break;
                }

                SetupForm.progressPAcalibration.Value = 0;

                float[] band_freqs = { 1.9f, 3.75f, 5.3205f, 7.15f, 10.125f, 14.175f, 18.1f, 21.225f, 24.9f, 28.85f, 
                                         50.1f, 144.3f, 0.137f, 0.5f };
                int[] max_pwr = { 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 50, 50, 100, 100 };

                if (run[0]) SetupForm.PAGain160 = 55.0f;
                if (run[1]) SetupForm.PAGain80 = 55.0f;
                if (run[2]) SetupForm.PAGain60 = 55.0f;
                if (run[3]) SetupForm.PAGain40 = 55.0f;
                if (run[4]) SetupForm.PAGain30 = 55.0f;
                if (run[5]) SetupForm.PAGain20 = 55.0f;
                if (run[6]) SetupForm.PAGain17 = 55.0f;
                if (run[7]) SetupForm.PAGain15 = 55.0f;
                if (run[8]) SetupForm.PAGain12 = 55.0f;
                if (run[9]) SetupForm.PAGain10 = 55.0f;
                if (run[10]) SetupForm.PAGain6 = 55.0f;
                if (run[11]) SetupForm.PAGain6 = 55.0f;
                if (run[12]) SetupForm.PAGain2190 = 55.0f;
                if (run[13]) SetupForm.PAGain600 = 55.0f;

                float diff_dBm = 0.0f;

                manual_mox = false;

                for (int i = 0; i < band_freqs.Length; i++)
                {
                    if (AbortPa10Calibration)
                    {
                        ret_val = false;
                        goto end;
                    }
                    else if (run[i])
                    {
                        int error_count = 0;
                        LOSCFreq = Math.Round(band_freqs[i], 6);
                        Thread.Sleep(1000);
                        losc_freq = loscFreq;
                        losc_freq *= 1e6;

                        VFOAFreq = Math.Round(band_freqs[i] + 0.01, 6);				// set frequency
                        Thread.Sleep(1000);
                        SetTXOscFreqs(true, true);
                        ptbPWR.Value = Math.Min(target_watts, max_pwr[i]);
                        lblPWRValue.Text = ptbPWR.Value.ToString();
                        int target = (int)ptbPWR.Value;

                        dsp_mode = current_dsp_mode;

                        if (dsp_mode != DSPMode.CWU)
                            CurrentDSPMode = DSPMode.CWU;

                        Thread.Sleep(1);

                        switch (rig)
                        {
                            case Model.GENESIS_G59USB:
                            case Model.GENESIS_G59NET:
                                g59.WriteToDevice(18, (long)Keyer_mode.TUNE);
                                break;
                            case Model.GENESIS_G11:
                                g11.WriteToDevice(18, (long)Keyer_mode.TUNE);
                                break;
                            case Model.GENESIS_G6:
                                g6.WriteToDevice(18, (long)Keyer_mode.TUNE);
                                break;
                        }

                        Thread.Sleep(1000);
                        bool good_result = false;

                        while (good_result == false)
                        {
                            DttSP.SetKeyerIambic(false);
                            Keyer.TuneCW = true;
                            Thread.Sleep(100);
                            if (!chkMOX.Checked)
                                goto end;

                            for (int j = 0; j < on_time / 100; j++)
                            {
                                Thread.Sleep(20);
                            }

                            double watts = 0;

                            switch (rig)
                            {
                                case Model.GENESIS_G59USB:
                                case Model.GENESIS_G59NET:
                                    watts = PAPower(g59.fwd_PWR);
                                    break;
                                case Model.GENESIS_G11:
                                    watts = PAPower(g11.fwd_PWR);
                                    break;
                                case Model.GENESIS_G6:
                                    watts = PAPower(g6.fwd_PWR);
                                    break;
                            }

                            // convert to dBm
                            diff_dBm = (float)Math.Round((WattsTodBm(watts) - WattsTodBm((double)target / 10)), 1);

                            if (diff_dBm == 0.0)
                                good_result = true;
                            else
                            {
                                switch (i)										// fix gain value
                                {
                                    case 0:
                                        if (SetupForm.PAGain160 + diff_dBm < 30.0)
                                        {
                                            if (++error_count > 6)
                                                goto error;

                                            SetupForm.PAGain160 = (float)Math.Max(30.0, SetupForm.PAGain160 - 0.1);
                                        }
                                        else SetupForm.PAGain160 += diff_dBm;
                                        break;
                                    case 1:
                                        if (SetupForm.PAGain80 + diff_dBm < 30.0)
                                        {
                                            if (++error_count > 6)
                                                goto error;

                                            SetupForm.PAGain80 = (float)Math.Max(30.0, SetupForm.PAGain80 - 0.1);
                                        }
                                        else SetupForm.PAGain80 += diff_dBm;
                                        break;
                                    case 2:
                                        if (SetupForm.PAGain60 + diff_dBm < 30.0)
                                        {
                                            if (++error_count > 6)
                                                goto error;

                                            SetupForm.PAGain60 = (float)Math.Max(30.0, SetupForm.PAGain60 - 0.1);
                                        }
                                        else SetupForm.PAGain60 += diff_dBm;
                                        break;
                                    case 3:
                                        if (SetupForm.PAGain40 + diff_dBm < 30.0)
                                        {
                                            if (++error_count > 6)
                                                goto error;

                                            SetupForm.PAGain40 = (float)Math.Max(30.0, SetupForm.PAGain40 - 0.1);
                                        }
                                        else SetupForm.PAGain40 += diff_dBm;
                                        break;
                                    case 4:
                                        if (SetupForm.PAGain30 + diff_dBm < 30.0)
                                        {
                                            if (++error_count > 6)
                                                goto error;

                                            SetupForm.PAGain30 = (float)Math.Max(30.0, SetupForm.PAGain30 - 0.1);
                                        }
                                        else SetupForm.PAGain30 += diff_dBm;
                                        break;
                                    case 5:
                                        if (SetupForm.PAGain20 + diff_dBm < 30.0)
                                        {
                                            if (++error_count > 6)
                                                goto error;

                                            SetupForm.PAGain20 = (float)Math.Max(30.0, SetupForm.PAGain20 - 0.1);
                                        }
                                        else SetupForm.PAGain20 += diff_dBm;
                                        break;
                                    case 6:
                                        if (SetupForm.PAGain17 + diff_dBm < 30.0)
                                        {
                                            if (++error_count > 6)
                                                goto error;

                                            SetupForm.PAGain17 = (float)Math.Max(30.0, SetupForm.PAGain17 - 0.1);
                                        }
                                        else SetupForm.PAGain17 += diff_dBm;
                                        break;
                                    case 7:
                                        if (SetupForm.PAGain15 + diff_dBm < 30.0)
                                        {
                                            if (++error_count > 6)
                                                goto error;

                                            SetupForm.PAGain15 = (float)Math.Max(30.0, SetupForm.PAGain15 - 0.1);
                                        }
                                        else SetupForm.PAGain15 += diff_dBm;
                                        break;
                                    case 8:
                                        if (SetupForm.PAGain12 + diff_dBm < 30.0)
                                        {
                                            if (++error_count > 6)
                                                goto error;

                                            SetupForm.PAGain12 = (float)Math.Max(30.0, SetupForm.PAGain12 - 0.1);
                                        }
                                        else SetupForm.PAGain12 += diff_dBm;
                                        break;
                                    case 9:
                                        if (SetupForm.PAGain10 + diff_dBm < 30.0)
                                        {
                                            if (++error_count > 6)
                                                goto error;

                                            SetupForm.PAGain10 = (float)Math.Max(30.0, SetupForm.PAGain10 - 0.1);
                                        }
                                        else SetupForm.PAGain10 += diff_dBm;
                                        break;
                                    case 10:
                                        if (SetupForm.PAGain6 + diff_dBm < 30.0)
                                        {
                                            if (++error_count > 6)
                                                goto error;

                                            SetupForm.PAGain6 = (float)Math.Max(30.0, SetupForm.PAGain6 - 0.1);
                                        }
                                        else SetupForm.PAGain6 += diff_dBm;
                                        break;
                                    case 11:
                                        if (SetupForm.PAGain2190 + diff_dBm < 30.0)
                                        {
                                            if (++error_count > 6)
                                                goto error;

                                            SetupForm.PAGain2190 = (float)Math.Max(30.0, SetupForm.PAGain2190 - 0.1);
                                        }
                                        else SetupForm.PAGain2190 += diff_dBm;
                                        break;
                                    case 12:
                                        if (SetupForm.PAGain600 + diff_dBm < 30.0)
                                        {
                                            if (++error_count > 6)
                                                goto error;

                                            SetupForm.PAGain600 = (float)Math.Max(30.0, SetupForm.PAGain600 - 0.1);
                                        }
                                        else SetupForm.PAGain600 += diff_dBm;
                                        break;
                                }
                            }

                            for (int j = 0; j < off_time / 100; j++)
                            {
                                Thread.Sleep(20);
                            }
                        }

                        Keyer.TuneCW = false;
                        Thread.Sleep(1000);
                        CurrentDSPMode = dsp_mode;							// restore dsp mode
                        Thread.Sleep(3000);
                    }

                    SetupForm.progressPAcalibration.Value = Math.Min(((i + 1) * 9), 100);
                }

                ret_val = true;

            end:

                Keyer.TuneCW = false;
                Thread.Sleep(1000);

                if (current_model != Model.GENESIS_G59USB ||
                    current_model != Model.GENESIS_G59NET ||
                    current_model != Model.GENESIS_G11 ||
                    current_model != Model.GENESIS_G6)
                    DttSP.SetKeyerIambic(CWIambic);                 // restore

                comboDisplayMode.Enabled = true;
                LOSCFreq = float.Parse(losc_freq_text);             // restore LOSC
                losc_freq = loscFreq;
                losc_freq *= 1e6;

                VFOAFreq = vfo_freq;								// restore frequency
                ptbPWR.Value = pwr;									// restore pwr level
                lblPWRValue.Text = ptbPWR.Value.ToString();
                return ret_val;

            error:
                MessageBox.Show("Calculated gain is invalid.Please double check connections and try again.\n" +
                    "If this problem persists, contact info@genesisradio.com.au or\n" +
               "join Yahoo group (http://groups.yahoo.com/group/GenesisRadio)",
                    "Invalid Gain Found",
                    MessageBoxButtons.OK,
                    MessageBoxIcon.Error);

                SetupForm.progressPAcalibration.Value = SetupForm.progressPAcalibration.Maximum;
                CurrentDSPMode = dsp_mode;							// restore dsp mode
                goto end;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString());
                return false;
            }
        }

        public bool CalibrateSoundCard(Progress progress, int card)
        {
            if (!PowerOn)
            {
                MessageBox.Show("Power must be on in order to calibrate.", "Power Is Off",
                    MessageBoxButtons.OK, MessageBoxIcon.Stop);
                return false;
            }

            Audio.testing = true;
            progress.SetPercent(0.0f);

            double tx_volume = Audio.RadioVolume;	        // save current TX volume
            double rx_volume = Audio.MonitorVolumeLeft;	    // save current RX volume
            bool twotone = Audio.two_tone;			        // save current two tone setting
            Audio.two_tone = false;

            if (num_channels == 4 || num_channels == 6)
            {
                chkMOX.Checked = true;
                Thread.Sleep(200);
                Audio.RadioVolume = 1.0;				// set volume to max
                Audio.MonitorVolumeLeft = 0.0;
                Audio.MonitorVolumeRight = 0.0;
            }
            else
            {
                switch (WinVer)
                {
                    case WindowsVersion.Windows7:
                    case WindowsVersion.Windows8:
                    case WindowsVersion.WindowsVista:
                        break;

                    default:
                        {
                            Mixer.SetMainVolume(mixer_id1, 100);
                            Mixer.SetWaveOutVolume(mixer_id1, 100);
                        }
                        break;
                }

                Audio.MonitorVolumeLeft = 1.0;
                Audio.MonitorVolumeRight = 1.0;
            }

            Audio.CurrentAudioState1 = Audio.AudioState.SINL_COSR;	// Start sending tone

            progress.Focus();

            while (progress.Visible == true)			            // keep sending tone until abort is pressed
                Thread.Sleep(100);

            Audio.CurrentAudioState1 = Audio.AudioState.DTTSP;		// stop sending tone

            if (num_channels > 2)
            {
                Thread.Sleep(200);
                chkMOX.Checked = false;
            }

            Audio.RadioVolume = tx_volume;			    // restore TX volume
            Audio.MonitorVolumeLeft = rx_volume;		// restore RX volume
            Audio.MonitorVolumeRight = rx_volume;		// restore RX volume
            Audio.two_tone = twotone;				    // restore two tone setting
            Audio.testing = false;

            return true;
        }

        #endregion

        #region Properties
        // ======================================================
        // Properties
        // ======================================================

        #region Genesis
        public MultiPSKEthernetServer MultiPSKServer;
        public LoopDLL loopDLL;
        public bool wbir_run = false;
        public bool ConsoleClosing = false;
        public double G3020Xtal1 = 10.125;
        public double G3020Xtal2 = 14.045;
        public double G3020Xtal3 = 14.138;
        public double G3020Xtal4 = 14.232;
        public double G40Xtal1 = 7.047;
        public double G137Xtal1 = 0.1;
        public double G500Xtal1 = 0.5;
        public double G80Xtal1 = 3.545;
        public double G80Xtal2 = 3.638;
        public double G80Xtal3 = 3.732;
        public double G80Xtal4 = 3.835;
        public double G160Xtal1 = 1.838;
        public double G160Xtal2 = 1.845;
        private double vfoa_restore = 10.0;
        private double vfob_restore = 10.0;
        private double losc_restore = 10.0;
        private Filter filter_restore = Filter.F1;
        private int zoom_restore = 4;
        private int pan_restore = 0;
        private int mode_restore = 0;
        private int saved_tbDisplayPan = 0;
        private int saved_tbDisplayZoom = 4;
        public bool VoiceRecording = false;
        public bool ExtATU_present = false;
        public ATUMode ExtATU_tuning_mode = ATUMode.FULL_TUNE;
        public int TXSwitchTime = 10;
        public bool cat_push_data = false;


        private VoIPtype voip_type = VoIPtype.None;
        public VoIPtype VoIP_type
        {
            get { return voip_type; }
            set { voip_type = value; }
        }

        private bool ir_remote_enabled = false;
        public bool IR_Remote_enabled
        {
            set
            {
                ir_remote_enabled = value;

                if (!booting)
                {
                    if (value)
                    {
                        if (ir_remote != null)
                            ir_remote.Start(SetupForm.txtWinLIRCaddress.Text.ToString(), (int)SetupForm.udWinLIRCport.Value);
                    }
                    else
                    {
                        if (ir_remote != null)
                            ir_remote.Stop();
                    }
                }
            }
        }

        private int fm_memory_number = 1;
        public int FMmemoryNumber
        {
            get { return fm_memory_number; }

            set
            {
                fm_memory_number = value;
                lblFMMemory.Text = fm_memory_number.ToString();
            }
        }

        private bool ctcss = false;
        public bool CTCSS
        {
            get { return ctcss; }
            set 
            {
                ctcss = value;
                chkCTCSS.Checked = value;
            }
        }

        private double ctcss_freq = 67.0;
        public double CTCSSfreq
        {
            get { return ctcss_freq; }
            set { ctcss_freq = value; }
        }

        private RPTRmode rptr_mode = RPTRmode.simplex;
        public RPTRmode RPTRmode
        {
            get { return rptr_mode; }
            set 
            {
                rptr_mode = value;

                switch (rptr_mode)
                {
                    case RPTRmode.high:
                        radFMModeHigh.Checked = true;
                        break;

                    case RPTRmode.low:
                        radFMModeLow.Checked = true;
                        break;

                    case RPTRmode.simplex:
                        radFMModeSimplex.Checked = true;
                        break;
                }
            }
        }

        private double rptr_offset = 0.0;
        public double RPTR_offset
        {
            get { return (double)(udFMOffset.Value) / 1e3; }
            set 
            {
                rptr_offset = value;
                udFMOffset.Value = (decimal)value;
            }
        }

        private bool cwx_playing = false;
        public bool CWX_Playing
        {
            get{return cwx_playing;}
            set
            {
                cwx_playing = value;

                if (!booting)
                {
                    if (cwx_playing)
                    {
                        switch (current_model)
                        {
                            case Model.GENESIS_G6:
                                Thread.Sleep(1);
                                g6.WriteToDevice(18, (long)Keyer_mode.CWX);
                                break;
                            case Model.GENESIS_G59USB:
                                Thread.Sleep(1);
                                g59.WriteToDevice(18, (long)Keyer_mode.CWX);
                                Thread.Sleep(1);
                                break;
                            case Model.GENESIS_G11:
                                Thread.Sleep(1);
                                g11.WriteToDevice(18, (long)Keyer_mode.CWX);
                                Thread.Sleep(1);
                                break;
                            case Model.GENESIS_G59NET:
                                net_device.WriteToDevice(18, (long)Keyer_mode.CWX);
                                break;
                        }
                    }
                    else
                    {
                        switch (current_model)
                        {
                            case Model.GENESIS_G6:
                            case Model.GENESIS_G59USB:
                            case Model.GENESIS_G59NET:
                                SetupForm.KeyerModeChange();
                                break;
                            case Model.GENESIS_G11:
                                SetupForm.KeyerModeChange();
                                break;
                        }
                    }
                }
            }
        }

        private float multimeter_cal_offset = -34.0f;					// multimeter calibration offset per volume setting in dB
        public float MultimeterCalOffset
        {
            get {return multimeter_cal_offset;}
            set{multimeter_cal_offset = value;}
        }

        private double g11_Xtrv_losc_freq = 14000000.0;           // G11 + 2m Xtrv
        public double G11_XTRV_LOSC_Freq
        {
            get { return g11_Xtrv_losc_freq; }

            set { g11_Xtrv_losc_freq = value; }
        }

        private bool G11_auto_correction = false;
        public bool G11AutoCorrection
        {
            get { return G11_auto_correction; }
            set
            {
                G11_auto_correction = value;

                if (!booting)
                {
                    if (value)
                        g11.WriteToDevice(22, 1);
                    else
                        g11.WriteToDevice(22, 0);
                }
            }
        }

        private bool G11_sec_rx_ant = false;
        public bool G11SecRXAnt
        {
            get { return G11_sec_rx_ant; }
            set
            {
                G11_sec_rx_ant = value;

                if (value == true)
                {
                    lblRX2.BackColor = Color.Red;
                }
                else
                {
                    lblRX2.BackColor = NewBackgroundVFOColor;
                }

                Thread.Sleep(1);

                if (value == true)
                    g11.WriteToDevice(23, 1);
                else
                    g11.WriteToDevice(23, 0);
            }
        }

        private bool G11_XTRV_separate_RXTX = false;
        public bool G11XTRV_separateRXTX
        {
            get { return G11_XTRV_separate_RXTX; }
            set
            {
                G11_XTRV_separate_RXTX = value;

                if (value == true)
                    g11.WriteToDevice(9, 0);
                else
                    g11.WriteToDevice(10, 0);
            }
        }

        private bool vfob_split_extended = false;
        public bool VFOB_SPLIT_EXTENDED
        {
            get { return vfob_split_extended; }
            set
            {
                vfob_split_extended = value;
                VFOBFreq = vfoBFreq;                // force refresh
            }
        }

        private short extPA_PTT_delay_on = 100;
        public short ExtPA_PTT_Delay_ON
        {
            get { return extPA_PTT_delay_on; }
            set { extPA_PTT_delay_on = value; }
        }

        private short extPA_PTT_delay_off = 100;
        public short ExtPA_PTT_Delay_OFF
        {
            get { return extPA_PTT_delay_off; }
            set { extPA_PTT_delay_off = value; }
        }

        private bool extPA_PTT_inverted = false;
        public bool ExtPA_PTT_Inverted
        {
            get { return extPA_PTT_inverted; }
            set
            {
                extPA_PTT_inverted = value;

                if (value)
                {
                    if (current_model == Model.GENESIS_G59USB)
                        g59.WriteToDevice(28, 1);
                    else if (current_model == Model.GENESIS_G59NET)
                        net_device.WriteToDevice(28, 1);
                    else if (current_model == Model.GENESIS_G11)
                        g11.WriteToDevice(28, 1);
                    else if (current_model == Model.GENESIS_G6)
                        g6.WriteToDevice(28, 1);
                }
                else
                {
                    if (current_model == Model.GENESIS_G59USB)
                        g59.WriteToDevice(28, 0);
                    else if (current_model == Model.GENESIS_G59NET)
                        net_device.WriteToDevice(28, 0);
                    else if (current_model == Model.GENESIS_G11)
                        g11.WriteToDevice(28, 0);
                    else if (current_model == Model.GENESIS_G6)
                        g6.WriteToDevice(28, 0);
                }
            }
        }

        private FilterMode filter_mode = FilterMode.PASS_BAND;
        public FilterMode FilterMode
        {
            set { filter_mode = value; }
        }

        private bool button_zoom = false;
        public bool ButtonZoom
        {
            set { button_zoom = value; }
        }

        private bool G59_sec_rx_ant = false;
        public bool G59SecRXAnt
        {
            get { return G59_sec_rx_ant; }
            set
            {
                G59_sec_rx_ant = value;

                if (value == true)
                {
                    lblRX2.BackColor = Color.Red;
                }
                else
                {
                    lblRX2.BackColor = NewBackgroundVFOColor;
                }

                if (current_model == Model.GENESIS_G59USB)
                {
                    if (value == true)
                        g59.WriteToDevice(23, 1);
                    else
                        g59.WriteToDevice(23, 0);
                }
                else if (current_model == Model.GENESIS_G59NET)
                {
                    if (value == true)
                        net_device.WriteToDevice(23, 1);
                    else
                        net_device.WriteToDevice(23, 0);
                }
            }
        }

        private bool G6_sec_rx_ant = false;
        public bool G6SecRXAnt
        {
            get { return G6_sec_rx_ant; }
            set
            {
                G6_sec_rx_ant = value;

                if (value == true)
                {
                    lblRX2.BackColor = Color.Red;
                }
                else
                {
                    lblRX2.BackColor = NewBackgroundVFOColor;
                }

                if (current_model == Model.GENESIS_G6)
                {
                    if (value == true)
                        g6.WriteToDevice(23, 1);
                    else
                        g6.WriteToDevice(23, 0);
                }
            }
        }

        private bool G11mic_preamp = false;
        public bool G11MicPreamp
        {
            get { return G11mic_preamp; }
            set { G11mic_preamp = value; }
        }

        private bool G59mic_preamp = false;
        public bool G59MicPreamp
        {
            get { return G59mic_preamp; }
            set { G59mic_preamp = value; }
        }

        private bool line_mic_shared = false;
        public bool LineMicShared
        {
            get { return line_mic_shared; }
            set { line_mic_shared = value; }
        }

        public bool QRP2000_XTRV_enabled = false;
        private double qrp2000_if_freq = 14000000.0;           // QRP2000
        public double QRP2000_IF_Freq
        {
            get { return qrp2000_if_freq; }

            set { qrp2000_if_freq = value; }
        }

        private int qrp2000_freq_multiplier = 4;
        public int QRP2000_Freq_Multiplier
        {
            get { return qrp2000_freq_multiplier; }

            set { qrp2000_freq_multiplier = value; }
        }

        private int qrp2000_xtrv_freq_multiplier = 1;
        public int QRP2000_XTRV_Freq_Multiplier
        {
            get { return qrp2000_xtrv_freq_multiplier; }

            set { qrp2000_xtrv_freq_multiplier = value; }
        }

        private bool G59_XTRV_separate_RXTX = false;
        public bool G59XTRV_separateRXTX
        {
            get { return G59_XTRV_separate_RXTX; }
            set
            {
                if (current_model == Model.GENESIS_G59USB)
                {
                    G59_XTRV_separate_RXTX = value;

                    if (value == true)
                        g59.WriteToDevice(9, 0);
                    else
                        g59.WriteToDevice(10, 0);
                }
                else if (current_model == Model.GENESIS_G59NET)
                {
                    if (value == true)
                        net_device.WriteToDevice(9, 1);
                    else
                        net_device.WriteToDevice(10, 0);
                }
            }
        }

        private bool G6_XTRV_separate_RXTX = false;
        public bool G6XTRV_separateRXTX
        {
            get { return G6_XTRV_separate_RXTX; }
            set
            {
                if (current_model == Model.GENESIS_G6)
                {
                    G6_XTRV_separate_RXTX = value;

                    if (value == true)
                        g6.WriteToDevice(9, 0);
                    else
                        g6.WriteToDevice(10, 0);
                }
            }
        }

        private double g59_2m_Xtrv_losc_freq = 14000000.0;           // G59+Xtrv
        public double G59_2M_XTRV_LOSC_Freq
        {
            get { return g59_2m_Xtrv_losc_freq; }

            set { g59_2m_Xtrv_losc_freq = value; }
        }

        private int sr_si570_address = 0x55;
        public int sr_si570_i2c_address
        {
            get { return sr_si570_address; }

            set
            {
                if (value > 0 && value < 255)
                {
                    sr_si570_address = value;
                }
            }
        }

        private bool sr_usb_si570_enable = false;
        public bool SR_USBSi570Enable
        {
            get { return sr_usb_si570_enable; }

            set { sr_usb_si570_enable = value; }
        }

        private bool continuous_tuning = false;
        public bool ContinuousTuning
        {
            get { return continuous_tuning; }
            set { continuous_tuning = value; }
        }

        private bool eth_cat_is_active = false;
        public bool EthCATIsActive
        {
            get { return eth_cat_is_active; }
            set { eth_cat_is_active = value; }
        }

        public bool SplitAB_TX
        {
            get { return chkVFOSplit.Checked; }
            set { chkVFOSplit.Checked = value; }
        }

        public bool EnableSubRX
        {
            get { return chkEnableSubRX.Checked; }
            set
            {
                chkEnableSubRX.Checked = value;
            }
        }

        public bool ShowTXFilter
        {
            get { return chkShowTXFilter.Checked; }
            set { chkShowTXFilter.Checked = value; }
        }

        public bool ShowCWTXFreq
        {
            get { return chkShowTXCWFreq.Checked; }
            set { chkShowTXCWFreq.Checked = value; }
        }

        private VisibleGroup current_visible_group = VisibleGroup.ZERO;
        public VisibleGroup CurrentVisibleGroup
        {
            set { current_visible_group = value; }
            get { return current_visible_group; }
        }

        private bool minimal_screen = false;
        public bool MinimalScreen
        {
            get { return minimal_screen; }
            set { minimal_screen = value; }
        }

        private bool auto_pwr_up = false;
        public bool AutoPowerUp
        {
            set
            {
                auto_pwr_up = value;
            }
        }

        private bool run_memory_zap = false;
        private bool reverse_memory_zap = false;
        public bool ReverseMemoryZap
        {
            set { reverse_memory_zap = value; }
        }

        private decimal memory_zap_time = 100;
        public decimal MemoryZapTime
        {
            set { memory_zap_time = value; }
        }

        private bool network_thread_running = false;
        public bool NetworkThreadRunning
        {
            set
            {
                if (!booting)
                {
                    network_thread_running = value;
                    if (network_thread_running)
                    {
                        if (network_thread == null || !network_thread.IsAlive)
                        {
                            network_thread = new Thread(new ThreadStart(NetworkThread));
                            network_thread.Name = "Network device Thread";
                            network_thread.Priority = ThreadPriority.Normal;
                            network_thread.IsBackground = true;
                            network_thread.Start();
                        }
                    }
                    else
                        network_event.Set();        // kick network thread!
                }
            }
        }

        private bool dtr_cw_monitor = false;     // default!
        public bool DTRCWMonitor
        {
            get { return dtr_cw_monitor; }
            set
            {
                dtr_cw_monitor = value;
                if (Keyer != null)
                    Keyer.DTRCWMonitor = value;
            }
        }

        private bool CW_monitor_enabled = false;
        public bool CWMonitorEnabled
        {
            get { return CW_monitor_enabled; }
            set { CW_monitor_enabled = value; }
        }

        private bool g59_auto_correction = false;
        public bool G59AutoCorrection
        {
            get { return g59_auto_correction; }
            set
            {
                g59_auto_correction = value;

                if (!booting)
                {
                    if (value)
                    {
                        if (current_model == Model.GENESIS_G59USB)
                            g59.WriteToDevice(22, 1);
                        else if (current_model == Model.GENESIS_G59NET)
                            net_device.WriteToDevice(22, 1);
                        else if (current_model == Model.GENESIS_G11)
                            g11.WriteToDevice(22, 1);
                        else if (current_model == Model.GENESIS_G6)
                            g6.WriteToDevice(22, 1);
                    }
                    else
                    {
                        if (current_model == Model.GENESIS_G59USB)
                            g59.WriteToDevice(22, 0);
                        else if (current_model == Model.GENESIS_G59NET)
                            net_device.WriteToDevice(22, 0);
                        else if (current_model == Model.GENESIS_G11)
                            g11.WriteToDevice(22, 0);
                        else if (current_model == Model.GENESIS_G6)
                            g6.WriteToDevice(22, 0);
                    }
                }
            }
        }

        private bool g6_auto_correction = false;
        public bool G6AutoCorrection
        {
            get { return g6_auto_correction; }
            set
            {
                g6_auto_correction = value;

                if (!booting)
                {
                    if (value)
                    {
                        if (current_model == Model.GENESIS_G6)
                            g6.WriteToDevice(22, 1);
                    }
                    else
                    {
                        if (current_model == Model.GENESIS_G6)
                            g6.WriteToDevice(22, 0);
                    }
                }
            }
        }

        private System.Drawing.Font vfo_large_font = new System.Drawing.Font("Microsoft Sans Serif", 20);
        public System.Drawing.Font VFOLargeFont
        {
            get { return vfo_large_font; }
            set
            {
                vfo_large_font = value;
                txtVFOAMSD.Font = vfo_large_font;
                txtVFOBMSD.Font = vfo_large_font;
                txtLOSCMSD.Font = (vfo_large_font);
                txtVFOAFreq.Font = vfo_large_font;
                txtVFOBFreq.Font = vfo_large_font;
                txtLOSCFreq.Font = vfo_large_font;
            }
        }

        private System.Drawing.Font vfo_small_font = new System.Drawing.Font("Microsoft Sans Serif", 16);
        public System.Drawing.Font VFOSmallFont
        {
            get { return vfo_small_font; }
            set
            {
                vfo_small_font = value;
                txtVFOALSD.Font = vfo_small_font;
                txtVFOBLSD.Font = vfo_small_font;
                txtLOSCLSD.Font = vfo_small_font;
            }
        }

        private bool vfo_new_look = false;
        public bool VFOnewlook
        {
            get { return vfo_new_look; }
            set
            {
                if (value)
                {
                    grpMultimeter.Visible = false;
                    grpManualNotch.Visible = true;
                    grpManualNotch.BringToFront();
                    grpVFOnew.Visible = true;
                    grpVFOnew.BringToFront();
                }
                else
                {
                    grpMultimeter.Visible = true;
                    grpMultimeter.BringToFront();
                    grpManualNotch.Visible = false;
                    grpVFOA.Visible = true;
                    grpVFOA.BringToFront();
                    grpVFOB.Visible = true;
                    grpVFOB.BringToFront();
                    grpLOSC.Visible = true;
                    grpLOSC.BringToFront();
                    grpVFOnew.Visible = false;
                }

                vfo_new_look = value;
                Console_Resize(null, null);
            }
        }

        private Color new_background_vfo_color = Color.FromArgb(255, 0, 0, 0);  // black
        public Color NewBackgroundVFOColor
        {
            get { return new_background_vfo_color; }
            set
            {
                new_background_vfo_color = value;
                grpVFOnew.BackColor = new_background_vfo_color;
                txtNewVFOBand.BackColor = new_background_vfo_color;
                txtVFOAnew.BackColor = new_background_vfo_color;
                txtVFOBnew.BackColor = new_background_vfo_color;
                txtLOSCnew.BackColor = new_background_vfo_color;
                lblVFOA.BackColor = new_background_vfo_color;
                lblAFNewVFO.BackColor = new_background_vfo_color;
                lblRFNewVFO.BackColor = new_background_vfo_color;
                lblATTNewVFO.BackColor = new_background_vfo_color;
                lblVFOB.BackColor = new_background_vfo_color;
                lblLOSC.BackColor = new_background_vfo_color;
                panelLOSCnewHover.BackColor = new_background_vfo_color;
                panelVFOAnewHover.BackColor = new_background_vfo_color;
                panelVFOBnewHover.BackColor = new_background_vfo_color;
            }
        }

        public static string main_menu_font_name = "Arial";
        public static float main_menu__font_size = 9;
        private Font main_menu_font = new Font(main_menu_font_name, main_menu__font_size);
        public Font MainMenuFont
        {
            get { return main_menu_font; }
            set
            {
                main_menu_font = value;
                menuStrip1.Font = value;
            }
        }

        public static string new_vfo_font_name = "Verdana";
        public static float new_vfo_font_size = 28;
        private Font new_vfo_large_font = new Font(new_vfo_font_name, new_vfo_font_size);
        public Font NewVFOLargeFont
        {
            get { return new_vfo_large_font; }
            set
            {
                new_vfo_large_font = value;
                txtVFOAnew.Font = new_vfo_large_font;
                GetNewVFOACharWidth();
                Graphics g = txtVFOAnew.CreateGraphics();
                panelVFOAnewHover.Width = txtVFOAnew.Width;
                System.Drawing.Point hover_position = new System.Drawing.Point();
                hover_position.X = txtVFOAnew.Location.X;
                hover_position.Y = txtVFOAnew.Location.Y + txtVFOAnew.Height - 1;
                panelVFOAnewHover.Location = hover_position;
                g.Dispose();

            }
        }

        public static string new_vfo_small_font_name = "Verdana";
        public static float new_vfo_small_font_size = 16;
        private Font new_vfo_small_font = new Font(new_vfo_small_font_name, new_vfo_small_font_size);
        public Font NewVFOSmallFont
        {
            get { return new_vfo_small_font; }
            set
            {
                new_vfo_small_font = value;
                txtVFOBnew.Font = new_vfo_small_font;
                txtLOSCnew.Font = new_vfo_small_font;
                GetLOSCCharWidth();
                Graphics g = txtVFOBnew.CreateGraphics();
                panelVFOBnewHover.Width = txtVFOBnew.Width;
                panelLOSCnewHover.Width = txtLOSCnew.Width;
                System.Drawing.Point hover_position = new System.Drawing.Point();
                hover_position.X = txtVFOBnew.Location.X;
                hover_position.Y = txtVFOBnew.Location.Y + txtVFOBnew.Height - 1;
                panelVFOBnewHover.Location = hover_position;
                hover_position.X = txtLOSCnew.Location.X;
                hover_position.Y = txtLOSCnew.Location.Y + txtLOSCnew.Height - 1;
                panelLOSCnewHover.Location = hover_position;
                g.Dispose();

            }
        }

        public static string new_vfo_band_font_name = "Verdana";
        public static float new_vfo_band_font_size = 12;
        private Font new_vfo_band_font = new Font(new_vfo_band_font_name, new_vfo_band_font_size);
        public Font NewVFOBandFont
        {
            get { return new_vfo_band_font; }
            set
            {
                new_vfo_band_font = value;
                txtNewVFOBand.Font = new_vfo_band_font;

            }
        }

        private Color console_color = Color.FromArgb(255, 236, 233, 216);  //for WinXP classic
        public Color ConsoleColor
        {
            get { return console_color; }
            set
            {
                console_color = value;
                this.BackColor = value;
            }
        }

        private Color skins_button_txt_color = Color.Black;
        public Color SkinsButtonTxtColor
        {
            get { return skins_button_txt_color; }
            set
            {
                skins_button_txt_color = value;
                CheckTxtButtonColor();
            }
        }

        private int pan_main_rx = 50;
        public int PanMainRX
        {
            get { return pan_main_rx; }
            set
            {
                if (value > ptbPanMainRX.Minimum && value < ptbPanMainRX.Maximum)
                    pan_main_rx = value;
            }
        }

        private int pan_sub_rx = 50;
        public int PanSubRX
        {
            get { return pan_sub_rx; }
            set
            {
                if (value > ptbPanSubRX.Minimum && value < ptbPanSubRX.Maximum)
                    pan_sub_rx = value;
            }
        }

        private bool g59_PA10_present = false;
        public bool G59_PA10_present
        {
            get { return g59_PA10_present; }
            set
            {
                g59_PA10_present = value;

                if (current_model == Model.GENESIS_G59USB)
                {
                    if (value)
                        g59.WriteToDevice(21, 1);
                    else
                        g59.WriteToDevice(21, 0);
                }
                if (current_model == Model.GENESIS_G59NET)
                {
                    if (value)
                        net_device.WriteToDevice(21, 1);
                    else
                        net_device.WriteToDevice(21, 0);
                }
            }
        }

        private bool genesis_ext_PA_present = false;
        public bool Genesis_EXT_PA_present
        {
            get { return genesis_ext_PA_present; }
            set
            {
                genesis_ext_PA_present = value;

                if (value)
                {
                    if (chkMOX.Checked)
                    {
                        switch (current_model)
                        {
                            case Model.GENESIS_G59USB:
                                g59.WriteToDevice(30, 1);
                                break;
                            case Model.GENESIS_G11:
                                g11.WriteToDevice(30, 1);
                                break;
                            case Model.GENESIS_G59NET:
                                net_device.WriteToDevice(30, 1);
                                break;
                        }
                    }
                    else
                    {
                        switch (current_model)
                        {
                            case Model.GENESIS_G59USB:
                                g59.WriteToDevice(30, 0);
                                break;
                            case Model.GENESIS_G11:
                                g11.WriteToDevice(30, 0);
                                break;
                            case Model.GENESIS_G59NET:
                                net_device.WriteToDevice(30, 0);
                                break;
                        }
                    }
                }
            }
        }

        public bool G59CWIambic
        {
            get { return chkCWIambic.Checked; }
            set
            {
                chkCWIambic.Enabled = value;
                chkCWIambic.Checked = false;
            }
        }

        private bool vfo_sinc = false;
        private bool VFO_SINC
        {
            get { return vfo_sinc; }
            set { vfo_sinc = value; }
        }


        private int si570_address = 0x55;
        public int si570_i2c_address
        {
            get { return si570_address; }

            set
            {
                if (value > 0 && value < 255)
                {
                    si570_address = value;
                    g59.si570_i2c_address = value;
                    g11.si570_i2c_address = value;
                    g6.si570_i2c_address = value;
                    net_device.si570_i2c_address = value;
                }
            }
        }

        private int si570_divider = 4;
        public int si570_div
        {
            get { return si570_divider; }

            set
            {
                si570_divider = value;
                g59.HSDiv = value;
                g11.HSDiv = value;
                g6.HSDiv = value;
                net_device.si570_div = value;
            }
        }

        private double si570_xtal1 = 114285000.0;
        public double si570_fxtal1
        {
            get { return si570_xtal1; }

            set { si570_xtal1 = value; }
        }

        private double si570_xtal2 = 114285000.0;
        public double si570_fxtal2
        {
            get { return si570_xtal2; }

            set { si570_xtal2 = value; }
        }

        private double si570_xtal3 = 114285000.0;
        public double si570_fxtal3
        {
            get { return si570_xtal3; }

            set { si570_xtal3 = value; }
        }

        public double Si570_FDCOmin
        {
            set
            {
                g59.FDCOmin = value;
                g11.FDCOmin = value;
                g6.FDCOmin = value;
                net_device.FDCOmin = value;
            }
        }

        public double Si570_FDCOmax
        {
            set
            {
                g59.FDCOmax = value;
                g11.FDCOmax = value;
                g6.FDCOmax = value;
                net_device.FDCOmax = value;
            }
        }

        private int memory_number = 1;
        public int MemoryNumber
        {
            get { return memory_number; }

            set
            {
                memory_number = value;
                lblMemoryNumber.Text = memory_number.ToString();
            }
        }

        private bool usb_si570_enable = false;
        public bool UsbSi570Enable
        {
            get { return usb_si570_enable; }

            set { usb_si570_enable = value; }
        }

        private bool skins_enabled = false;
        public bool SkinsEnabled
        {
            get { return skins_enabled; }
            set
            {
                FilterUpdate();
                CurrentDisplayMode = current_display_mode;  // force refresh

                if (!value)
                {
                    chkPlayWav.Text = "PLAY";
                    chkRecordWav.Text = "REC";

                    if (PowerOn)
                        chkPower.Text = "On";
                    else
                        chkPower.Text = "Standby";
                }
                else
                {
                    chkPower.Text = "";
                    chkPlayWav.Text = "";
                    chkRecordWav.Text = "";
                }

                skins_enabled = value;
            }
        }

        private bool g59_callback_enabled = false;
        public bool G59CallBAckEnabled
        {
            get { return g59_callback_enabled; }

            set { g59_callback_enabled = value; }
        }

        private bool g11_callback_enabled = false;
        public bool G11CallBAckEnabled
        {
            get { return g11_callback_enabled; }

            set { g11_callback_enabled = value; }
        }

        #endregion

        public DisplayMode CAT_CurrentDisplayMode
        {
            set
            {
                switch (value)
                {
                    case DisplayMode.PANASCOPE:
                        comboDisplayMode.Text = "Panascope";
                        break;
                    case DisplayMode.WATERFALL:
                        comboDisplayMode.Text = "Waterfall";
                        break;
                    case DisplayMode.PANAFALL:
                        comboDisplayMode.Text = "Panafall";
                        break;
                    case DisplayMode.PANAFALL_INV:
                        comboDisplayMode.Text = "Panafall_inv";
                        break;
                    case DisplayMode.PANADAPTER:
                        comboDisplayMode.Text = "Panadapter";
                        break;
                    case DisplayMode.PHASE:
                        comboDisplayMode.Text = "Phase";
                        break;
                    case DisplayMode.PHASE2:
                        comboDisplayMode.Text = "Phase2";
                        break;
                    case DisplayMode.SCOPE:
                        comboDisplayMode.Text = "Scope";
                        break;
                    case DisplayMode.SPECTRUM:
                        comboDisplayMode.Text = "Spectrum";
                        break;
                    case DisplayMode.HISTOGRAM:
                        comboDisplayMode.Text = "Histogram";
                        break;
                    default:
                        comboDisplayMode.Text = "Off";
                        break;
                }

            }
        }

        private DisplayMode current_display_mode = DisplayMode.PANAFALL;
        public DisplayMode CurrentDisplayMode    // changes yt7pwr
        {
            get { return current_display_mode; }
            set
            {
                if (PowerOn)
                    pause_DisplayThread = true;

                if ((current_display_mode == DisplayMode.PANAFALL && value == DisplayMode.PANASCOPE) ||
                    (current_display_mode == DisplayMode.PANASCOPE && value == DisplayMode.PANAFALL))
                {
                    current_display_mode = value;
                    Display_GDI.CurrentDisplayMode = value;
#if(DirectX)
                    Display_DirectX.CurrentDisplayMode = value;
#endif
                }
                else
                {
                    current_display_mode = value;
                    Display_GDI.CurrentDisplayMode = value;
#if(DirectX)
                    Display_DirectX.CurrentDisplayMode = value;

                    if (current_display_engine == DisplayEngine.DIRECT_X)
                    {
                        if (draw_display_thread != null)
                            draw_display_thread.Abort();

                        NewVFOSignalGauge.DirectXRelease();
                        Display_DirectX.DirectXRelease();

                        foreach (var item in ObjectTable.Objects)
                            item.Dispose();

                        NewVFOSignalGauge.DirectX_Init(NewVFO_background_image);
                        Display_DirectX.PanadapterTarget = picDisplay;
                        Display_DirectX.WaterfallTarget = picWaterfall;
                        Display_DirectX.DirectXInit();

                    }

                    if (PowerOn)
                    {
                        Thread.Sleep(100);
                        draw_display_thread = new Thread(new ThreadStart(RunDisplay_DirectX));
                        draw_display_thread.Name = "Draw Display Thread";
                        draw_display_thread.Priority = ThreadPriority.Normal;
                        draw_display_thread.IsBackground = true;
                        draw_display_thread.Start();
                    }
#endif
                }

                pause_DisplayThread = false;
            }
        }


        private ColorSheme color_palette = ColorSheme.original;
        public ColorSheme color_sheme
        {
            get { return color_palette; }

            set
            {
                Display_GDI.ColorSheme = value;
#if DirectX
                Display_DirectX.ColorSheme = value;
#endif
                color_palette = value;
            }
        }

        public SIOListenerII Siolisten
        {
            get { return siolisten; }
            set
            {
                siolisten = value;
                Keyer.Siolisten = value;
            }
        }

        public string TXProfile
        {
            get
            {
                if (comboTXProfile != null) return comboTXProfile.Text;
                else return "";
            }
            set { if (comboTXProfile != null) comboTXProfile.Text = value; }
        }



        public string VACSampleRate
        {
            get
            {
                if (comboVACSampleRate != null) return comboVACSampleRate.Text;
                else return "";
            }
            set
            {
                if (comboVACSampleRate != null) comboVACSampleRate.Text = value;
            }
        }

        public bool CWIambic
        {
            get
            {
                if (chkCWIambic != null) return chkCWIambic.Checked;
                else return false;
            }

            set
            {
                chkCWIambic.Checked = value;
                DttSP.SetKeyerIambic(CWIambic);
            }
        }

        private MultiMeterDisplayMode current_meter_display_mode = MultiMeterDisplayMode.Edge;
        public MultiMeterDisplayMode CurrentMeterDisplayMode
        {
            get { return current_meter_display_mode; }
            set
            {
                current_meter_display_mode = value;

                switch (current_meter_display_mode)
                {
                    case MultiMeterDisplayMode.Edge:
                        picSmallAGauge.Visible = false;
                        picMultimeterAnalog.Visible = false;
                        picMultiMeterDigital.Visible = true;
                        txtMultiText.Visible = true;
                        comboMeterRXMode.Visible = true;
                        comboMeterTXMode.Visible = true;
                        lblMultiSMeter.Visible = true;

                        switch (value)
                        {
                            case MultiMeterDisplayMode.Edge:
                                break;
                            default:
                                picMultiMeterDigital.Height -= lblMultiSMeter.ClientSize.Height;
                                picMultiMeterDigital.BackColor = meter_background_color;
                                break;
                        }
                        break;
                    case MultiMeterDisplayMode.Analog:
                        {
                            picSmallAGauge.Visible = true;
                            picMultimeterAnalog.Visible = false;
                            picMultiMeterDigital.Visible = false;
                            txtMultiText.Visible = false;
                            comboMeterRXMode.Visible = false;
                            comboMeterTXMode.Visible = false;
                            lblMultiSMeter.Visible = false;
                        }
                        break;
                    default:
                        picSmallAGauge.Visible = false;
                        picMultimeterAnalog.Visible = false;
                        picMultiMeterDigital.Visible = true;
                        txtMultiText.Visible = true;
                        comboMeterRXMode.Visible = true;
                        comboMeterTXMode.Visible = true;
                        lblMultiSMeter.Visible = true;
                        switch (value)
                        {
                            case MultiMeterDisplayMode.Edge:
                                picMultiMeterDigital.Height += lblMultiSMeter.ClientSize.Height;
                                picMultiMeterDigital.BackColor = edge_meter_background_color;
                                break;
                        }
                        break;
                }

                Console_Resize(this, EventArgs.Empty);
                picMultiMeterDigital.Invalidate();
            }
        }

        private Color vfo_background_color = Color.Black;
        public Color VFOBackgroundColor
        {
            get { return vfo_background_color; }
            set
            {
                vfo_background_color = value;
                txtVFOAFreq.BackColor = value;
                txtVFOAMSD.BackColor = value;
                txtVFOALSD.BackColor = value;
                txtVFOBFreq.BackColor = value;
                txtVFOBMSD.BackColor = value;
                txtVFOBLSD.BackColor = value;
                panelVFOAHover.BackColor = value;
                panelVFOBHover.BackColor = value;
            }
        }

        private Color meter_digital_text_color = Color.Yellow;
        public Color MeterDigitalTextColor
        {
            get { return meter_digital_text_color; }
            set
            {
                meter_digital_text_color = value;
                txtMultiText.ForeColor = value;
            }
        }

        private Color meter_digital_background_color = Color.Black;
        public Color MeterDigitalBackgroundColor
        {
            get { return meter_digital_background_color; }
            set
            {
                meter_digital_background_color = value;
                txtMultiText.BackColor = value;
            }
        }

        private Color band_background_color = Color.Black;
        public Color BandBackgroundColor
        {
            get { return band_background_color; }
            set
            {
                band_background_color = value;
                txtVFOABand.BackColor = value;
                txtVFOBBand.BackColor = value;
            }
        }

        private Color edge_meter_background_color = Color.Black;
        public Color EdgeMeterBackgroundColor
        {
            get { return edge_meter_background_color; }
            set
            {
                edge_meter_background_color = value;
                if (current_meter_display_mode == MultiMeterDisplayMode.Edge)
                {
                    picMultiMeterDigital.BackColor = value;
                    picMultiMeterDigital.Invalidate();
                }
            }
        }

        private Color edge_low_color = Color.White;
        public Color EdgeLowColor
        {
            get { return edge_low_color; }
            set
            {
                edge_low_color = value;
                if (current_meter_display_mode == MultiMeterDisplayMode.Edge)
                    picMultiMeterDigital.Invalidate();
            }
        }

        private Color edge_high_color = Color.Red;
        public Color EdgeHighColor
        {
            get { return edge_high_color; }
            set
            {
                edge_high_color = value;
                if (current_meter_display_mode == MultiMeterDisplayMode.Edge)
                    picMultiMeterDigital.Invalidate();
            }
        }

        private Color edge_avg_color = Color.Yellow;
        public Color EdgeAVGColor
        {
            get { return edge_avg_color; }
            set
            {
                edge_avg_color = value;
                if (current_meter_display_mode == MultiMeterDisplayMode.Edge)
                    picMultiMeterDigital.Invalidate();
            }
        }

        private Color meter_background_color = Color.Black;
        public Color MeterBackgroundColor
        {
            get { return meter_background_color; }
            set
            {
                meter_background_color = value;
                if (current_meter_display_mode == MultiMeterDisplayMode.Original)
                {
                    picMultiMeterDigital.BackColor = value;
                    picMultiMeterDigital.Invalidate();
                }
            }
        }

        private Color peak_background_color = Color.Black;
        public Color PeakBackgroundColor
        {
            get { return peak_background_color; }
            set
            {
                peak_background_color = value;
                txtDisplayCursorOffset.BackColor = value;
                txtDisplayCursorPower.BackColor = value;
                txtDisplayCursorFreq.BackColor = value;
                txtDisplayPeakOffset.BackColor = value;
                txtDisplayPeakPower.BackColor = value;
                txtDisplayPeakFreq.BackColor = value;
            }
        }

        private bool small_lsd = true;
        public bool SmallLSD
        {
            get { return small_lsd; }
            set
            {
                small_lsd = value;
                txtVFOALSD.Visible = value;
                txtVFOAMSD.Visible = value;
                txtVFOBLSD.Visible = value;
                txtVFOBMSD.Visible = value;
                txtLOSCLSD.Visible = value;
                txtLOSCMSD.Visible = value;
            }
        }

        private Color small_vfo_color = Color.OrangeRed;
        public Color SmallVFOColor
        {
            get { return small_vfo_color; }
            set
            {
                small_vfo_color = value;

                if (small_lsd && PowerOn)
                {
                    txtVFOALSD.ForeColor = small_vfo_color;
                    if (chkVFOSplit.Checked)
                        txtVFOBLSD.ForeColor = small_vfo_color;
                }
            }
        }

        private int default_low_cut_subRX = 150;
        public int DefaultLowCutSubRX
        {
            get { return default_low_cut_subRX; }
            set
            {
                for (DSPMode m = DSPMode.FIRST + 1; m < DSPMode.LAST; m++)
                {
                    for (Filter f = Filter.FIRST + 1; f < Filter.LAST; f++)
                    {
                        int low = filter_presets[(int)m].GetLow(f);
                        int high = filter_presets[(int)m].GetHigh(f);

                        switch (m)
                        {
                            case DSPMode.USB:
                            case DSPMode.DIGU:
                                if (low == default_low_cut_subRX)
                                    filter_presets[(int)m].SetLow(f, value);
                                break;
                            case DSPMode.LSB:
                            case DSPMode.DIGL:
                                if (high == -default_low_cut)
                                    filter_presets[(int)m].SetHigh(f, -value);
                                break;
                        }
                    }
                }
                default_low_cut_subRX = value;
                CurrentFilterSubRX = current_filter_subRX;

                if (EthCATIsActive)
                    CAT_client_socket.ClientServerSync("ZZFJ;");        // sync with server
            }
        }

        private int default_low_cut = 150;
        public int DefaultLowCut
        {
            get { return default_low_cut; }
            set
            {
                for (DSPMode m = DSPMode.FIRST + 1; m < DSPMode.LAST; m++)
                {
                    for (Filter f = Filter.FIRST + 1; f < Filter.LAST; f++)
                    {
                        int low = filter_presets[(int)m].GetLow(f);
                        int high = filter_presets[(int)m].GetHigh(f);

                        switch (m)
                        {
                            case DSPMode.USB:
                            case DSPMode.DIGU:
                                if (low == default_low_cut)
                                    filter_presets[(int)m].SetLow(f, value);
                                break;
                            case DSPMode.LSB:
                            case DSPMode.DIGL:
                                if (high == -default_low_cut)
                                    filter_presets[(int)m].SetHigh(f, -value);
                                break;
                        }
                    }
                }
                default_low_cut = value;
                CurrentFilter = current_filter;
            }
        }

        public int COMPVal
        {
            get
            {
                if (udCOMP != null) return (int)udCOMP.Value;
                else return -1;
            }
            set
            {
                if (udCOMP != null) udCOMP.Value = value;
            }
        }

        public int CPDRVal
        {
            get
            {
                if (udCPDR != null) return (int)udCPDR.Value;
                else return -1;
            }
            set
            {
                if (udCPDR != null) udCPDR.Value = value;
            }
        }

        public int NoiseGate
        {
            get
            {
                if (ptbNoiseGate != null) return ptbNoiseGate.Value;
                else return -1;
            }
            set
            {
                if (ptbNoiseGate != null)
                {
                    if (value > ptbNoiseGate.Maximum) value = ptbNoiseGate.Maximum;
                    ptbNoiseGate.Value = value;
                }
            }
        }

        public int VOXSens
        {
            get
            {
                //if (ptbVOX != null) return ptbVOX.Value;
                //else return -1;
                return (int)udVOX.Value;
            }
            set
            {
                udVOX.Value = value;
                //if (ptbVOX != null) ptbVOX.Value = value;
            }
        }

        public bool NoiseGateEnabled
        {
            get
            {
                if (chkNoiseGate != null) return chkNoiseGate.Checked;
                else return false;
            }
            set
            {
                if (chkNoiseGate != null) chkNoiseGate.Checked = value;
            }
        }

        public int VACRXGain
        {
            get
            {
                if (udVACRXGain != null) return (int)udVACRXGain.Value;
                else return -99;
            }
            set
            {
                if (udVACRXGain != null) udVACRXGain.Value = value;
            }
        }

        public int VACTXGain
        {
            get
            {
                if (udVACTXGain != null) return (int)udVACTXGain.Value;
                else return -99;
            }
            set
            {
                if (udVACTXGain != null) udVACTXGain.Value = value;
            }
        }

        public bool BreakInEnabled
        {
            get
            {
                if (chkBreakIn != null) return chkBreakIn.Checked;
                else return false;
            }
            set
            {
                if (chkBreakIn != null) chkBreakIn.Checked = value;
            }
        }

        public bool VOXEnable
        {
            get
            {
                if (chkVOX != null) return chkVOX.Checked;
                else return false;
            }
            set
            {
                if (chkVOX != null) chkVOX.Checked = value;
            }
        }

        public int RF
        {
            get
            {
                if (ptbRF != null) return (int)ptbRF.Value;
                else return -1;
            }
            set
            {
                if (ptbRF != null)
                    ptbRF.Value = value;

                RF_ValueChanged();
            }
        }

        private bool enable_kb_shortcuts = true;
        public bool EnableKBShortcuts
        {
            get { return enable_kb_shortcuts; }
            set { enable_kb_shortcuts = value; }
        }

        private bool save_filter_changes = false;
        public bool SaveFilterChanges
        {
            get { return save_filter_changes; }
            set { save_filter_changes = value; }
        }

        private int max_filter_shift_subRX = 20000;
        public int MaxFilterShiftSubRX
        {
            get { return max_filter_shift_subRX; }
            set
            {
                max_filter_shift_subRX = value;
                UpdateFiltersSubRX(DttSP.RXFilterLowCutSubRX, DttSP.RXFilterHighCutSubRX);
            }
        }

        private int max_filter_shift = 20000;
        public int MaxFilterShift
        {
            get { return max_filter_shift; }
            set
            {
                max_filter_shift = value;
                UpdateFilters(DttSP.RXFilterLowCut, DttSP.RXFilterHighCut);
            }
        }

        private int max_filter_width_subRX = 125000;
        public int MaxFilterWidthSubRX
        {
            get { return max_filter_width_subRX; }
            set
            {
                max_filter_width_subRX = value;
                UpdateFiltersSubRX(DttSP.RXFilterLowCutSubRX, DttSP.RXFilterHighCutSubRX);
            }
        }

        private int max_filter_width = 125000;
        public int MaxFilterWidth
        {
            get { return max_filter_width; }
            set
            {
                max_filter_width = value;
                UpdateFilters(DttSP.RXFilterLowCut, DttSP.RXFilterHighCut);
            }
        }

        private bool mic_boost = false;
        public bool MicBoost
        {
            get { return mic_boost; }
            set
            {
                mic_boost = value;
                udMIC_ValueChanged(this, EventArgs.Empty);
            }
        }

        private bool always_on_top = false; // yt7pwr
        public bool AlwaysOnTop
        {
            get { return always_on_top; }
            set
            {
                always_on_top = value;

                if (value)
                {
                    Win32.SetWindowPos(this.Handle.ToInt32(),
                        -1, this.Left, this.Top, this.Width, this.Height, 0);
                }
                else
                {
                    Win32.SetWindowPos(this.Handle.ToInt32(),
                        -2, this.Left, this.Top, this.Width, this.Height, 0);
                }
            }
        }

        private bool quick_qsy = true;
        public bool QuickQSY
        {
            get { return quick_qsy; }
            set { quick_qsy = value; }
        }

        public bool HideTuneStep
        {
            get { return txtWheelTune.Visible; }
            set
            {
                if (SetupForm != null)
                    txtWheelTune.Visible = value;
            }
        }

        public float multimeter_avg_mult_old = 0.75f;  //1 - (float)1 / 10;
        public float multimeter_avg_mult_new = 0.25f;   //(float)1 / 10;
        private int multimeter_avg_num_blocks = 10;
        public int MultiMeterAvgBlocks
        {
            get { return multimeter_avg_num_blocks; }
            set
            {
                multimeter_avg_num_blocks = value;
                multimeter_avg_mult_old = 1 - (float)1 / multimeter_avg_num_blocks;
                multimeter_avg_mult_new = (float)1 / multimeter_avg_num_blocks;
            }
        }

        private bool vac_auto_enable = false;
        public bool VACAutoEnable
        {
            get { return vac_auto_enable; }
            set
            {
                vac_auto_enable = value;
                if (SetupForm == null) return;
                if (vac_auto_enable)
                {
                    switch (current_dsp_mode)
                    {
                        case DSPMode.DIGL:
                        case DSPMode.DIGU:
                            SetupForm.VACEnable = true;
                            break;
                        default:
                            SetupForm.VACEnable = false;
                            break;
                    }
                }
                else SetupForm.VACEnable = false;
            }
        }

        private float display_cal_offset;					// display calibration offset per volume setting in dB
        public float DisplayCalOffset
        {
            get { return display_cal_offset; }
            set
            {
                display_cal_offset = value;
                Display_GDI.DisplayCalOffset = value;
#if(DirectX)
                Display_DirectX.DisplayCalOffset = value;
#endif
            }
        }

        private int display_cursor_x;						// x-coord of the cursor when over the display
        public int DisplayCursorX
        {
            get { return display_cursor_x; }
            set
            {
                display_cursor_x = value;
                Display_GDI.DisplayCursorX = value;
#if(DirectX)
                Display_DirectX.DisplayCursorX = value;
#endif
            }
        }

        private int display_cursor_y;						// y-coord of the cursor when over the display
        public int DisplayCursorY
        {
            get { return display_cursor_y; }
            set
            {
                display_cursor_y = value;
                Display_GDI.DisplayCursorY = value;
#if(DirectX)
                Display_DirectX.DisplayCursorY = value;
#endif
            }
        }

        private ClickTuneMode current_click_tune_mode = ClickTuneMode.Off;
        public ClickTuneMode CurrentClickTuneMode
        {
            get { return current_click_tune_mode; }
            set
            {
                current_click_tune_mode = value;
                Display_GDI.CurrentClickTuneMode = value;
#if(DirectX)
                Display_DirectX.CurrentClickTuneMode = value;
#endif
            }
        }

        private DisplayEngine current_display_engine = DisplayEngine.GDI_PLUS;
        public DisplayEngine CurrentDisplayEngine
        {
            get { return current_display_engine; }
            set
            {
                bool power = PowerOn;
                current_display_engine = value;

                if (PowerOn)
                {
                    pause_DisplayThread = true;
                    chkPower.Checked = false;
                    Thread.Sleep(1000);
                }

                try
                {
                    switch (value)
                    {
                        case DisplayEngine.GDI_PLUS:
                            {
                                pause_DisplayThread = true;
                                pause_multimeter_thread = true;
                                AnalogSignalGauge.displayEngine = DisplayEngine.GDI_PLUS;
#if(DirectX)
                                AnalogSignalGauge.DirectXRelease();
                                NewVFOSignalGauge.DirectXRelease();
                                Display_DirectX.DirectXRelease();

                                foreach (var item in ObjectTable.Objects)
                                    item.Dispose();
#endif
                                Display_GDI.Close();
                                Thread.Sleep(100);
                                Display_GDI.Init();
                                pause_DisplayThread = false;
                                pause_multimeter_thread = false;
                            }
                            break;
#if(DirectX)
                        case DisplayEngine.DIRECT_X:
                            {
                                AnalogSignalGauge.displayEngine = DisplayEngine.DIRECT_X;

                                if (!booting)
                                {
                                    pause_DisplayThread = true;
                                    pause_multimeter_thread = true;
                                    AnalogSignalGauge.displayEngine = DisplayEngine.DIRECT_X;
                                    NewVFOSignalGauge.DirectXRelease();
                                    Display_DirectX.DirectXRelease();

                                    foreach (var item in ObjectTable.Objects)
                                        item.Dispose();

                                    NewVFOSignalGauge.DirectX_Init(NewVFO_background_image);
                                    Display_DirectX.PanadapterTarget = picDisplay;
                                    Display_DirectX.WaterfallTarget = picWaterfall;
                                    Display_DirectX.DirectXInit();
                                    NewVFOSignalGauge.RenderGauge();
                                    if (current_display_mode != DisplayMode.OFF)
                                        Display_DirectX.RenderDirectX();
                                    pause_DisplayThread = false;
                                    pause_multimeter_thread = false;
                                }
                            }
                            break;
#endif
                    }

                    pause_DisplayThread = false;
                }
                catch (Exception ex)
                {
                    Debug.Write(ex.ToString());
                    pause_DisplayThread = false;
                }
            }
        }

        private int digu_click_tune_offset = 1200;
        public int DIGUClickTuneOffset
        {
            get { return digu_click_tune_offset; }
            set { digu_click_tune_offset = value; }
        }

        private int digl_click_tune_offset = 2210;
        public int DIGLClickTuneOffset
        {
            get { return digl_click_tune_offset; }
            set { digl_click_tune_offset = value; }
        }

        private double vox_hang_time = 350.0;
        public double VOXHangTime
        {
            get { return vox_hang_time; }
            set { vox_hang_time = value; }
        }

        private bool vox_active = false;
        public bool VOXActive
        {
            get { return vox_active; }
            set { vox_active = value; }
        }

        private SoundCard current_soundcard = SoundCard.UNSUPPORTED_CARD;
        public SoundCard CurrentSoundCard
        {
            get { return current_soundcard; }
            set
            {
                current_soundcard = value;
                Audio.CurSoundCard = value;
                if (SetupForm != null && SetupForm.CurrentSoundCard != current_soundcard)
                    SetupForm.CurrentSoundCard = current_soundcard;
            }
        }

        private Model current_model = Model.GENESIS_G59USB; // changes yt7pwr
        public Model CurrentModel
        {
            get { return current_model; }
            set
            {
                double losc_freq = double.Parse(txtLOSCFreq.Text);
                Model saved_model = current_model;
                current_model = value;
                Display_GDI.CurrentModel = value;
#if(DirectX)
                Display_DirectX.CurrentModel = value;
#endif

                switch (current_model)
                {
                    case Model.GENESIS_G6:
                        MinFreq = 0.1;
                        MaxFreq = 450.0;
                        break;
                    case Model.GENESIS_G59USB:
                        MinFreq = 1.0;
                        MaxFreq = 52.0;
                        break;
                    case Model.GENESIS_G3020:
                        MinFreq = 10.100;
                        MaxFreq = 10.150;
                        break;
                    case Model.GENESIS_G40:
                        MinFreq = 7.0;
                        MaxFreq = 7.200;
                        break;
                    case Model.GENESIS_G137:
                        MinFreq = 0.01;
                        MaxFreq = 0.5;
                        break;
                    case Model.GENESIS_G500:
                        MinFreq = 0.4;
                        MaxFreq = 0.6;
                        break;
                    case Model.GENESIS_G80:
                        MinFreq = 3.5;
                        MaxFreq = 3.85;
                        break;
                    case Model.GENESIS_G160:
                        MinFreq = 1.8;
                        MaxFreq = 2.0;
                        break;
                    case Model.GENESIS_G59NET:
                        MinFreq = 1.0;
                        MaxFreq = 52.0;
                        break;
                    case Model.QRP2000:
                        MinFreq = 1.0;
                        MaxFreq = 52.0;
                        break;
                    case Model.GENESIS_G11:
                        MinFreq = 0.1;
                        MaxFreq = 52.0;
                        break;
                    default:
                        MinFreq = 1.0;
                        MaxFreq = 450.0;
                        break;
                }

                if (SetupForm != null && saved_model != current_model)
                {
                    VFOAFreq = vfoAFreq;
                    VFOBFreq = vfoBFreq;
                    LOSCFreq = loscFreq;
                }
            }
        }

        private DateTimeMode current_datetime_mode = DateTimeMode.LOCAL; // changes yt7pwr
        public DateTimeMode CurrentDateTimeMode
        {
            get { return current_datetime_mode; }
            set
            {
                current_datetime_mode = value;
                if (current_datetime_mode == DateTimeMode.OFF)
                {
                    timer_clock.Enabled = false;
                }
                else
                {
                    if (!timer_clock.Enabled)
                        timer_clock.Enabled = true;
                }
            }
        }

        public bool cat_losc = false;
        public static bool first = false; // yt7pwr
        private double loscFreq = 10.0;
        public double LOSCFreq
        {
            get
            {
                try
                {
                    return loscFreq;
                }

                catch (Exception)
                {
                    return 0;
                }
            }
            set
            {
                try
                {
                    if (!booting)
                    {
                        switch (current_model)
                        {
                            case Model.GENESIS_G137:
                                {
                                    if (value > 0.01 && value < 0.3)
                                        loscFreq = value;
                                    else
                                        loscFreq = saved_losc_freq;
                                }
                                break;
                            case Model.GENESIS_G500:
                                {
                                    if (value > 0.4 && value < 0.6)
                                        loscFreq = value;
                                    else
                                        loscFreq = saved_losc_freq;
                                }
                                break;
                            default:
                                {
                                    if (value > 0.1 && value < 500000.0)
                                        loscFreq = value;
                                    else
                                        loscFreq = saved_losc_freq;
                                }
                                break;
                        }

                        saved_losc_freq = (float)loscFreq;

                        Display_GDI.LOSC = (long)(loscFreq * 1e6);
#if(DirectX)
                        Display_DirectX.LOSC = (long)(loscFreq * 1e6);
                        Display_DirectX.RefreshGrid = true;

                        if (debug_enabled && debug != null && debug.Visible)
                        {
                            debug.rtbDebugMsg.AppendText("Refresh LOSC freq: " + Math.Round(loscFreq, 6).ToString() + "\n");
                            SendMessage(debug.rtbDebugMsg.Handle, WM_VSCROLL, SB_BOTTOM, 0);
                        }

#endif

                        txtLOSCFreq.Text = loscFreq.ToString("f6");
                        txtLOSCFreq.Invalidate();
                        txtLOSCMSD.Text = loscFreq.ToString("f6");
                        txtLOSCMSD.Invalidate();
                        txtLOSCnew.Text = loscFreq.ToString("f6");
                        txtLOSCnew.Invalidate();

                            MinFreq = Math.Round(loscFreq - DttSP.SampleRate / 2 * 1e-6, 6);
                            MaxFreq = Math.Round(loscFreq + DttSP.SampleRate / 2 * 1e-6, 6);

                        first = false;

                        if (current_model == Model.GENESIS_G59USB ||
                            current_model == Model.GENESIS_G59NET)
                        {
                            if (loscFreq < 17.0)
                                g59.si570_fxtal = si570_fxtal1;
                            else if (loscFreq < 30.0)
                                g59.si570_fxtal = si570_fxtal2;
                            else
                                g59.si570_fxtal = si570_fxtal3;
                        }
                        else if (current_model == Model.GENESIS_G11)
                        {
                            if (loscFreq < 17.0)
                                g11.si570_fxtal = si570_fxtal1;
                            else if (loscFreq < 30.0)
                                g11.si570_fxtal = si570_fxtal2;
                            else
                                g11.si570_fxtal = si570_fxtal3;
                        }
                        else if (current_model == Model.GENESIS_G6)
                        {
                            if (loscFreq < 17.0)
                                g6.si570_fxtal = si570_fxtal1;
                            else if (loscFreq < 30.0)
                                g6.si570_fxtal = si570_fxtal2;
                            else
                                g6.si570_fxtal = si570_fxtal3;
                        }
                        else if (current_model == Model.RTL_SDR)
                        {

                        }

                        double losc_freq = loscFreq;

                        if (current_model == Model.GENESIS_G11)
                        {
                            if (current_band == Band.B2190M)
                            {
                                if (value > 0.001 && value < 0.3)
                                    losc_freq = 16 * value;
                                else
                                    losc_freq = saved_losc_freq;
                            }
                            else if (current_band == Band.B600M)
                            {
                                if (value > 0.4 && value < 0.6)
                                    losc_freq = 8 * value;
                                else
                                    losc_freq = saved_losc_freq;
                            }
                        }

                        if (usb_si570_enable)
                            SI570.Set_SI570_osc((long)(losc_freq * 1e6));
                        else
                        {
                            if (current_model == Model.GENESIS_G59USB)
                            {
                                if (IsXTRV(losc_freq))
                                {
                                    switch (current_band)
                                    {
                                        case Band.B2M:
                                            losc_freq *= 1e6;
                                            losc_freq -= g59_2m_Xtrv_losc_freq;
                                            g59.Set_frequency((long)Math.Round(losc_freq, 6), false);
                                            break;
                                        case Band.BX1:
                                            losc_freq -= xBand[1].losc;
                                            break;
                                        case Band.BX2:
                                            losc_freq -= xBand[2].losc;
                                            break;
                                        case Band.BX3:
                                            losc_freq -= xBand[3].losc;
                                            break;
                                        case Band.BX4:
                                            losc_freq -= xBand[4].losc;
                                            break;
                                        case Band.BX5:
                                            losc_freq -= xBand[5].losc;
                                            break;
                                        case Band.BX6:
                                            losc_freq -= xBand[6].losc;
                                            break;
                                        case Band.BX7:
                                            losc_freq -= xBand[7].losc;
                                            break;
                                        case Band.BX8:
                                            losc_freq -= xBand[8].losc;
                                            break;
                                        case Band.BX9:
                                            losc_freq -= xBand[9].losc;
                                            break;
                                        case Band.BX10:
                                            losc_freq -= xBand[10].losc;
                                            break;
                                        case Band.BX11:
                                            losc_freq -= xBand[11].losc;
                                            break;
                                        case Band.BX12:
                                            losc_freq -= xBand[12].losc;
                                            break;
                                    }

                                    g59.Set_frequency((long)(Math.Round(losc_freq * 1e6, 6)), false);
                                }
                                else
                                    g59.Set_frequency((long)(Math.Round(losc_freq * 1e6, 6)), false);
                            }
                            else if (current_model == Model.GENESIS_G11)
                            {
                                if (IsXTRV(losc_freq))
                                {
                                    switch (current_band)
                                    {
                                        case Band.B2M:
                                            losc_freq *= 1e6;
                                            losc_freq -= g11_Xtrv_losc_freq;
                                            g11.Set_frequency((long)Math.Round(losc_freq, 6), false);
                                            break;
                                        case Band.BX1:
                                            losc_freq -= xBand[1].losc;
                                            break;
                                        case Band.BX2:
                                            losc_freq -= xBand[2].losc;
                                            break;
                                        case Band.BX3:
                                            losc_freq -= xBand[3].losc;
                                            break;
                                        case Band.BX4:
                                            losc_freq -= xBand[4].losc;
                                            break;
                                        case Band.BX5:
                                            losc_freq -= xBand[5].losc;
                                            break;
                                        case Band.BX6:
                                            losc_freq -= xBand[6].losc;
                                            break;
                                        case Band.BX7:
                                            losc_freq -= xBand[7].losc;
                                            break;
                                        case Band.BX8:
                                            losc_freq -= xBand[8].losc;
                                            break;
                                        case Band.BX9:
                                            losc_freq -= xBand[9].losc;
                                            break;
                                        case Band.BX10:
                                            losc_freq -= xBand[10].losc;
                                            break;
                                        case Band.BX11:
                                            losc_freq -= xBand[11].losc;
                                            break;
                                        case Band.BX12:
                                            losc_freq -= xBand[12].losc;
                                            break;
                                    }

                                    g11.Set_frequency((long)(Math.Round(losc_freq * 1e6, 6)), false);
                                }
                                else
                                    g11.Set_frequency((long)(Math.Round(losc_freq * 1e6,6)), false);
                            }
                            else if (current_model == Model.GENESIS_G59NET)
                            {
                                if (IsXTRV(losc_freq))
                                {
                                    switch (current_band)
                                    {
                                        case Band.B2M:
                                            losc_freq -= g59_2m_Xtrv_losc_freq;
                                            break;
                                        case Band.BX1:
                                            losc_freq -= xBand[1].losc;
                                            break;
                                        case Band.BX2:
                                            losc_freq -= xBand[2].losc;
                                            break;
                                        case Band.BX3:
                                            losc_freq -= xBand[3].losc;
                                            break;
                                        case Band.BX4:
                                            losc_freq -= xBand[4].losc;
                                            break;
                                        case Band.BX5:
                                            losc_freq -= xBand[5].losc;
                                            break;
                                        case Band.BX6:
                                            losc_freq -= xBand[6].losc;
                                            break;
                                        case Band.BX7:
                                            losc_freq -= xBand[7].losc;
                                            break;
                                        case Band.BX8:
                                            losc_freq -= xBand[8].losc;
                                            break;
                                        case Band.BX9:
                                            losc_freq -= xBand[9].losc;
                                            break;
                                        case Band.BX10:
                                            losc_freq -= xBand[10].losc;
                                            break;
                                        case Band.BX11:
                                            losc_freq -= xBand[11].losc;
                                            break;
                                        case Band.BX12:
                                            losc_freq -= xBand[12].losc;
                                            break;
                                    }
                                }

                                net_device.SetLOSC((long)(Math.Round(losc_freq * 1e6,6)), false);
                            }
                            else if (current_model == Model.QRP2000)
                            {
                                losc_freq *= 1e6;

                                if (QRP2000_XTRV_enabled && current_band == Band.B2M)
                                {
                                    losc_freq -= QRP2000_IF_Freq;
                                    Math.Round(losc_freq, 6);
                                    qrp2000.Set_SI570_freq(Math.Round((losc_freq / 1e6) * qrp2000_xtrv_freq_multiplier, 6));
                                }
                                else if (QRP2000_XTRV_enabled)
                                {
                                    switch (current_band)
                                    {
                                        case Band.BX1:
                                            losc_freq -= xBand[1].losc * 1e6;
                                            break;
                                        case Band.BX2:
                                            losc_freq -= xBand[2].losc * 1e6;
                                            break;
                                        case Band.BX3:
                                            losc_freq -= xBand[3].losc * 1e6;
                                            break;
                                        case Band.BX4:
                                            losc_freq -= xBand[4].losc * 1e6;
                                            break;
                                        case Band.BX5:
                                            losc_freq -= xBand[5].losc * 1e6;
                                            break;
                                        case Band.BX6:
                                            losc_freq -= xBand[6].losc * 1e6;
                                            break;
                                        case Band.BX7:
                                            losc_freq -= xBand[7].losc * 1e6;
                                            break;
                                        case Band.BX8:
                                            losc_freq -= xBand[8].losc * 1e6;
                                            break;
                                        case Band.BX9:
                                            losc_freq -= xBand[9].losc * 1e6;
                                            break;
                                        case Band.BX10:
                                            losc_freq -= xBand[10].losc * 1e6;
                                            break;
                                        case Band.BX11:
                                            losc_freq -= xBand[11].losc * 1e6;
                                            break;
                                        case Band.BX12:
                                            losc_freq -= xBand[12].losc * 1e6;
                                            break;
                                    }

                                    Math.Round(losc_freq, 6);
                                    qrp2000.Set_SI570_freq(Math.Round((losc_freq / 1e6) * qrp2000_xtrv_freq_multiplier, 6));
                                }
                                else
                                {
                                    Math.Round(losc_freq, 6);
                                    qrp2000.Set_SI570_freq(Math.Round((losc_freq / 1e6) * qrp2000_freq_multiplier, 6));
                                }
                            }
                            else if (current_model == Model.GENESIS_G6)
                            {
                                if (IsXTRV(losc_freq))
                                {
                                    switch (current_band)
                                    {
                                        case Band.BX1:
                                            losc_freq -= xBand[1].losc;
                                            break;
                                        case Band.BX2:
                                            losc_freq -= xBand[2].losc;
                                            break;
                                        case Band.BX3:
                                            losc_freq -= xBand[3].losc;
                                            break;
                                        case Band.BX4:
                                            losc_freq -= xBand[4].losc;
                                            break;
                                        case Band.BX5:
                                            losc_freq -= xBand[5].losc;
                                            break;
                                        case Band.BX6:
                                            losc_freq -= xBand[6].losc;
                                            break;
                                        case Band.BX7:
                                            losc_freq -= xBand[7].losc;
                                            break;
                                        case Band.BX8:
                                            losc_freq -= xBand[8].losc;
                                            break;
                                        case Band.BX9:
                                            losc_freq -= xBand[9].losc;
                                            break;
                                        case Band.BX10:
                                            losc_freq -= xBand[10].losc;
                                            break;
                                        case Band.BX11:
                                            losc_freq -= xBand[11].losc;
                                            break;
                                        case Band.BX12:
                                            losc_freq -= xBand[12].losc;
                                            break;
                                    }

                                    if (losc_freq <= 2.5)
                                    {
                                        g6.WriteToDevice(31, 1);    // Freq H/L
                                        g6.Set_frequency((long)(Math.Round(8 * losc_freq * 1e6, 6)), false);
                                    }
                                    else
                                    {
                                        g6.WriteToDevice(31, 0);    // Freq H/L
                                        g6.Set_frequency((long)(Math.Round(losc_freq * 1e6, 6)), false);
                                    }
                                }
                                else
                                {
                                    if (losc_freq <= 2.5)
                                    {
                                        g6.WriteToDevice(31, 1);    // Freq H/L
                                        g6.Set_frequency((long)(Math.Round(8 * losc_freq * 1e6, 6)), false);
                                    }
                                    else
                                    {
                                        g6.WriteToDevice(31, 0);    // Freq H/L
                                        g6.Set_frequency((long)(Math.Round(losc_freq * 1e6, 6)), false);
                                    }
                                }
                            }
                            else if (current_model == Model.RTL_SDR)
                            {
                                if (IsXTRV(losc_freq))
                                {
                                    switch (current_band)
                                    {
                                        case Band.BX1:
                                            losc_freq -= xBand[1].losc;
                                            break;
                                        case Band.BX2:
                                            losc_freq -= xBand[2].losc;
                                            break;
                                        case Band.BX3:
                                            losc_freq -= xBand[3].losc;
                                            break;
                                        case Band.BX4:
                                            losc_freq -= xBand[4].losc;
                                            break;
                                        case Band.BX5:
                                            losc_freq -= xBand[5].losc;
                                            break;
                                        case Band.BX6:
                                            losc_freq -= xBand[6].losc;
                                            break;
                                        case Band.BX7:
                                            losc_freq -= xBand[7].losc;
                                            break;
                                        case Band.BX8:
                                            losc_freq -= xBand[8].losc;
                                            break;
                                        case Band.BX9:
                                            losc_freq -= xBand[9].losc;
                                            break;
                                        case Band.BX10:
                                            losc_freq -= xBand[10].losc;
                                            break;
                                        case Band.BX11:
                                            losc_freq -= xBand[11].losc;
                                            break;
                                        case Band.BX12:
                                            losc_freq -= xBand[12].losc;
                                            break;
                                    }

                                    RTL_SDR.SetLOSC((Int32)(Math.Round(losc_freq * 1e6, 6)));
                                }
                                else
                                    RTL_SDR.SetLOSC((Int32)(Math.Round(losc_freq * 1e6, 6)));
                            }
                        }

                        if (!MOX)
                            WBIR_state = WBIR_State.DelayAdapt;

                        if (EthCATIsActive)
                            CAT_client_socket.ClientServerSync("ZZFO;");     // sync with server

                        if (cat_enabled && !cat_losc && cat_push_data & CATRigType != 1)
                        {
                            string FA = loscFreq.ToString("f6");
                            string frek = "FL" + FA.Replace(separator, "").PadLeft(11, '0') + ";";
                            byte[] bfreq = ASCIIEncoding.ASCII.GetBytes(frek);

                            try
                            {
                                this.Invoke(new SIOListenerCommand(siolisten.CrossThreadCallback), "send", bfreq);
                            }
                            catch { }
                        }

                        if (debug_enabled && debug != null && debug.Visible)
                        {
                            debug.rtbDebugMsg.AppendText("LOSC freq: " + Math.Round(losc_freq, 6).ToString() + "\n");
                            SendMessage(debug.rtbDebugMsg.Handle, WM_VSCROLL, SB_BOTTOM, 0);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Debug.Write(ex.ToString());
                }
            }
        }

        private float saved_vfoa_freq = 10.0f;
        private float saved_losc_freq = 10.0f;
        private float saved_vfob_freq = 10.0f;
        private bool ext_ctrl_enabled = false;
        public bool ExtCtrlEnabled
        {
            get { return ext_ctrl_enabled; }
            set { ext_ctrl_enabled = value; }
        }

        private bool cw_semi_break_in_enabled = true;
        public bool CWSemiBreakInEnabled
        {
            get { return cw_semi_break_in_enabled; }
            set { cw_semi_break_in_enabled = value; }
        }

        public float FilterSizeCalOffset
        {
            get { return filter_size_cal_offset; }
            set { filter_size_cal_offset = value; }
        }

        private PTTMode current_ptt_mode = PTTMode.NONE;
        public PTTMode CurrentPTTMode
        {
            get { return current_ptt_mode; }
            set { current_ptt_mode = value; }
        }

        private bool vfo_lock = false;
        public bool VFOLock
        {
            get { return vfo_lock; }
            set
            {
                vfo_lock = value;
                bool enabled = !value;
                if (!value)
                {
                    txtVFOAFreq.Enabled = enabled;
                    grpMoreBands.Enabled = true;
                    grpBandHF.Enabled = true;
                    grpMainRXMode.Enabled = true;
                    grpSubRXMode.Enabled = true;
                    btnVFOBtoA.Enabled = enabled;
                    btnVFOSwap.Enabled = enabled;
                    btnMemoryQuickRecall.Enabled = enabled;
                }
                else
                {
                    grpBandHF.Enabled = false;
                    grpMoreBands.Enabled = false;
                    grpMainRXMode.Enabled = false;
                    grpSubRXMode.Enabled = false;
                    btnVFOBtoA.Enabled = false;
                    btnVFOSwap.Enabled = false;
                    btnMemoryQuickRecall.Enabled = false;
                    txtVFOAFreq.Enabled = false;
                }
            }
        }

        private bool voice_msg_playback = false;
        public bool VoiceMsgPlayback  // yt7pwr
        {
            get { return voice_msg_playback; }
            set
            {
                voice_msg_playback = value;
                if (voice_msg_playback)
                {
                    //                    DttSP.SetRXOsc(0, 0, 0.0);
                }
                else
                {
                    btnMsg1.Checked = false;
                    btnMsg2.Checked = false;
                    btnMsg3.Checked = false;
                    btnMsg4.Checked = false;
                    btnMsg5.Checked = false;
                    btnMsg6.Checked = false;
                    btnMsg1.BackColor = SystemColors.Control;
                    btnMsg2.BackColor = SystemColors.Control;
                    btnMsg3.BackColor = SystemColors.Control;
                    btnMsg4.BackColor = SystemColors.Control;
                    btnMsg5.BackColor = SystemColors.Control;
                    btnMsg6.BackColor = SystemColors.Control;

                    if (grpModeSpecificFM.Visible)
                    {
                        chkFMMsg1.Checked = false;
                        chkFMMsg2.Checked = false;
                        chkFMMsg3.Checked = false;
                        chkFMMsg4.Checked = false;
                        chkFMMsg5.Checked = false;
                        chkFMMsg6.Checked = false;
                        chkFMMsg1.BackColor = SystemColors.Control;
                        chkFMMsg2.BackColor = SystemColors.Control;
                        chkFMMsg3.BackColor = SystemColors.Control;
                        chkFMMsg4.BackColor = SystemColors.Control;
                        chkFMMsg5.BackColor = SystemColors.Control;
                        chkFMMsg6.BackColor = SystemColors.Control;
                    }
                }
            }
        }

        private bool wave_playback = false;
        public bool WavePlayback  // changes yt7pwr
        {
            get { return wave_playback; }
            set
            {
                wave_playback = value;
                if (wave_playback)
                {
                    //                    DttSP.SetRXOsc(0, 0, 0.0);
                }
                else
                {
                    VFOAFreq = vfoAFreq;
                    VFOBFreq = vfoBFreq;
                    LOSCFreq = loscFreq;
                }
            }
        }

        private bool rx_only = false;
        public bool RXOnly
        {
            get { return rx_only; }
            set
            {
                rx_only = value;
                if (current_dsp_mode != DSPMode.SPEC &&
                    current_dsp_mode != DSPMode.DRM && PowerOn)
                    chkMOX.Enabled = !rx_only;

                if (PowerOn)
                    chkTUN.Enabled = !rx_only;
            }
        }

        private BandPlan current_band_plan = BandPlan.IARU1;
        public BandPlan CurrentBandPlan
        {
            get { return current_band_plan; }
            set { current_band_plan = value; }
        }

        private bool tx_shift_if = false; // yt7pwr
        public bool tx_IF
        {
            get { return tx_shift_if; }
            set { tx_shift_if = value; }
        }

        private double tx_shift = 0.1125; // yt7pwr
        public double TX_IF_shift
        {
            get { return tx_shift; }

            set
            {
                tx_shift = value;

                if (MOX)
                    SetTXOscFreqs(true, true);
            }
        }

        private double min_freq = 0.011025; // changes yt7pwr
        public double MinFreq
        {
            get { return min_freq; }
            set
            {
                min_freq = Math.Round(value, 6);

                if (SetupForm == null) return;

                if (VFOAFreq < min_freq)
                {
                    switch (current_dsp_mode)
                    {
                        case DSPMode.LSB:
                            VFOAFreq = min_freq + 0.003;
                            break;
                        case DSPMode.USB:
                            VFOAFreq = min_freq + 0.0002;
                            break;
                        default:
                            VFOAFreq = min_freq;
                            break;
                    }
                }

                if (VFOBFreq < min_freq)
                {
                    if (vfob_split_extended && chkVFOSplit.Checked)
                    {

                    }
                    else if (!vfob_split_extended)
                    {
                        switch (current_dsp_mode)
                        {
                            case DSPMode.LSB:
                                VFOBFreq = min_freq + 0.003;
                                break;
                            case DSPMode.USB:
                                VFOBFreq = min_freq + 0.0002;
                                break;
                            default:
                                VFOBFreq = min_freq;
                                break;
                        }
                    }
                }
            }
        }

        private double max_freq = 432.0; // changes yt7pwr
        public double MaxFreq
        {
            get { return max_freq; }
            set
            {
                max_freq = Math.Round(value, 6);

                if (SetupForm == null) return;

                if (VFOAFreq > max_freq)
                {
                    switch (current_dsp_mode)
                    {
                        case DSPMode.LSB:
                            VFOAFreq = max_freq - 0.0002;
                            break;
                        case DSPMode.USB:
                            VFOAFreq = max_freq - 0.003;
                            break;
                        default:
                            VFOAFreq = max_freq;
                            break;
                    }
                }

                if (VFOBFreq > max_freq)
                {
                    if (vfob_split_extended && chkVFOSplit.Checked)
                    {

                    }
                    else
                    {
                        switch (current_dsp_mode)
                        {
                            case DSPMode.LSB:
                                VFOBFreq = max_freq - 0.0002;
                                break;
                            case DSPMode.USB:
                                VFOBFreq = max_freq - 0.003;
                                break;
                            default:
                                VFOBFreq = max_freq;
                                break;
                        }
                    }
                }
            }
        }

        private bool extended = false;
        public bool Extended
        {
            get { return extended; }
            set
            {
                extended = value;
                VFOBFreq = vfoBFreq;
            }
        }

        private int latch_delay = 0;
        public int LatchDelay
        {
            get { return latch_delay; }
            set { latch_delay = value; }
        }

        public bool COMP
        {
            get { return chkDSPComp.Checked; }
            set
            {
                if (SetupForm == null)
                    return;

                chkDSPComp.Checked = value;
            }
        }

        public int CPDRLevel
        {
            get { return ptbCPDR.Value; }
            set
            {
                if (SetupForm == null) return;
                ptbCPDR.Value = value;
                tbCPDR_Scroll(this, EventArgs.Empty);
            }
        }

        public bool CPDR
        {
            get { return chkDSPCompander.Checked; }
            set
            {
                if (SetupForm == null)
                    return;

                chkDSPCompander.Checked = value;
            }
        }

        public int Mic
        {
            get { return (int)udMIC.Value; }
            set
            {
                if (SetupForm == null)
                    return;

                udMIC.Value = value;
            }
        }

        private decimal tune_power = 100;					// power setting to use when TUN button is pressed
        public decimal TunePower
        {
            get { return tune_power; }
            set
            {
                tune_power = value;

                if (SetupForm != null && !lock_TUN)
                {
                    SetupForm.TunePower = tune_power;
                }
            }
        }

        private bool lock_TUN = false;
        public bool LockTUN
        {
            set { lock_TUN = value; }
        }

        private bool disable_swr_protection = false;
        public bool DisableSWRProtection
        {
            get { return disable_swr_protection; }
            set { disable_swr_protection = value; }
        }

        private double previous_pwr = 50.0;
        public double PreviousPWR
        {
            get { return previous_pwr; }
            set { previous_pwr = value; }
        }

        #region CAT Properties

        private Band current_band;
        //BT 06/15/05 Made public for CAT commands
        public Band CurrentBand
        {
            get { return current_band; }
            set
            {
                Band old_band = Band.FIRST;

                if (current_band != value && band_change_TUN && ExtATU_present)
                {
                    switch (ExtATU_tuning_mode)
                    {
                        case ATUMode.BYPASS:
                            {
                                switch (current_model)
                                {
                                    case Model.GENESIS_G59USB:
                                    case Model.GENESIS_G59NET:
                                        {
                                            g59.WriteToDevice(27, 1);                           // ATU ON
                                            Thread.Sleep(SetupForm.ATUBypassTime);              // 64-96mS
                                            g59.WriteToDevice(27, 0);                           // ATU OFF                         
                                        }
                                        break;
                                    case Model.GENESIS_G11:
                                        {
                                            g11.WriteToDevice(27, 1);                           // ATU ON
                                            Thread.Sleep(SetupForm.ATUBypassTime);              // 64-96mS
                                            g11.WriteToDevice(27, 0);                           // ATU OFF                         
                                        }
                                        break;
                                }
                            }
                            break;

                        case ATUMode.FULL_TUNE:
                        case ATUMode.MEM_TUNE:
                            {
                                Keyer.TuneCW = true;
                                ATU_thread = new Thread(new ThreadStart(ATU_tuning_thread));
                                ATU_thread.Name = "ATU tuning Thread";
                                ATU_thread.Priority = ThreadPriority.Normal;
                                ATU_thread.IsBackground = true;
                                ATU_thread.Start();
                            }
                            break;
                    }

                    if (debug != null && debug.Visible)
                        this.Invoke(new DebugCallbackFunction(DebugCallback), "ATU command sent:" + 
                            ExtATU_tuning_mode.ToString());
                }

                old_band = current_band;

                switch (value)
                {
                    case Band.GEN:
                        if (!booting && show_more_bands && !radBandHF.Checked)
                            radBandHF.Checked = true;

                        if (!booting && !radBandGEN.Checked)
                            radBandGEN.Checked = true;
                        break;
                    case Band.B160M:
                        if (!booting && show_more_bands && !radBandHF.Checked)
                            radBandHF.Checked = true;

                        if (!booting && !radBand160.Checked)
                            radBand160.Checked = true;
                        break;
                    case Band.B80M:
                        if (!booting && show_more_bands && !radBandHF.Checked)
                            radBandHF.Checked = true;

                        if (!booting && show_more_bands && !radBandHF.Checked)
                            radBandHF.Checked = true;

                        if (!booting && !radBand80.Checked)
                            radBand80.Checked = true;
                        break;
                    case Band.B60M:
                        if (!booting && show_more_bands && !radBandHF.Checked)
                            radBandHF.Checked = true;

                        if (!booting && !radBand60.Checked)
                            radBand60.Checked = true;
                        break;
                    case Band.B40M:
                        if (!booting && show_more_bands && !radBandHF.Checked)
                            radBandHF.Checked = true;

                        if (!booting && !radBand40.Checked)
                            radBand40.Checked = true;
                        break;
                    case Band.B30M:
                        if (!booting && show_more_bands && !radBandHF.Checked)
                            radBandHF.Checked = true;

                        if (!booting && !radBand30.Checked)
                            radBand30.Checked = true;
                        break;
                    case Band.B20M:
                        if (!booting && show_more_bands && !radBandHF.Checked)
                            radBandHF.Checked = true;

                        if (!booting && !radBand20.Checked)
                            radBand20.Checked = true;
                        break;
                    case Band.B17M:
                        if (!booting && show_more_bands && !radBandHF.Checked)
                            radBandHF.Checked = true;

                        if (!booting && !radBand17.Checked)
                            radBand17.Checked = true;
                        break;
                    case Band.B15M:
                        if (!booting && !radBand15.Checked)
                            radBand15.Checked = true;
                        break;
                    case Band.B12M:
                        if (!booting && show_more_bands && !radBandHF.Checked)
                            radBandHF.Checked = true;

                        if (!booting && !radBand12.Checked)
                            radBand12.Checked = true;
                        break;
                    case Band.B10M:
                        if (!booting && show_more_bands && !radBandHF.Checked)
                            radBandHF.Checked = true;

                        if (!booting && !radBand10.Checked)
                            radBand10.Checked = true;
                        break;
                    case Band.B6M:
                        if (!booting && !radBand6.Checked)
                            radBand6.Checked = true;
                        break;
                    case Band.B2M:
                        if (!booting && show_more_bands && !radBandHF.Checked)
                            radBandHF.Checked = true;

                        if (!booting && !radBand2.Checked)
                            radBand2.Checked = true;
                        break;
                    case Band.WWV:
                        if (!booting && show_more_bands && !radBandHF.Checked)
                            radBandHF.Checked = true;

                        if (!booting && !radBandWWV.Checked)
                            radBandWWV.Checked = true;
                        break;
                    case Band.B2190M:
                        if (!booting && !radBand2190.Checked)
                            radBand2190.Checked = true;
                        break;
                    case Band.B600M:
                        if (!booting && !show_more_bands)
                            radMoreBands_Click(this, EventArgs.Empty);

                        if (!booting && !radBand600.Checked)
                            radBand600.Checked = true;
                        break;
                    case Band.BX1:
                        if (!booting && !show_more_bands)
                            radMoreBands_Click(this, EventArgs.Empty);

                        if (!booting && !radBandX1.Checked)
                            radBandX1.Checked = true;
                        break;
                    case Band.BX2:
                        if (!booting && !show_more_bands)
                            radMoreBands_Click(this, EventArgs.Empty);

                        if (!booting && !radBandX2.Checked)
                            radBandX2.Checked = true;
                        break;
                    case Band.BX3:
                        if (!booting && !show_more_bands)
                            radMoreBands_Click(this, EventArgs.Empty);

                        if (!booting && !radBandX3.Checked)
                            radBandX3.Checked = true;
                        break;
                    case Band.BX4:
                        if (!booting && !show_more_bands)
                            radMoreBands_Click(this, EventArgs.Empty);

                        if (!booting && !radBandX4.Checked)
                            radBandX4.Checked = true;
                        break;
                    case Band.BX5:
                        if (!booting && !show_more_bands)
                            radMoreBands_Click(this, EventArgs.Empty);

                        if (!booting && !radBandX5.Checked)
                            radBandX5.Checked = true;
                        break;
                    case Band.BX6:
                        if (!booting && !show_more_bands)
                            radMoreBands_Click(this, EventArgs.Empty);

                        if (!booting && !radBandX6.Checked)
                            radBandX6.Checked = true;
                        break;
                    case Band.BX7:
                        if (!booting && !show_more_bands)
                            radMoreBands_Click(this, EventArgs.Empty);

                        if (!booting && !radBandX7.Checked)
                            radBandX7.Checked = true;
                        break;
                    case Band.BX8:
                        if (!booting && !show_more_bands)
                            radMoreBands_Click(this, EventArgs.Empty);

                        if (!booting && !radBandX8.Checked)
                            radBandX8.Checked = true;
                        break;
                    case Band.BX9:
                        if (!booting && !show_more_bands)
                            radMoreBands_Click(this, EventArgs.Empty);

                        if (!booting && !radBandX9.Checked)
                            radBandX9.Checked = true;
                        break;
                    case Band.BX10:
                        if (!booting && !show_more_bands)
                            radMoreBands_Click(this, EventArgs.Empty);

                        if (!booting && !radBandX10.Checked)
                            radBandX10.Checked = true;
                        break;
                    case Band.BX11:
                        if (!booting && !show_more_bands)
                            radMoreBands_Click(this, EventArgs.Empty);

                        if (!booting && !radBandX11.Checked)
                            radBandX11.Checked = true;
                        break;
                    case Band.BX12:
                        if (!booting && !show_more_bands)
                            radMoreBands_Click(this, EventArgs.Empty);

                        if (!booting && !radBandX12.Checked)
                            radBandX12.Checked = true;
                        break;
                }

                current_band = value;
                SetupForm.DisplayLevelsChanged();
                RX_phase_gain();

                if (current_band != old_band)
                    PWR_ValueChanged();
            }
        }

        // Added 06/24/05 BT for CAT commands
        public bool CATVFOLock
        {
            get { return chkVFOLock.Checked; }
            set { chkVFOLock.Checked = value; }
        }

        public string CATGetVersion()
        {
            Assembly assembly = Assembly.GetExecutingAssembly();
            FileVersionInfo fvi = FileVersionInfo.GetVersionInfo(assembly.Location);
            //			int current_version = VersionTextToInt(fvi.FileVersion);
            return fvi.FileVersion;
        }

        // Added 07/30/05 BT for cat commands next 8 functions

        public string CATReadSigStrength()
        {
            float num = 0f;
            num = DttSP.CalculateRXMeter(0, 0, DttSP.MeterType.SIGNAL_STRENGTH);
            num = num +
                multimeter_cal_offset +
                filter_size_cal_offset;
            return num.ToString("f1") + " dBm";
        }

        public string CATReadAvgStrength()
        {
            float num = 0f;
            num = DttSP.CalculateRXMeter(0, 0, DttSP.MeterType.AVG_SIGNAL_STRENGTH);
            num = num +
                multimeter_cal_offset +
                filter_size_cal_offset;
            return num.ToString("f1") + " dBm";
        }

        public string CATReadADC_L()
        {
            float num = 0f;
            num = DttSP.CalculateRXMeter(0, 0, DttSP.MeterType.ADC_REAL);
            return num.ToString("f1") + " dBFS";
        }

        public string CATReadADC_R()
        {
            float num = 0f;
            num = DttSP.CalculateRXMeter(0, 0, DttSP.MeterType.ADC_IMAG);
            return num.ToString("f1") + " dBFS";
        }

        public string CATReadALC()
        {
            float num = 0f;

            if (Audio.CurrentAudioState1 == Audio.AudioState.DTTSP)
            {
                num = (float)Math.Max(-20.0, -DttSP.CalculateRXMeter(0, 0, DttSP.MeterType.ALC));
                return num.ToString("f1") + " dB";
            }
            else return "0" + separator + "0 dB";
        }

        public string CATReadFwdPwr()
        {
            double power = 0.0;
            float num = 0f;

            switch (current_model)
            {
                case Model.GENESIS_G59NET:
                case Model.GENESIS_G59USB:
                    if (vfoAFreq < max_freq)
                    {
                        //pa_power_mutex.WaitOne();
                        power = PAPower(g59.fwd_PWR);
                        //pa_power_mutex.ReleaseMutex();

                        return power.ToString("f0") + " W";
                    }
                    else
                    {
                        if (Audio.CurrentAudioState1 == Audio.AudioState.DTTSP)
                        {
                            num = (float)Math.Max(0.0, DttSP.CalculateRXMeter(0, 0, DttSP.MeterType.PWR));
                            num *= (float)((double)ptbPWR.Value * 0.01);
                            return num.ToString("f2") + " W";
                        }
                        else return "0" + separator + "00 W";
                    }
                    break;

                case Model.GENESIS_G11:
                    if (vfoAFreq < max_freq)
                    {
                        //pa_power_mutex.WaitOne();
                        power = PAPower(g11.fwd_PWR);
                        //pa_power_mutex.ReleaseMutex();

                        return power.ToString("f0") + " W";
                    }
                    else
                    {
                        if (Audio.CurrentAudioState1 == Audio.AudioState.DTTSP)
                        {
                            num = (float)Math.Max(0.0, DttSP.CalculateRXMeter(0, 0, DttSP.MeterType.PWR));
                            num *= (float)((double)ptbPWR.Value * 0.01);
                            return num.ToString("f2") + " W";
                        }
                        else return "0" + separator + "00 W";
                    }
                    break;
            }

            return "0.0W";
        }

        public string CATReadPeakPwr()
        {
            float num = 0f;
            if (vfoAFreq < max_freq)
            {
                if (Audio.CurrentAudioState1 == Audio.AudioState.DTTSP)
                {
                    num = (float)Math.Max(0.0, DttSP.CalculateRXMeter(0, 0, DttSP.MeterType.ALC));
                    num *= (float)ptbPWR.Value;

                    meter_text_history[meter_text_history_index] = num;
                    meter_text_history_index = (meter_text_history_index + 1) % multimeter_text_peak_samples;
                    float max = float.MinValue;
                    for (int i = 0; i < multimeter_text_peak_samples; i++)
                    {
                        if (meter_text_history[i] > max)
                            max = meter_text_history[i];
                    }
                    num = max;

                    return num.ToString("f0") + " W";
                }
                else return "0 W";
            }
            else
            {
                if (Audio.CurrentAudioState1 == Audio.AudioState.DTTSP)
                {
                    num = (float)Math.Max(0.0, DttSP.CalculateRXMeter(0, 0, DttSP.MeterType.ALC));
                    num *= (float)((float)ptbPWR.Value * 0.01);
                    return num.ToString("f2") + " W";
                }
                else return "0" + separator + "00 W";
            }
        }

        public string CATReadRevPwr()
        {
            double power = 0.0;

            switch (current_model)
            {
                case Model.GENESIS_G59USB:
                case Model.GENESIS_G59NET:
                    //pa_power_mutex.WaitOne();
                    power = PAPower(g59.fwd_PWR);
                    //pa_power_mutex.ReleaseMutex();
                    break;

                case Model.GENESIS_G11:
                    //pa_power_mutex.WaitOne();
                    power = PAPower(g11.fwd_PWR);
                    //pa_power_mutex.ReleaseMutex();
                    break;
            }

            return power.ToString("f0") + " W";
        }

        public string CATReadSWR()
        {
            double swr = 0.0;
            //pa_power_mutex.WaitOne();
            if (current_model == Model.GENESIS_G59USB)
                swr = SWR(g59.fwd_PWR, g59.Ref_PWR);
            else if (current_model == Model.GENESIS_G59NET)
                swr = SWR(net_device.fwd_PWR, net_device.Ref_PWR);
            else if (current_model == Model.GENESIS_G11)
                swr = SWR(g11.fwd_PWR, g11.Ref_PWR);
            //pa_power_mutex.ReleaseMutex();
            return swr.ToString("f1") + " : 1";
        }

        //*************end of 8 functions.

        #endregion

        private DSPMode old_dsp_mode_subRX = DSPMode.FIRST;
        private DSPMode current_dsp_mode_subRX = DSPMode.FIRST;
        public DSPMode CurrentDSPModeSubRX
        {
            get { return current_dsp_mode_subRX; }
            set
            {
                RadioButtonTS r = null;
                current_dsp_mode_subRX = value;

                switch (value)
                {
                    case DSPMode.LSB:
                        if (radSUBRxModeLSB.Checked)
                        {
                            SetModeSubRX(DSPMode.LSB);
                            return;
                        }
                        else
                            r = radSUBRxModeLSB;
                        break;
                    case DSPMode.USB:
                        if (radSUBRxModeUSB.Checked)
                        {
                            SetModeSubRX(DSPMode.USB);
                            return;
                        }
                        else
                            r = radSUBRxModeUSB;
                        break;
                    case DSPMode.DSB:
                        if (radSUBRxModeDSB.Checked)
                        {
                            SetModeSubRX(DSPMode.DSB);
                            return;
                        }
                        else
                            r = radSUBRxModeDSB;
                        break;
                    case DSPMode.CWL:
                        if (radSUBRxModeCWL.Checked)
                        {
                            SetModeSubRX(DSPMode.CWL);
                            return;
                        }
                        else
                            r = radSUBRxModeCWL;
                        break;
                    case DSPMode.CWU:
                        if (radSUBRxModeCWU.Checked)
                        {
                            SetModeSubRX(DSPMode.CWU);
                            return;
                        }
                        else
                            r = radSUBRxModeCWU;
                        break;
                    case DSPMode.FMN:
                        if (radSUBRxModeFMN.Checked)
                        {
                            SetModeSubRX(DSPMode.FMN);
                            return;
                        }
                        else
                            r = radSUBRxModeFMN;
                        break;
                    case DSPMode.AM:
                        if (radSUBRxModeAM.Checked)
                        {
                            SetModeSubRX(DSPMode.AM);
                            return;
                        }
                        else
                            r = radSUBRxModeAM;
                        break;
                    case DSPMode.SAM:
                        if (radSUBRxModeSAM.Checked)
                        {
                            SetModeSubRX(DSPMode.SAM);
                            return;
                        }
                        else
                            r = radSUBRxModeSAM;
                        break;
                    case DSPMode.SPEC:
                        if (radSUBRxModeSPEC.Checked)
                        {
                            SetModeSubRX(DSPMode.SPEC);
                            return;
                        }
                        else
                            r = radSUBRxModeSPEC;
                        break;
                    case DSPMode.DIGL:
                        if (radSUBRxModeDIGL.Checked)
                        {
                            SetModeSubRX(DSPMode.DIGL);
                            return;
                        }
                        else
                            r = radSUBRxModeDIGL;
                        break;
                    case DSPMode.DIGU:
                        if (radSUBRxModeDIGU.Checked)
                        {
                            SetModeSubRX(DSPMode.DIGU);
                            return;
                        }
                        else
                            r = radSUBRxModeDIGU;
                        break;
                    case DSPMode.DRM:
                        if (radSUBRxModeDRM.Checked)
                        {
                            SetModeSubRX(DSPMode.DRM);
                            return;
                        }
                        else
                            r = radSUBRxModeDRM;
                        break;
                }

                r.Checked = true;
            }
        }

        private bool lock_dsp_mode = false;
        private DSPMode old_dsp_mode = DSPMode.FIRST;
        private DSPMode current_dsp_mode = DSPMode.FIRST;
        public DSPMode CurrentDSPMode
        {
            get { return current_dsp_mode; }
            set
            {
                try
                {
                    RadioButtonTS r = null;
                    switch (value)
                    {
                        case DSPMode.LSB:
                            r = radModeLSB;
                            break;
                        case DSPMode.USB:
                            r = radModeUSB;
                            break;
                        case DSPMode.DSB:
                            r = radModeDSB;
                            break;
                        case DSPMode.WFM:
                            r = radModeWFM;
                            break;
                        case DSPMode.CWL:
                            r = radModeCWU;
                            break;
                        case DSPMode.CWU:
                            r = radModeCWU;
                            break;
                        case DSPMode.FMN:
                            r = radModeFMN;
                            break;
                        case DSPMode.AM:
                            r = radModeAM;
                            break;
                        case DSPMode.SAM:
                            r = radModeSAM;
                            break;
                        case DSPMode.SPEC:
                            r = radModeSPEC;
                            break;
                        case DSPMode.DIGL:
                            r = radModeDIGL;
                            break;
                        case DSPMode.DIGU:
                            r = radModeDIGU;
                            break;
                        case DSPMode.DRM:
                            r = radModeDRM;
                            break;
                    }

                    r.Checked = true;
                }
                catch (Exception ex)
                {
                    Debug.Write(ex.ToString());
                }
            }
        }

        private Filter current_filter_subRX = Filter.FIRST;
        public Filter CurrentFilterSubRX
        {
            get { return current_filter_subRX; }
            set
            {
                RadioButtonTS r = null;
                switch (value)
                {
                    case Filter.F1:
                        r = radSubRXFilter1;
                        break;
                    case Filter.F2:
                        r = radSubRXFilter2;
                        break;
                    case Filter.F3:
                        r = radSubRXFilter3;
                        break;
                    case Filter.F4:
                        r = radSubRXFilter4;
                        break;
                    case Filter.F5:
                        r = radSubRXFilter5;
                        break;
                    case Filter.F6:
                        r = radSubRXFilter6;
                        break;
                    case Filter.F7:
                        r = radSubRXFilter7;
                        break;
                    case Filter.F8:
                        r = radSubRXFilter8;
                        break;
                    case Filter.F9:
                        r = radSubRXFilter9;
                        break;
                    case Filter.F10:
                        r = radSubRXFilter10;
                        break;
                    case Filter.VAR1:
                        r = radSubRXFilterVar1;
                        break;
                    case Filter.VAR2:
                        r = radSubRXFilterVar2;
                        break;
                    case Filter.NONE:
                        SetFilterSubRX(Filter.NONE);
                        break;
                }

                if (r != null)
                {
                    if (r.Checked)
                    {
                        r.Checked = false;
                    }

                    r.Checked = true;
                }
            }
        }

        private Filter previous_filter = Filter.FIRST;
        private Filter current_filter = Filter.FIRST;
        public Filter CurrentFilter
        {
            get { return current_filter; }
            set
            {
                RadioButtonTS r = null;

                switch (value)
                {
                    case Filter.F1:
                        r = radFilter1;
                        break;
                    case Filter.F2:
                        r = radFilter2;
                        break;
                    case Filter.F3:
                        r = radFilter3;
                        break;
                    case Filter.F4:
                        r = radFilter4;
                        break;
                    case Filter.F5:
                        r = radFilter5;
                        break;
                    case Filter.F6:
                        r = radFilter6;
                        break;
                    case Filter.F7:
                        r = radFilter7;
                        break;
                    case Filter.F8:
                        r = radFilter8;
                        break;
                    case Filter.F9:
                        r = radFilter9;
                        break;
                    case Filter.F10:
                        r = radFilter10;
                        break;
                    case Filter.VAR1:
                        r = radFilterVar1;
                        break;
                    case Filter.VAR2:
                        r = radFilterVar2;
                        break;
                    case Filter.NONE:
                        r = radFilter1;
                        break;
                    default:
                        r = radFilter1;
                        break;
                }

                if (r != null)
                {
                    if (r.Checked)
                    {
                        r.Checked = false;
                    }

                    r.Checked = true;
                }

                //SetFilter(value);  // kd5tfd added for cat zzsf support 
                // commented as changed order in CATCommands.cs should no longer require this
            }
        }

        private MeterRXMode current_meter_rx_mode = MeterRXMode.SIGNAL_STRENGTH;
        public MeterRXMode CurrentMeterRXMode
        {
            get { return current_meter_rx_mode; }
            set
            {
                string text = "";
                switch (value)
                {
                    case MeterRXMode.SIGNAL_STRENGTH:
                        text = "Signal";
                        break;
                    case MeterRXMode.SIGNAL_AVERAGE:
                        text = "Sig Avg";
                        break;
                    case MeterRXMode.ADC_L:
                        text = "ADC L";
                        break;
                    case MeterRXMode.ADC_R:
                        text = "ADC R";
                        break;
                    case MeterRXMode.OFF:	// BT Added 7/24/05 for CAT commands
                        text = "Off";
                        break;
                }

                if (text == "") return;

                current_meter_rx_mode = value;
                comboMeterRXMode.Text = text;
            }
        }

        private MeterTXMode current_meter_tx_mode = MeterTXMode.FIRST;
        public MeterTXMode CurrentMeterTXMode
        {
            get { return current_meter_tx_mode; }
            set
            {
                string text = "";
                switch (value)
                {
                    case MeterTXMode.FORWARD_POWER:
                        text = "Fwd Pwr";
                        break;
                    case MeterTXMode.REVERSE_POWER:
                        text = "Ref Pwr";
                        break;
                    case MeterTXMode.MIC:
                        text = "Mic";
                        break;
                    case MeterTXMode.EQ:
                        text = "EQ";
                        break;
                    case MeterTXMode.LEVELER:
                        text = "Leveler";
                        break;
                    case MeterTXMode.LVL_G:
                        text = "Lev Gain";
                        break;
                    case MeterTXMode.COMP:
                        text = "COMP";
                        break;
                    case MeterTXMode.CPDR:
                        text = "CPDR";
                        break;
                    case MeterTXMode.ALC:
                        text = "ALC";
                        break;
                    case MeterTXMode.ALC_G:
                        text = "ALC Comp";
                        break;
                    case MeterTXMode.SWR:
                        text = "SWR";
                        break;
                    case MeterTXMode.OFF:		// BT Added 07/24/05 for CAT commands
                        text = "Off";
                        break;
                }
                if (text == "") return;

                current_meter_tx_mode = value;
                comboMeterTXMode.Text = text;
            }
        }

        private int cw_pitch = 600;
        public int CWPitch
        {
            get { return cw_pitch; }
            set
            {
                int diff = value - cw_pitch;
                cw_pitch = value;
                Audio.SineFreq1 = value;
                udCWPitch.Value = value;
                Display_GDI.CWPitch = value;
#if(DirectX)
                Display_DirectX.CWPitch = value;
#endif

                for (Filter f = Filter.F1; f < Filter.LAST; f++)
                {
                    int low = filter_presets[(int)DSPMode.CWL].GetLow(f);
                    int high = filter_presets[(int)DSPMode.CWL].GetHigh(f);
                    string name = filter_presets[(int)DSPMode.CWL].GetName(f);

                    int bw = high - low;
                    low = -cw_pitch - bw / 2;
                    high = -cw_pitch + bw / 2;
                    filter_presets[(int)DSPMode.CWL].SetFilter(f, low, high, name);

                    low = filter_presets[(int)DSPMode.CWU].GetLow(f);
                    high = filter_presets[(int)DSPMode.CWU].GetHigh(f);
                    name = filter_presets[(int)DSPMode.CWU].GetName(f);

                    bw = high - low;
                    low = cw_pitch - bw / 2;
                    high = cw_pitch + bw / 2;
                    filter_presets[(int)DSPMode.CWU].SetFilter(f, low, high, name);
                }

                if (chkMOX.Checked)
                {
                    if (current_dsp_mode == DSPMode.CWL)
                        diff = -diff;
                    VFOAFreq += (double)diff / 1e6;
                }
                else

                    CurrentFilter = current_filter;
            }
        }

        private int histogram_hang_time = 100;
        public int HistogramHangTime
        {
            get { return histogram_hang_time; }
            set { histogram_hang_time = value; }
        }

        private Band current_band_filter = 0;
        public Band CurrentBandFilter
        {
            get { return current_band_filter; }
            set 
            {
                current_band_filter = value;

                switch (current_model)
                {
                    case Model.GENESIS_G59USB:
                        G59SetBandFilter(vfoAFreq);
                        Thread.Sleep(1);
                        break;

                    case Model.GENESIS_G59NET:
                        G59SetBandFilter(vfoAFreq);
                        break;

                    case Model.GENESIS_G11:
                        G11SetBandFilter(vfoAFreq);
                        Thread.Sleep(1);
                        break;

                    case Model.GENESIS_G6:
                        G6SetBandFilter(vfoAFreq);
                        Thread.Sleep(1);
                        break;
                }
            }
        }

        public bool cat_vfoa = false;
        private bool vfoa_lock = false;
        private double vfoAFreq = 10.0;
        public double VFOAFreq              // changes yt7pwr
        {
            get
            {
                return vfoAFreq;
            }
            set
            {
                try
                {
                    if (!booting)
                    {
                        if (vfo_lock || SetupForm == null) return;

                        double vfoA_Freq = value;
                        txtVFOAFreq.Text = value.ToString("f6");

                        double freq = vfoA_Freq;
                        double losc_freq = loscFreq;

                        double rx_osc = Math.Round(((loscFreq - vfoA_Freq) * 1e6), 1);

                        if (rx_osc < -sample_rate1 / 2)
                        {
                            first = true;

                            if (continuous_tuning)
                            {
                                if (current_model == Model.GENESIS_G59NET ||
                                    current_model == Model.GENESIS_G59USB ||
                                    current_model == Model.GENESIS_G11 ||
                                    current_model == Model.QRP2000 || usb_si570_enable)
                                {
                                    if (!losc_change)
                                    {
                                        LOSCFreq += (sample_rate1 * 1e-6) - 0.005;
                                        rx_osc = Math.Round(((LOSCFreq - vfoA_Freq) * 1e6), 1);
                                    }
                                    else
                                    {
                                        rx_osc = Math.Round((LOSCFreq - vfoA_Freq) * 1e6, 1);
                                    }
                                }
                            }
                            else
                            {
                                if (current_model == Model.GENESIS_G59NET ||
                                    current_model == Model.GENESIS_G59USB ||
                                    current_model == Model.GENESIS_G11 ||
                                    current_model == Model.QRP2000 || usb_si570_enable)
                                {
                                    if (losc_change || vfob_split_extended)
                                    {
                                        vfoA_Freq = Math.Round(LOSCFreq + (sample_rate1 / 2 + DttSP.RXOsc - 1) * 1e-6, 6);
                                    }
                                }
                                else
                                {
                                    vfoA_Freq = Math.Round(LOSCFreq + (sample_rate1 / 2 + DttSP.RXOsc - 1) * 1e-6, 6);
                                }
                            }
                        }
                        else if (rx_osc > sample_rate1 / 2)
                        {
                            first = true;

                            if (continuous_tuning)
                            {
                                if (current_model == Model.GENESIS_G59NET ||
                                    current_model == Model.GENESIS_G59USB ||
                                    current_model == Model.GENESIS_G11 ||
                                    current_model == Model.QRP2000 || usb_si570_enable)
                                {
                                    if (!losc_change)
                                    {
                                        LOSCFreq -= (sample_rate1 * 1e-6) - 0.005;
                                        rx_osc = Math.Round(((LOSCFreq - vfoA_Freq) * 1e6), 1);
                                    }
                                    else
                                    {
                                        rx_osc = Math.Round((LOSCFreq - vfoA_Freq) * 1e6, 1);
                                    }
                                }
                            }
                            else
                            {
                                if (current_model == Model.GENESIS_G59NET ||
                                    current_model == Model.GENESIS_G59USB ||
                                    current_model == Model.GENESIS_G11 ||
                                    current_model == Model.QRP2000 || usb_si570_enable)
                                {
                                    if (losc_change || vfob_split_extended)
                                    {
                                        vfoA_Freq = Math.Round(LOSCFreq + (-sample_rate1 / 2 + DttSP.RXOsc + 1) * 1e-6, 6); ;
                                    }
                                }
                                else
                                {
                                    vfoA_Freq = Math.Round(LOSCFreq + (-sample_rate1 / 2 + DttSP.RXOsc + 1) * 1e-6, 6); ;
                                }
                            }
                        }

                        vfoAFreq = vfoA_Freq;
                        UpdateVFOAFreq(vfoA_Freq);
                        Display_GDI.VFOA = (long)(vfoA_Freq * 1e6);
#if(DirectX)
                        Display_DirectX.VFOA = (long)(vfoA_Freq * 1e6);
                        //Display_DirectX.RefreshPanadapterGrid = true;
#endif

                        if (current_model == Model.GENESIS_G6)
                        {
                            int length;
                            string text = VFOAFreq.ToString("f6") + "MHz";
                            length = (16 - text.Length) / 2;
                            text = text.PadRight(text.Length + length, ' ');
                            text = text.PadLeft(16, ' ');
                            g6.WriteLCDtext(text, 0, 0);
                        }

                        // update Band Info
                        string bandInfo;
                        bool transmit_allowed = DB.GetBandText((int)current_band_plan, freq, out bandInfo);

                        if (!transmit_allowed)
                        {
                            txtVFOABand.BackColor = out_of_band_color;
                            if (!chkVFOSplit.Checked && chkMOX.Checked)
                                chkMOX.Checked = false;
                        }
                        else txtVFOABand.BackColor = band_background_color;

                        if (!memory)
                        {
                            txtNewVFOBand.Text = bandInfo;
                            txtVFOABand.Text = bandInfo;
                        }

                        if (!chkMOX.Checked || (chkMOX.Checked && !chkVFOSplit.Checked))
                        {
                            Band old_band;
                            Band new_band;
                            Band new_band_filter = Band.GEN;
                            Band old_band_filter = Band.GEN;

                            old_band = BandByFreq(Math.Round(saved_vfoa_freq, 6));
                            new_band = BandByFreq(Math.Round(vfoAFreq, 6));

                            if (new_band != old_band)
                            {
                                if (debug_enabled)
                                {
                                    debug.rtbDebugMsg.AppendText("VFOA freq: " + vfoAFreq.ToString() + "\n" +
                                        "Old band: " + old_band.ToString() + " \n" +
                                        "New band: " + new_band.ToString() + " \n");
                                    SendMessage(debug.rtbDebugMsg.Handle, WM_VSCROLL, SB_BOTTOM, 0);
                                }

                                SetCurrentBand(new_band);
                            }

                            old_band_filter = BandFilterByFreq(Math.Round(saved_vfoa_freq, 6));
                            new_band_filter = BandFilterByFreq(Math.Round(vfoAFreq, 6));

                            if (new_band_filter != old_band_filter)
                            {
                                if (debug_enabled)
                                {
                                    debug.rtbDebugMsg.AppendText("VFOA freq: " + vfoAFreq.ToString() + "\n" +
                                        "Old band filter: " + old_band_filter.ToString() + " \n" +
                                        "New band filter: " + new_band_filter.ToString() + " \n");
                                    SendMessage(debug.rtbDebugMsg.Handle, WM_VSCROLL, SB_BOTTOM, 0);
                                }

                                CurrentBandFilter = new_band_filter;
                            }
                        }                       

                        if (CurrentBand == Band.B60M)
                        {
                            chkXIT.Enabled = false;
                            chkXIT.Checked = false;
                        }
                        else
                            chkXIT.Enabled = true;

                        saved_vfoa_freq = (float)vfoAFreq;

                        if (chkMOX.Checked &&
                            (CurrentDSPMode == DSPMode.AM ||
                            CurrentDSPMode == DSPMode.SAM ||
                            CurrentDSPMode == DSPMode.FMN))
                            vfoA_Freq -= 0.011025;

                        if (current_dsp_mode == DSPMode.CWL)
                            vfoA_Freq += (double)cw_pitch * 0.0000010;
                        else if (current_dsp_mode == DSPMode.CWU)
                            vfoA_Freq -= (double)cw_pitch * 0.0000010;

                        if (vfoA_Freq < min_freq) vfoA_Freq = min_freq;
                        else if (vfoA_Freq > max_freq) vfoA_Freq = max_freq;

                        if (chkRIT.Checked && !chkMOX.Checked && !chkVFOSplit.Checked)
                            vfoA_Freq -= (int)udRIT.Value * 0.000001;
                        else if (chkXIT.Checked && chkMOX.Checked && !chkVFOSplit.Checked)
                            vfoA_Freq -= (int)udXIT.Value * 0.000001;

                        if (vfoA_Freq < min_freq) vfoA_Freq = min_freq;
                        else if (vfoA_Freq > max_freq) vfoA_Freq = max_freq;

                        if (PowerOn)
                        {
                            double osc_freq = ((loscFreq - freq) * 1e6);
                            if (current_dsp_mode == DSPMode.CWL)
                                osc_freq -= (double)cw_pitch;
                            else if (current_dsp_mode == DSPMode.CWU)
                                osc_freq += (double)cw_pitch;
                            if (chkRIT.Checked)
                                osc_freq -= RITValue;

                            if (!chkMOX.Checked && (!Audio.EnableEthernetClientDevice || Audio.ClientRFSpectar ||
                                Audio.wave_playback))
                            {
                                switch (Display_GDI.CurrentDisplayMode)
                                {
                                    case (DisplayMode.SPECTRUM):
                                        switch (current_dsp_mode)
                                        {
                                            case (DSPMode.LSB):
                                            case (DSPMode.CWL):
                                            case (DSPMode.DIGL):
                                                DttSP.SetRXOsc(0, 0, osc_freq);
                                                break;
                                            default:
                                                {
                                                    DttSP.SetRXOsc(0, 0, osc_freq);
                                                }
                                                break;
                                        }
                                        break;
                                    case (DisplayMode.SCOPE):
                                    case (DisplayMode.PHASE):
                                    case (DisplayMode.PHASE2):
                                        DttSP.SetRXOsc(0, 0, osc_freq);
                                        break;
                                    default:
                                        {
                                            switch (current_dsp_mode)
                                            {
                                                case DSPMode.DRM:
                                                    DttSP.SetRXOsc(0, 0, osc_freq + 5000);
                                                    break;
                                                default:
                                                    DttSP.SetRXOsc(0, 0, osc_freq);
                                                    break;
                                            }
                                        }
                                        break;
                                }
                            }
                            else if (!chkMOX.Checked && (Audio.EnableEthernetClientDevice || !Audio.ClientRFSpectar) &&
                                !Audio.wave_playback)
                            {

                                //                                DttSP.SetRXOsc(0, 0, 0.0);
                                //                                DttSP.SetRXOsc(0, 1, 0.0);
                            }
                            else if (chkMOX.Checked && !chkVFOSplit.Checked)
                            {
                                if (!IsHamBand(current_band_plan, saved_vfoa_freq))
                                {
                                    MessageBox.Show("The frequency " + freq.ToString("f6") + "MHz is not within the " +
                                        "IARU Band specifications.",
                                        "Transmit Error: Out Of Band",
                                        MessageBoxButtons.OK,
                                        MessageBoxIcon.Error);
                                    chkMOX.Checked = false;
                                    return;
                                }
                            }
                        }

                        if (small_lsd)
                        {
                            txtVFOAMSD.Visible = true;
                            txtVFOALSD.Visible = true;
                        }

                        if (Display_GDI.PeakOn) Display_GDI.ResetDisplayPeak();
#if(DirectX)
                        if (Display_DirectX.PeakOn) Display_DirectX.ResetDisplayPeak();
#endif

                        if (MOX)
                            SetTXOscFreqs(true, true);

                        if (!vfoA_drag)
                        {
                            TX_phase_gain();
                            RX_phase_gain();
                        }

                        if (usb_si570_enable)
                            SI570.Tune_Changed((long)(vfoA_Freq * 1e6));

                        if (EthCATIsActive)
                            CAT_client_socket.ClientServerSync("ZZFA;");     // sync with server

                        if (cat_enabled && !cat_vfoa && cat_push_data)
                        {
                            switch (CATRigType)
                            {
                                case 1:
                                    try
                                    {
                                        byte[] answer = new byte[11];
                                        byte[] frequency = new byte[10];
                                        string fr = (vfoAFreq * 1e6).ToString();
                                        fr = fr.PadLeft(10, '0');
                                        ASCIIEncoding buff = new ASCIIEncoding();
                                        buff.GetBytes(fr, 0, fr.Length, frequency, 0);
                                        answer[0] = 0xfe;
                                        answer[1] = 0xfe;
                                        answer[2] = (byte)CATRigAddress;
                                        answer[3] = 0xe0;
                                        answer[4] = 0x03;
                                        answer[5] = (byte)((frequency[8] - 0x30) << 4 | (frequency[9] - 0x30));
                                        answer[6] = (byte)((frequency[6] - 0x30) << 4 | (frequency[7] - 0x30));
                                        answer[7] = (byte)((frequency[4] - 0x30) << 4 | (frequency[5] - 0x30));
                                        answer[8] = (byte)((frequency[2] - 0x30) << 4 | (frequency[3] - 0x30));
                                        answer[9] = (byte)((frequency[0] - 0x30) << 4 | (frequency[1] - 0x30));
                                        answer[10] = 0xfd;
                                        this.Invoke(new SIOListenerCommand(siolisten.CrossThreadCallback), "send", answer);
                                    }
                                    catch { }

                                    break;

                                default:
                                    string FA = vfoAFreq.ToString("f6");
                                    string frek = "FA" + FA.Replace(separator, "").PadLeft(11, '0') + ";";
                                    byte[] bfreq = ASCIIEncoding.ASCII.GetBytes(frek);

                                    try
                                    {
                                        this.Invoke(new SIOListenerCommand(siolisten.CrossThreadCallback), "send", bfreq);
                                    }
                                    catch { }

                                    if ((Audio.PrimaryDirectI_Q || (Audio.VACDirectI_Q && Audio.VACEnabled)) &&
                                        (Audio.Primary_RXshift_enabled || Audio.VAC_RXshift_enabled))
                                        LOSCFreq = vfoAFreq - Audio.RXShift / 1e6;

                                    break;
                            }
                        }

                        losc_change = false;
                    }
                }
                catch (Exception ex)
                {
                    Debug.Write(ex.ToString());
                }
            }
        }

        public bool cat_vfob = false;
        private bool vfob_lock = false;
        private double vfoBFreq = 10.0;
        public double VFOBFreq // changes yt7pwr
        {
            get
            {
                return vfoBFreq;
            }
            set
            {
                try
                {
                    if (!booting && (!vfob_split_extended || chkEnableSubRX.Checked || band_locked))
                    {
                        if (vfo_lock || SetupForm == null) return;

                        value = Math.Max(0, value);
                        vfoBFreq = value;

                        if (vfoBFreq < MinFreq)
                            vfoBFreq = min_freq;
                        else if (vfoBFreq > MaxFreq)
                            vfoBFreq = max_freq;

                        txtVFOBFreq.Text = vfoBFreq.ToString("f6");
                        double freq = vfoBFreq;

                        double rx2_osc = Math.Round(((loscFreq - vfoBFreq) * 1e6), 1);

                        if (rx2_osc < -sample_rate1 / 2)
                        {
                            first = true;
                            vfoBFreq = loscFreq + (sample_rate1 / 2 + DttSP.RXOsc - 1) * 1e-6;
                            return;
                        }
                        else if (rx2_osc > sample_rate1 / 2)
                        {
                            first = true;
                            vfoBFreq = loscFreq + (-sample_rate1 / 2 + DttSP.RXOsc + 1) * 1e-6;
                            return;
                        }

                        UpdateVFOBFreq(vfoBFreq);
                        Display_GDI.VFOB = (long)(vfoBFreq * 1e6);
#if(DirectX)
                        Display_DirectX.VFOB = (long)(vfoBFreq * 1e6);
                        //Display_DirectX.RefreshPanadapterGrid = true;
#endif

                        if (current_dsp_mode == DSPMode.CWL)
                            freq += (double)cw_pitch * 0.0000010;
                        else if (current_dsp_mode == DSPMode.CWU)
                            freq -= (double)cw_pitch * 0.0000010;

                        if (freq < min_freq) freq = min_freq;
                        else if (freq > max_freq) freq = max_freq;

                        if (chkRIT.Checked && !chkMOX.Checked && !chkVFOSplit.Checked)
                            freq -= Math.Round((int)udRIT.Value * 0.000001, 6);
                        else if (chkXIT.Checked && chkMOX.Checked && !chkVFOSplit.Checked)
                            freq -= Math.Round((int)udXIT.Value * 0.000001, 6);

                        if (freq < min_freq) freq = min_freq;
                        else if (freq > max_freq) freq = max_freq;

                        if (chkEnableSubRX.Checked &&
                            (rx2_osc > -sample_rate1 / 2 && rx2_osc < sample_rate1 / 2) &&
                            !Audio.EnableEthernetClientDevice || Audio.ClientRFSpectar)
                        {
                            rx2_osc = Math.Round(((loscFreq - vfoBFreq) * 1e6), 1);

                            if (current_dsp_mode_subRX == DSPMode.CWL)
                                rx2_osc -= (double)cw_pitch;
                            else if (current_dsp_mode_subRX == DSPMode.CWU)
                                rx2_osc += (double)cw_pitch;
                            if (chkRIT.Checked)
                                rx2_osc -= RITValue;

                            DttSP.SetRXOsc(0, 1, rx2_osc);
                        }
                        else if (chkEnableSubRX.Checked &&
                            (rx2_osc > -sample_rate1 / 2 && rx2_osc < sample_rate1 / 2) &&
                            Audio.EnableEthernetClientDevice)
                        {
                            DttSP.SetRXOsc(0, 1, 0);
                        }

                        // update Band Info
                        string bandInfo;
                        bool transmit = DB.GetBandText((int)current_band_plan, vfoBFreq, out bandInfo);

                        if (transmit == false && !extended)
                        {
                            txtVFOBBand.BackColor = Color.DimGray;
                            if (chkVFOSplit.Checked && chkMOX.Checked)
                                chkMOX.Checked = false;
                        }
                        else
                            txtVFOBBand.BackColor = band_background_color;

                        txtVFOBBand.Text = bandInfo;

                        if (chkMOX.Checked && chkVFOSplit.Checked)
                        {
                            Band old_band;
                            Band new_band;
                            Band new_band_filter = Band.GEN;
                            Band old_band_filter = Band.GEN;

                            old_band = BandByFreq(Math.Round(saved_vfob_freq, 6));
                            new_band = BandByFreq(Math.Round(vfoBFreq, 6));

                            if (new_band != old_band)
                            {
                                if (debug_enabled)
                                {
                                    debug.rtbDebugMsg.AppendText("VFOB freq: " + vfoBFreq.ToString() + "\n" +
                                        "Old band: " + old_band.ToString() + " \n" +
                                        "New band: " + new_band.ToString() + " \n");
                                    SendMessage(debug.rtbDebugMsg.Handle, WM_VSCROLL, SB_BOTTOM, 0);
                                }

                                SetCurrentBand(new_band);
                            }

                            old_band_filter = BandFilterByFreq(Math.Round(saved_vfob_freq, 6));
                            new_band_filter = BandFilterByFreq(Math.Round(vfoBFreq, 6));

                            if (new_band_filter != old_band_filter)
                            {
                                if (debug_enabled)
                                {
                                    debug.rtbDebugMsg.AppendText("VFOB freq: " + vfoBFreq.ToString() + "\n" +
                                        "Old band filter: " + old_band_filter.ToString() + " \n" +
                                        "New band filter: " + new_band_filter.ToString() + " \n");
                                    SendMessage(debug.rtbDebugMsg.Handle, WM_VSCROLL, SB_BOTTOM, 0);
                                }
                            }

                            CurrentBandFilter = new_band_filter;
                        }

                        saved_vfob_freq = (float)vfoBFreq;

                        if (CurrentBand == Band.B60M)
                        {
                            chkXIT.Enabled = false;
                            chkXIT.Checked = false;
                        }
                        else
                            chkXIT.Enabled = true;

                        if (MOX && !IsHamBand(current_band_plan, freq))	// out of band
                        {
                            MessageBox.Show("The frequency " + freq.ToString("f6") + "MHz is not within the " +
                                "IARU Band specifications.",
                                "Transmit Error: Out Of Band",
                                MessageBoxButtons.OK,
                                MessageBoxIcon.Error);
                            chkMOX.Checked = false;
                            return;
                        }
                    }
                    else if (!booting && !chkEnableSubRX.Checked && vfob_split_extended && chkVFOSplit.Checked)
                    {
                        value = Math.Max(0, value);
                        vfoBFreq = value;
                        txtVFOBFreq.Text = value.ToString("f6");
                        double freq = vfoBFreq;
                        UpdateVFOBFreq(vfoBFreq);
                        Display_GDI.VFOB = (long)(vfoBFreq * 1e6);
#if(DirectX)
                        Display_DirectX.VFOB = (long)(vfoBFreq * 1e6);
                        Display_DirectX.RefreshPanadapterGrid = true;
#endif

                        DttSP.SetRXOsc(0, 1, 0.0);

                        // update Band Info
                        string bandInfo;
                        bool transmit = DB.GetBandText((int)current_band_plan, vfoBFreq, out bandInfo);

                        if (transmit == false)
                        {
                            txtVFOBBand.BackColor = Color.DimGray;
                            if (chkVFOSplit.Checked && chkMOX.Checked)
                                chkMOX.Checked = false;
                        }
                        else
                            txtVFOBBand.BackColor = band_background_color;

                        txtVFOBBand.Text = bandInfo;
                        saved_vfob_freq = (float)vfoBFreq;

                        if (PowerOn && chkMOX.Checked && chkVFOSplit.Checked &&
                            !band_locked)
                        {
                            SetCurrentBand(BandByFreq(vfoBFreq));

                            if (CurrentBand == Band.B60M)
                            {
                                chkXIT.Enabled = false;
                                chkXIT.Checked = false;
                            }
                            else
                                chkXIT.Enabled = true;

                            if (!IsHamBand(current_band_plan, freq))	// out of band
                            {
                                MessageBox.Show("The frequency " + freq.ToString("f6") + "MHz is not within the " +
                                    "IARU Band specifications.",
                                    "Transmit Error: Out Of Band",
                                    MessageBoxButtons.OK,
                                    MessageBoxIcon.Error);
                                chkMOX.Checked = false;
                                return;
                            }
                        }
                    }

                    if (small_lsd)
                    {
                        txtVFOBMSD.Visible = true;
                        txtVFOBLSD.Visible = true;
                    }

                    if (chkVFOSplit.Checked && MOX)     // update TX
                    {
                        SetTXOscFreqs(true, true);
                    }
                    else if(chkVFOSplit.Checked)
                        SetTXOscFreqs(true, false);

                    if (EthCATIsActive)
                        CAT_client_socket.ClientServerSync("ZZFB;");     // sync with server

                    if (cat_enabled && !cat_vfob && cat_push_data & CATRigType != 1)
                    {
                        string FB = vfoBFreq.ToString("f6");
                        string frek = "FB" + FB.Replace(separator, "").PadLeft(11, '0') + ";";
                        byte[] bfreq = ASCIIEncoding.ASCII.GetBytes(frek);
                        try
                        {
                            this.Invoke(new SIOListenerCommand(siolisten.CrossThreadCallback), "send", bfreq);
                        }
                        catch { }
                    }
                }
                catch (Exception ex)
                {
                    Debug.Write(ex.ToString());
                }
            }
        }

        public double PWR
        {
            get { return (int)ptbPWR.Value; }
            set
            {
                value = Math.Max(0.1, value);             			// lower bound
                value = Math.Min(100, value);	    	            // upper bound

                ptbPWR.Value = (int)value;
                PWR_ValueChanged();

                if (EthCATIsActive)
                    CAT_client_socket.ClientServerSync("ZZPC;");     // sync with server
            }
        }

        public int AF
        {
            get { return (int)(ptbAF.Value); }
            set
            {
                value = Math.Max(0, value);			// lower bound
                value = Math.Min(100, value);		// upper bound

                ptbAF.Value = value;
                AF_ValueChanged();

                if (EthCATIsActive)
                    CAT_client_socket.ClientServerSync("ZZAG;");     // sync with server
            }
        }

        private int rxaf = 50;
        public int RXAF
        {
            get { return rxaf; }
            set { rxaf = value; }
        }

        private int txaf = 50;
        public int TXAF
        {
            get { return txaf; }
            set
            {
                txaf = value;
                if (SetupForm != null)
                {
                    SetupForm.TXAF = txaf;
                    if (MOX)
                    {
                        ptbAF.Value = txaf;
                        lblAFValue.Text = ptbAF.Value.ToString();
                    }
                }
            }
        }

        public bool DisplayAVG
        {
            get { return chkDisplayAVG.Checked; }
            set { chkDisplayAVG.Checked = value; }
        }

        private double break_in_delay = 400;
        public double BreakInDelay
        {
            get { return break_in_delay; }
            set { break_in_delay = value; }
        }

        DSPMode voice_mscg_rec_saved = DSPMode.USB;
        public bool VoiceMSG        // yt7pwr
        {
            set 
            {
                if (value)
                {
                    voice_mscg_rec_saved = current_dsp_mode;
                    CurrentDSPMode = DSPMode.USB;
                    cw_key_mode = false;
                }
                else
                {
                    CurrentDSPMode = voice_mscg_rec_saved;
                }

                AudioMOXChanged(value); 
            }
        }

        private bool cat_ptt = false;
        public bool CATPTT
        {
            get { return chkMOX.Checked; }
            set { cat_ptt = value; }
        }

        private uint thread_no = 0;
        public bool MOX
        {
            get { return chkMOX.Checked; }
            set
            {
                chkMOX.Checked = value;

                Display_GDI.MOX = chkMOX.Checked;
#if(DirectX)
                Display_DirectX.MOX = chkMOX.Checked;
#endif
            }
        }

        public bool MOXEnabled
        {
            get { return chkMOX.Enabled; }
            set { chkMOX.Enabled = value; }
        }

        public bool MON
        {
            get { return chkMON.Checked; }
            set { chkMON.Checked = value; }
        }

        public bool MUT
        {
            get { return chkMUT.Checked; }
            set { chkMUT.Checked = value; }
        }

        public bool TUN
        {
            get { return chkTUN.Checked; }
            set { chkTUN.Checked = value; }
        }

        public bool TUNEnabled
        {
            get { return chkTUN.Enabled; }
            set { chkTUN.Enabled = value; }
        }

        public int FilterLowValue
        {
            get { return (int)udFilterLow.Value; }
            set { udFilterLow.Value = value; }
        }

        public int FilterHighValue
        {
            get { return (int)udFilterHigh.Value; }
            set { udFilterHigh.Value = value; }
        }

        public int FilterShiftValue
        {
            get { return ptbFilterShift.Value; }
            set { ptbFilterShift.Value = value; }
        }

        public int SquelchMainRX  // changes yt7pwr
        {
            get
            {
                return (int)(ptbSQLMainRX.Value + 160);
            }
            set
            {
                int val = value - 160;

                try
                {
                    val = Math.Min(val, ptbSQLMainRX.Maximum);
                    val = Math.Max(val, ptbSQLMainRX.Minimum);
                    ptbSQLMainRX.Value = val;
                    tbSQL_Scroll(this, EventArgs.Empty);
                }
                catch (Exception ex)
                {
                    Debug.Write(ex.ToString());
                }
            }
        }

        public int SquelchSubRX  // yt7pwr
        {
            get
            {
                return (int)ptbSQLSubRX.Value + 160;
            }
            set
            {
                ptbSQLSubRX.Value = value - 160;
                tbSQLSubRX_Scroll(null, null);
            }
        }

        public int StepSize     // changes yt7pwr
        {
            get { return wheel_tune_index; }

            set
            {
                wheel_tune_index = value;

                switch (wheel_tune_index)
                {
                    case 0:
                        txtWheelTune.Text = "1Hz";
                        break;
                    case 1:
                        txtWheelTune.Text = "10Hz";
                        break;
                    case 2:
                        txtWheelTune.Text = "50Hz";
                        break;
                    case 3:
                        txtWheelTune.Text = "100Hz";
                        break;
                    case 4:
                        txtWheelTune.Text = "250Hz";
                        break;
                    case 5:
                        txtWheelTune.Text = "500Hz";
                        break;
                    case 6:
                        txtWheelTune.Text = "1kHz";
                        break;
                    case 7:
                        txtWheelTune.Text = "5kHz";
                        break;
                    case 8:
                        txtWheelTune.Text = "9kHz";
                        break;
                    case 9:
                        txtWheelTune.Text = "10kHz";
                        break;
                    case 10:
                        txtWheelTune.Text = "100kHz";
                        break;
                    case 11:
                        txtWheelTune.Text = "250kHz";
                        break;
                    case 12:
                        txtWheelTune.Text = "500kHz";
                        break;
                    case 13:
                        txtWheelTune.Text = "1MHz";
                        break;
                    case 14:
                        txtWheelTune.Text = "10MHz";
                        break;
                }

                if (EthCATIsActive)
                    CAT_client_socket.ClientServerSync("ZZST;");     // sync with server
            }
        }

        public int StepSizeSubRX        // yt7pwr
        {
            get { return wheel_tune_index_subRX; }

            set
            {
                wheel_tune_index_subRX = value;
                switch (wheel_tune_index_subRX)
                {
                    case 0:
                        txtWheelTuneSubRX.Text = "1Hz";
                        break;
                    case 1:
                        txtWheelTuneSubRX.Text = "10Hz";
                        break;
                    case 2:
                        txtWheelTuneSubRX.Text = "50Hz";
                        break;
                    case 3:
                        txtWheelTuneSubRX.Text = "100Hz";
                        break;
                    case 4:
                        txtWheelTuneSubRX.Text = "250Hz";
                        break;
                    case 5:
                        txtWheelTuneSubRX.Text = "500Hz";
                        break;
                    case 6:
                        txtWheelTuneSubRX.Text = "1kHz";
                        break;
                    case 7:
                        txtWheelTuneSubRX.Text = "5kHz";
                        break;
                    case 8:
                        txtWheelTuneSubRX.Text = "9kHz";
                        break;
                    case 9:
                        txtWheelTuneSubRX.Text = "10kHz";
                        break;
                    case 10:
                        txtWheelTuneSubRX.Text = "100kHz";
                        break;
                    case 11:
                        txtWheelTuneSubRX.Text = "250kHz";
                        break;
                    case 12:
                        txtWheelTuneSubRX.Text = "500kHz";
                        break;
                    case 13:
                        txtWheelTuneSubRX.Text = "1MHz";
                        break;
                    case 14:
                        txtWheelTuneSubRX.Text = "10MHz";
                        break;
                }

                if (EthCATIsActive)
                    CAT_client_socket.ClientServerSync("ZZSV;");     // sync with server
            }
        }

        public AGCMode current_agc_mode = AGCMode.FAST;
        public AGCMode CurrentAGCMode
        {
            get { return current_agc_mode; }
            set
            {
                current_agc_mode = value;
                comboAGCMainRX.SelectedIndex = (int)value;
                comboAGCSubRX.SelectedIndex = (int)value;
            }
        }

        public bool VFOSplit
        {
            get { return chkVFOSplit.Checked; }
            set { chkVFOSplit.Checked = value; }
        }

        public bool RIT
        {
            get { return chkRIT.Checked; }
            set { chkRIT.Checked = value; }
        }

        public bool RITOn
        {
            get { return chkRIT.Checked; }
            set { chkRIT.Checked = value; }
        }

        public int RITValue
        {
            get { return (int)udRIT.Value; }
            set { udRIT.Value = value; }
        }

        public bool XITOn
        {
            get { return chkXIT.Checked; }
            set { chkXIT.Checked = value; }
        }

        public int XITValue
        {
            get { return (int)udXIT.Value; }
            set { udXIT.Value = value; }
        }

        private int tx_filter_high = 3000;
        public int TXFilterHigh
        {
            get { return tx_filter_high; }
            set
            {
                tx_filter_high = value;
                DttSP.SetTXFilters(tx_filter_low, tx_filter_high);
            }
        }

        private int tx_filter_low = 300;
        public int TXFilterLow
        {
            get { return tx_filter_low; }
            set
            {
                tx_filter_low = value;
                DttSP.SetTXFilters(tx_filter_low, tx_filter_high);
            }
        }

        private delegate void SetTimerDel(System.Windows.Forms.Timer t, bool enable);
        private void SetTimer(System.Windows.Forms.Timer t, bool enable)
        {
            t.Enabled = enable;
        }

        private bool high_swr = false;
        public bool HighSWR
        {
            get { return high_swr; }
            set
            {
                high_swr = value;
                Display_GDI.HighSWR = value;
#if(DirectX)
                Display_DirectX.HighSWR = value;
#endif
            }
        }

        private bool disable_ptt = false;
        public bool DisablePTT
        {
            get { return disable_ptt; }
            set { disable_ptt = value; }
        }

        public bool PowerOn = false;

        public bool PowerEnabled
        {
            get { return chkPower.Enabled; }
            set { chkPower.Enabled = value; }
        }

        private bool vac_enabled = false;
        public bool VACEnabled
        {
            get { return vac_enabled; }
            set
            {
                vac_enabled = value;
                Audio.VACEnabled = value;
                if (chkVACEnabled != null) chkVACEnabled.Checked = value;
                if (chkCWVAC != null) chkCWVAC.Checked = value;
            }
        }

        private int audio_driver_index1 = 0;
        public int AudioDriverIndex1
        {
            get { return audio_driver_index1; }
            set { audio_driver_index1 = value; }
        }

        private int audio_driver_index2 = 0;
        public int AudioDriverIndex2
        {
            get { return audio_driver_index2; }
            set { audio_driver_index2 = value; }
        }

        private int audio_input_index1 = 0;
        public int AudioInputIndex1
        {
            get { return audio_input_index1; }
            set { audio_input_index1 = value; }
        }

        private int audio_input_index2 = 0;
        public int AudioInputIndex2
        {
            get { return audio_input_index2; }
            set { audio_input_index2 = value; }
        }

        private int audio_output_index1 = 0;
        public int AudioOutputIndex1
        {
            get { return audio_output_index1; }
            set { audio_output_index1 = value; }
        }

        private int audio_output_indexVAC = 0;
        public int AudioOutputIndexVAC
        {
            get { return audio_output_indexVAC; }
            set { audio_output_indexVAC = value; }
        }

        private int audio_latency1 = 50;
        public int AudioLatency1
        {
            get { return audio_latency1; }
            set { audio_latency1 = value; }
        }

        private int audio_latency2 = 50;
        public int AudioLatency2
        {
            get { return audio_latency2; }
            set { audio_latency2 = value; }
        }

        private double audio_volts1 = 2.23;

        public double AudioVolts1
        {
            get { return audio_volts1; }
            set
            {
                audio_volts1 = value;
                Audio.AudioVolts1 = audio_volts1;
                PWR_ValueChanged();
            }
        }

        private int mixer_id1 = 0;
        public int MixerID1
        {
            get { return mixer_id1; }
            set { mixer_id1 = value; }
        }

        private int mixer_id2 = 0;
        public int MixerID2
        {
            get { return mixer_id2; }
            set { mixer_id2 = value; }
        }

        private int mixer_rx_mux_id1 = 0;
        public int MixerRXMuxID1
        {
            get { return mixer_rx_mux_id1; }
            set { mixer_rx_mux_id1 = value; }
        }

        private int mixer_tx_mux_id1 = 0;
        public int MixerTXMuxID1
        {
            get { return mixer_tx_mux_id1; }
            set { mixer_tx_mux_id1 = value; }
        }

        private int mixer_rx_mux_id2 = 0;
        public int MixerRXMuxID2
        {
            get { return mixer_rx_mux_id2; }
            set { mixer_rx_mux_id2 = value; }
        }

        private int mixer_tx_mux_id2 = 0;
        public int MixerTXMuxID2
        {
            get { return mixer_tx_mux_id2; }
            set { mixer_tx_mux_id2 = value; }
        }

        private int sample_rate1 = 48000;
        public int SampleRate1
        {
            get { return sample_rate1; }
            set
            {
                sample_rate1 = value;
                DttSP.SampleRate = value;
                Audio.SampleRate1 = value;
                Display_GDI.SampleRate = value;
#if(DirectX)
                Display_DirectX.SampleRate = value;
#endif

                switch (current_dsp_mode)
                {
                    case DSPMode.SPEC:
                        CurrentDSPMode = DSPMode.SPEC;
                        break;
                    default:
                        CalcDisplayFreq();
                        break;
                }

                if (current_model == Model.GENESIS_G6)
                {
                    switch (value)
                    {
                        case 24000:
                        case 48000:
                            g6.WriteToDevice(32, 11);
                            break;

                        case 96000:
                            g6.WriteToDevice(32, 22);
                            break;

                        case 192000:
                            g6.WriteToDevice(32, 33);
                            break;
                    }
                }
            }
        }

        private int sample_rate2 = 48000;
        public int SampleRate2
        {
            get { return sample_rate2; }
            set
            {
                sample_rate2 = value;
                Audio.SampleRateVAC = value;
            }
        }

        private int num_channels = 2;
        public int NumChannels
        {
            get { return num_channels; }
            set { num_channels = value; }
        }

        private int block_size1;
        public int BlockSize1
        {
            get { return block_size1; }
            set
            {
                block_size1 = value;
                Audio.BlockSize = value;
                g6.BufferSize = value;
            }
        }

        private int block_size2;
        public int BlockSize2
        {
            get { return block_size2; }
            set
            {
                block_size2 = value;
                Audio.BlockSizeVAC = value;
            }
        }

        private bool cw_key_mode = false;
        public bool CWKeyMode
        {
            get { return cw_key_mode; }
            set { cw_key_mode = value; }
        }

        private int peak_text_delay = 500;
        public int PeakTextDelay
        {
            get { return peak_text_delay; }
            set
            {
                peak_text_delay = value;
                timer_peak_text.Interval = value;
            }
        }

        private int meter_delay = 30;
        public int MeterDelay
        {
            get { return meter_delay; }
            set
            {
                meter_delay = value;
                MultimeterPeakHoldTime = MultimeterPeakHoldTime;
            }
        }

        private int cpu_meter_delay = 1000;
        public int CPUMeterDelay
        {
            get { return cpu_meter_delay; }
            set
            {
                cpu_meter_delay = value;
                timer_cpu_meter.Interval = value;
            }
        }

        private int display_fps = 15;
        private int display_delay = 1000 / 15;
        public int DisplayFPS
        {
            get { return display_fps; }
            set
            {
                display_fps = value;
                display_delay = 1000 / display_fps;
            }
        }

        private int multimeter_peak_hold_time = 1000;
        private int multimeter_peak_hold_samples = 10;
        public int MultimeterPeakHoldTime
        {
            get { return multimeter_peak_hold_time; }
            set
            {
                multimeter_peak_hold_time = value;
                multimeter_peak_hold_samples = value / meter_delay;
            }
        }

        private int multimeter_text_peak_time = 500;
        private int multimeter_text_peak_samples = 5;
        public int MultimeterTextPeakTime
        {
            get { return multimeter_text_peak_time; }
            set
            {
                multimeter_text_peak_time = value;
                multimeter_text_peak_samples = value / meter_delay;
                if (multimeter_text_peak_samples > meter_text_history.Length)
                {
                    float[] temp = new float[multimeter_text_peak_samples];
                    for (int i = 0; i < meter_text_history.Length; i++)
                        temp[i] = meter_text_history[i];
                    meter_text_history = temp;
                }
            }
        }

        private Color vfo_text_light_color = Color.White;
        public Color VFOTextLightColor
        {
            get { return vfo_text_light_color; }
            set
            {
                if (PowerOn)
                {
                    txtVFOAFreq.ForeColor = value;
                    txtVFOAMSD.ForeColor = value;
                    txtLOSCMSD.ForeColor = value;
                    txtVFOAnew.ForeColor = value;
                    txtLOSCnew.ForeColor = value;
                    txtLOSCFreq.ForeColor = value;
                    txtLOSCMSD.ForeColor = value;
                    lblVFOA.ForeColor = value;
                    lblAFNewVFO.ForeColor = value;
                    lblRFNewVFO.ForeColor = value;
                    lblATTNewVFO.ForeColor = value;
                    lblLOSC.ForeColor = value;
                }

                vfo_text_light_color = value;
            }
        }

        private Color vfo_text_dark_color = Color.Olive;
        public Color VFOTextDarkColor
        {
            get { return vfo_text_dark_color; }
            set
            {
                if (!PowerOn)
                {
                    txtVFOAFreq.ForeColor = value;
                    txtVFOAMSD.ForeColor = value;
                    txtVFOALSD.ForeColor = value;
                    txtVFOAnew.ForeColor = value;
                    txtLOSCnew.ForeColor = value;
                    txtVFOBnew.ForeColor = value;
                    lblVFOA.ForeColor = value;
                    lblAFNewVFO.ForeColor = value;
                    lblRFNewVFO.ForeColor = value;
                    lblATTNewVFO.ForeColor = value;
                    lblLOSC.ForeColor = value;
                }
                if (!chkVFOSplit.Checked)
                {
                    txtVFOBFreq.ForeColor = value;
                    txtVFOBnew.ForeColor = value;
                    txtVFOBMSD.ForeColor = value;
                    txtVFOBLSD.ForeColor = value;
                    lblVFOB.ForeColor = value;
                }

                vfo_text_dark_color = value;
            }
        }

        private Color band_text_light_color = Color.Lime;
        public Color BandTextLightColor
        {
            get { return band_text_light_color; }
            set
            {
                if (PowerOn)
                {
                    txtVFOABand.ForeColor = value;
                    txtNewVFOBand.ForeColor = value;
                }
                if (chkVFOSplit.Checked)
                    txtVFOBBand.ForeColor = value;

                band_text_light_color = value;
            }
        }

        private Color band_text_dark_color = Color.Green;
        public Color BandTextDarkColor
        {
            get { return band_text_dark_color; }
            set
            {
                if (!PowerOn)
                {
                    txtVFOABand.ForeColor = value;
                    txtNewVFOBand.ForeColor = value;
                }
                if (!chkVFOSplit.Checked)
                    txtVFOBBand.ForeColor = value;

                band_text_dark_color = value;
            }
        }

        private Color peak_text_color = Color.DodgerBlue;
        public Color PeakTextColor
        {
            get { return peak_text_color; }
            set
            {
                peak_text_color = value;
                txtDisplayCursorOffset.ForeColor = value;
                txtDisplayCursorPower.ForeColor = value;
                txtDisplayCursorFreq.ForeColor = value;
                txtDisplayPeakOffset.ForeColor = value;
                txtDisplayPeakPower.ForeColor = value;
                txtDisplayPeakFreq.ForeColor = value;
            }
        }

        private Color out_of_band_color = Color.DimGray;
        public Color OutOfBandColor
        {
            get { return out_of_band_color; }
            set
            {
                out_of_band_color = value;
                if (SetupForm != null)
                {
                    LOSCFreq = loscFreq;
                }
            }
        }

        private Color button_selected_color = Color.Yellow;
        public Color ButtonSelectedColor
        {
            get { return button_selected_color; }
            set
            {
                button_selected_color = value;
                CheckSelectedButtonColor();
            }
        }

        private Color meter_left_color = Color.Green;
        public Color MeterLeftColor
        {
            get { return meter_left_color; }
            set
            {
                meter_left_color = value;
                picMultiMeterDigital.Invalidate();
            }
        }

        private Color meter_right_color = Color.Lime;
        public Color MeterRightColor
        {
            get { return meter_right_color; }
            set
            {
                meter_right_color = value;
                picMultiMeterDigital.Invalidate();
            }
        }

        #region Voice Msg Keys

        private Keys voice_msg1 = Keys.F1;
        public Keys VoiceMsg1
        {
            get { return voice_msg1; }
            set { voice_msg1 = value; }
        }
        private Keys voice_msg2 = Keys.F2;
        public Keys VoiceMsg2
        {
            get { return voice_msg2; }
            set { voice_msg2 = value; }
        }
        private Keys voice_msg3 = Keys.F3;
        public Keys VoiceMsg3
        {
            get { return voice_msg3; }
            set { voice_msg3 = value; }
        }
        private Keys voice_msg4 = Keys.F4;
        public Keys VoiceMsg4
        {
            get { return voice_msg4; }
            set { voice_msg4 = value; }
        }
        private Keys voice_msg5 = Keys.F5;
        public Keys VoiceMsg5
        {
            get { return voice_msg5; }
            set { voice_msg5 = value; }
        }
        private Keys voice_msg6 = Keys.F6;
        public Keys VoiceMsg6
        {
            get { return voice_msg6; }
            set { voice_msg6 = value; }
        }

        #endregion

        #region CWX Keys

        private Keys cwx_msg1 = Keys.F1;
        public Keys CWXMsg1
        {
            get { return cwx_msg1; }
            set { cwx_msg1 = value; }
        }
        private Keys cwx_msg2 = Keys.F2;
        public Keys CWXMsg2
        {
            get { return cwx_msg2; }
            set { cwx_msg2 = value; }
        }
        private Keys cwx_msg3 = Keys.F3;
        public Keys CWXMsg3
        {
            get { return cwx_msg3; }
            set { cwx_msg3 = value; }
        }
        private Keys cwx_msg4 = Keys.F4;
        public Keys CWXMsg4
        {
            get { return cwx_msg4; }
            set { cwx_msg4 = value; }
        }
        private Keys cwx_msg5 = Keys.F5;
        public Keys CWXMsg5
        {
            get { return cwx_msg5; }
            set { cwx_msg5 = value; }
        }
        private Keys cwx_msg6 = Keys.F6;
        public Keys CWXMsg6
        {
            get { return cwx_msg6; }
            set { cwx_msg6 = value; }
        }
        #endregion

        private Keys key_show_hide_gui = Keys.F10;          // yt7pwr
        public Keys KeyShowHideGUI                          // GUI for Si570 external osillator
        {
            get { return key_show_hide_gui; }
            set { key_show_hide_gui = value; }
        }

        private Keys key_tune_up_1 = Keys.Q;
        public Keys KeyTuneUp1
        {
            get { return key_tune_up_1; }
            set { key_tune_up_1 = value; }
        }

        private Keys key_tune_down_1 = Keys.A;
        public Keys KeyTuneDown1
        {
            get { return key_tune_down_1; }
            set { key_tune_down_1 = value; }
        }

        private Keys key_tune_up_2 = Keys.W;
        public Keys KeyTuneUp2
        {
            get { return key_tune_up_2; }
            set { key_tune_up_2 = value; }
        }

        private Keys key_tune_down_2 = Keys.S;
        public Keys KeyTuneDown2
        {
            get { return key_tune_down_2; }
            set { key_tune_down_2 = value; }
        }

        private Keys key_tune_up_3 = Keys.E;
        public Keys KeyTuneUp3
        {
            get { return key_tune_up_3; }
            set { key_tune_up_3 = value; }
        }

        private Keys key_tune_down_3 = Keys.D;
        public Keys KeyTuneDown3
        {
            get { return key_tune_down_3; }
            set { key_tune_down_3 = value; }
        }

        private Keys key_tune_up_4 = Keys.R;
        public Keys KeyTuneUp4
        {
            get { return key_tune_up_4; }
            set { key_tune_up_4 = value; }
        }

        private Keys key_tune_down_4 = Keys.F;
        public Keys KeyTuneDown4
        {
            get { return key_tune_down_4; }
            set { key_tune_down_4 = value; }
        }

        private Keys key_tune_up_5 = Keys.T;
        public Keys KeyTuneUp5
        {
            get { return key_tune_up_5; }
            set { key_tune_up_5 = value; }
        }

        private Keys key_tune_down_5 = Keys.G;
        public Keys KeyTuneDown5
        {
            get { return key_tune_down_5; }
            set { key_tune_down_5 = value; }
        }

        private Keys key_tune_up_6 = Keys.Y;
        public Keys KeyTuneUp6
        {
            get { return key_tune_up_6; }
            set { key_tune_up_6 = value; }
        }

        private Keys key_tune_down_6 = Keys.H;
        public Keys KeyTuneDown6
        {
            get { return key_tune_down_6; }
            set { key_tune_down_6 = value; }
        }

        private Keys key_tune_up_7 = Keys.U;
        public Keys KeyTuneUp7
        {
            get { return key_tune_up_7; }
            set { key_tune_up_7 = value; }
        }

        private Keys key_tune_down_7 = Keys.J;
        public Keys KeyTuneDown7
        {
            get { return key_tune_down_7; }
            set { key_tune_down_7 = value; }
        }

        private Keys key_rit_up = Keys.O;
        public Keys KeyRITUp
        {
            get { return key_rit_up; }
            set { key_rit_up = value; }
        }

        private Keys key_rit_down = Keys.I;
        public Keys KeyRITDown
        {
            get { return key_rit_down; }
            set { key_rit_down = value; }
        }

        private int rit_step_rate = 50;
        public int RITStepRate
        {
            get { return rit_step_rate; }
            set { rit_step_rate = value; }
        }

        private Keys key_xit_up = Keys.OemOpenBrackets;
        public Keys KeyXITUp
        {
            get { return key_xit_up; }
            set { key_xit_up = value; }
        }

        private Keys key_xit_down = Keys.P;
        public Keys KeyXITDown
        {
            get { return key_xit_down; }
            set { key_xit_down = value; }
        }

        private int xit_step_rate = 50;
        public int XITStepRate
        {
            get { return xit_step_rate; }
            set { xit_step_rate = value; }
        }

        private Keys key_band_up = Keys.M;
        public Keys KeyBandUp
        {
            get { return key_band_up; }
            set { key_band_up = value; }
        }

        private Keys key_band_down = Keys.N;
        public Keys KeyBandDown
        {
            get { return key_band_down; }
            set { key_band_down = value; }
        }

        private Keys key_filter_up = Keys.B;
        public Keys KeyFilterUp
        {
            get { return key_filter_up; }
            set { key_filter_up = value; }
        }

        private Keys key_filter_down = Keys.V;
        public Keys KeyFilterDown
        {
            get { return key_filter_down; }
            set { key_filter_down = value; }
        }

        private Keys key_cw_keyer_speed_up = Keys.X;
        public Keys KeyCWSpeedUp
        {
            get { return key_cw_keyer_speed_up; }
            set { key_cw_keyer_speed_up = value; }
        }

        private Keys key_cw_keyer_speed_down = Keys.Z;
        public Keys KeyCWSpeedDown
        {
            get { return key_cw_keyer_speed_down; }
            set { key_cw_keyer_speed_down = value; }
        }

        private Keys key_cw_dot = Keys.OemPeriod;
        public Keys KeyCWDot
        {
            get { return key_cw_dot; }
            set { key_cw_dot = value; }
        }

        private Keys key_cw_dash = Keys.OemQuestion;
        public Keys KeyCWDash
        {
            get { return key_cw_dash; }
            set { key_cw_dash = value; }
        }

        private PerformanceCounter cpu_usage;
        public float CpuUsage
        {
            get
            {
                //return 0.0f;

                try
                {
                    if (cpu_usage == null)
                    {
                        cpu_usage = new PerformanceCounter(
                            "Process", "% Processor Time", Process.GetCurrentProcess().ProcessName);
                    }
                    return cpu_usage.NextValue() / Environment.ProcessorCount;
                }
                catch (Exception)
                {
                    timer_cpu_meter.Enabled = false;
                    lblCPUMeter.Visible = false;
                    return 0.0f;
                }
            }
        }

        private int scope_time = 50;

        #endregion

        #region Display Routines

        private void UpdateDisplay()
        {
            try
            {
                if (this.WindowState != FormWindowState.Minimized && !Audio.EnableEthernetServerDevice)
                {
                    switch (current_display_engine)
                    {
                        case DisplayEngine.GDI_PLUS:
                            if (chkVFOSplit.Checked && (current_dsp_mode_subRX == DSPMode.CWU ||
                            current_dsp_mode_subRX == DSPMode.CWL) && chkMOX.Checked)
                            {
                                Display_GDI.DataReady = false;
                            }
                            else if (!chkVFOSplit.Checked && (current_dsp_mode == DSPMode.CWU ||
                               current_dsp_mode == DSPMode.CWL) && chkMOX.Checked)
                            {
                                Display_GDI.DataReady = false;
                            }

                            switch (current_display_mode)
                            {
                                case (DisplayMode.WATERFALL):
                                    picWaterfall.Invalidate();
                                    break;
                                case (DisplayMode.PANAFALL):
                                case DisplayMode.PANASCOPE:
                                case DisplayMode.PANAFALL_INV:
                                    picDisplay.Invalidate();
                                    picWaterfall.Invalidate();
                                    break;
                                case (DisplayMode.OFF):
                                    break;
                                default:
                                    picDisplay.Invalidate();
                                    break;
                            }
                            break;
#if(DirectX)
                        case DisplayEngine.DIRECT_X:
                            if (current_display_mode != DisplayMode.OFF)
                            {
                                if (!Display_DirectX.RenderDirectX())
                                    this.Invoke(new DirectXCallbackFunction(ReinitDirectX), "");
                            }
                            break;
#endif
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private void ReinitGDI(string name)        // yt7pwr
        {
            try
            {
                System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(Console));
                pause_DisplayThread = true;
                Display_GDI.Close();
                Thread.Sleep(100);
                Display_GDI.Init();
                this.picDisplay = new System.Windows.Forms.PictureBox();
                ((System.ComponentModel.ISupportInitialize)(this.picDisplay)).BeginInit();
                this.grpDisplay.Controls.Add(this.picDisplay);
                this.picDisplay.BackColor = System.Drawing.Color.Black;
                resources.ApplyResources(this.picDisplay, "picDisplay");
                this.picDisplay.Cursor = System.Windows.Forms.Cursors.Cross;
                this.picDisplay.Name = "picDisplay";
                this.picDisplay.TabStop = false;
                this.picDisplay.MouseLeave += new System.EventHandler(this.picDisplay_MouseLeave);
                this.picDisplay.MouseMove += new System.Windows.Forms.MouseEventHandler(this.picDisplay_MouseMove);
                this.picDisplay.Resize += new System.EventHandler(this.picDisplay_Resize);
                this.picDisplay.MouseDown += new System.Windows.Forms.MouseEventHandler(this.picDisplay_MouseDown);
                this.picDisplay.Paint += new System.Windows.Forms.PaintEventHandler(this.picDisplay_Paint);
                this.picDisplay.MouseUp += new System.Windows.Forms.MouseEventHandler(this.picDisplay_MouseUp);
                Thread.Sleep(100);
                pause_DisplayThread = false;
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private void picAGauge_Paint(object sender, PaintEventArgs e)
        {
            try
            {
                switch (current_display_engine)
                {
                    case DisplayEngine.GDI_PLUS:
                        NewVFOSignalGauge.PaintGauge(e);
                        break;
#if(DirectX)
                    case DisplayEngine.DIRECT_X:
                        if (PowerOn)
                        {
                            if (!NewVFOSignalGauge.RenderGauge())
                                ReinitAGaugeDirectX("NewVFOSignalGauge");
                        }
                        else
                        {
                            NewVFOSignalGauge.PaintGauge(e);
                        }
                        break;
#endif
                }
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private void picSmallAGauge_Paint(object sender, PaintEventArgs e)
        {
            try
            {
                switch (current_display_engine)
                {
                    case DisplayEngine.GDI_PLUS:
                        AnalogSignalGauge.PaintGauge(e);
                        break;
#if(DirectX)
                    case DisplayEngine.DIRECT_X:

                        if (!PowerOn)
                            AnalogSignalGauge.PaintGauge(e);
                        else
                        {
                            if (!AnalogSignalGauge.RenderGauge())
                                ReinitAGaugeDirectX("AnalogSignalGauge");
                        }
                        break;
#endif
                }
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }


#if(DirectX)

        private void ReinitDirectX(string s)                    // yt7pwr
        {
            try
            {
                if (!booting)
                {
                    Display_DirectX.DirectXRelease();
                    NewVFOSignalGauge.DirectXRelease();

                    foreach (var item in ObjectTable.Objects)
                        item.Dispose();

                    Display_DirectX.PanadapterTarget = picDisplay;
                    Display_DirectX.WaterfallTarget = picWaterfall;
                    Display_DirectX.DirectXInit();
                    NewVFOSignalGauge.DirectX_Init(NewVFO_background_image);
                    pause_DisplayThread = false;
                }
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private void ReinitAGaugeDirectX(string name)      // yt7pwr
        {
            try
            {
                switch (name)
                {   
                    case "AnalogSignalGauge":
                        pause_multimeter_thread = true;
                        AnalogSignalGauge.DirectXRelease();
                        Thread.Sleep(100);
                        AnalogSignalGauge.DirectX_Init(classicVFO_background_image);
                        Thread.Sleep(100);
                        pause_multimeter_thread = false;
                        break;

                    case "NewVFOSignalGauge":
                        pause_multimeter_thread = true;                       
                        NewVFOSignalGauge.DirectXRelease();
                        NewVFOSignalGauge.GaugeTarget = picAGauge;
                        NewVFOSignalGauge.DirectX_Init(NewVFO_background_image);
                        pause_multimeter_thread = false;
                        break;
                }
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }
#endif

        private double display_peak = 0.0;
        private void UpdatePeakText()       // changes yt7pwr
        {
            if (!ConsoleClosing)
            {
                if (txtVFOAFreq.Text == "" ||
                    txtVFOAFreq.Text == "." ||
                    txtVFOAFreq.Text == ",")
                    return;

                // update peak value
                float x = 0;
                float y = 0;
                float y_peek_power = 0;
                switch (current_display_engine)
                {
                    case DisplayEngine.GDI_PLUS:
                        switch (Display_GDI.CurrentDisplayMode)
                        {
                            case DisplayMode.PANASCOPE:
                            case DisplayMode.SCOPE:
                                x = PixelToHz(Display_GDI.ScopeMaxX);
                                y = Display_GDI.ScopeMaxY;
                                break;
                            default:
                                {
                                    x = PixelToHz(Display_GDI.MaxX);
                                    y = Display_GDI.MaxY;
                                }
                                break;
                        }
                        break;
#if(DirectX)
                    case DisplayEngine.DIRECT_X:
                        switch (Display_DirectX.CurrentDisplayMode)
                        {
                            case DisplayMode.PANASCOPE:
                            case DisplayMode.SCOPE:
                                x = PixelToHz(Display_DirectX.ScopeMaxX);
                                y = Display_DirectX.ScopeMaxY;
                                break;
                            default:
                                {
                                    x = PixelToHz(Display_DirectX.MaxX);
                                    y = Display_DirectX.MaxY;
                                }
                                break;
                        }
                        break;
#endif
                }

                double freq = loscFreq + (double)x * 0.0000010;

                display_peak = freq;

                switch (current_display_mode)
                {
                    case DisplayMode.PANAFALL:
                    case DisplayMode.PANAFALL_INV:
                        Display_GDI.MaxY = picWaterfall.Height / 2;
#if(DirectX)
                        Display_DirectX.MaxY = picWaterfall.Height / 2;
#endif
                        break;
                    case DisplayMode.PANADAPTER:
                        Display_GDI.MaxY = picDisplay.Height;
#if(DirectX)
                        Display_DirectX.MaxY = picDisplay.Height;
#endif
                        break;
                    case DisplayMode.PANASCOPE:
                    case DisplayMode.WATERFALL:
                        Display_GDI.MaxY = picWaterfall.Height;
#if(DirectX)
                        Display_DirectX.MaxY = picWaterfall.Height;
#endif
                        break;
                    default:
#if(DirectX)
                        Display_DirectX.MaxY = picDisplay.Height;
#endif
                        break;
                }

                txtDisplayPeakOffset.Text = x.ToString("f1") + "Hz";
                txtDisplayPeakPower.Text = y.ToString("f1") + "dBm";
                string temp_text = freq.ToString("f6") + " MHz";
                int jper = temp_text.IndexOf(separator) + 4;
                txtDisplayPeakFreq.Text = String.Copy(temp_text.Insert(jper, " "));
            }
        }

        private void txtDisplayPeakFreq_Click(object sender, EventArgs e)       // yt7pwr
        {
            VFOAFreq = Math.Round(display_peak, 6);
        }

        private float PixelToHz(float x)
        {
            int low, high;
            if (!chkMOX.Checked)
            {
                low = DttSP.RXDisplayLow;
                high = DttSP.RXDisplayHigh;
            }
            else
            {
                low = DttSP.TXDisplayLow;
                high = DttSP.TXDisplayHigh;
            }

            int width = high - low;
            return (float)(low + (double)x / (double)picDisplay.Width * (double)width);
            //return (float)(low + ((double)x*(high - low)/picDisplay.Width));
        }

        private int HzToPixel(float freq)
        {
            int low, high;
            if (!chkMOX.Checked)
            {
                low = DttSP.RXDisplayLow;
                high = DttSP.RXDisplayHigh;
            }
            else
            {
                low = DttSP.TXDisplayLow;
                high = DttSP.TXDisplayHigh;
            }

            int width = high - low;
            return (int)((double)(freq - low) / (double)width * (double)picDisplay.Width);
            //return picDisplay.Width/2+(int)(freq/(high-low)*picDisplay.Width);
        }

        private float PixelToDb(float y)
        {
            float f = 0.0f;

            switch (current_display_engine)
            {
                case DisplayEngine.GDI_PLUS:
                    f = (float)(Display_GDI.SpectrumGridMax - y * (double)(Display_GDI.SpectrumGridMax - Display_GDI.SpectrumGridMin) / picDisplay.Height);
                    break;
#if(DirectX)
                case DisplayEngine.DIRECT_X:
                    f = (float)(Display_DirectX.SpectrumGridMax - y * (double)(Display_DirectX.SpectrumGridMax - Display_DirectX.SpectrumGridMin) / picDisplay.Height);
                    break;
#endif
            }
            return f;
        }
        #endregion

        #region Paint Event Handlers
        // ======================================================
        // Paint Event Handlers
        // ======================================================

        private void picDisplay_Paint(object sender, PaintEventArgs e)
        {
            switch (current_display_engine)
            {
                case DisplayEngine.GDI_PLUS:
                    if (!Display_GDI.RenderGDIPlus(ref e))
                        this.Invoke(new GDICallbackFunction(ReinitGDI), "picDisplay");
                    break;
#if(DirectX)
                case DisplayEngine.DIRECT_X:
                    /*try
                    {
                        if (!Display_DirectX.RenderDirectX())
                            ReinitDirectX();
                    }
                    catch (Exception ex)
                    {
                        Debug.Write(ex.ToString());
                    }*/
                    break;
#endif
            }
        }

        private double avg_num = -200.0;
        private void picMultiMeterDigital_Paint(object sender, System.Windows.Forms.PaintEventArgs e)
        {
            int H = picMultiMeterDigital.ClientSize.Height;
            int W = picMultiMeterDigital.ClientSize.Width;
            Graphics g = e.Graphics;
            double num;
            int pixel_x = 0;

            switch (current_meter_display_mode)
            {
                case MultiMeterDisplayMode.Original:
                    #region Original
                    if (!chkMOX.Checked)
                    {
                        if (meter_data_ready)
                        {
                            current_meter_data = new_meter_data;
                            //meter_data_ready = false;  We do NOT want to do this before we have consumed it!!!!
                        }
                        else if (!PowerOn)
                            current_meter_data = -200.0f;

                        num = current_meter_data;

                        switch (current_meter_rx_mode)
                        {
                            case MeterRXMode.SIGNAL_STRENGTH:
                            case MeterRXMode.SIGNAL_AVERAGE:
                                switch ((int)g.DpiX)
                                {
                                    case 96:
                                        double s = (num + 127) / 6;
                                        if (s <= 9.0F)
                                            pixel_x = (int)((s * 7.5) + 2);
                                        else
                                        {
                                            double over_s9 = num + 73;
                                            pixel_x = 69 + (int)(over_s9 * 1.05);
                                        }
                                        break;
                                    case 120:
                                        if (num <= -97.0f)
                                            pixel_x = (int)(0 + (num + 100.0) / 3.0 * 10);
                                        else if (num <= -91.0f)
                                            pixel_x = (int)(10 + (num + 97.0) / 6.0 * 17);
                                        else if (num <= -85.0f)
                                            pixel_x = (int)(27 + (num + 91.0) / 6.0 * 16);
                                        else if (num <= -79.0f)
                                            pixel_x = (int)(43 + (num + 85.0) / 6.0 * 17);
                                        else if (num <= -73.0f)
                                            pixel_x = (int)(60 + (num + 79.0) / 6.0 * 16);
                                        else if (num <= -53.0f)
                                            pixel_x = (int)(76 + (num + 73.0) / 20.0 * 24);
                                        else if (num <= -33.0f)
                                            pixel_x = (int)(100 + (num + 53.0) / 20.0 * 24);
                                        else if (num <= -13.0f)
                                            pixel_x = (int)(124 + (num + 33.0) / 20.0 * 24);
                                        else
                                            pixel_x = (int)(148 + (num + 13.0) / 20.0 * 19);
                                        break;
                                }
                                break;
                            case MeterRXMode.ADC_L:
                            case MeterRXMode.ADC_R:
                                switch ((int)g.DpiX)
                                {
                                    case 96:
                                        pixel_x = (int)(((num + 100) * 1.2) + 12);
                                        break;
                                    case 120:
                                        if (num <= -100.0f)
                                            pixel_x = (int)(0 + (num + 110.0) / 10.0 * 14);
                                        else if (num <= -80.0f)
                                            pixel_x = (int)(14 + (num + 100.0) / 20.0 * 27);
                                        else if (num <= -60.0f)
                                            pixel_x = (int)(41 + (num + 80.0) / 20.0 * 28);
                                        else if (num <= -40.0f)
                                            pixel_x = (int)(69 + (num + 60.0) / 20.0 * 28);
                                        else if (num <= -20.0f)
                                            pixel_x = (int)(97 + (num + 40.0) / 20.0 * 27);
                                        else if (num <= 0.0f)
                                            pixel_x = (int)(124 + (num + 20.0) / 20.0 * 24);
                                        else
                                            pixel_x = (int)(148 + (num - 0.0) / 10.0 * 19);
                                        break;
                                }
                                break;
                            case MeterRXMode.OFF:
                                break;
                        }
                    }
                    else
                    {
                        if (meter_data_ready)
                        {
                            current_meter_data = new_meter_data;
                            //  meter_data_ready = false;  NOT HERE, wait until consumed
                        }

                        num = 0;
                        num = current_meter_data;

                        switch (current_meter_tx_mode)
                        {
                            case MeterTXMode.MIC:
                            case MeterTXMode.EQ:
                            case MeterTXMode.LEVELER:
                            case MeterTXMode.COMP:
                            case MeterTXMode.CPDR:
                            case MeterTXMode.ALC:
                                //num += 3.0;  // number no longer has fudge factor added in the dsp, must be remove
                                switch ((int)g.DpiX)
                                {
                                    case 96:
                                        if (num <= -20.0f)
                                            pixel_x = (int)(0 + (num + 25.0) / 5.0 * 9);
                                        else if (num <= -10.0f)
                                            pixel_x = (int)(9 + (num + 20.0) / 10.0 * 27);
                                        else if (num <= -5.0f)
                                            pixel_x = (int)(36 + (num + 10.0) / 5.0 * 27);
                                        else if (num <= 0.0f)
                                            pixel_x = (int)(63 + (num + 5.0) / 5.0 * 24);
                                        else if (num <= 1.0f)
                                            pixel_x = (int)(87 + (num - 0.0) / 1.0 * 15);
                                        else if (num <= 2.0f)
                                            pixel_x = (int)(102 + (num - 1.0) / 1.0 * 15);
                                        else if (num <= 3.0f)
                                            pixel_x = (int)(117 + (num - 2.0) / 1.0 * 15);
                                        else
                                            pixel_x = (int)(132 + (num - 3.0) / 0.5 * 8);
                                        break;
                                    case 120:
                                        if (num <= -20.0f)
                                            pixel_x = (int)(0 + (num + 25.0) / 5.0 * 10);
                                        else if (num <= -10.0f)
                                            pixel_x = (int)(10 + (num + 20.0) / 10.0 * 30);
                                        else if (num <= -5.0f)
                                            pixel_x = (int)(40 + (num + 10.0) / 5.0 * 30);
                                        else if (num <= 0.0f)
                                            pixel_x = (int)(70 + (num + 5.0) / 5.0 * 27);
                                        else if (num <= 1.0f)
                                            pixel_x = (int)(97 + (num - 0.0) / 1.0 * 17);
                                        else if (num <= 2.0f)
                                            pixel_x = (int)(114 + (num - 1.0) / 1.0 * 17);
                                        else if (num <= 3.0f)
                                            pixel_x = (int)(131 + (num - 2.0) / 1.0 * 17);
                                        else
                                            pixel_x = (int)(148 + (num - 3.0) / 0.5 * 23);
                                        break;
                                }
                                break;
                            case MeterTXMode.FORWARD_POWER:
                            case MeterTXMode.REVERSE_POWER:
                                switch ((int)g.DpiX)
                                {
                                    case 96:
                                        if (num <= 0.1f)
                                            pixel_x = (int)(0 + num * 2);
                                        else if (num <= 0.5f)
                                            pixel_x = (int)(10 + (num) / 10 * 60);
                                        else if (num <= 1.0f)
                                            pixel_x = (int)(20 + (num - 0.5) / 10 * 60);
                                        else if (num <= 5.0f)
                                            pixel_x = (int)(40 + (num - 1) / 10 * 60);
                                        else if (num <= 10.0f)
                                            pixel_x = (int)(70 + (num - 5) / 10 * 60);
                                        else if (num <= 15.0f)
                                            pixel_x = (int)(100 + (num - 10) / 10 * 60);
                                        break;
                                    case 120:
                                        if (num <= 0.1f)
                                            pixel_x = (int)(0 + num * 3);
                                        else if (num <= 0.5f)
                                            pixel_x = (int)(8 + (num) / 8 * 48);
                                        else if (num <= 1.0f)
                                            pixel_x = (int)(20 + (num - 0.5) / 8 * 48);
                                        else if (num <= 5.0f)
                                            pixel_x = (int)(40 + (num - 1) / 8 * 48);
                                        else if (num <= 10.0f)
                                            pixel_x = (int)(70 + (num - 5) / 8 * 48);
                                        else if (num <= 15.0f)
                                            pixel_x = (int)(100 + (num - 10) / 8 * 48);
                                        break;
                                }
                                break;
                            case MeterTXMode.SWR:
                                switch ((int)g.DpiX)
                                {
                                    case 96:
                                        if (double.IsInfinity(num))
                                            pixel_x = 200;
                                        else if (num <= 1.0f)
                                            pixel_x = (int)(0 + num * 3);
                                        else if (num <= 1.5f)
                                            pixel_x = (int)(3 + (num - 1.0) / 0.5 * 27);
                                        else if (num <= 2.0f)
                                            pixel_x = (int)(30 + (num - 1.5) / 0.5 * 20);
                                        else if (num <= 3.0f)
                                            pixel_x = (int)(50 + (num - 2.0) / 1.0 * 21);
                                        else if (num <= 5.0f)
                                            pixel_x = (int)(71 + (num - 3.0) / 2.0 * 21);
                                        else if (num <= 10.0f)
                                            pixel_x = (int)(92 + (num - 5.0) / 5.0 * 21);
                                        else
                                            pixel_x = (int)(113 + (num - 10.0) / 15.0 * 26);
                                        break;
                                    case 120:
                                        if (double.IsInfinity(num))
                                            pixel_x = 200;
                                        else if (num <= 1.0f)
                                            pixel_x = (int)(0 + num * 3);
                                        else if (num <= 1.5f)
                                            pixel_x = (int)(3 + (num - 1.0) / 0.5 * 31);
                                        else if (num <= 2.0f)
                                            pixel_x = (int)(34 + (num - 1.5) / 0.5 * 22);
                                        else if (num <= 3.0f)
                                            pixel_x = (int)(56 + (num - 2.0) / 1.0 * 22);
                                        else if (num <= 5.0f)
                                            pixel_x = (int)(78 + (num - 3.0) / 2.0 * 23);
                                        else if (num <= 10.0f)
                                            pixel_x = (int)(101 + (num - 5.0) / 5.0 * 23);
                                        else
                                            pixel_x = (int)(124 + (num - 10.0) / 15.0 * 43);
                                        break;
                                }
                                break;
                            case MeterTXMode.ALC_G:
                            case MeterTXMode.LVL_G:
                                switch ((int)g.DpiX)
                                {
                                    case 96:
                                        if (num <= 0.0f)
                                            pixel_x = 3;
                                        else if (num <= 5.0f)
                                            pixel_x = (int)(3 + (num - 0.0) / 5.0 * 28);
                                        else if (num <= 10.0f)
                                            pixel_x = (int)(31 + (num - 5.0) / 5.0 * 29);
                                        else if (num <= 15.0f)
                                            pixel_x = (int)(60 + (num - 10.0) / 5.0 * 30);
                                        else if (num <= 20.0f)
                                            pixel_x = (int)(90 + (num - 15.0) / 5.0 * 31);
                                        else
                                            pixel_x = (int)(121 + (num - 20.0) / 5.0 * 29);
                                        break;
                                    case 120:
                                        if (num <= 0.0f)
                                            pixel_x = 3;
                                        else if (num <= 5.0f)
                                            pixel_x = (int)(3 + (num - 0.0) / 5.0 * 31);
                                        else if (num <= 10.0f)
                                            pixel_x = (int)(34 + (num - 5.0) / 5.0 * 33);
                                        else if (num <= 15.0f)
                                            pixel_x = (int)(77 + (num - 10.0) / 5.0 * 33);
                                        else if (num <= 20.0f)
                                            pixel_x = (int)(110 + (num - 15.0) / 5.0 * 35);
                                        else
                                            pixel_x = (int)(145 + (num - 20.0) / 5.0 * 32);
                                        break;
                                }
                                break;
                            case MeterTXMode.OFF:
                                break;
                        }
                    }
                    if (meter_data_ready)
                    {
                        meter_data_ready = false;  //We do NOT want to do this before we have consumed it!!!! so do it here.
                    }

                    switch ((int)g.DpiX)
                    {
                        case 96:
                            if (pixel_x > 139) pixel_x = 139;
                            break;
                        case 120:
                            if (pixel_x > 167) pixel_x = 167;
                            break;
                    }

                    if ((!chkMOX.Checked && current_meter_rx_mode != MeterRXMode.OFF) ||
                        (chkMOX.Checked && current_meter_tx_mode != MeterTXMode.OFF))
                    {
                        if (pixel_x <= 0) pixel_x = 1;

                        LinearGradientBrush brush = new LinearGradientBrush(new Rectangle(0, 0, pixel_x, H),
                            meter_left_color, meter_right_color, LinearGradientMode.Horizontal);

                        g.FillRectangle(brush, 0, 0, pixel_x, H);

                        for (int i = 0; i < 21; i++)
                            g.DrawLine(new Pen(meter_background_color), 6 + i * 8, 0, 6 + i * 8, H);

                        g.DrawLine(new Pen(Color.Red), pixel_x, 0, pixel_x, H);
                        g.FillRectangle(new SolidBrush(meter_background_color), pixel_x + 1, 0, W - pixel_x, H);

                        if (pixel_x >= meter_peak_value)
                        {
                            meter_peak_count = 0;
                            meter_peak_value = pixel_x;
                        }
                        else
                        {
                            if (meter_peak_count++ >= multimeter_peak_hold_samples)
                            {
                                meter_peak_count = 0;
                                meter_peak_value = pixel_x;
                            }
                            else
                            {
                                g.DrawLine(new Pen(Color.Red), meter_peak_value, 0, meter_peak_value, H);
                                g.DrawLine(new Pen(Color.Red), meter_peak_value - 1, 0, meter_peak_value - 1, H);
                            }
                        }
                    }
                    break;
                    #endregion
                case MultiMeterDisplayMode.Edge:
                    #region Edge
                    if (meter_data_ready)
                    {
                        current_meter_data = new_meter_data;
                    }
                    else if (!PowerOn)
                        current_meter_data = -200.0f;

                    if (current_meter_data > avg_num)
                        num = avg_num = current_meter_data * 0.8 + avg_num * 0.2; // fast rise
                    else
                        num = avg_num = current_meter_data * 0.2 + avg_num * 0.8; // slow decay

                    g.DrawRectangle(new Pen(edge_meter_background_color), 0, 0, W, H);

                    SolidBrush low_brush = new SolidBrush(edge_low_color);
                    SolidBrush high_brush = new SolidBrush(edge_high_color);

                    if (!chkMOX.Checked)
                    {
                        switch (current_meter_rx_mode)
                        {
                            case MeterRXMode.SIGNAL_STRENGTH:
                            case MeterRXMode.SIGNAL_AVERAGE:
                                g.FillRectangle(low_brush, 0, H - 4, (int)(W * 0.5), 2);
                                g.FillRectangle(high_brush, (int)(W * 0.5), H - 4, (int)(W * 0.5) - 4, 2);
                                double spacing = (W * 0.5 - 2.0) / 5.0;
                                double string_height = 0;
                                for (int i = 1; i < 6; i++)
                                {
                                    g.FillRectangle(low_brush, (int)(i * spacing - spacing * 0.5), H - 4 - 3, 1, 3);
                                    g.FillRectangle(low_brush, (int)(i * spacing), H - 4 - 6, 2, 6);

                                    Font f = new Font("Arial", 7.0f, FontStyle.Bold);
                                    SizeF size = g.MeasureString((-1 + i * 2).ToString(), f, 1, StringFormat.GenericTypographic);
                                    double string_width = size.Width - 2.0;
                                    string_height = size.Height - 2.0;

                                    //g.TextRenderingHint = TextRenderingHint.AntiAlias;
                                    //g.SmoothingMode = SmoothingMode.AntiAlias;
                                    g.DrawString((-1 + i * 2).ToString(), f, low_brush, (int)(i * spacing - string_width + (int)(i / 5)),
                                        (int)(H - 4 - 8 - string_height));
                                    //g.SmoothingMode = SmoothingMode.None;
                                }
                                spacing = ((double)W * 0.5 - 2.0 - 4.0) / 3.0;
                                for (int i = 1; i < 4; i++)
                                {
                                    g.FillRectangle(high_brush, (int)((double)W * 0.5 + i * spacing - spacing * 0.5), H - 4 - 3, 1, 3);
                                    g.FillRectangle(high_brush, (int)((double)W * 0.5 + i * spacing), H - 4 - 6, 2, 6);

                                    Font f = new Font("Arial", 7.0f, FontStyle.Bold);
                                    SizeF size = g.MeasureString("+" + (i * 20).ToString(), f, 3, StringFormat.GenericTypographic);
                                    double string_width = size.Width - 2.0;

                                    //g.TextRenderingHint = TextRenderingHint.SystemDefault;
                                    g.DrawString("+" + (i * 20).ToString(), f, high_brush,
                                        (int)(W * 0.5 + i * spacing - (int)string_width * 3 - i / 3 * 2),
                                        (int)(H - 4 - 8 - string_height));
                                }

                                if (num > -73.0) // high area
                                {
                                    pixel_x = (int)(W * 0.5 + 1 + (73.0 + num) / 63.0 * (W * 0.5 - 3));
                                }
                                else
                                {
                                    pixel_x = (int)((num + 127.0) / 54.0 * (W * 0.5));
                                }
                                break;
                            case MeterRXMode.ADC_L:
                            case MeterRXMode.ADC_R:
                                spacing = ((double)W - 5.0) / 6.0;
                                g.FillRectangle(low_brush, 0, H - 4, (int)(W - 3.0 - spacing), 2);
                                g.FillRectangle(high_brush, (int)(W - 3.0 - spacing), H - 4, (int)spacing, 2);
                                for (int i = 1; i < 7; i++)
                                {
                                    SolidBrush b = low_brush;
                                    if (i == 6) b = high_brush;
                                    g.FillRectangle(b, (int)(i * spacing - spacing / 2), H - 4 - 3, 1, 5);
                                    g.FillRectangle(b, (int)(i * spacing), H - 4 - 6, 2, 8);

                                    Font f = new Font("Arial", 7.0f, FontStyle.Bold);
                                    string s = (-120 + i * 20).ToString();
                                    SizeF size = g.MeasureString(s, f, 1, StringFormat.GenericTypographic);
                                    double string_width = size.Width - 2.0;
                                    size = g.MeasureString("0", f, 1, StringFormat.GenericTypographic);
                                    string_height = size.Height - 2.0;

                                    g.DrawString(s, f, b, (int)(i * spacing - (int)string_width * (s.Length)), (int)(H - 4 - 8 - string_height));
                                }

                                pixel_x = (int)((num + 120.0) / 120.0 * (W - 5.0));
                                break;
                            case MeterRXMode.OFF:
                                break;
                        }
                    }
                    else
                    {
                        switch (current_meter_tx_mode)
                        {
                            case MeterTXMode.MIC:
                            case MeterTXMode.EQ:
                            case MeterTXMode.LEVELER:
                            case MeterTXMode.COMP:
                            case MeterTXMode.CPDR:
                            case MeterTXMode.ALC:
                                g.FillRectangle(low_brush, 0, H - 4, (int)(W * 0.665), 2);
                                g.FillRectangle(high_brush, (int)(W * 0.665), H - 4, (int)(W * 0.335) - 2, 2);
                                double spacing = (W * 0.665 - 2.0) / 3.0;
                                double string_height = 0;
                                for (int i = 1; i < 4; i++)
                                {
                                    g.FillRectangle(low_brush, (int)(i * spacing - spacing * 0.5), H - 4 - 3, 1, 3);
                                    g.FillRectangle(low_brush, (int)(i * spacing), H - 4 - 6, 2, 6);

                                    string s = (-30 + i * 10).ToString();
                                    Font f = new Font("Arial", 7.0f, FontStyle.Bold);
                                    SizeF size = g.MeasureString("0", f, 1, StringFormat.GenericTypographic);
                                    double string_width = size.Width - 2.0;
                                    string_height = size.Height - 2.0;

                                    //g.TextRenderingHint = TextRenderingHint.AntiAlias;
                                    //g.SmoothingMode = SmoothingMode.AntiAlias;
                                    g.DrawString(s, f, low_brush, (int)(i * spacing - string_width * s.Length + 1.0 - (int)(i / 2) + (int)(i / 3)), (int)(H - 4 - 8 - string_height));
                                    //g.SmoothingMode = SmoothingMode.None;
                                }
                                spacing = (W * 0.335 - 2.0 - 3.0) / 3.0;
                                for (int i = 1; i < 4; i++)
                                {
                                    g.FillRectangle(high_brush, (int)((double)W * 0.665 + i * spacing - spacing * 0.5), H - 4 - 3, 1, 3);
                                    g.FillRectangle(high_brush, (int)((double)W * 0.665 + i * spacing), H - 4 - 6, 2, 6);

                                    Font f = new Font("Arial", 7.0f, FontStyle.Bold);
                                    SizeF size = g.MeasureString(i.ToString(), f, 3, StringFormat.GenericTypographic);
                                    double string_width = size.Width - 2.0;

                                    g.TextRenderingHint = TextRenderingHint.SystemDefault;
                                    g.DrawString(i.ToString(), f, high_brush, (int)(W * 0.665 + i * spacing - (int)string_width), (int)(H - 4 - 8 - string_height));
                                }

                                if (num > 0.0) // high area
                                {
                                    pixel_x = (int)(W * 0.665 + num / 3.0 * (W * 0.335 - 4));
                                }
                                else
                                {
                                    pixel_x = (int)((num + 30.0) / 30.0 * (W * 0.665 - 1.0));
                                }
                                break;
                            case MeterTXMode.FORWARD_POWER:
                            case MeterTXMode.REVERSE_POWER:
                                if (current_model == Model.GENESIS_G160 || current_model == Model.GENESIS_G3020
                                    || current_model == Model.GENESIS_G40 || current_model == Model.GENESIS_G80
                                    || current_model == Model.QRP2000 || current_model == Model.GENESIS_G137 ||
                                    current_model == Model.GENESIS_G500)
                                {
                                    g.FillRectangle(low_brush, 0, H - 4, (int)(W * 0.75), 2);
                                    g.FillRectangle(high_brush, (int)(W * 0.75), H - 4, (int)(W * 0.25) - 10, 2);
                                    spacing = (W * 0.75 - 2.0) / 4.0;
                                    string_height = 0;
                                    string[] list = { "0.5", "1", "5", "10" };
                                    for (int i = 1; i < 5; i++)
                                    {
                                        g.FillRectangle(low_brush, (int)(i * spacing - spacing * 0.5), H - 4 - 3, 1, 3);
                                        g.FillRectangle(low_brush, (int)(i * spacing), H - 4 - 6, 2, 6);

                                        string s = list[i - 1];
                                        Font f = new Font("Arial", 7.0f, FontStyle.Bold);
                                        SizeF size = g.MeasureString("0", f, 1, StringFormat.GenericTypographic);
                                        double string_width = size.Width - 2.0;
                                        string_height = size.Height - 2.0;

                                        //g.TextRenderingHint = TextRenderingHint.AntiAlias;
                                        //g.SmoothingMode = SmoothingMode.AntiAlias;
                                        g.DrawString(s, f, low_brush, (int)(i * spacing - string_width * s.Length +
                                            (int)(i / 3) + (int)(i / 4)), (int)(H - 4 - 8 - string_height));
                                        //g.SmoothingMode = SmoothingMode.None;
                                    }
                                    spacing = (W * 0.25 - 2.0 - 10.0) / 1.0;
                                    for (int i = 1; i < 2; i++)
                                    {
                                        g.FillRectangle(high_brush, (int)((double)W * 0.75 + i * spacing - spacing * 0.5), H - 4 - 3, 1, 3);
                                        g.FillRectangle(high_brush, (int)((double)W * 0.75 + i * spacing), H - 4 - 6, 2, 6);

                                        Font f = new Font("Arial", 7.0f, FontStyle.Bold);
                                        SizeF size = g.MeasureString("0", f, 3, StringFormat.GenericTypographic);
                                        double string_width = size.Width - 2.0;

                                        g.TextRenderingHint = TextRenderingHint.SystemDefault;
                                        g.DrawString("15", f, high_brush, (int)(W * 0.75 + i * spacing - (int)3.5 * string_width),
                                            (int)(H - 4 - 8 - string_height));
                                    }

                                    if (num <= 10.0) // low area
                                    {
                                        spacing = (W * 0.75 - 2.0) / 4.0;
                                        if (num <= 0.5)
                                            pixel_x = (int)(num / 0.5 * (int)spacing);
                                        else if (num <= 1.0)
                                            pixel_x = (int)(spacing + (num - 0.5) / 0.5 * spacing);
                                        else if (num <= 5.0)
                                            pixel_x = (int)(2 * spacing + (num - 1.0) / 4.0 * spacing);
                                        else
                                            pixel_x = (int)(3 * spacing + (num - 5.0) / 5.0 * spacing);
                                    }
                                    else
                                    {
                                        spacing = (W * 0.25 - 2.0 - 15.0) / 1.0;
                                        if (num <= 12.0)
                                            pixel_x = (int)(W * 0.80 + (num - 10.0) / 20.0 * spacing);
                                        else if (num <= 13)
                                            pixel_x = (int)(W * 0.84 + (num - 10.0) / 20.0 * spacing);
                                        else if (num <= 14)
                                            pixel_x = (int)(W * 0.88 + (num - 10.0) / 20.0 * spacing);
                                        else if (num <= 15)
                                            pixel_x = (int)(W * 0.90 + (num - 10.0) / 20.0 * spacing);
                                    }
                                }
                                else if ((current_model == Model.GENESIS_G11 ||
                                    (current_model == Model.GENESIS_G59USB || current_model == Model.GENESIS_G59NET)
                                    && g59_PA10_present)) // 10W G59, 5W G11
                                {
                                    g.FillRectangle(low_brush, 0, H - 4, (int)(W * 0.75), 2);
                                    g.FillRectangle(high_brush, (int)(W * 0.75), H - 4, (int)(W * 0.25) - 9, 2);
                                    spacing = (W * 0.75 - 2.0) / 4.0;
                                    string_height = 0;
                                    string[] list = { "1", "2", "5", "8", "15" };
                                    for (int i = 1; i < 5; i++)
                                    {
                                        g.FillRectangle(low_brush, (int)(i * spacing - spacing * 0.5), H - 4 - 3, 1, 3);
                                        g.FillRectangle(low_brush, (int)(i * spacing), H - 4 - 6, 2, 6);

                                        string s = list[i - 1];
                                        Font f = new Font("Arial", 7.0f, FontStyle.Bold);
                                        SizeF size = g.MeasureString("0", f, 1, StringFormat.GenericTypographic);
                                        double string_width = size.Width - 2.0;
                                        string_height = size.Height - 2.0;

                                        //g.TextRenderingHint = TextRenderingHint.AntiAlias;
                                        //g.SmoothingMode = SmoothingMode.AntiAlias;
                                        g.DrawString(s, f, low_brush, (int)(i * spacing - string_width * s.Length + 1.0 +
                                            (int)(i / 2) - (int)(i / 4)), (int)(H - 4 - 8 - string_height));
                                        //g.SmoothingMode = SmoothingMode.None;
                                    }
                                    spacing = (W * 0.25 - 2.0 - 9.0) / 1.0;
                                    for (int i = 1; i < 2; i++)
                                    {
                                        g.FillRectangle(high_brush, (int)((double)W * 0.75 + i * spacing - spacing * 0.5), H - 4 - 3, 1, 3);
                                        g.FillRectangle(high_brush, (int)((double)W * 0.75 + i * spacing), H - 4 - 6, 2, 6);

                                        Font f = new Font("Arial", 7.0f, FontStyle.Bold);
                                        SizeF size = g.MeasureString("0", f, 3, StringFormat.GenericTypographic);
                                        double string_width = size.Width - 2.0;

                                        //g.TextRenderingHint = TextRenderingHint.SystemDefault;
                                        g.DrawString("15", f, high_brush, (int)(W * 0.75 + 2 + i * spacing - (int)4.0 * string_width),
                                            (int)(H - 4 - 8 - string_height));
                                    }

                                    num *= 100;
                                    if (num < 801.0) // low area
                                    {
                                        spacing = (W * 0.75 - 2.0) / 4.0;
                                        if (num <= 100.0)
                                            pixel_x = (int)(num / 100.0 * spacing);
                                        else if (num <= 250.0)
                                            pixel_x = (int)(spacing + (num - 100.0) / 120.0 * spacing);
                                        else if (num <= 500.0)
                                            pixel_x = (int)(2 * spacing + (num - 250.0) / 300.0 * spacing);
                                        else
                                            pixel_x = (int)(3 * spacing + (num - 500.0) / 480.0 * spacing);
                                    }
                                    else
                                    {
                                        spacing = (W * 0.25 - 2.0 - 9.0) / 1.0;
                                        pixel_x = (int)(W * 0.75 + (num - 800.0) / 700.0 * spacing);
                                    }
                                }
                                else if (current_model == Model.GENESIS_G59USB ||
                                    current_model == Model.GENESIS_G59NET && !g59_PA10_present) // 10mW solo G59
                                {
                                    g.FillRectangle(low_brush, 0, H - 4, (int)(W * 0.75), 2);
                                    g.FillRectangle(high_brush, (int)(W * 0.75), H - 4, (int)(W * 0.25) - 9, 2);
                                    spacing = (W * 0.75 - 2.0) / 4.0;
                                    string_height = 0;
                                    string[] list = { "1", "2", "5", "8", "10" };
                                    for (int i = 1; i < 5; i++)
                                    {
                                        g.FillRectangle(low_brush, (int)(i * spacing - spacing * 0.5), H - 4 - 3, 1, 3);
                                        g.FillRectangle(low_brush, (int)(i * spacing), H - 4 - 6, 2, 6);

                                        string s = list[i - 1];
                                        Font f = new Font("Arial", 7.0f, FontStyle.Bold);
                                        SizeF size = g.MeasureString("0", f, 1, StringFormat.GenericTypographic);
                                        double string_width = size.Width - 2.0;
                                        string_height = size.Height - 2.0;

                                        //g.TextRenderingHint = TextRenderingHint.AntiAlias;
                                        //g.SmoothingMode = SmoothingMode.AntiAlias;
                                        g.DrawString(s, f, low_brush, (int)(i * spacing - string_width * s.Length + 1.0 +
                                            (int)(i / 2) - (int)(i / 4)), (int)(H - 4 - 8 - string_height));
                                        //g.SmoothingMode = SmoothingMode.None;
                                    }
                                    spacing = (W * 0.25 - 2.0 - 9.0) / 1.0;
                                    for (int i = 1; i < 2; i++)
                                    {
                                        g.FillRectangle(high_brush, (int)((double)W * 0.75 + i * spacing - spacing * 0.5), H - 4 - 3, 1, 3);
                                        g.FillRectangle(high_brush, (int)((double)W * 0.75 + i * spacing), H - 4 - 6, 2, 6);

                                        Font f = new Font("Arial", 7.0f, FontStyle.Bold);
                                        SizeF size = g.MeasureString("0", f, 3, StringFormat.GenericTypographic);
                                        double string_width = size.Width - 2.0;

                                        //g.TextRenderingHint = TextRenderingHint.SystemDefault;
                                        g.DrawString("10", f, high_brush, (int)(W * 0.75 + 2 + i * spacing - (int)4.0 * string_width),
                                            (int)(H - 4 - 8 - string_height));
                                    }

                                    num *= 100000;
                                    if (num < 900.0) // low area
                                    {
                                        spacing = (W * 0.75 - 2.0) / 4.0;
                                        if (num <= 100.0)
                                            pixel_x = (int)(num / 100.0 * spacing);
                                        else if (num <= 250.0)
                                            pixel_x = (int)(spacing + (num - 100.0) / 150.0 * spacing);
                                        else if (num <= 500.0)
                                            pixel_x = (int)(2 * spacing + (num - 250.0) / 250.0 * spacing);
                                        else
                                            pixel_x = (int)(3 * spacing + (num - 500.0) / 300.0 * spacing);
                                    }
                                    else
                                    {
                                        spacing = (W * 0.25 - 2.0 - 9.0) / 1.0;
                                        pixel_x = (int)(W * 0.75 + (num - 800.0) / 200.0 * spacing);
                                    }
                                }
                                break;
                            case MeterTXMode.SWR:
                                g.FillRectangle(low_brush, 0, H - 4, (int)(W * 0.75), 2);
                                g.FillRectangle(high_brush, (int)(W * 0.75), H - 4, (int)(W * 0.25) - 9, 2);
                                spacing = (W * 0.75 - 2.0) / 4.0;
                                string_height = 0;
                                string[] swr_list = { "1.5", "2", "5", "10", "20" };
                                for (int i = 1; i < 5; i++)
                                {
                                    g.FillRectangle(low_brush, (int)(i * spacing - spacing * 0.5), H - 4 - 3, 1, 3);
                                    g.FillRectangle(low_brush, (int)(i * spacing), H - 4 - 6, 2, 6);

                                    string s = swr_list[i - 1];
                                    Font f = new Font("Arial", 7.0f, FontStyle.Bold);
                                    SizeF size = g.MeasureString("0", f, 1, StringFormat.GenericTypographic);
                                    double string_width = size.Width - 2.0;
                                    string_height = size.Height - 2.0;

                                    //g.TextRenderingHint = TextRenderingHint.AntiAlias;
                                    //g.SmoothingMode = SmoothingMode.AntiAlias;
                                    g.DrawString(s, f, low_brush, (int)(i * spacing - string_width * s.Length + 2.0 - 2 * (int)(i / 2) + 3 * (int)(i / 4)), (int)(H - 4 - 8 - string_height));
                                    //g.SmoothingMode = SmoothingMode.None;
                                }
                                spacing = (W * 0.25 - 2.0 - 9.0) / 1.0;
                                for (int i = 1; i < 2; i++)
                                {
                                    g.FillRectangle(high_brush, (int)((double)W * 0.75 + i * spacing - spacing * 0.5), H - 4 - 3, 1, 3);
                                    g.FillRectangle(high_brush, (int)((double)W * 0.75 + i * spacing), H - 4 - 6, 2, 6);

                                    Font f = new Font("Arial", 7.0f, FontStyle.Bold);
                                    SizeF size = g.MeasureString("0", f, 3, StringFormat.GenericTypographic);
                                    double string_width = size.Width - 2.0;

                                    //g.TextRenderingHint = TextRenderingHint.SystemDefault;
                                    g.DrawString("20+", f, high_brush, (int)(W * 0.75 + i * spacing - (int)2.5 * string_width), (int)(H - 4 - 8 - string_height));
                                }

                                if (num < 10.0) // low area
                                {
                                    spacing = (W * 0.75 - 2.0) / 4.0;
                                    if (num <= 1.5)
                                        pixel_x = (int)((num - 1.0) / 0.5 * spacing);
                                    else if (num <= 2.0)
                                        pixel_x = (int)(spacing + (num - 1.5) / 0.5 * spacing);
                                    else if (num <= 5.0)
                                        pixel_x = (int)(2 * spacing + (num - 2.0) / 3.0 * spacing);
                                    else
                                        pixel_x = (int)(3 * spacing + (num - 5.0) / 5.0 * spacing);
                                }
                                else
                                {
                                    spacing = (W * 0.25 - 2.0 - 9.0) / 1.0;
                                    pixel_x = (int)(W * 0.75 + (num - 10.0) / 10.0 * spacing);
                                }
                                if (double.IsInfinity(num)) pixel_x = W - 2;
                                break;
                            case MeterTXMode.ALC_G:
                            case MeterTXMode.LVL_G:
                                g.FillRectangle(low_brush, 0, H - 4, (int)(W * 0.75), 2);
                                g.FillRectangle(high_brush, (int)(W * 0.75), H - 4, (int)(W * 0.25) - 9, 2);
                                spacing = (W * 0.75 - 2.0) / 4.0;
                                string_height = 0;
                                string[] gain_list = { "5", "10", "15", "20", "25" };
                                for (int i = 1; i < 5; i++)
                                {
                                    g.FillRectangle(low_brush, (int)(i * spacing - spacing * 0.5), H - 4 - 3, 1, 3);
                                    g.FillRectangle(low_brush, (int)(i * spacing), H - 4 - 6, 2, 6);

                                    string s = gain_list[i - 1];
                                    Font f = new Font("Arial", 7.0f, FontStyle.Bold);
                                    SizeF size = g.MeasureString("0", f, 1, StringFormat.GenericTypographic);
                                    double string_width = size.Width - 2.0;
                                    string_height = size.Height - 2.0;

                                    //g.TextRenderingHint = TextRenderingHint.AntiAlias;
                                    //g.SmoothingMode = SmoothingMode.AntiAlias;
                                    g.DrawString(s, f, low_brush, (int)(i * spacing - string_width * s.Length + (int)(i / 3)), (int)(H - 4 - 8 - string_height));
                                    //g.SmoothingMode = SmoothingMode.None;
                                }
                                spacing = (W * 0.25 - 2.0 - 9.0) / 1.0;
                                for (int i = 1; i < 2; i++)
                                {
                                    g.FillRectangle(high_brush, (int)((double)W * 0.75 + i * spacing - spacing * 0.5), H - 4 - 3, 1, 3);
                                    g.FillRectangle(high_brush, (int)((double)W * 0.75 + i * spacing), H - 4 - 6, 2, 6);

                                    Font f = new Font("Arial", 7.0f, FontStyle.Bold);
                                    SizeF size = g.MeasureString("0", f, 3, StringFormat.GenericTypographic);
                                    double string_width = size.Width - 2.0;

                                    //g.TextRenderingHint = TextRenderingHint.SystemDefault;
                                    g.DrawString("25+", f, high_brush, (int)(W * 0.75 + i * spacing - (int)2.5 * string_width), (int)(H - 4 - 8 - string_height));
                                }

                                spacing = (W * 0.75 - 2.0) / 4.0;
                                pixel_x = (int)(num / 5.0 * spacing);
                                break;
                            case MeterTXMode.OFF:
                                break;
                        }
                    }

                    if ((!chkMOX.Checked && current_meter_rx_mode != MeterRXMode.OFF) ||
                        (chkMOX.Checked && current_meter_tx_mode != MeterTXMode.OFF))
                    {
                        pixel_x = Math.Max(0, pixel_x);
                        pixel_x = Math.Min(W, pixel_x);

                        Pen line_pen = new Pen(edge_avg_color);
                        Pen line_dark_pen = new Pen(
                            Color.FromArgb((edge_avg_color.R + edge_meter_background_color.R) / 2,
                            (edge_avg_color.G + edge_meter_background_color.G) / 2,
                            (edge_avg_color.B + edge_meter_background_color.B) / 2));

                        g.InterpolationMode = InterpolationMode.HighQualityBicubic;
                        g.SmoothingMode = SmoothingMode.HighQuality;
                        g.DrawLine(line_dark_pen, pixel_x - 1, 0, pixel_x - 1, H);
                        g.DrawLine(line_pen, pixel_x, 0, pixel_x, H);
                        g.DrawLine(line_dark_pen, pixel_x + 1, 0, pixel_x + 1, H);
                        g.InterpolationMode = InterpolationMode.Default;
                        g.SmoothingMode = SmoothingMode.Default;
                    }

                    if (meter_data_ready)
                    {
                        meter_data_ready = false;  //We do NOT want to do this before we have consumed it!!!! so do it here.
                    }
                    break;
                    #endregion
                case MultiMeterDisplayMode.Analog:
                    #region Analog

                    #endregion
                    break;
            }
        }

        private void ResetMultiMeterPeak()
        {
            meter_peak_count = multimeter_peak_hold_samples;
            avg_num = -200.0f;
        }

        private void panelLOSCHover_Paint(object sender, System.Windows.Forms.PaintEventArgs e)
        {
            if (losc_hover_digit < 0)
                return;

            int x = 0;
            int width = 0;

            if (small_lsd && txtLOSCLSD.Visible)
            {
                x += (losc_char_width + losc_char_space) * losc_hover_digit;
                if (losc_hover_digit > 3)
                    x += (losc_decimal_space - losc_char_space);

                if (losc_hover_digit > 6)
                {
                    x += losc_small_char_width;
                    x += (losc_small_char_width + losc_small_char_space - losc_char_width - losc_char_space) * (losc_hover_digit - 6);
                    width = x + losc_small_char_width;
                }
                else width = x + losc_char_width;
            }
            else
            {
                x += (losc_char_width + losc_char_space) * losc_hover_digit;
                if (losc_hover_digit > 3)
                    x += (losc_decimal_space - losc_char_space);
                width = x + losc_char_width;
            }

            e.Graphics.DrawLine(new Pen(txtLOSCFreq.ForeColor, 2.0f), x, 1, width, 1);
        }

        private void panelVFOAHover_Paint(object sender, System.Windows.Forms.PaintEventArgs e)
        {
            if (vfoA_hover_digit < 0)
                return;

            int x = 0;
            int width = 0;

            if (small_lsd && txtVFOALSD.Visible)
            {
                x += (vfoA_char_width + vfoA_char_space) * vfoA_hover_digit;
                if (vfoA_hover_digit > 3)
                    x += (vfoA_decimal_space - vfoA_char_space);

                if (vfoA_hover_digit > 6)
                {
                    x += vfoA_small_char_width;
                    x += (vfoA_small_char_width + vfoA_small_char_space - vfoA_char_width - vfoA_char_space) * (vfoA_hover_digit - 6);
                    width = x + vfoA_small_char_width;
                }
                else width = x + vfoA_char_width;
            }
            else
            {
                x += (vfoA_char_width + vfoA_char_space) * vfoA_hover_digit;
                if (vfoA_hover_digit > 3)
                    x += (vfoA_decimal_space - vfoA_char_space);
                width = x + vfoA_char_width;
            }

            e.Graphics.DrawLine(new Pen(txtVFOAFreq.ForeColor, 2.0f), x, 1, width, 1);
        }

        private void panelVFOBHover_Paint(object sender, System.Windows.Forms.PaintEventArgs e)
        {
            if (vfoB_hover_digit < 0)
                return;

            int x = 0;
            int width = 0;

            if (small_lsd && txtVFOBLSD.Visible)
            {
                x += (vfoB_char_width + vfoB_char_space) * vfoB_hover_digit;
                if (vfoB_hover_digit > 3)
                    x += (vfoB_decimal_space - vfoB_char_space);

                if (vfoB_hover_digit > 6)
                {
                    x += vfoB_small_char_width;
                    x += (vfoB_small_char_width + vfoB_small_char_space - vfoB_char_width - vfoB_char_space) * (vfoB_hover_digit - 6);
                    width = x + vfoB_small_char_width;
                }
                else width = x + vfoB_char_width;
            }
            else
            {
                x += (vfoB_char_width + vfoB_char_space) * vfoB_hover_digit;
                if (vfoB_hover_digit > 3)
                    x += (vfoB_decimal_space - vfoB_char_space);
                width = x + vfoB_char_width;
            }

            e.Graphics.DrawLine(new Pen(txtVFOBFreq.ForeColor, 2.0f), x, 1, width, 1);
        }

#if(DirectX)
        public void UpdateDirectXDisplayWaterfallAverage()
        {
            try
            {
                double dttsp_osc = (LOSCFreq - vfoAFreq) * 1e6;
                // Debug.WriteLine("last vfo: " + avg_last_ddsfreq + " vfo: " + DDSFreq); 
                if (Display_DirectX.average_waterfall_buffer[0] == Display_DirectX.CLEAR_FLAG)
                {
                    //Debug.WriteLine("Clearing average buf"); 
                    for (int i = 0; i < Display_DirectX.BUFFER_SIZE; i++)
                        Display_DirectX.average_waterfall_buffer[i] = Display_DirectX.current_waterfall_data[i];
                }

                float new_mult = 0.0f;
                float old_mult = 0.0f;

                new_mult = Display_DirectX.waterfall_avg_mult_new;
                old_mult = Display_DirectX.waterfall_avg_mult_old;

                for (int i = 0; i < Display_DirectX.BUFFER_SIZE; i++)
                    Display_DirectX.average_waterfall_buffer[i] = Display_DirectX.current_waterfall_data[i] =
                        (float)(Display_DirectX.current_waterfall_data[i] * new_mult +
                        Display_DirectX.average_waterfall_buffer[i] * old_mult);
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }
#endif

        #endregion

        #region Thread and Timer Routines
        // ======================================================
        // Thread Routines
        // ======================================================
#if(DirectX)
        private void RunDisplay_DirectX()
        {
            try
            {
                while (PowerOn)
                {
                    //display_mutex.WaitOne();

                    if (this.WindowState == FormWindowState.Minimized && !ConsoleClosing)
                    {
                        Thread.Sleep(display_delay);
                    }
                    else
                    {
                        if (!calibration_running)
                        {
                            switch (current_display_mode)
                            {
                                case DisplayMode.PANASCOPE:
                                    if (Display_DirectX.new_display_data != null &&
                                        Display_DirectX.new_scope_data != null && !pause_DisplayThread)
                                    {
                                        if (!Display_DirectX.scope_data_ready)
                                            fixed (float* ptr = &Display_DirectX.new_scope_data[0])
                                                DttSP.GetScope(thread_no, ptr, (int)(scope_time * 48));
                                        Display_DirectX.scope_data_ready = true;
                                        fixed (float* ptr = &Display_DirectX.new_display_data[0])
                                            DttSP.GetPanadapter(thread_no, ptr);
                                    }
                                    break;
                                case DisplayMode.HISTOGRAM:
                                case DisplayMode.PANADAPTER:
                                    if (Display_DirectX.new_display_data != null && !pause_DisplayThread)
                                    {
                                        fixed (float* ptr = &Display_DirectX.new_display_data[0])
                                            DttSP.GetPanadapter(thread_no, ptr);
                                    }
                                    break;
                                case DisplayMode.PANAFALL:
                                case DisplayMode.PANAFALL_INV:
                                    {
                                        if (Display_DirectX.new_display_data != null &&
                                            Display_DirectX.new_waterfall_data != null && !pause_DisplayThread)
                                        {
                                            /*if (voip_type == VoIPtype.Server && CAT_server_socket != null && 
                                                !CAT_server_socket.HRDserver)
                                            {
                                                fixed (float* ptr = &CAT_server_socket.display_data[0])
                                                    DttSP.GetPanadapter(thread_no, ptr);
                                                string msg = "Display data,";

                                                for (int i = 0; i < 50; i++)
                                                {
                                                    msg += CAT_server_socket.display_data[i].ToString() + ";";
                                                }

                                                CAT_server_socket.voip.SendMessage(msg, "DISP");
                                            }
                                            else if (voip_type == VoIPtype.Client && CAT_client_socket != null &&
                                                CAT_client_socket.VoIP_enabled)
                                            {
                                                Array.Copy(CAT_client_socket.display_data, Display_DirectX.new_display_data, 4096);
                                                Array.Copy(Display_DirectX.new_display_data, Display_DirectX.new_waterfall_data, 4096);
                                                Display_DirectX.WaterfallDataReady = true;
                                            }
                                            else*/
                                            {
                                                fixed (float* ptr = &Display_DirectX.new_display_data[0])
                                                    DttSP.GetPanadapter(thread_no, ptr);
                                                Array.Copy(Display_DirectX.new_display_data, Display_DirectX.new_waterfall_data, 4096);
                                                Display_DirectX.WaterfallDataReady = true;
                                            }
                                        }
                                    }
                                    break;
                                case DisplayMode.WATERFALL:
                                    if (Display_DirectX.new_waterfall_data != null && !pause_DisplayThread)
                                    {
                                        fixed (float* ptr = &Display_DirectX.new_waterfall_data[0])
                                            DttSP.GetPanadapter(thread_no, ptr);
                                        Display_DirectX.WaterfallDataReady = true;
                                    }
                                    break;
                                case DisplayMode.PHASE2:
                                    {
                                        if (Display_DirectX.new_display_data != null && !pause_DisplayThread)
                                        {
                                            fixed (float* ptr = &Display_DirectX.new_display_data[0])
                                                DttSP.GetPhase(thread_no, ptr, Display_DirectX.PhaseNumPts);
                                        }
                                    }
                                    break;
                                case DisplayMode.PHASE:
                                    {
                                        if (Display_DirectX.new_display_data != null && !pause_DisplayThread)
                                        {
                                            fixed (float* ptr = &Display_DirectX.new_display_data[0])
                                                DttSP.GetPhase(thread_no, ptr, Display_DirectX.PhaseNumPts);
                                        }
                                    }
                                    break;
                                case DisplayMode.SCOPE:
                                    {
                                        if (Display_DirectX.new_scope_data != null && !pause_DisplayThread)
                                        {
                                            fixed (float* ptr = &Display_DirectX.new_scope_data[0])
                                                DttSP.GetScope(thread_no, ptr, (int)(scope_time * 48));

                                            Display_DirectX.scope_data_ready = true;
                                        }
                                    }
                                    break;
                                case DisplayMode.SPECTRUM:
                                    {
                                        if (Display_DirectX.new_display_data != null && !pause_DisplayThread)
                                        {
                                            fixed (float* ptr = &Display_DirectX.new_display_data[0])
                                                DttSP.GetSpectrum(thread_no, ptr);
                                        }
                                    }
                                    break;
                                case DisplayMode.OFF:
                                    {

                                    }
                                    break;
                                default:
                                    if (Display_DirectX.new_display_data != null && !pause_DisplayThread)
                                    {
                                        fixed (float* ptr = &Display_DirectX.new_display_data[0])
                                            DttSP.GetPanadapter(thread_no, ptr);
                                    }

                                    break;
                            }

                            if (!pause_DisplayThread)
                            {
                                Display_DirectX.DataReady = true;
                                UpdateDisplay();
                            }
                        }

                        Thread.Sleep(display_delay);
                    }

                    //display_mutex.ReleaseMutex();
                }
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
                //display_mutex.ReleaseMutex();
            }
        }
#endif

        private void RunDisplay_GDI()
        {
            try
            {
                while (PowerOn)
                {
                    //display_mutex.WaitOne();

                    if ((this.WindowState == FormWindowState.Minimized ||
                        current_display_mode == DisplayMode.OFF) && !Audio.EnableEthernetServerDevice && !ConsoleClosing)
                    {
                        Thread.Sleep(display_delay);
                    }
                    else if ((!Audio.EnableEthernetClientDevice && Audio.ClientRFSpectar) ||
                        (Audio.EnableEthernetClientDevice && Audio.ClientRFSpectar) ||
                        Audio.EnableEthernetServerDevice ||
                        (!Audio.EnableEthernetServerDevice && !Audio.EnableEthernetClientDevice))
                    {
                        if (!calibration_running)
                        {
                            switch (current_display_mode)
                            {
                                case DisplayMode.PANASCOPE:
                                    fixed (float* ptr = &Display_GDI.new_display_data[0])
                                        DttSP.GetPanadapter(thread_no, ptr);
                                    break;
                                case DisplayMode.HISTOGRAM:
                                case DisplayMode.PANADAPTER:
                                    {
                                        if (!Display_GDI.DataReady && !pause_DisplayThread)
                                            fixed (float* ptr = &Display_GDI.new_display_data[0])
                                                DttSP.GetPanadapter(thread_no, ptr);
                                    }
                                    break;

                                case DisplayMode.WATERFALL:
                                    {
                                        fixed (float* ptr = &Display_GDI.new_waterfall_data[0])
                                            DttSP.GetPanadapter(thread_no, ptr);
                                    }
                                    break;
                                case DisplayMode.PANAFALL:
                                case DisplayMode.PANAFALL_INV:
                                    {
                                        if (!Display_GDI.DataReady && !pause_DisplayThread)
                                            fixed (float* ptr = &Display_GDI.new_display_data[0])
                                                DttSP.GetPanadapter(thread_no, ptr);

                                        if (!Display_GDI.WaterfallDataReady && !pause_DisplayThread)
                                            fixed (float* ptr = &Display_GDI.new_waterfall_data[0])
                                                DttSP.GetPanadapter(thread_no, ptr);
                                    }
                                    break;
                                case DisplayMode.PHASE2:
                                    {
                                        if (!Display_GDI.DataReady && !pause_DisplayThread)
                                            fixed (float* ptr = &Display_GDI.new_display_data[0])
                                                DttSP.GetPhase(thread_no, ptr, Display_GDI.PhaseNumPts);
                                    }
                                    break;
                                case DisplayMode.PHASE:
                                    {
                                        if (!Display_GDI.DataReady && !pause_DisplayThread)
                                            fixed (float* ptr = &Display_GDI.new_display_data[0])
                                                DttSP.GetPhase(thread_no, ptr, Display_GDI.PhaseNumPts);
                                    }
                                    break;
                                case DisplayMode.SCOPE:
                                    {
                                        if (Display_GDI.new_scope_data != null && !pause_DisplayThread)
                                        {
                                            fixed (float* ptr = &Display_GDI.new_scope_data[0])
                                                DttSP.GetScope(thread_no, ptr, (int)(scope_time * 48));

                                            Display_GDI.scope_data_ready = true;
                                        }
                                    }
                                    break;
                                case DisplayMode.SPECTRUM:
                                    {
                                        if (!Display_GDI.DataReady && !pause_DisplayThread)
                                            fixed (float* ptr = &Display_GDI.new_display_data[0])
                                                DttSP.GetSpectrum(thread_no, ptr);
                                    }
                                    break;
                                case DisplayMode.OFF:
                                    {

                                    }
                                    break;
                                default:
                                    {
                                        if (!Display_GDI.DataReady && !pause_DisplayThread)
                                            fixed (float* ptr = &Display_GDI.new_display_data[0])
                                                DttSP.GetPanadapter(thread_no, ptr);
                                    }
                                    break;
                            }

                            Display_GDI.WaterfallDataReady = true;
                            Display_GDI.DataReady = true;
                            UpdateDisplay();

                            if (PowerOn)
                                Thread.Sleep(display_delay);
                        }
                        else
                        {
                            if (!Display_GDI.DataReady)
                                fixed (float* ptr = &Display_GDI.new_display_data[0])
                                    DttSP.GetSpectrum(thread_no, ptr);

                            if (!pause_DisplayThread)
                            {
                                Display_GDI.WaterfallDataReady = true;
                                Display_GDI.DataReady = true;
                                UpdateDisplay();
                            }

                            if (PowerOn)
                                Thread.Sleep(display_delay);
                        }
                    }
                    else
                    {
                        UpdateDisplay();
                        Thread.Sleep(display_delay);
                    }

                    //display_mutex.ReleaseMutex();
                }
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
                //display_mutex.ReleaseMutex();
            }
        }

        public float multimeter_avg = Display_GDI.CLEAR_FLAG;
        public float swr_avg = 0.0f;
        private int switch_time = 0;
        private bool previous_keyer_state = false;
        private void UpdateMultimeter()
        {
            float num_tmp = 0.0f;
            float num = 0f;

            while (PowerOn)
            {
                try
                {
                    if (this.WindowState == FormWindowState.Minimized || ConsoleClosing)
                    {
                        Thread.Sleep(display_delay);
                    }
                    else
                    {
                        string output = "";

                        //if (!meter_data_ready || current_meter_display_mode == MultiMeterDisplayMode.Analog)
                        //{
                            if (!chkMOX.Checked)
                            {
                                if (Audio.CurrentAudioState1 != Audio.AudioState.DTTSP)
                                    goto end;

                                MeterRXMode mode = CurrentMeterRXMode;

                                if (vfo_new_look)
                                {
                                    if (digital_smeter)
                                    {
                                        switch (SMeter_type)
                                        {
                                            case SMeterType.type1:
                                                sMeterDigital1.swrValue = 0.0f;
                                                break;
                                            case SMeterType.type2:
                                                sMeterDigital2.swrValue = 0.0f;
                                                break;
                                        }
                                    }
                                    else
                                        NewVFOSignalGauge.Value = 0.0f;
                                }

                                switch (mode)
                                {
                                    case MeterRXMode.SIGNAL_STRENGTH:
                                        num = DttSP.CalculateRXMeter(0, 0, DttSP.MeterType.SIGNAL_STRENGTH);  // for RX0
                                        num = num + multimeter_cal_offset +
                                            filter_size_cal_offset;
                                        output = num.ToString("f1") + " dBm";
                                        new_meter_data = num;

                                        num_tmp = num + 127.0f;
                                        if (num <= -73.0f && num >= -127.0f)
                                        {
                                            num_tmp = num_tmp / 6;
                                        }
                                        else if (num > -13.0f)
                                        {
                                            num_tmp = NewVFOSignalGauge.MaxValue;
                                        }
                                        else if (num > -73.0f)
                                        {
                                            num_tmp = -(-73.0f - num) / 6.6f + 9;
                                        }

                                        if (vfo_new_look)
                                        {
                                            if (digital_smeter)
                                            {
                                                switch (SMeter_type)
                                                {
                                                    case SMeterType.type1:
                                                        sMeterDigital1.SignalValue = num_tmp;
                                                        break;
                                                    case SMeterType.type2:
                                                        sMeterDigital2.SignalValue = num_tmp;
                                                        break;
                                                }
                                            }
                                            else
                                                NewVFOSignalGauge.Value = num_tmp;
                                        }
                                        else
                                            AnalogSignalGauge.Value = num_tmp;

                                        break;
                                    case MeterRXMode.SIGNAL_AVERAGE:
                                        num = DttSP.CalculateRXMeter(0, 0, DttSP.MeterType.SIGNAL_STRENGTH);  // for RX0
                                        if (multimeter_avg == Display_GDI.CLEAR_FLAG) multimeter_avg = num;
                                        num = multimeter_avg_mult_old * multimeter_avg + multimeter_avg_mult_new * num;
                                        multimeter_avg = num;
                                        num = num +
                                            multimeter_cal_offset +
                                            filter_size_cal_offset;
                                        output = num.ToString("f1") + " dBm";
                                        new_meter_data = num;

                                        num_tmp = num + 127.0f;
                                        if (num <= -73.0f && num >= -127.0f)
                                        {
                                            num_tmp = num_tmp / 6;
                                        }
                                        else if (num > -73.0f && num <= -13.0f)
                                        {
                                            num_tmp = -(-73.0f - num) / 6.6f + 9;
                                        }
                                        else if (num > -13.0f)
                                        {
                                            num_tmp = NewVFOSignalGauge.MaxValue;
                                        }
                                        else
                                            num_tmp = 0;

                                        if (vfo_new_look)
                                        {
                                            if (digital_smeter)
                                            {
                                                switch (SMeter_type)
                                                {
                                                    case SMeterType.type1:
                                                        sMeterDigital1.SignalValue = num_tmp;
                                                        break;
                                                    case SMeterType.type2:
                                                        sMeterDigital2.SignalValue = num_tmp;
                                                        break;
                                                }
                                            }
                                            else
                                                NewVFOSignalGauge.Value = num_tmp;
                                        }
                                        else
                                            AnalogSignalGauge.Value = num_tmp;
                                        break;
                                    case MeterRXMode.ADC_L:
                                        num = DttSP.CalculateRXMeter(0, 0, DttSP.MeterType.ADC_REAL);  // for RX1!!!!!
                                        output = num.ToString("f1") + " dBFS";
                                        new_meter_data = num;

                                        if (vfo_new_look)
                                        {
                                            if (digital_smeter)
                                            {
                                                switch (SMeter_type)
                                                {
                                                    case SMeterType.type1:
                                                        sMeterDigital1.SignalValue = (new_meter_data + 127.0f) / 5;
                                                        break;
                                                    case SMeterType.type2:
                                                        sMeterDigital2.SignalValue = (new_meter_data + 127.0f) / 5;
                                                        break;
                                                }
                                            }
                                            else
                                                NewVFOSignalGauge.Value = ((new_meter_data + 127.0f) / 5);
                                        }
                                        else if (current_meter_display_mode == MultiMeterDisplayMode.Analog)
                                        {
                                            if ((new_meter_data + 127.0) > 0)
                                            {
                                                AnalogSignalGauge.Value = ((new_meter_data + 127.0f) / 5);
                                            }
                                        }

                                        break;
                                    case MeterRXMode.ADC_R:
                                        num = DttSP.CalculateRXMeter(0, 0, DttSP.MeterType.ADC_IMAG);  // for RX1!!!!
                                        output = num.ToString("f1") + " dBFS";
                                        new_meter_data = num;

                                        if (vfo_new_look)
                                        {
                                            if (digital_smeter)
                                            {
                                                switch (SMeter_type)
                                                {
                                                    case SMeterType.type1:
                                                        sMeterDigital1.SignalValue = (new_meter_data + 127.0f) / 5;
                                                        break;
                                                    case SMeterType.type2:
                                                        sMeterDigital2.SignalValue = (new_meter_data + 127.0f) / 5;
                                                        break;
                                                }
                                            }
                                            else
                                                NewVFOSignalGauge.Value = ((new_meter_data + 127.0f) / 5);
                                        }
                                        else if (current_meter_display_mode == MultiMeterDisplayMode.Analog)
                                        {
                                            if ((new_meter_data + 127.0) > 0)
                                            {
                                                AnalogSignalGauge.Value = ((new_meter_data + 127.0f) / 5);
                                            }
                                        }
                                        break;
                                    case MeterRXMode.OFF:
                                        output = "";
                                        new_meter_data = num;

                                        if (vfo_new_look)
                                        {
                                            if (digital_smeter)
                                            {
                                                switch (SMeter_type)
                                                {
                                                    case SMeterType.type1:
                                                        sMeterDigital1.SignalValue = 0.0f;
                                                        break;
                                                    case SMeterType.type2:
                                                        sMeterDigital2.SignalValue = 0.0f;
                                                        break;
                                                }
                                            }
                                            else
                                                NewVFOSignalGauge.Value = 0.0f;
                                        }
                                        else if (current_meter_display_mode == MultiMeterDisplayMode.Analog)
                                        {
                                            AnalogSignalGauge.Value = 0.0f;
                                        }
                                        break;
                                }
                            }
                            else
                            {                            ///////////// TX ////////////////
                                MeterTXMode mode = CurrentMeterTXMode;
                                double power = 0.0;
                                double swr = 0.0;

                                if (current_model == Model.GENESIS_G59USB || current_model == Model.GENESIS_G59NET ||
                                    current_model == Model.GENESIS_G11)
                                {
                                    if (current_model == Model.GENESIS_G11)
                                        swr_avg = (float)Math.Min((SWR(g11.fwd_PWR, g11.Ref_PWR) * 0.25f + swr_avg * 0.75f), 50);
                                    else if (g59_PA10_present)
                                    {
                                        if (current_model == Model.GENESIS_G59USB)
                                            swr_avg = (float)Math.Min((SWR(g59.fwd_PWR, g59.Ref_PWR) * 0.25f + swr_avg * 0.75f), 50);
                                        else if (current_model == Model.GENESIS_G59NET)
                                            swr_avg = (float)Math.Min((SWR(net_device.fwd_PWR, net_device.Ref_PWR) * 0.25f + swr_avg * 0.75f), 50);
                                    }
                                    else
                                        swr_avg = 1.0f;
                                }

                                switch (mode)
                                {
                                    case MeterTXMode.MIC:
                                        if (Audio.CurrentAudioState1 == Audio.AudioState.DTTSP)     // phone modes
                                        {
                                            num = (float)Math.Max(-30.0, -DttSP.CalculateTXMeter(thread_no, DttSP.MeterType.MIC));
                                            output = num.ToString("f1") + " dB";
                                        }
                                        else if (Audio.CurrentAudioState1 == Audio.AudioState.CW)
                                        {
                                            if (DttSP.KeyerPlaying())
                                            {
                                                if (!previous_keyer_state)
                                                {
                                                    previous_keyer_state = true;
                                                    switch_time = 1;
                                                    num = -26.0f + switch_time * 5;
                                                }
                                                else if (previous_keyer_state && switch_time < 3)
                                                {
                                                    switch_time++;
                                                    num = -26.0f + switch_time * 5;
                                                }
                                                else if (previous_keyer_state && switch_time == 3)
                                                    num = -10.0f;
                                            }
                                            else
                                            {
                                                if (previous_keyer_state)
                                                {
                                                    previous_keyer_state = false;
                                                    switch_time = 1;
                                                    num = -10.0f - switch_time * 6;
                                                }
                                                else if (!previous_keyer_state && switch_time < 3)
                                                {
                                                    switch_time++;
                                                    num = -10.0f - switch_time * 6;
                                                }
                                                else if (!previous_keyer_state && switch_time == 3)
                                                    num = -26.0f;
                                            }

                                            output = num.ToString("f1") + " dB";
                                        }
                                        else output = "0" + separator + "0 dB";

                                        new_meter_data = num;

                                        if (multimeter_avg == Display_GDI.CLEAR_FLAG) multimeter_avg = num;
                                        num = 0.75f * multimeter_avg + 0.2f * num;
                                        multimeter_avg = num;

                                        if (vfo_new_look)
                                        {
                                            if (digital_smeter)
                                            {
                                                switch (SMeter_type)
                                                {
                                                    case SMeterType.type1:
                                                        sMeterDigital1.SignalValue = num + 20.0f;
                                                        break;
                                                    case SMeterType.type2:
                                                        sMeterDigital2.SignalValue = num + 20.0f;
                                                        break;
                                                }
                                            }
                                            else
                                                NewVFOSignalGauge.Value = num + 20.0f;
                                        }
                                        else
                                            AnalogSignalGauge.Value = ((num + 30.0f) / 1.66f);


                                        break;
                                    case MeterTXMode.EQ:
                                        if (Audio.CurrentAudioState1 == Audio.AudioState.DTTSP)
                                        {
                                            num = (float)Math.Max(-30.0, -DttSP.CalculateTXMeter(thread_no, DttSP.MeterType.EQ));
                                            output = num.ToString("f1") + " dB";
                                        }
                                        else output = "0" + separator + "0 dB";
                                        new_meter_data = num;

                                        if (multimeter_avg == Display_GDI.CLEAR_FLAG) multimeter_avg = num;
                                        num = 0.75f * multimeter_avg + 0.2f * num;
                                        multimeter_avg = num;

                                        if (vfo_new_look)
                                        {
                                            if (digital_smeter)
                                            {
                                                switch (SMeter_type)
                                                {
                                                    case SMeterType.type1:
                                                        sMeterDigital1.SignalValue = ((num + 30.0f) / 1.66f);
                                                        break;
                                                    case SMeterType.type2:
                                                        sMeterDigital2.SignalValue = ((num + 30.0f) / 1.66f);
                                                        break;
                                                }
                                            }
                                            else
                                                NewVFOSignalGauge.Value = ((num + 30.0f) / 1.66f);
                                        }
                                        else
                                            AnalogSignalGauge.Value = ((num + 30.0f) / 1.66f);

                                        break;
                                    case MeterTXMode.LEVELER:
                                        if (Audio.CurrentAudioState1 == Audio.AudioState.DTTSP)
                                        {
                                            num = (float)Math.Max(-30.0, -DttSP.CalculateTXMeter(thread_no, DttSP.MeterType.LEVELER));
                                            output = num.ToString("f1") + " dB";
                                        }
                                        else output = "0" + separator + "0 dB";
                                        new_meter_data = num;

                                        if (multimeter_avg == Display_GDI.CLEAR_FLAG) multimeter_avg = num;
                                        num = 0.75f * multimeter_avg + 0.2f * num;
                                        multimeter_avg = num;

                                        if (vfo_new_look)
                                        {
                                            if (digital_smeter)
                                            {
                                                switch (SMeter_type)
                                                {
                                                    case SMeterType.type1:
                                                        sMeterDigital1.SignalValue = ((num + 30.0f) / 1.66f);
                                                        break;
                                                    case SMeterType.type2:
                                                        sMeterDigital2.SignalValue = ((num + 30.0f) / 1.66f);
                                                        break;
                                                }
                                            }
                                            else
                                                NewVFOSignalGauge.Value = ((num + 30.0f) / 1.66f);
                                        }
                                        else
                                            AnalogSignalGauge.Value = ((num + 30.0f) / 1.66f);

                                        break;
                                    case MeterTXMode.LVL_G:
                                        if (Audio.CurrentAudioState1 == Audio.AudioState.DTTSP)
                                        {
                                            num = (float)Math.Max(thread_no, DttSP.CalculateTXMeter(thread_no, DttSP.MeterType.LVL_G));
                                            output = num.ToString("f1") + " dB";
                                        }
                                        else output = "0" + separator + "0 dB";
                                        new_meter_data = num;

                                        if (multimeter_avg == Display_GDI.CLEAR_FLAG) multimeter_avg = num;
                                        num = 0.75f * multimeter_avg + 0.2f * num;
                                        multimeter_avg = num;

                                        if (vfo_new_look)
                                        {
                                            if (digital_smeter)
                                            {
                                                switch (SMeter_type)
                                                {
                                                    case SMeterType.type1:
                                                        sMeterDigital1.SignalValue = ((num + 30.0f) / 1.66f);
                                                        break;
                                                    case SMeterType.type2:
                                                        sMeterDigital2.SignalValue = ((num + 30.0f) / 1.66f);
                                                        break;
                                                }
                                            }
                                            else
                                                NewVFOSignalGauge.Value = ((num + 30.0f) / 1.66f);
                                        }
                                        else
                                            AnalogSignalGauge.Value = ((num + 30.0f) / 1.66f);

                                        break;
                                    case MeterTXMode.COMP:
                                        if (Audio.CurrentAudioState1 == Audio.AudioState.DTTSP)
                                        {
                                            num = (float)Math.Max(-30.0, -DttSP.CalculateTXMeter(thread_no, DttSP.MeterType.COMP));
                                            output = num.ToString("f1") + " dB";
                                        }
                                        else output = "0" + separator + "0 dB";
                                        new_meter_data = num;

                                        if (multimeter_avg == Display_GDI.CLEAR_FLAG) multimeter_avg = num;
                                        num = 0.75f * multimeter_avg + 0.2f * num;
                                        multimeter_avg = num;

                                        if (vfo_new_look)
                                        {
                                            if (digital_smeter)
                                            {
                                                switch (SMeter_type)
                                                {
                                                    case SMeterType.type1:
                                                        sMeterDigital1.SignalValue = ((num + 30.0f) / 1.66f);
                                                        break;
                                                    case SMeterType.type2:
                                                        sMeterDigital2.SignalValue = ((num + 30.0f) / 1.66f);
                                                        break;
                                                }
                                            }
                                            else
                                                NewVFOSignalGauge.Value = ((num + 30.0f) / 1.66f);
                                        }
                                        else
                                            AnalogSignalGauge.Value = ((num + 30.0f) / 1.66f);

                                        break;
                                    case MeterTXMode.CPDR:
                                        if (Audio.CurrentAudioState1 == Audio.AudioState.DTTSP)
                                        {
                                            num = (float)Math.Max(-30.0, -DttSP.CalculateTXMeter(thread_no, DttSP.MeterType.CPDR));
                                            output = num.ToString("f1") + " dB";
                                        }
                                        else output = "0" + separator + "0 dB";
                                        new_meter_data = num;

                                        if (multimeter_avg == Display_GDI.CLEAR_FLAG) multimeter_avg = num;
                                        num = 0.75f * multimeter_avg + 0.2f * num;
                                        multimeter_avg = num;

                                        if (vfo_new_look)
                                        {
                                            if (digital_smeter)
                                            {
                                                switch (SMeter_type)
                                                {
                                                    case SMeterType.type1:
                                                        sMeterDigital1.SignalValue = ((num + 30.0f) / 1.66f);
                                                        break;
                                                    case SMeterType.type2:
                                                        sMeterDigital2.SignalValue = ((num + 30.0f) / 1.66f);
                                                        break;
                                                }
                                            }
                                            else
                                                NewVFOSignalGauge.Value = ((num + 30.0f) / 1.66f);
                                        }
                                        else
                                            AnalogSignalGauge.Value = ((num + 30.0f) / 1.66f);

                                        break;
                                    case MeterTXMode.ALC:
                                        if (Audio.CurrentAudioState1 == Audio.AudioState.DTTSP)
                                        {
                                            num = (float)Math.Max(-30.0, -DttSP.CalculateTXMeter(thread_no, DttSP.MeterType.ALC));
                                            output = num.ToString("f1") + " dB";
                                        }
                                        else output = "0" + separator + "0 dB";
                                        new_meter_data = num;

                                        if (multimeter_avg == Display_GDI.CLEAR_FLAG) multimeter_avg = num;
                                        num = 0.75f * multimeter_avg + 0.2f * num;
                                        multimeter_avg = num;

                                        if (vfo_new_look)
                                        {
                                            if (digital_smeter)
                                            {
                                                switch (SMeter_type)
                                                {
                                                    case SMeterType.type1:
                                                        sMeterDigital1.SignalValue = ((num + 30.0f) / 1.66f);
                                                        break;
                                                    case SMeterType.type2:
                                                        sMeterDigital2.SignalValue = ((num + 30.0f) / 1.66f);
                                                        break;
                                                }
                                            }
                                            else
                                                NewVFOSignalGauge.Value = ((num + 30.0f) / 1.66f);
                                        }
                                        else
                                            AnalogSignalGauge.Value = ((num + 30.0f) / 1.66f);

                                        break;
                                    case MeterTXMode.ALC_G:
                                        if (Audio.CurrentAudioState1 == Audio.AudioState.DTTSP)
                                        {
                                            num = (float)Math.Max(thread_no, -DttSP.CalculateTXMeter(thread_no, DttSP.MeterType.ALC_G));
                                            output = num.ToString("f1") + " dB";
                                        }
                                        else output = "0" + separator + "0 dB";
                                        new_meter_data = num;

                                        if (multimeter_avg == Display_GDI.CLEAR_FLAG) multimeter_avg = num;
                                        num = 0.75f * multimeter_avg + 0.2f * num;
                                        multimeter_avg = num;

                                        if (vfo_new_look)
                                        {
                                            if (digital_smeter)
                                            {
                                                switch (SMeter_type)
                                                {
                                                    case SMeterType.type1:
                                                        sMeterDigital1.SignalValue = ((num + 30.0f) / 1.66f);
                                                        break;
                                                    case SMeterType.type2:
                                                        sMeterDigital2.SignalValue = ((num + 30.0f) / 1.66f);
                                                        break;
                                                }
                                            }
                                            else
                                                NewVFOSignalGauge.Value = ((num + 30.0f) / 1.66f);
                                        }
                                        else
                                            AnalogSignalGauge.Value = ((num + 30.0f) / 1.66f);

                                        break;
                                    case MeterTXMode.FORWARD_POWER:
                                        if ((g59_PA10_present && (current_model == Model.GENESIS_G59USB ||
                                            current_model == Model.GENESIS_G59NET)) || current_model == Model.GENESIS_G11)
                                        {
                                            if (current_model == Model.GENESIS_G59USB)
                                                power = PAPower((int)g59.fwd_PWR);
                                            else if (current_model == Model.GENESIS_G59NET)
                                                power = PAPower((int)net_device.fwd_PWR);
                                            else if (current_model == Model.GENESIS_G11)
                                                power = PAPower((int)g11.fwd_PWR);

                                            output = power.ToString("f1") + " W";
                                            new_meter_data = (float)power;
                                            num = (float)(power * 1.2);
                                        }
                                        else if (current_model == Model.GENESIS_G59USB ||
                                            current_model == Model.GENESIS_G59NET)                  // solo 10mW
                                        {
                                            if (Audio.CurrentAudioState1 == Audio.AudioState.DTTSP)
                                            {
                                                num = (float)Math.Max(0.0, DttSP.CalculateTXMeter(thread_no, DttSP.MeterType.PWR));
                                                num *= (float)((double)ptbPWR.Value * 0.1);
                                                output = num.ToString("f1") + " mW";
                                                new_meter_data = num / 1000;
                                            }
                                            else
                                            {
                                                if (DttSP.KeyerPlaying())
                                                {
                                                    if (!previous_keyer_state)
                                                    {
                                                        previous_keyer_state = true;
                                                        switch_time = 1;
                                                        num = -26.0f + switch_time * 5;
                                                    }
                                                    else if (previous_keyer_state && switch_time < 3)
                                                    {
                                                        switch_time++;
                                                        num = -26.0f + switch_time * 5;
                                                    }
                                                    else if (previous_keyer_state && switch_time == 3)
                                                        num = -10.0f;
                                                }
                                                else
                                                {
                                                    if (previous_keyer_state)
                                                    {
                                                        previous_keyer_state = false;
                                                        switch_time = 1;
                                                        num = -10.0f - switch_time * 6;
                                                    }
                                                    else if (!previous_keyer_state && switch_time < 3)
                                                    {
                                                        switch_time++;
                                                        num = -10.0f - switch_time * 6;
                                                    }
                                                    else if (!previous_keyer_state && switch_time == 3)
                                                        num = -26.0f;
                                                }

                                                output = num.ToString("f1") + " dB";
                                                new_meter_data = num;

                                                if (multimeter_avg == Display_GDI.CLEAR_FLAG) multimeter_avg = num;
                                                num = 0.75f * multimeter_avg + 0.2f * num;
                                                multimeter_avg = num;
                                                num += 20.0f;
                                            }
                                        }
                                        else                                                        // for all others G*
                                        {
                                            if (Audio.CurrentAudioState1 == Audio.AudioState.DTTSP)
                                            {
                                                num = (float)Math.Max(0.0, DttSP.CalculateTXMeter(thread_no, DttSP.MeterType.PWR));
                                                num *= (float)((double)ptbPWR.Value * 0.1);
                                                num *= 1000;
                                                if (num <= 1000)
                                                    output = num.ToString("f0") + " mW";
                                                else
                                                    output = (num / 1000).ToString("f1") + " W";
                                            }
                                            else output = "0 mW";
                                            new_meter_data = num / 1000;
                                            num /= 1000;
                                        }

                                        if (current_meter_display_mode == MultiMeterDisplayMode.Analog ||
                                            vfo_new_look)
                                        {
                                            current_meter_data = num;
                                            if (current_meter_data > avg_num)
                                                num = (float)(avg_num = current_meter_data * 0.8 + avg_num * 0.2); // fast rise
                                            else
                                                num = (float)(avg_num = current_meter_data * 0.2 + avg_num * 0.8); // slow decay

                                            if (vfo_new_look)
                                            {
                                                if (digital_smeter)
                                                {
                                                    switch (SMeter_type)
                                                    {
                                                        case SMeterType.type1:
                                                            sMeterDigital1.SignalValue = num;
                                                            break;
                                                        case SMeterType.type2:
                                                            sMeterDigital2.SignalValue = num;
                                                            break;
                                                    }
                                                }
                                                else
                                                    NewVFOSignalGauge.Value = num;
                                            }
                                            else
                                            {
                                                AnalogSignalGauge.Value = num;
                                            }
                                        }
                                        break;
                                    case MeterTXMode.REVERSE_POWER:
                                        if ((g59_PA10_present && (current_model == Model.GENESIS_G59USB ||
                                            current_model == Model.GENESIS_G59NET)) || current_model == Model.GENESIS_G11)
                                        {
                                            if (current_model == Model.GENESIS_G59USB)
                                                power = PAPower((int)g59.Ref_PWR);
                                            else if (current_model == Model.GENESIS_G59NET)
                                                power = PAPower((int)net_device.Ref_PWR);
                                            else if (current_model == Model.GENESIS_G11)
                                                power = PAPower((int)g11.Ref_PWR);

                                            output = power.ToString("f1") + " W";
                                            new_meter_data = (float)power;
                                            num = (float)(power * 1.2);

                                            num = 0.85f * multimeter_avg + 0.2f * num;
                                            multimeter_avg = num;

                                            if (vfo_new_look)
                                            {
                                                if (digital_smeter)
                                                {
                                                    switch (SMeter_type)
                                                    {
                                                        case SMeterType.type1:
                                                            sMeterDigital1.SignalValue = num;
                                                            break;
                                                        case SMeterType.type2:
                                                            sMeterDigital2.SignalValue = num;
                                                            break;
                                                    }
                                                }
                                                else
                                                    NewVFOSignalGauge.Value = num;
                                            }
                                            else
                                                AnalogSignalGauge.Value = num;
                                        }
                                        else
                                        {
                                            new_meter_data = 0.0f;
                                        }
                                        break;
                                    case MeterTXMode.SWR:
                                        if (current_model == Model.GENESIS_G59USB ||
                                            current_model == Model.GENESIS_G59NET || current_model == Model.GENESIS_G11)
                                        {
                                            if (g59_PA10_present && (current_model == Model.GENESIS_G59USB ||
                                            current_model == Model.GENESIS_G59NET))
                                            {
                                                if (current_model == Model.GENESIS_G59USB)
                                                    swr_avg = (float)Math.Min((SWR(g59.fwd_PWR, g59.Ref_PWR) * 0.25f + swr_avg * 0.75f), 200);
                                                else if (current_model == Model.GENESIS_G59NET)
                                                    swr_avg = (float)Math.Min((SWR(net_device.fwd_PWR, net_device.Ref_PWR) * 0.25f + swr_avg * 0.75f), 200);
                                            }
                                            else if (current_model == Model.GENESIS_G11)
                                                swr_avg = (float)Math.Min((SWR(g11.fwd_PWR, g11.Ref_PWR) * 0.25f + swr_avg * 0.75f), 200);
                                            else
                                                swr_avg = 1.0f;

                                            output = swr_avg.ToString("f1") + " : 1";
                                            new_meter_data = (float)swr_avg;
                                            Debug.Write(swr.ToString() + "\n");
                                            double vswr = Math.Round(swr_avg, 2);

                                            if (vswr <= 1.1)
                                            {
                                                vswr -= 1.0;
                                                vswr += 1;
                                            }
                                            else if (vswr <= 1.2)
                                            {
                                                vswr -= 1.1;
                                                vswr *= 10;
                                                vswr += 1;
                                            }
                                            else if (vswr <= 1.3)
                                            {
                                                vswr -= 1.2;
                                                vswr *= 9;
                                                vswr += 1.5;
                                            }
                                            else if (vswr <= 1.4)
                                            {
                                                vswr -= 1.3;
                                                vswr *= 8;
                                                vswr += 2.5;
                                            }
                                            else if (vswr <= 1.5)
                                            {
                                                vswr -= 1.4;
                                                vswr *= 7;
                                                vswr += 3.5;
                                            }
                                            else if (vswr <= 2.0)
                                            {
                                                vswr -= 1.5;
                                                vswr *= 6;
                                                vswr += 4.2;
                                            }
                                            else if (vswr <= 3.0)
                                            {
                                                vswr -= 2.0;
                                                vswr *= 2.5;
                                                vswr += 7.1;
                                            }
                                            else if (vswr <= 5.0)
                                            {
                                                vswr -= 3.0;
                                                vswr *= 1.2;
                                                vswr += 9.6;
                                            }
                                            else if (vswr <= 50.0)
                                            {
                                                vswr -= 5;
                                                vswr *= .1;
                                                vswr += 12;
                                            }
                                            else
                                            {
                                                vswr -= 9;
                                                vswr *= .3;
                                                vswr += 15;
                                            }

                                            if (vfo_new_look)
                                            {
                                                if (digital_smeter)
                                                {
                                                    switch (SMeter_type)
                                                    {
                                                        case SMeterType.type1:
                                                            sMeterDigital1.SignalValue = (float)vswr;
                                                            break;
                                                        case SMeterType.type2:
                                                            sMeterDigital2.SignalValue = (float)vswr;
                                                            break;
                                                    }
                                                }
                                                else
                                                    NewVFOSignalGauge.Value = (float)vswr;
                                            }
                                            else
                                                AnalogSignalGauge.Value = (float)vswr;
                                        }
                                        else
                                        {
                                            new_meter_data = 1.0f;
                                        }
                                        break;
                                    case MeterTXMode.OFF:
                                        output = "";
                                        new_meter_data = 0.0f;
                                        NewVFOSignalGauge.Value = 0.0f;
                                        AnalogSignalGauge.Value = 0.0f;
                                        sMeterDigital1.swrValue = 0.0f;
                                        sMeterDigital2.swrValue = 0.0f;
                                        break;
                                }
                            }

                            if (!vfo_new_look)
                            {
                                txtMultiText.Text = output;
                                meter_data_ready = true;

#if DirectX
                                if (current_display_engine == DisplayEngine.DIRECT_X &&
                                    current_meter_display_mode == MultiMeterDisplayMode.Analog &&
                                    !pause_multimeter_thread)
                                {
                                    if (!AnalogSignalGauge.DX_reinit)
                                    {
                                        if (!AnalogSignalGauge.RenderGauge())
                                            this.Invoke(new DirectXCallbackFunction(ReinitAGaugeDirectX), "AnalogSignalGauge");
                                    }
                                }
                                else
#endif
                                {
                                    switch (current_meter_display_mode)
                                    {
                                        case MultiMeterDisplayMode.Analog:
                                            picSmallAGauge.Invalidate();
                                            break;

                                        default:
                                            picMultiMeterDigital.Invalidate();
                                            break;
                                    }
                                }
                            }
                            else
                            {
                                meter_data_ready = false;

#if DirectX
                                if (current_display_engine == DisplayEngine.DIRECT_X &&
                                    this.WindowState != FormWindowState.Minimized &&
                                    !pause_multimeter_thread)
                                {
                                    if (!NewVFOSignalGauge.DX_reinit)
                                    {
                                        if (!NewVFOSignalGauge.RenderGauge())
                                            this.Invoke(new DirectXCallbackFunction(ReinitAGaugeDirectX), "NewVFOSignalGauge");
                                    }
                                }
                                else
#endif
                                {
                                    if (!digital_smeter)
                                        picAGauge.Invalidate();
                                }
                            }
                        //}
                    end:
                        if (PowerOn)
                            Thread.Sleep(meter_delay);
                    }
                }
                catch(Exception ex)
                {
                    Debug.Write(ex.ToString() + "\n");
                }
            }

            try
            {

                NewVFOSignalGauge.Value = 0.0f;
                AnalogSignalGauge.Value = 0.0f;
                sMeterDigital1.SignalValue = 0.0f;
                sMeterDigital1.swrValue = 0.0f;
                sMeterDigital2.SignalValue = 0.0f;
                sMeterDigital2.swrValue = 0.0f;

#if DirectX
                if (current_display_engine == DisplayEngine.DIRECT_X && !pause_multimeter_thread && !ConsoleClosing)
                {
                    if (VFOnewlook && !digital_smeter)
                    {
                        NewVFOSignalGauge.RenderGauge();
                    }
                }
#endif

                new_meter_data = -200.0f;
                avg_num = -200.0f;
                meter_data_ready = true;
                txtMultiText.Text = "";

                if(!ConsoleClosing)
                    picMultiMeterDigital.Invalidate();
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString() + "\n");
            }
        }


        private float main_RX_sql_data = -200.0f;
        private float sub_RX_sql_data = -200.0f;
        private void UpdateSQL()
        {
            try
            {
                while (PowerOn)
                {
                    if (!chkMOX.Checked && !ConsoleClosing)
                    {
                        float num = DttSP.CalculateRXMeter(0, 0, DttSP.MeterType.SIGNAL_STRENGTH);
                        num = num +
                            multimeter_cal_offset +
                            filter_size_cal_offset;

                        main_RX_sql_data = num;
                        picSQLMainRX.Invalidate();
                        if (vfo_new_look)
                            picSQLMainRX.Invalidate();

                        if (chkEnableSubRX.Checked)
                        {
                            num = DttSP.CalculateRXMeter(0, 1, DttSP.MeterType.SIGNAL_STRENGTH);
                            num = num +
                                multimeter_cal_offset +
                                filter_size_cal_offset;

                            sub_RX_sql_data = num;
                            if (vfo_new_look)
                                picSQLSubRX.Invalidate();
                            picSQLSubRX.Invalidate();
                        }
                    }

                    if (PowerOn)
                        Thread.Sleep(100);
                }
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private float noise_gate_data = -200.0f;
        private void UpdateNoiseGate()
        {
            while (PowerOn)
            {
                if (chkMOX.Checked &&!ConsoleClosing)
                {
                    float num = -DttSP.CalculateRXMeter(0, 0, DttSP.MeterType.MIC);

                    noise_gate_data = num + 3.0f;
                    picNoiseGate.Invalidate();
                }

                if (PowerOn) 
                    Thread.Sleep(100);
            }
        }

        private void UpdateVOX()
        {
            while (PowerOn)
            {
                if (!ConsoleClosing)
                {
                    switch (current_dsp_mode)
                    {
                        case DSPMode.LSB:
                        case DSPMode.USB:
                        case DSPMode.DSB:
                        case DSPMode.AM:
                        case DSPMode.SAM:
                        case DSPMode.FMN:
                            picVOX.Invalidate();
                            break;
                    }
                }

                if (PowerOn)
                    Thread.Sleep(100);
            }
        }

        private static HiPerfTimer vox_timer = new HiPerfTimer();
        private void PollPTT()  // changes yt7pwr
        {
            bool mic_ptt = false;
            bool keyer_ptt = false;
            bool tune_ptt = false;
            bool local_cat_ptt = false;
            byte loop_dll_ptt = 0;
            bool MultiPSK_ptt = false;
            int[] ptt_tmp = new int[1];

            while (PowerOn)
            {
                if (!manual_mox && !disable_ptt && !ConsoleClosing)
                {
                    switch (current_model)
                    {
                        case (Model.GENESIS_G6):
                            {
                                mic_ptt = g6.MOX;
                            }
                            break;
                        case (Model.GENESIS_G59USB):
                            {
                                mic_ptt = g59.MOX;
                            }
                            break;
                        case (Model.GENESIS_G59NET):
                            {
                                mic_ptt = net_device.MOX;
                            }
                            break;
                        case (Model.GENESIS_G11):
                            {
                                mic_ptt = g11.MOX;
                            }
                            break;
                        case (Model.QRP2000):
                            {
                                if (qrp2000.connected)
                                {
                                    if (MOX)
                                        qrp2000.SetPTTGetCWInput(1, ptt_tmp);
                                    else
                                        qrp2000.SetPTTGetCWInput(0, ptt_tmp);

                                    if (Keyer.QRP2000CW1)
                                    {
                                        ptt_tmp[0] &= 0x20;
                                    }
                                    else if (Keyer.QRP2000CW2)
                                    {
                                        ptt_tmp[0] &= 0x02;
                                    }

                                    if (ptt_tmp[0] == 0x00)
                                        mic_ptt = true;
                                    else
                                        mic_ptt = false;
                                }
                            }
                            break;
                        default:
                            {
                                mic_ptt = Keyer.KeyerPTT;
                            }
                            break;
                    }

                    if (current_model == Model.GENESIS_G6)
                    {
                        keyer_ptt = (DttSP.KeyerPlaying() || g6.MOX);
                    }
                    else if (current_model == Model.GENESIS_G59USB)
                    {
                        keyer_ptt = (DttSP.KeyerPlaying() || g59.MOX);

                        if (ExtATU_present)
                            tune_ptt = g59.TUNE;
                    }
                    else if (current_model == Model.GENESIS_G59NET)
                    {
                        keyer_ptt = (DttSP.KeyerPlaying() || net_device.MOX);

                        if (ExtATU_present)
                            tune_ptt = net_device.TUNE;
                    }
                    else if (current_model == Model.GENESIS_G11)
                    {
                        keyer_ptt = (DttSP.KeyerPlaying() || g11.MOX);

                        if (ExtATU_present)
                            tune_ptt = g11.TUNE;
                    }
                    else
                        keyer_ptt = DttSP.KeyerPlaying();

                    bool cw_ptt = (CWSemiBreakInEnabled && keyer_ptt) | Keyer.KeyerPTT | Keyer.MemoryPTT;
                    bool vox_ptt = Audio.VOXActive;

                    if (Audio.loopDLL_enabled && loopDLL != null)
                        loop_dll_ptt = loopDLL.IsPTT();

                    if (MultiPSKServer.ClientConnected)
                        MultiPSK_ptt = MultiPSKServer.IsPTT;

                    if (PTTBitBangEnabled && serialPTT != null)
                        local_cat_ptt = serialPTT.isPTT();

                    if (cw_ptt) break_in_timer.Start();

                    if (!chkMOX.Checked)
                    {
                        if (tune_ptt && !chkTUN.Checked)
                        {
                            current_ptt_mode = PTTMode.ATU_TUNE;
                            chkTUN.Checked = true;
                        }
                        else if (local_cat_ptt || cat_ptt)
                        {
                            current_ptt_mode = PTTMode.CAT;
                            Keyer.PTTBitBangEnabled = true;
                            if (chkVFOSplit.Checked)
                            {
                                if (current_dsp_mode_subRX == DSPMode.CWL ||
                                    current_dsp_mode_subRX == DSPMode.CWU)
                                {
                                    chkMOX.Checked = true;

                                    if (!chkMOX.Checked)
                                    {
                                        chkPower.Checked = false;
                                        return;
                                    }
                                }
                                else
                                {
                                    chkMOX.Checked = true;

                                    if (!chkMOX.Checked)
                                    {
                                        chkPower.Checked = false;
                                        return;
                                    }
                                }
                            }
                            else
                            {
                                if (current_dsp_mode == DSPMode.CWL ||
                                    current_dsp_mode == DSPMode.CWU)
                                {
                                    chkMOX.Checked = true;
                                    if (!chkMOX.Checked)
                                    {
                                        chkPower.Checked = false;
                                        return;
                                    }
                                }
                                else
                                {
                                    chkMOX.Checked = true;
                                    if (!chkMOX.Checked)
                                    {
                                        chkPower.Checked = false;
                                        return;
                                    }
                                }
                            }
                        }
                        if (chkVFOSplit.Checked)
                        {
                            if ((current_dsp_mode_subRX == DSPMode.CWL ||
                                current_dsp_mode_subRX == DSPMode.CWU) && cw_ptt)
                            {
                                if ((Keyer.PrimaryConnPort == "USB" ||
                                    Keyer.PrimaryConnPort == "NET") &&
                                    Keyer.SecondaryConnPort == "None" &&
                                    !cw_semi_break_in_enabled)
                                {
                                    // do nothing
                                }
                                else
                                {
                                    current_ptt_mode = PTTMode.CW;
                                    chkMOX.Checked = true;
                                    if (!chkMOX.Checked)
                                    {
                                        chkPower.Checked = false;
                                        return;
                                    }
                                }
                            }
                        }
                        else
                        {
                            if ((current_dsp_mode == DSPMode.CWL ||
                                current_dsp_mode == DSPMode.CWU) && cw_ptt)
                            {
                                if ((Keyer.PrimaryConnPort == "USB" ||
                                    Keyer.PrimaryConnPort == "NET") &&
                                    Keyer.SecondaryConnPort == "None" &&
                                    !cw_semi_break_in_enabled)
                                {
                                    // do nothing
                                }
                                else
                                {
                                    if (cw_ptt)
                                        current_ptt_mode = PTTMode.CW;
                                    else if (mic_ptt)
                                        current_ptt_mode = PTTMode.MIC;
                                    chkMOX.Checked = true;
                                    if (!chkMOX.Checked)
                                    {
                                        chkPower.Checked = false;
                                        return;
                                    }
                                }
                            }
                        }

                        if (chkVFOSplit.Checked)
                        {
                            if ((current_dsp_mode_subRX == DSPMode.LSB ||
                            current_dsp_mode_subRX == DSPMode.USB ||
                            current_dsp_mode_subRX == DSPMode.DSB ||
                            current_dsp_mode_subRX == DSPMode.AM ||
                            current_dsp_mode_subRX == DSPMode.SAM ||
                            current_dsp_mode_subRX == DSPMode.DIGU ||
                            current_dsp_mode_subRX == DSPMode.DIGL ||
                            current_dsp_mode_subRX == DSPMode.FMN) && mic_ptt)
                            {
                                current_ptt_mode = PTTMode.MIC;
                                chkMOX.Checked = true;
                                if (!chkMOX.Checked)
                                {
                                    chkPower.Checked = false;
                                    return;
                                }
                            }
                        }
                        else
                        {
                            if ((current_dsp_mode == DSPMode.LSB ||
                                current_dsp_mode == DSPMode.USB ||
                                current_dsp_mode == DSPMode.DSB ||
                                current_dsp_mode == DSPMode.AM ||
                                current_dsp_mode == DSPMode.SAM ||
                                current_dsp_mode == DSPMode.DIGU ||
                                current_dsp_mode == DSPMode.DIGL ||
                                current_dsp_mode == DSPMode.FMN) && mic_ptt)
                            {
                                current_ptt_mode = PTTMode.MIC;
                                chkMOX.Checked = true;
                                if (!chkMOX.Checked)
                                {
                                    chkPower.Checked = false;
                                    return;
                                }
                            }
                        }

                        if (chkVFOSplit.Checked)
                        {
                            if ((current_dsp_mode_subRX == DSPMode.LSB ||
                                current_dsp_mode_subRX == DSPMode.USB ||
                                current_dsp_mode_subRX == DSPMode.DSB ||
                                current_dsp_mode_subRX == DSPMode.AM ||
                                current_dsp_mode_subRX == DSPMode.SAM ||
                                current_dsp_mode_subRX == DSPMode.DIGU ||
                                current_dsp_mode_subRX == DSPMode.DIGL ||
                                current_dsp_mode_subRX == DSPMode.FMN) &&
                                vox_ptt)
                            {
                                current_ptt_mode = PTTMode.VOX;
                                vox_timer.Start();
                                chkMOX.Checked = true;
                                if (!chkMOX.Checked)
                                {
                                    chkPower.Checked = false;
                                    return;
                                }
                            }
                        }
                        else
                        {
                            if ((current_dsp_mode == DSPMode.LSB ||
                                current_dsp_mode == DSPMode.USB ||
                                current_dsp_mode == DSPMode.DSB ||
                                current_dsp_mode == DSPMode.AM ||
                                current_dsp_mode == DSPMode.SAM ||
                                current_dsp_mode == DSPMode.DIGU ||
                                current_dsp_mode == DSPMode.DIGL ||
                                current_dsp_mode == DSPMode.FMN) &&
                                vox_ptt)
                            {
                                current_ptt_mode = PTTMode.VOX;
                                vox_timer.Start();
                                chkMOX.Checked = true;
                                if (!chkMOX.Checked)
                                {
                                    chkPower.Checked = false;
                                    return;
                                }
                            }
                        }

                        if (MultiPSK_ptt)
                        {
                            if (current_dsp_mode == DSPMode.USB ||
                                current_dsp_mode == DSPMode.DIGU
                                )
                            {
                                current_ptt_mode = PTTMode.MULTI_PSK;
                                chkMOX.Checked = true;
                                if (!chkMOX.Checked)
                                {
                                    chkPower.Checked = false;
                                    return;
                                }
                            }
                        }

                        if (loop_dll_ptt == 1)
                        {
                            if (current_dsp_mode == DSPMode.USB ||
                                current_dsp_mode == DSPMode.DIGU
                                )
                            {
                                current_ptt_mode = PTTMode.LOOP_DLL;
                                chkMOX.Checked = true;
                                if (!chkMOX.Checked)
                                {
                                    chkPower.Checked = false;
                                    return;
                                }
                            }
                        }
                    }
                    else
                    {
                        switch (current_ptt_mode)
                        {
                            case PTTMode.ATU_TUNE:
                                if (!tune_ptt)
                                    chkTUN.Checked = false;
                                break;
                            case PTTMode.LOOP_DLL:
                                if (loop_dll_ptt != 1)
                                    chkMOX.Checked = false;
                                break;
                            case PTTMode.MULTI_PSK:
                                if (!MultiPSKServer.IsPTT)
                                    chkMOX.Checked = false;
                                break;
                            case PTTMode.CAT:
                                if (!local_cat_ptt && !cat_ptt)
                                {
                                    Keyer.PTTBitBangEnabled = false;
                                    chkMOX.Checked = false;
                                }
                                break;
                            case PTTMode.MIC:
                                if (!mic_ptt)
                                    chkMOX.Checked = false;
                                break;
                            case PTTMode.CW:
                                if (!cw_ptt)
                                {
                                    if (cw_semi_break_in_enabled)
                                    {
                                        break_in_timer.Stop();
                                        if (break_in_timer.DurationMsec > break_in_delay)
                                        {
                                            chkMOX.Checked = false;
                                            if (!CWXForm.running)
                                            {
                                                btnCWX1.Checked = false;
                                                btnCWX2.Checked = false;
                                                btnCWX3.Checked = false;
                                                btnCWX4.Checked = false;
                                                btnCWX5.Checked = false;
                                                btnCWX6.Checked = false;
                                                btnCWX1.BackColor = SystemColors.Control;
                                                btnCWX2.BackColor = SystemColors.Control;
                                                btnCWX3.BackColor = SystemColors.Control;
                                                btnCWX4.BackColor = SystemColors.Control;
                                                btnCWX5.BackColor = SystemColors.Control;
                                                btnCWX6.BackColor = SystemColors.Control;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        break_in_timer.Stop();
                                        if (break_in_timer.DurationMsec > 43)
                                        {
                                            chkMOX.Checked = false;
                                            if (!CWXForm.running)
                                            {
                                                btnCWX1.Checked = false;
                                                btnCWX2.Checked = false;
                                                btnCWX3.Checked = false;
                                                btnCWX4.Checked = false;
                                                btnCWX5.Checked = false;
                                                btnCWX6.Checked = false;
                                                btnCWX1.BackColor = SystemColors.Control;
                                                btnCWX2.BackColor = SystemColors.Control;
                                                btnCWX3.BackColor = SystemColors.Control;
                                                btnCWX4.BackColor = SystemColors.Control;
                                                btnCWX5.BackColor = SystemColors.Control;
                                                btnCWX6.BackColor = SystemColors.Control;
                                            }
                                        }
                                    }
                                }
                                break;
                            case PTTMode.VOX:
                                if (!vox_ptt)
                                {
                                    vox_timer.Stop();
                                    if (vox_timer.DurationMsec > vox_hang_time)
                                        chkMOX.Checked = false;
                                }
                                else vox_timer.Start();
                                break;
                        }
                    }
                }

                Thread.Sleep(1);
            }
        }

        private double SWRScale(double ref_pow)
        {
            if (ref_pow < 19) return 1.0;
            else return Math.Max((ref_pow * -0.01774) + 1.137097, 0.25); // mx+b found using 80% at 19, 25% at 50
        }

        private void timer_cpu_meter_Tick(object sender, System.EventArgs e)
        {
            if (!ConsoleClosing)
                lblCPUMeter.Text = "CPU %: " + CpuUsage.ToString("f1");
        }

        private void timer_peak_text_Tick(object sender, System.EventArgs e)
        {
            if (!ConsoleClosing)
            {
                switch (Display_GDI.CurrentDisplayMode)
                {
                    case DisplayMode.PANAFALL:
                    case DisplayMode.PANAFALL_INV:
                    case DisplayMode.PANADAPTER:
                    case DisplayMode.WATERFALL:
                    case DisplayMode.PANASCOPE:
                        UpdatePeakText();
                        break;
                    default:
                        txtDisplayPeakOffset.Text = "";
                        txtDisplayPeakPower.Text = "";
                        txtDisplayPeakFreq.Text = "";
                        break;
                }
            }
        }

        #endregion

        #region Event Handlers
        // ======================================================
        // Event Handlers
        // ======================================================

        // Console Events

        private void Console_KeyPress(object sender, System.Windows.Forms.KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Enter)
                btnHidden.Focus();

            if (debug != null && debug.Visible && debug_enabled)
            {
                debug.rtbDebugMsg.AppendText("Key press: " + e.KeyChar.ToString() + " \n");
                SendMessage(debug.rtbDebugMsg.Handle, WM_VSCROLL, SB_BOTTOM, 0);
            }
        }

        private void Console_KeyUp(object sender, System.Windows.Forms.KeyEventArgs e) // changes yt7pwr
        {
            if (e.Control == true && e.KeyCode == Keys.M && chkMOX.Checked)
                chkMOX.Checked = false;

            if (e.Shift == false)
                shift_down = false;

            if (e.KeyCode == key_cw_dot)
            {
                g59.KEYER = 3;
                net_device.KEYER = 3;
                g11.KEYER = 3;
            }
            else if (e.KeyCode == key_cw_dash)
            {
                g59.KEYER = 2;
                net_device.KEYER = 2;
                g11.KEYER = 2;
            }

            if (e.KeyCode == Keys.Space)
                chkMOX.Checked = false;

            if (debug != null && debug.Visible & debug_enabled)
            {
                debug.rtbDebugMsg.AppendText("KeyUp: " + e.KeyCode.ToString() + " \n");
                SendMessage(debug.rtbDebugMsg.Handle, WM_VSCROLL, SB_BOTTOM, 0);
            }

        }

        private void Console_KeyDown(object sender, System.Windows.Forms.KeyEventArgs e) // changes yt7pwr
        {
            if (!PowerOn)
            {
                if (e.Control == true && e.Shift == false && e.Alt == false && e.KeyCode == Keys.P) // power ON
                {
                    chkPower.Checked = true;
                    return;
                }
            }
            else
            {
                if (e.Control == true && e.Shift == false && e.Alt == false && e.KeyCode == Keys.P) // power OFF
                {
                    chkPower.Checked = false;
                    return;
                }
            }

            if (CWXForm != null || !CWXForm.IsDisposed)
            {
                if (e.KeyCode == Keys.Escape && CWXForm.running)
                    CWXForm.stopButton_Click(sender, e);
            }

            if (e.Shift == true)
                shift_down = true;

            if (!shift_down && !e.Control)
            {
                switch (current_dsp_mode)
                {
                    case (DSPMode.CWL):
                    case (DSPMode.CWU):
                        {
                            if (e.KeyCode == cwx_msg1)
                            {
                                if (!btnCWX1.Checked)
                                    btnCWX1.Checked = true;
                                else
                                    btnCWX1.Checked = false;
                                btnCWX1_Click(null, null);
                            }
                            if (e.KeyCode == cwx_msg2)
                            {
                                if (!btnCWX2.Checked)
                                    btnCWX2.Checked = true;
                                else
                                    btnCWX2.Checked = false;
                                btnCWX2_Click(null, null);
                            }
                            if (e.KeyCode == cwx_msg3)
                            {
                                if (!btnCWX3.Checked)
                                    btnCWX3.Checked = true;
                                else
                                    btnCWX3.Checked = false;
                                btnCWX3_Click(null, null);
                            }
                            if (e.KeyCode == cwx_msg4)
                            {
                                if (!btnCWX4.Checked)
                                    btnCWX4.Checked = true;
                                else
                                    btnCWX4.Checked = false;
                                btnCWX4_Click(null, null);
                            }
                            if (e.KeyCode == cwx_msg5)
                            {
                                if (!btnCWX5.Checked)
                                    btnCWX5.Checked = true;
                                else
                                    btnCWX5.Checked = false;
                                btnCWX5_Click(null, null);
                            }
                            if (e.KeyCode == cwx_msg6)
                            {
                                if (!btnCWX6.Checked)
                                    btnCWX6.Checked = true;
                                else
                                    btnCWX6.Checked = false;
                                btnCWX6_Click(null, null);
                            }
                        }
                        break;
                    case (DSPMode.USB):
                    case (DSPMode.LSB):
                    case (DSPMode.AM):
                        {
                            if (e.KeyCode == voice_msg1)
                            {
                                if (!btnMsg1.Checked)
                                    btnMsg1.Checked = true;
                                else
                                    btnMsg1.Checked = false;

                                btnMsg1_Click(null, null);
                            }
                            if (e.KeyCode == voice_msg2)
                            {
                                if (!btnMsg2.Checked)
                                    btnMsg2.Checked = true;
                                else
                                    btnMsg2.Checked = false;

                                btnMsg2_Click(null, null);
                            }
                            if (e.KeyCode == voice_msg3)
                            {
                                if (!btnMsg3.Checked)
                                    btnMsg3.Checked = true;
                                else
                                    btnMsg3.Checked = false;

                                btnMsg3_Click(null, null);
                            }
                            if (e.KeyCode == voice_msg4)
                            {
                                if (!btnMsg4.Checked)
                                    btnMsg4.Checked = true;
                                else
                                    btnMsg4.Checked = false;

                                btnMsg4_Click(null, null);
                            }
                            if (e.KeyCode == voice_msg5)
                            {
                                if (!btnMsg5.Checked)
                                    btnMsg5.Checked = true;
                                else
                                    btnMsg5.Checked = false;

                                btnMsg5_Click(null, null);
                            }
                            if (e.KeyCode == voice_msg6)
                            {
                                if (!btnMsg6.Checked)
                                    btnMsg6.Checked = true;
                                else
                                    btnMsg6.Checked = false;

                                btnMsg6_Click(null, null);
                            }

                        }
                        break;

                    case (DSPMode.FMN):
                        {
                            if (e.KeyCode == voice_msg1)
                            {
                                if (!chkFMMsg1.Checked)
                                    chkFMMsg1.Checked = true;
                                else
                                    chkFMMsg1.Checked = false;
                            }
                            if (e.KeyCode == voice_msg2)
                            {
                                if (!chkFMMsg2.Checked)
                                    chkFMMsg2.Checked = true;
                                else
                                    chkFMMsg2.Checked = false;
                            }
                            if (e.KeyCode == voice_msg3)
                            {
                                if (!chkFMMsg3.Checked)
                                    chkFMMsg3.Checked = true;
                                else
                                    chkFMMsg3.Checked = false;
                            }
                            if (e.KeyCode == voice_msg4)
                            {
                                if (!chkFMMsg4.Checked)
                                    chkFMMsg4.Checked = true;
                                else
                                    chkFMMsg4.Checked = false;
                            }
                            if (e.KeyCode == voice_msg5)
                            {
                                if (!chkFMMsg5.Checked)
                                    chkFMMsg5.Checked = true;
                                else
                                    chkFMMsg5.Checked = false;
                            }
                            if (e.KeyCode == voice_msg6)
                            {
                                if (!chkFMMsg6.Checked)
                                    chkFMMsg5.Checked = true;
                                else
                                    chkFMMsg5.Checked = false;
                            }

                        }
                        break;
                }
            }
            if (e.Control == true && e.Shift == true && e.KeyCode == Keys.P)
            {
            }
            else if (!enable_kb_shortcuts)
            {
                return;
            }
            else if (e.Control && !e.Alt)		// control key is pressed
            {
                switch (e.KeyCode)
                {
                    case Keys.Add:
                        RF++;
                        break;

                    case Keys.Subtract:
                        RF--;
                        break;

                    case Keys.V:
                        if (MinimalScreen)
                        {
                            switch (current_visible_group)
                            {
                                case VisibleGroup.ZERO:

                                    switch (current_model)
                                    {
                                        case Model.GENESIS_G500:
                                            current_visible_group = VisibleGroup.G500;
                                            grpG59.Visible = false;
                                            grpG160.Visible = false;
                                            grpG80.Visible = false;
                                            grpG40.Visible = false;
                                            grpG3020.Visible = false;
                                            grpG137.Visible = false;
                                            grpG500.Visible = true;
                                            grpG11.Visible = false;
                                            grpG6.Visible = false;
                                            break;
                                        case Model.GENESIS_G137:
                                            current_visible_group = VisibleGroup.G137;
                                            grpG59.Visible = false;
                                            grpG160.Visible = false;
                                            grpG80.Visible = false;
                                            grpG40.Visible = false;
                                            grpG3020.Visible = false;
                                            grpG137.Visible = true;
                                            grpG137.BringToFront();
                                            grpG500.Visible = false;
                                            grpG11.Visible = false;
                                            grpG6.Visible = false;
                                            break;
                                        case Model.GENESIS_G160:
                                            current_visible_group = VisibleGroup.G160;
                                            grpG59.Visible = false;
                                            grpG160.Visible = true;
                                            grpLOSC.BringToFront();
                                            grpG80.Visible = false;
                                            grpG40.Visible = false;
                                            grpG3020.Visible = false;
                                            grpG137.Visible = false;
                                            grpG500.Visible = false;
                                            grpG11.Visible = false;
                                            grpG6.Visible = false;
                                            break;
                                        case Model.GENESIS_G80:
                                            current_visible_group = VisibleGroup.G80;
                                            grpG80.Visible = true;
                                            grpG80.BringToFront();
                                            grpG160.Visible = false;
                                            grpG59.Visible = false;
                                            grpG40.Visible = false;
                                            grpG3020.Visible = false;
                                            grpG137.Visible = false;
                                            grpG500.Visible = false;
                                            grpG11.Visible = false;
                                            grpG6.Visible = false;
                                            break;
                                        case Model.GENESIS_G40:
                                            current_visible_group = VisibleGroup.G40;
                                            grpG59.Visible = false;
                                            grpG160.Visible = false;
                                            grpG80.Visible = false;
                                            grpG40.Visible = true;
                                            grpG40.BringToFront();
                                            grpG3020.Visible = false;
                                            grpG137.Visible = false;
                                            grpG500.Visible = false;
                                            grpG11.Visible = false;
                                            grpG6.Visible = false;
                                            break;
                                        case Model.GENESIS_G3020:
                                            current_visible_group = VisibleGroup.G3020;
                                            grpG59.Visible = false;
                                            grpG160.Visible = false;
                                            grpG80.Visible = false;
                                            grpG40.Visible = false;
                                            grpG3020.Visible = true;
                                            grpG3020.BringToFront();
                                            grpG137.Visible = false;
                                            grpG500.Visible = false;
                                            grpG11.Visible = false;
                                            grpG6.Visible = false;
                                            break;
                                        case Model.GENESIS_G59USB:
                                        case Model.GENESIS_G59NET:
                                            current_visible_group = VisibleGroup.G59;
                                            grpG59.Visible = true;
                                            grpG59.BringToFront();
                                            grpG160.Visible = false;
                                            grpG80.Visible = false;
                                            grpG40.Visible = false;
                                            grpG3020.Visible = false;
                                            grpG137.Visible = false;
                                            grpG500.Visible = false;
                                            grpG11.Visible = false;
                                            grpG6.Visible = false;
                                            break;
                                        case Model.GENESIS_G11:
                                            current_visible_group = VisibleGroup.G11;
                                            grpG59.Visible = false;
                                            grpG11.Visible = true;
                                            grpG11.BringToFront();
                                            grpG160.Visible = false;
                                            grpG80.Visible = false;
                                            grpG40.Visible = false;
                                            grpG3020.Visible = false;
                                            grpG137.Visible = false;
                                            grpG500.Visible = false;
                                            grpG6.Visible = false;
                                            break;
                                        case Model.GENESIS_G6:
                                            current_visible_group = VisibleGroup.G6;
                                            grpG59.Visible = false;
                                            grpG6.Visible = true;
                                            grpG6.BringToFront();
                                            grpG160.Visible = false;
                                            grpG80.Visible = false;
                                            grpG40.Visible = false;
                                            grpG3020.Visible = false;
                                            grpG137.Visible = false;
                                            grpG500.Visible = false;
                                            grpG11.Visible = false;
                                            break;
                                        case Model.RTL_SDR:
                                            current_visible_group = VisibleGroup.SubRXFilter;
                                            grpSubRXFilter.BringToFront();
                                            grpMainRXFilter.SendToBack();
                                            break;
                                    }
                                    break;
                                case VisibleGroup.Multimeter:
                                    current_visible_group = VisibleGroup.ZERO;
                                    grpMultimeter.Visible = false;
                                    break;
                                case VisibleGroup.Options:
                                    if (vfo_new_look)
                                    {
                                        current_visible_group = VisibleGroup.ZERO;
                                        grpMultimeter.Visible = false;
                                    }
                                    else
                                    {
                                        current_visible_group = VisibleGroup.Multimeter;
                                        grpOptions.Visible = false;
                                        grpMultimeter.Visible = true;
                                        grpMultimeter.BringToFront();
                                    }
                                    break;
                                case VisibleGroup.SoundControl:
                                    current_visible_group = VisibleGroup.Options;
                                    grpSoundControls1.Visible = false;
                                    grpOptions.Visible = true;
                                    break;
                                case VisibleGroup.VFO:
                                    current_visible_group = VisibleGroup.SoundControl;
                                    grpVFO.Visible = false;
                                    grpSoundControls1.Visible = true;
                                    break;
                                case VisibleGroup.VFOBetween:
                                    current_visible_group = VisibleGroup.VFO;
                                    grpVFOBetween.Visible = false;
                                    grpVFO.Visible = true;
                                    break;
                                case VisibleGroup.DSPMainRX:
                                    current_visible_group = VisibleGroup.VFOBetween;
                                    grpDSPMainRX.Visible = false;
                                    grpVFOBetween.Visible = true;
                                    break;
                                case VisibleGroup.DSPSubRX:
                                    current_visible_group = VisibleGroup.DSPMainRX;
                                    grpDSPSubRX.Visible = false;
                                    grpDSPMainRX.Visible = true;
                                    grpDSPMainRX.BringToFront();
                                    break;
                                case VisibleGroup.Display2:
                                    current_visible_group = VisibleGroup.DSPSubRX;
                                    grpDisplay2.Visible = false;
                                    grpDSPSubRX.Visible = true;
                                    grpDSPSubRX.BringToFront();
                                    break;
                                case VisibleGroup.ModeSpecificPhone:
                                    current_visible_group = VisibleGroup.Display2;
                                    grpDisplay2.Visible = true;
                                    break;
                                case VisibleGroup.ModeSpecificCW:
                                    current_visible_group = VisibleGroup.ModeSpecificPhone;
                                    grpModeSpecificDigital.SendToBack();
                                    grpModeSpecificCW.SendToBack();
                                    grpModeSpecificPhone.BringToFront();
                                    grpModeSpecificFM.SendToBack();
                                    break;
                                case VisibleGroup.ModeSpecificDigital:
                                    current_visible_group = VisibleGroup.ModeSpecificCW;
                                    grpModeSpecificCW.BringToFront();
                                    grpModeSpecificDigital.SendToBack();
                                    grpModeSpecificPhone.SendToBack();
                                    grpModeSpecificFM.SendToBack();
                                    break;
                                case VisibleGroup.ModeSpecificFM:
                                    current_visible_group = VisibleGroup.ModeSpecificDigital;
                                    grpModeSpecificFM.SendToBack();
                                    grpModeSpecificCW.SendToBack();
                                    grpModeSpecificDigital.BringToFront();
                                    grpModeSpecificPhone.SendToBack();
                                    break;
                                case VisibleGroup.Zoom:
                                    current_visible_group = VisibleGroup.ModeSpecificFM;
                                    grpZoom.Visible = false;
                                    grpModeSpecificFM.BringToFront();
                                    grpModeSpecificCW.SendToBack();
                                    grpModeSpecificPhone.SendToBack();
                                    grpModeSpecificDigital.SendToBack();
                                    break;
                                case VisibleGroup.BandHF:
                                    current_visible_group = VisibleGroup.Zoom;
                                    grpBandHF.Visible = false;
                                    grpMoreBands.Visible = false;
                                    grpZoom.Visible = true;
                                    break;
                                case VisibleGroup.RXSettings:
                                    current_visible_group = VisibleGroup.BandHF;
                                    grpManualNotch.Visible = false;

                                    if (show_more_bands)
                                    {
                                        grpBandHF.Visible = false;
                                        grpMoreBands.Visible = true;
                                    }
                                    else
                                    {
                                        grpBandHF.Visible = true;
                                        grpMoreBands.Visible = false;
                                    }
                                    break;
                                case VisibleGroup.MainRXMode:
                                    current_visible_group = VisibleGroup.RXSettings;
                                    grpMainRXMode.Visible = false;
                                    grpMainRXMode.BringToFront();
                                    grpManualNotch.Visible = true;
                                    grpManualNotch.BringToFront();
                                    break;
                                case VisibleGroup.MainRXFilter:
                                    current_visible_group = VisibleGroup.MainRXMode;
                                    grpMainRXMode.Visible = true;
                                    grpMainRXMode.BringToFront();
                                    break;
                                case VisibleGroup.SubRXMode:
                                    current_visible_group = VisibleGroup.MainRXFilter;
                                    grpSubRXMode.Visible = false;
                                    grpMainRXFilter.BringToFront();
                                    grpSubRXFilter.SendToBack();
                                    break;
                                case VisibleGroup.SubRXFilter:
                                    current_visible_group = VisibleGroup.SubRXMode;
                                    grpMainRXFilter.BringToFront();
                                    grpSubRXFilter.SendToBack();
                                    grpSubRXMode.Visible = true;
                                    grpSubRXMode.BringToFront();
                                    break;
                                case VisibleGroup.G137:
                                case VisibleGroup.G160:
                                case VisibleGroup.G80:
                                case VisibleGroup.G40:
                                case VisibleGroup.G3020:
                                case VisibleGroup.G59:
                                case VisibleGroup.G500:
                                case VisibleGroup.G11:
                                case VisibleGroup.G6:
                                    current_visible_group = VisibleGroup.SubRXFilter;
                                    grpSubRXFilter.BringToFront();
                                    grpMainRXFilter.SendToBack();

                                    switch (current_model)
                                    {
                                        case Model.GENESIS_G500:
                                            grpG160.Visible = false;
                                            grpG80.Visible = false;
                                            grpG40.Visible = false;
                                            grpG3020.Visible = false;
                                            grpG59.Visible = false;
                                            grpG137.Visible = false;
                                            grpG500.Visible = false;
                                            grpG11.Visible = false;
                                            grpG6.Visible = false;
                                            break;
                                        case Model.GENESIS_G137:
                                            grpG500.Visible = true;
                                            grpG160.Visible = false;
                                            grpG80.Visible = false;
                                            grpG40.Visible = false;
                                            grpG3020.Visible = false;
                                            grpG59.Visible = false;
                                            grpG11.Visible = false;
                                            grpG6.Visible = false;
                                            break;
                                        case Model.GENESIS_G160:
                                            grpG500.Visible = false;
                                            grpG137.Visible = true;
                                            grpG137.BringToFront();
                                            grpG160.Visible = false;
                                            grpG80.Visible = false;
                                            grpG40.Visible = false;
                                            grpG3020.Visible = false;
                                            grpG11.Visible = false;
                                            grpG59.Visible = false;
                                            grpG6.Visible = false;
                                            break;
                                        case Model.GENESIS_G80:
                                            grpG500.Visible = false;
                                            grpG80.Visible = false;
                                            grpG40.Visible = false;
                                            grpG3020.Visible = false;
                                            grpG59.Visible = false;
                                            grpG160.Visible = true;
                                            grpG11.Visible = false;
                                            grpLOSC.BringToFront();
                                            grpG6.Visible = false;
                                            break;
                                        case Model.GENESIS_G40:
                                            grpG500.Visible = false;
                                            grpG160.Visible = false;
                                            grpG40.Visible = false;
                                            grpG3020.Visible = false;
                                            grpG59.Visible = false;
                                            grpG80.Visible = true;
                                            grpG11.Visible = false;
                                            grpG80.BringToFront();
                                            grpG6.Visible = false;

                                            break;
                                        case Model.GENESIS_G3020:
                                            grpG500.Visible = false;
                                            grpG160.Visible = false;
                                            grpG80.Visible = false;
                                            grpG3020.Visible = false;
                                            grpG59.Visible = false;
                                            grpG40.Visible = true;
                                            grpG11.Visible = false;
                                            grpG40.BringToFront();
                                            grpG6.Visible = false;
                                            break;
                                        case Model.GENESIS_G59USB:
                                        case Model.GENESIS_G59NET:
                                            grpG500.Visible = false;
                                            grpG160.Visible = false;
                                            grpG80.Visible = false;
                                            grpG40.Visible = false;
                                            grpG59.Visible = false;
                                            grpG11.Visible = true;
                                            grpG11.Visible = false;
                                            grpG11.BringToFront();
                                            grpG6.Visible = false;
                                            break;
                                        case Model.GENESIS_G11:
                                            grpG500.Visible = false;
                                            grpG160.Visible = false;
                                            grpG80.Visible = false;
                                            grpG40.Visible = false;
                                            grpG59.Visible = false;
                                            grpG6.Visible = true;
                                            grpG11.Visible = true;
                                            grpG6.BringToFront();
                                            grpG6.Visible = false;
                                            break;
                                        case Model.GENESIS_G6:
                                            grpG500.Visible = false;
                                            grpG160.Visible = false;
                                            grpG80.Visible = false;
                                            grpG40.Visible = false;
                                            grpG59.Visible = false;
                                            grpG3020.Visible = true;
                                            grpG11.Visible = true;
                                            grpG3020.BringToFront();
                                            grpG6.Visible = false;
                                            break;
                                        case Model.RTL_SDR:
                                            grpG6.Visible = false;
                                            grpG59.Visible = false;
                                            grpG160.Visible = false;
                                            grpG80.Visible = false;
                                            grpG40.Visible = false;
                                            grpG3020.Visible = false;
                                            grpG137.Visible = false;
                                            grpG500.Visible = false;
                                            grpG11.Visible = false;
                                            break;
                                    }
                                    break;
                            }
                            Console_Resize(null, null);
                        }
                        break;
                    case Keys.G:
                        if (MinimalScreen)
                        {
                            switch (current_visible_group)
                            {
                                case VisibleGroup.ZERO:
                                    if (vfo_new_look)
                                    {
                                        current_visible_group = VisibleGroup.Options;
                                        grpMultimeter.Visible = false;
                                        grpOptions.Visible = true;
                                    }
                                    else
                                    {
                                        current_visible_group = VisibleGroup.Multimeter;
                                        grpMultimeter.Visible = true;
                                        grpMultimeter.BringToFront();
                                    }
                                    break;
                                case VisibleGroup.Multimeter:
                                    current_visible_group = VisibleGroup.Options;
                                    grpMultimeter.Visible = false;
                                    grpOptions.Visible = true;
                                    break;
                                case VisibleGroup.Options:
                                    current_visible_group = VisibleGroup.SoundControl;
                                    grpOptions.Visible = false;
                                    grpSoundControls1.Visible = true;
                                    break;
                                case VisibleGroup.SoundControl:
                                    current_visible_group = VisibleGroup.VFO;
                                    grpSoundControls1.Visible = false;
                                    grpVFO.Visible = true;
                                    break;
                                case VisibleGroup.VFO:
                                    current_visible_group = VisibleGroup.VFOBetween;
                                    grpVFO.Visible = false;
                                    grpVFOBetween.Visible = true;
                                    break;
                                case VisibleGroup.VFOBetween:
                                    current_visible_group = VisibleGroup.DSPMainRX;
                                    grpVFOBetween.Visible = false;
                                    grpDSPMainRX.Visible = true;
                                    grpDSPMainRX.BringToFront();
                                    break;
                                case VisibleGroup.DSPMainRX:
                                    current_visible_group = VisibleGroup.DSPSubRX;
                                    grpDSPMainRX.Visible = false;
                                    grpDSPSubRX.Visible = true;
                                    break;
                                case VisibleGroup.DSPSubRX:
                                    current_visible_group = VisibleGroup.Display2;
                                    grpDSPSubRX.Visible = false;
                                    grpDisplay2.Visible = true;
                                    break;
                                case VisibleGroup.Display2:
                                    current_visible_group = VisibleGroup.ModeSpecificPhone;
                                    grpDisplay2.Visible = false;
                                    grpModeSpecificPhone.BringToFront();
                                    grpModeSpecificDigital.SendToBack();
                                    grpModeSpecificFM.SendToBack();
                                    grpModeSpecificCW.SendToBack();
                                    break;
                                case VisibleGroup.ModeSpecificPhone:
                                    current_visible_group = VisibleGroup.ModeSpecificCW;
                                    grpModeSpecificDigital.SendToBack();
                                    grpModeSpecificPhone.SendToBack();
                                    grpModeSpecificFM.SendToBack();
                                    grpModeSpecificCW.BringToFront();
                                    break;
                                case VisibleGroup.ModeSpecificCW:
                                    current_visible_group = VisibleGroup.ModeSpecificFM;
                                    grpModeSpecificCW.SendToBack();
                                    grpModeSpecificPhone.SendToBack();
                                    grpModeSpecificFM.BringToFront();
                                    grpModeSpecificDigital.SendToBack();
                                    break;
                                case VisibleGroup.ModeSpecificFM:
                                    current_visible_group = VisibleGroup.ModeSpecificDigital;
                                    grpModeSpecificCW.SendToBack();
                                    grpModeSpecificPhone.SendToBack();
                                    grpModeSpecificFM.SendToBack();
                                    grpModeSpecificDigital.BringToFront();
                                    break;
                                case VisibleGroup.ModeSpecificDigital:
                                    current_visible_group = VisibleGroup.Zoom;

                                    grpZoom.Visible = true;
                                    break;
                                case VisibleGroup.Zoom:
                                    current_visible_group = VisibleGroup.BandHF;
                                    grpZoom.Visible = false;

                                    if (show_more_bands)
                                    {
                                        grpBandHF.Visible = false;
                                        grpMoreBands.Visible = true;
                                    }
                                    else
                                    {
                                        grpBandHF.Visible = true;
                                        grpMoreBands.Visible = false;
                                    }

                                    break;
                                case VisibleGroup.BandHF:
                                    current_visible_group = VisibleGroup.RXSettings;
                                    grpBandHF.Visible = false;
                                    grpManualNotch.Visible = true;
                                    grpManualNotch.BringToFront();
                                    break;
                                case VisibleGroup.RXSettings:
                                    current_visible_group = VisibleGroup.MainRXMode;
                                    grpManualNotch.Visible = false;
                                    grpMainRXMode.Visible = true;
                                    grpMainRXMode.BringToFront();
                                    break;
                                case VisibleGroup.MainRXMode:
                                    current_visible_group = VisibleGroup.MainRXFilter;
                                    grpMainRXMode.Visible = false;
                                    grpMainRXFilter.BringToFront();
                                    grpSubRXFilter.SendToBack();
                                    break;
                                case VisibleGroup.MainRXFilter:
                                    current_visible_group = VisibleGroup.SubRXMode;
                                    grpSubRXMode.Visible = true;
                                    grpSubRXMode.BringToFront();
                                    break;
                                case VisibleGroup.SubRXMode:
                                    current_visible_group = VisibleGroup.SubRXFilter;
                                    grpSubRXMode.Visible = false;
                                    grpSubRXFilter.BringToFront();
                                    grpMainRXFilter.SendToBack();
                                    break;
                                case VisibleGroup.SubRXFilter:
                                    switch (current_model)
                                    {
                                        case Model.GENESIS_G500:
                                            current_visible_group = VisibleGroup.G500;
                                            grpG59.Visible = false;
                                            grpG160.Visible = false;
                                            grpG80.Visible = false;
                                            grpG40.Visible = false;
                                            grpG3020.Visible = false;
                                            grpG137.Visible = false;
                                            grpG500.Visible = true;
                                            grpG11.Visible = false;
                                            grpG6.Visible = false;
                                            break;
                                        case Model.GENESIS_G137:
                                            current_visible_group = VisibleGroup.G137;
                                            grpG59.Visible = false;
                                            grpG160.Visible = false;
                                            grpG80.Visible = false;
                                            grpG40.Visible = false;
                                            grpG3020.Visible = false;
                                            grpG500.Visible = false;
                                            grpG137.Visible = true;
                                            grpG137.BringToFront();
                                            grpG11.Visible = false;
                                            grpG6.Visible = false;
                                            break;
                                        case Model.GENESIS_G160:
                                            current_visible_group = VisibleGroup.G160;
                                            grpG59.Visible = false;
                                            grpG160.Visible = true;
                                            grpLOSC.BringToFront();
                                            grpG80.Visible = false;
                                            grpG40.Visible = false;
                                            grpG3020.Visible = false;
                                            grpG137.Visible = false;
                                            grpG500.Visible = false;
                                            grpG11.Visible = false;
                                            grpG6.Visible = false;
                                            break;
                                        case Model.GENESIS_G80:
                                            current_visible_group = VisibleGroup.G80;
                                            grpG80.Visible = true;
                                            grpG80.BringToFront();
                                            grpG11.Visible = false;
                                            grpG160.Visible = false;
                                            grpG59.Visible = false;
                                            grpG40.Visible = false;
                                            grpG3020.Visible = false;
                                            grpG137.Visible = false;
                                            grpG500.Visible = false;
                                            grpG6.Visible = false;
                                            break;
                                        case Model.GENESIS_G40:
                                            current_visible_group = VisibleGroup.G40;
                                            grpG59.Visible = false;
                                            grpG160.Visible = false;
                                            grpG80.Visible = false;
                                            grpG40.Visible = true;
                                            grpG40.BringToFront();
                                            grpG3020.Visible = false;
                                            grpG137.Visible = false;
                                            grpG500.Visible = false;
                                            grpG11.Visible = false;
                                            grpG6.Visible = false;
                                            break;
                                        case Model.GENESIS_G3020:
                                            current_visible_group = VisibleGroup.G3020;
                                            grpG59.Visible = false;
                                            grpG160.Visible = false;
                                            grpG80.Visible = false;
                                            grpG40.Visible = false;
                                            grpG3020.Visible = true;
                                            grpG3020.BringToFront();
                                            grpG137.Visible = false;
                                            grpG500.Visible = false;
                                            grpG11.Visible = false;
                                            grpG6.Visible = false;
                                            break;
                                        case Model.GENESIS_G59USB:
                                        case Model.GENESIS_G59NET:
                                            current_visible_group = VisibleGroup.G59;
                                            grpG59.Visible = true;
                                            grpG59.BringToFront();
                                            grpG160.Visible = false;
                                            grpG80.Visible = false;
                                            grpG40.Visible = false;
                                            grpG3020.Visible = false;
                                            grpG137.Visible = false;
                                            grpG500.Visible = false;
                                            grpG11.Visible = false;
                                            grpG6.Visible = false;
                                            break;
                                        case Model.GENESIS_G11:
                                            current_visible_group = VisibleGroup.G11;
                                            grpG11.Visible = true;
                                            grpG11.BringToFront();
                                            grpG59.Visible = false;
                                            grpG160.Visible = false;
                                            grpG80.Visible = false;
                                            grpG40.Visible = false;
                                            grpG3020.Visible = false;
                                            grpG137.Visible = false;
                                            grpG500.Visible = false;
                                            grpG6.Visible = false;
                                            break;
                                        case Model.GENESIS_G6:
                                            current_visible_group = VisibleGroup.G6;
                                            grpG6.Visible = true;
                                            grpG6.BringToFront();
                                            grpG59.Visible = false;
                                            grpG160.Visible = false;
                                            grpG80.Visible = false;
                                            grpG40.Visible = false;
                                            grpG3020.Visible = false;
                                            grpG137.Visible = false;
                                            grpG500.Visible = false;
                                            grpG11.Visible = false;
                                            break;
                                        case Model.RTL_SDR:
                                            current_visible_group = VisibleGroup.ZERO;
                                            grpG6.Visible = false;
                                            grpG59.Visible = false;
                                            grpG160.Visible = false;
                                            grpG80.Visible = false;
                                            grpG40.Visible = false;
                                            grpG3020.Visible = false;
                                            grpG137.Visible = false;
                                            grpG500.Visible = false;
                                            grpG11.Visible = false;
                                            break;
                                    }
                                    break;
                                case VisibleGroup.G137:
                                case VisibleGroup.G160:
                                case VisibleGroup.G80:
                                case VisibleGroup.G40:
                                case VisibleGroup.G3020:
                                case VisibleGroup.G59:
                                case VisibleGroup.G500:
                                case VisibleGroup.G11:
                                case VisibleGroup.G6:
                                    current_visible_group = VisibleGroup.ZERO;
                                    grpG160.Visible = false;
                                    grpG11.Visible = false;
                                    grpG6.Visible = false;
                                    grpG137.Visible = false;
                                    grpG80.Visible = false;
                                    grpG40.Visible = false;
                                    grpG3020.Visible = false;
                                    grpG59.Visible = false;
                                    grpG500.Visible = false;
                                    grpMainRXFilter.BringToFront();
                                    grpSubRXFilter.SendToBack();
                                    break;
                            }

                            Console_Resize(null, null);
                        }
                        break;
                    case Keys.Left:
                        if (current_click_tune_mode == ClickTuneMode.Off ||
                            current_click_tune_mode == ClickTuneMode.VFOA)
                            ChangeWheelTuneLeft();
                        else if (current_click_tune_mode == ClickTuneMode.VFOB)
                            ChangeWheelTuneLeftSubRX();
                        e.Handled = true;
                        break;
                    case Keys.Right:
                        if (current_click_tune_mode == ClickTuneMode.Off ||
                            current_click_tune_mode == ClickTuneMode.VFOA)
                            ChangeWheelTuneRight();
                        else if (current_click_tune_mode == ClickTuneMode.VFOB)
                            ChangeWheelTuneRightSubRX();
                        e.Handled = true;
                        break;
                    case Keys.Up:
                        Console_MouseWheel(this, new MouseEventArgs(MouseButtons.None, 0, 0, 0, 120));
                        e.Handled = true;
                        break;
                    case Keys.Down:
                        Console_MouseWheel(this, new MouseEventArgs(MouseButtons.None, 0, 0, 0, -120));
                        e.Handled = true;
                        break;
                    case Keys.A:
                        if (!btnHIGH_AF.Checked)
                            btnHIGH_AF.Checked = true;
                        else
                            btnHIGH_AF.Checked = false;
                        break;
                    case Keys.R:
                        if (!btnHIGH_RF.Checked)
                            btnHIGH_RF.Checked = true;
                        else
                            btnHIGH_RF.Checked = false;
                        break;
                    case Keys.T:
                        if (!btnATT.Checked)
                            btnATT.Checked = true;
                        else
                            btnATT.Checked = false;
                        break;
                    case Keys.D:
                        switch (Display_GDI.CurrentDisplayMode)
                        {
                            case DisplayMode.WATERFALL:
                                comboDisplayMode.Text = "Histogram";
                                break;
                            case DisplayMode.PANASCOPE:
                                comboDisplayMode.Text = "Off";
                                break;
                            case DisplayMode.PANADAPTER:
                                comboDisplayMode.Text = "Scope";
                                break;
                            case DisplayMode.PHASE:
                                comboDisplayMode.Text = "Phase2";
                                break;
                            case DisplayMode.PHASE2:
                                comboDisplayMode.Text = "Waterfall";
                                break;
                            case DisplayMode.SCOPE:
                                comboDisplayMode.Text = "Phase";
                                break;
                            case DisplayMode.SPECTRUM:
                                comboDisplayMode.Text = "Panadapter";
                                break;
                            case DisplayMode.HISTOGRAM:
                                comboDisplayMode.Text = "Panafall";
                                break;
                            case DisplayMode.PANAFALL:
                                comboDisplayMode.Text = "Panafall_inv";
                                break;
                            case DisplayMode.PANAFALL_INV:
                                comboDisplayMode.Text = "Panascope";
                                break;
                            case DisplayMode.OFF:
                                comboDisplayMode.Text = "Spectrum";
                                break;
                        }
                        break;
                    case Keys.S:
                        if (chkVFOSplit.Enabled)
                            chkVFOSplit.Checked = !chkVFOSplit.Checked;
                        break;
                    case Keys.F:
                        int low = (int)udFilterLow.Value;
                        int high = (int)udFilterHigh.Value;
                        if (high - low > 10)
                        {
                            switch (current_dsp_mode)
                            {
                                case DSPMode.AM:
                                case DSPMode.SAM:
                                case DSPMode.DSB:
                                case DSPMode.FMN:
                                case DSPMode.CWU:
                                case DSPMode.CWL:
                                    UpdateFilters(low + 5, high - 5);
                                    break;
                                case DSPMode.USB:
                                case DSPMode.DIGU:
                                    UpdateFilters(low, high - 10);
                                    break;
                                case DSPMode.LSB:
                                case DSPMode.DIGL:
                                    UpdateFilters(low + 10, high);
                                    break;
                            }
                        }
                        break;
                    case Keys.L:
                        if (chkVFOLock.Enabled)
                            chkVFOLock.Checked = !chkVFOLock.Checked;
                        break;
                    case Keys.K:
                        if (chkVFOsinc.Enabled)
                            chkVFOsinc.Checked = !chkVFOsinc.Checked;
                        break;
                    case Keys.M:
                        if (PowerOn)
                            chkMOX.Checked = true;
                        break;
                }
            }
            else if (e.Alt && !e.Control)
            {
                switch (e.KeyCode)
                {
                    case Keys.A:
                        if (CurrentAGCMode == AGCMode.FAST)
                            CurrentAGCMode = AGCMode.FIXD;
                        else CurrentAGCMode++;
                        break;
                    case Keys.S:
                        if (chkEnableSubRX.Checked)
                            chkEnableSubRX.Checked = false;
                        else
                            chkEnableSubRX.Checked = true;
                        break;
                    case Keys.F:
                        int low = (int)udFilterLow.Value;
                        int high = (int)udFilterHigh.Value;
                        switch (current_dsp_mode)
                        {
                            case DSPMode.AM:
                            case DSPMode.SAM:
                            case DSPMode.DSB:
                            case DSPMode.FMN:
                            case DSPMode.CWU:
                            case DSPMode.CWL:
                                UpdateFilters(low - 5, high + 5);
                                break;
                            case DSPMode.USB:
                            case DSPMode.DIGU:
                                UpdateFilters(low, high + 10);
                                break;
                            case DSPMode.LSB:
                            case DSPMode.DIGL:
                                UpdateFilters(low - 10, high);
                                break;
                        }
                        break;
                    case Keys.G:
                        btnVFOAtoB_Click(this, EventArgs.Empty);
                        break;
                    case Keys.H:
                        btnVFOBtoA_Click(this, EventArgs.Empty);
                        break;
                    case Keys.I:
                        btnFilterShiftReset_Click(this, EventArgs.Empty);
                        break;
                    case Keys.R:
                        btnRITReset_Click(this, EventArgs.Empty);
                        break;
                    case Keys.T:
                        chkTUN.Checked = !chkTUN.Checked;
                        break;
                    case Keys.V:
                        btnVFOSwap_Click(this, EventArgs.Empty);
                        break;
                    case Keys.Y:
                        btnXITReset_Click(this, EventArgs.Empty);
                        break;
                    case Keys.Z:
                        SetupForm.chkVACPrimaryAudioDevice.Checked = !SetupForm.chkVACPrimaryAudioDevice.Checked;
                        break;
                    case Keys.K:

                        break;
                }
            }
            else if (!e.Alt && !e.Control)
            {
                if (this.ActiveControl is TextBoxTS) return;
                if (this.ActiveControl is NumericUpDownTS) return;

                switch (e.KeyCode)
                {
                    case Keys.Multiply:
                        chkMUT.Checked = !chkMUT.Checked;
                        break;
                    case Keys.Add:
                        if (ptbAF.Value != ptbAF.Maximum)
                            ptbAF.Value++;
                        AF_ValueChanged();
                        break;
                    case Keys.Subtract:
                        if (ptbAF.Value != ptbAF.Minimum)
                            ptbAF.Value--;
                        AF_ValueChanged();
                        break;
                    case Keys.K:
                        int low = (int)udFilterLow.Value;
                        int high = (int)udFilterHigh.Value;
                        int increment = 0;
                        switch (current_dsp_mode)
                        {
                            case DSPMode.CWL:
                            case DSPMode.CWU:
                            case DSPMode.DIGL:
                            case DSPMode.DIGU:
                                increment = 10;
                                break;
                            default:
                                increment = 50;
                                break;
                        }
                        UpdateFilters(low - increment, high - increment);
                        break;
                    case Keys.L:
                        low = (int)udFilterLow.Value;
                        high = (int)udFilterHigh.Value;
                        increment = 0;
                        switch (current_dsp_mode)
                        {
                            case DSPMode.CWL:
                            case DSPMode.CWU:
                            case DSPMode.DIGL:
                            case DSPMode.DIGU:
                                increment = 10;
                                break;
                            default:
                                increment = 50;
                                break;
                        }
                        UpdateFilters(low + increment, high + increment);
                        break;
                }

                if (e.KeyCode == key_show_hide_gui)
                {
                    if (current_model == Model.RTL_SDR || current_model == Model.GENESIS_G6)
                    {

                    }
                    else
                    {
                        if (SI570 != null)
                            SI570.Show_SI570_GUI();
                    }
                }

                if (e.KeyCode == key_tune_up_1)
                {
                    double freq = Double.Parse(txtVFOAFreq.Text);
                    freq += 1.0;
                    VFOAFreq = freq;
                }
                else if (e.KeyCode == key_tune_down_1)
                {
                    double freq = Double.Parse(txtVFOAFreq.Text);
                    freq -= 1.0;
                    VFOAFreq = freq;
                }
                else if (e.KeyCode == key_tune_up_2)
                {
                    double freq = Double.Parse(txtVFOAFreq.Text);
                    freq += 0.1;
                    VFOAFreq = freq;
                }
                else if (e.KeyCode == key_tune_down_2)
                {
                    double freq = Double.Parse(txtVFOAFreq.Text);
                    freq -= 0.1;
                    VFOAFreq = freq;
                }
                else if (e.KeyCode == key_tune_up_3)
                {
                    double freq = Double.Parse(txtVFOAFreq.Text);
                    freq += 0.01;
                    VFOAFreq = freq;
                }
                else if (e.KeyCode == key_tune_down_3)
                {
                    double freq = Double.Parse(txtVFOAFreq.Text);
                    freq -= 0.01;
                    VFOAFreq = freq;
                }
                else if (e.KeyCode == key_tune_up_4)
                {
                    double freq = Double.Parse(txtVFOAFreq.Text);
                    freq += 0.001;
                    VFOAFreq = freq;
                }
                else if (e.KeyCode == key_tune_down_4)
                {
                    double freq = Double.Parse(txtVFOAFreq.Text);
                    freq -= 0.001;
                    VFOAFreq = freq;
                }
                else if (e.KeyCode == key_tune_up_5)
                {
                    double freq = Double.Parse(txtVFOAFreq.Text);
                    freq += 0.0001;
                    VFOAFreq = freq;
                }
                else if (e.KeyCode == key_tune_down_5)
                {
                    double freq = Double.Parse(txtVFOAFreq.Text);
                    freq -= 0.0001;
                    VFOAFreq = freq;
                }
                else if (e.KeyCode == key_tune_up_6)
                {
                    double freq = Double.Parse(txtVFOAFreq.Text);
                    freq += 0.00001;
                    VFOAFreq = freq;
                }
                else if (e.KeyCode == key_tune_down_6)
                {
                    double freq = Double.Parse(txtVFOAFreq.Text);
                    freq -= 0.00001;
                    VFOAFreq = freq;
                }
                else if (e.KeyCode == key_tune_up_7)
                {
                    double freq = Double.Parse(txtVFOAFreq.Text);
                    freq += 0.000001;
                    VFOAFreq = freq;
                }
                else if (e.KeyCode == key_tune_down_7)
                {
                    double freq = Double.Parse(txtVFOAFreq.Text);
                    freq -= 0.000001;
                    VFOAFreq = freq;
                }
                else if (e.KeyCode == key_rit_up)
                {
                    udRIT.Value += udRIT.Increment;
                }
                else if (e.KeyCode == key_rit_down)
                {
                    udRIT.Value -= udRIT.Increment;
                }
                else if (e.KeyCode == key_xit_up)
                {
                    udXIT.Value += udXIT.Increment;
                }
                else if (e.KeyCode == key_xit_down)
                {
                    udXIT.Value -= udXIT.Increment;
                }
                else if (e.KeyCode == key_filter_up)
                {
                    if (current_filter == Filter.NONE)
                        return;
                    if (current_filter == Filter.VAR2)
                        CurrentFilter = Filter.F1;
                    else
                        CurrentFilter++;
                }
                else if (e.KeyCode == key_filter_down)
                {
                    if (current_filter == Filter.NONE)
                        return;
                    if (current_filter == Filter.F1)
                        CurrentFilter = Filter.VAR2;
                    else
                        CurrentFilter--;
                }
                else if (e.KeyCode == key_band_up && !vfo_lock)
                {
                    switch (current_band)
                    {
                        case Band.B160M:
                            if (band_160m_index == 2)
                            {
                                band_80m_index = 0;
                                radBand80.Checked = true;
                            }
                            else
                            {
                                band_160m_index++;
                                btnBand160_CheckedChanged(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B80M:
                            if (band_80m_index == 2)
                            {
                                band_60m_index = 0;
                                radBand60.Checked = true;
                            }
                            else
                            {
                                band_80m_index++;
                                btnBand80_CheckedChanged(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B60M:
                            if (band_60m_index == 4)
                            {
                                band_40m_index = 0;
                                radBand40.Checked = true;
                            }
                            else
                            {
                                band_60m_index++;
                                btnBand60_CheckedChanged(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B40M:
                            if (band_40m_index == 2)
                            {
                                band_30m_index = 0;
                                radBand30.Checked = true;
                            }
                            else
                            {
                                band_40m_index++;
                                btnBand40_CheckedChanged(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B30M:
                            if (band_30m_index == 2)
                            {
                                band_20m_index = 0;
                                radBand20.Checked = true;
                            }
                            else
                            {
                                band_30m_index++;
                                btnBand30_CheckedChanged(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B20M:
                            if (band_20m_index == 2)
                            {
                                band_17m_index = 0;
                                radBand17.Checked = true;
                            }
                            else
                            {
                                band_20m_index++;
                                btnBand20_CheckedChanged(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B17M:
                            if (band_17m_index == 2)
                            {
                                band_15m_index = 0;
                                radBand15.Checked = true;
                            }
                            else
                            {
                                band_17m_index++;
                                btnBand17_CheckedChanged(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B15M:
                            if (band_15m_index == 2)
                            {
                                band_12m_index = 0;
                                radBand12.Checked = true;
                            }
                            else
                            {
                                band_15m_index++;
                                btnBand15_CheckedChanged(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B12M:
                            if (band_12m_index == 2)
                            {
                                band_10m_index = 0;
                                radBand10.Checked = true;
                            }
                            else
                            {
                                band_12m_index++;
                                btnBand12_CheckedChanged(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B10M:
                            if (band_10m_index == 2)
                            {
                                band_6m_index = 0;
                                radBand6.Checked = true;
                            }
                            else
                            {
                                band_10m_index++;
                                btnBand10_CheckedChanged(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B6M:
                            if (band_6m_index == 2)
                            {
                                band_wwv_index = 0;
                                radBandWWV.Checked = true;
                            }
                            else
                            {
                                band_6m_index++;
                                btnBand6_CheckedChanged(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B2M:
                            if (band_2m_index == 2)
                            {
                                band_wwv_index = 0;
                                radBandWWV.Checked = true;
                            }
                            else
                            {
                                band_2m_index++;
                                btnBand2_CheckedChanged(this, EventArgs.Empty);
                            }
                            break;
                        case Band.WWV:
                            if (band_wwv_index == 4)
                            {
                                band_gen_index = 0;
                                radBandGEN.Checked = true;
                            }
                            else
                            {
                                band_wwv_index++;
                                btnBandWWV_CheckedChanged(this, EventArgs.Empty);
                            }
                            break;
                        case Band.GEN:
                            if (band_gen_index == 4)
                            {
                                band_160m_index = 0;
                                radBand160.Checked = true;
                            }
                            else
                            {
                                band_gen_index++;
                                btnBandGEN_CheckedChanged(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B2190M:
                            if (band_2190m_index == 2)
                            {
                                band_2190m_index = 0;
                                radBand2190.Checked = true;
                            }
                            else
                            {
                                band_2190m_index++;
                                radBand2190_CheckedChanged(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B600M:
                            if (band_600m_index == 2)
                            {
                                band_600m_index = 0;
                                radBand600.Checked = true;
                            }
                            else
                            {
                                band_600m_index++;
                                radBand600_CheckedChanged(this, EventArgs.Empty);
                            }
                            break;
                    }
                }
                else if (e.KeyCode == key_band_down && !vfo_lock)
                {
                    switch (current_band)
                    {
                        case Band.B160M:
                            if (band_160m_index == 0)
                            {
                                band_gen_index = 4;
                                radBandGEN.Checked = true;
                            }
                            else
                            {
                                last_band = "160M";
                                band_160m_index = (band_160m_index + 1) % 3;
                                btnBand160_CheckedChanged(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B80M:
                            if (band_80m_index == 0)
                            {
                                band_160m_index = 2;
                                radBand160.Checked = true;
                            }
                            else
                            {
                                last_band = "80M";
                                band_80m_index = (band_80m_index + 1) % 3;
                                btnBand80_CheckedChanged(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B60M:
                            if (band_60m_index == 0)
                            {
                                band_80m_index = 2;
                                radBand80.Checked = true;
                            }
                            else
                            {
                                last_band = "60M";
                                band_60m_index = (band_60m_index + 3) % 5;
                                btnBand60_CheckedChanged(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B40M:
                            if (band_40m_index == 0)
                            {
                                band_60m_index = 4;
                                radBand60.Checked = true;
                            }
                            else
                            {
                                last_band = "40M";
                                band_40m_index = (band_40m_index + 1) % 3;
                                btnBand40_CheckedChanged(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B30M:
                            if (band_30m_index == 0)
                            {
                                band_40m_index = 2;
                                radBand40.Checked = true;
                            }
                            else
                            {
                                last_band = "30M";
                                band_30m_index = (band_30m_index + 1) % 3;
                                btnBand30_CheckedChanged(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B20M:
                            if (band_20m_index == 0)
                            {
                                band_30m_index = 2;
                                radBand30.Checked = true;
                            }
                            else
                            {
                                last_band = "20M";
                                band_20m_index = (band_20m_index + 1) % 3;
                                btnBand20_CheckedChanged(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B17M:
                            if (band_17m_index == 0)
                            {
                                band_20m_index = 2;
                                radBand20.Checked = true;
                            }
                            else
                            {
                                last_band = "17M";
                                band_17m_index = (band_17m_index + 1) % 3;
                                btnBand17_CheckedChanged(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B15M:
                            if (band_15m_index == 0)
                            {
                                band_17m_index = 2;
                                radBand17.Checked = true;
                            }
                            else
                            {
                                last_band = "15M";
                                band_15m_index = (band_15m_index + 1) % 3;
                                btnBand15_CheckedChanged(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B12M:
                            if (band_12m_index == 0)
                            {
                                band_15m_index = 2;
                                radBand15.Checked = true;
                            }
                            else
                            {
                                last_band = "12M";
                                band_12m_index = (band_12m_index + 1) % 3;
                                btnBand12_CheckedChanged(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B10M:
                            if (band_10m_index == 0)
                            {
                                band_12m_index = 2;
                                radBand12.Checked = true;
                            }
                            else
                            {
                                last_band = "10M";
                                band_10m_index = (band_10m_index + 1) % 3;
                                btnBand10_CheckedChanged(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B6M:
                            if (band_6m_index == 0)
                            {
                                band_10m_index = 2;
                                radBand10.Checked = true;
                            }
                            else
                            {
                                last_band = "6M";
                                band_6m_index = (band_6m_index + 1) % 3;
                                btnBand6_CheckedChanged(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B2M:
                            if (band_2m_index == 0)
                            {
                                band_6m_index = 2;
                                radBand6.Checked = true;
                            }
                            else
                            {
                                last_band = "2M";
                                band_2m_index = (band_2m_index + 1) % 3;
                                btnBand6_CheckedChanged(this, EventArgs.Empty);
                            }
                            break;
                        case Band.WWV:
                            if (band_wwv_index == 0)
                            {
                                band_6m_index = 2;
                                radBand6.Checked = true;
                            }
                            else
                            {
                                last_band = "WWV";
                                band_wwv_index = (band_wwv_index + 3) % 5;
                                btnBandWWV_CheckedChanged(this, EventArgs.Empty);
                            }
                            break;
                        case Band.GEN:
                            if (band_gen_index == 0)
                            {
                                band_wwv_index = 4;
                                radBandWWV.Checked = true;
                            }
                            else
                            {
                                last_band = "GEN";
                                band_gen_index = (band_gen_index + 3) % 5;
                                btnBandGEN_CheckedChanged(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B2190M:
                            if (band_2190m_index == 0)
                            {
                                band_gen_index = 4;
                                radBand2190.Checked = true;
                            }
                            else
                            {
                                last_band = "2190M";
                                band_2190m_index = (band_2190m_index + 1) % 3;
                                radBand2190_CheckedChanged(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B600M:
                            if (band_600m_index == 0)
                            {
                                band_gen_index = 4;
                                radBand600.Checked = true;
                            }
                            else
                            {
                                last_band = "600M";
                                band_600m_index = (band_600m_index + 1) % 3;
                                radBand600_CheckedChanged(this, EventArgs.Empty);
                            }
                            break;
                    }

                }
                else if (e.KeyCode == Keys.Space)
                {
                    if (PowerOn)
                        chkMOX.Checked = true;
                }
                else if (e.KeyCode == key_cw_dot)
                {
                    g59.KEYER = 1;
                    net_device.KEYER = 1;
                    g11.KEYER = 1;
                    g59.KeyerNewData = true;
                    g11.KeyerNewData = true;
                    net_device.KeyerNewData = true;
                    g6.KeyerNewData = true;
                }
                else if (e.KeyCode == key_cw_dash)
                {
                    g59.KEYER = 0;
                    net_device.KEYER = 0;
                    g11.KEYER = 0;
                    g59.KeyerNewData = true;
                    g11.KeyerNewData = true;
                    net_device.KeyerNewData = true;
                    g6.KeyerNewData = true;
                }
                else if (vfo_lock || !quick_qsy)
                {
                    return;
                }
                else if (e.KeyCode == key_cw_keyer_speed_up)
                {
                    if (udCWSpeed.Value <= udCWSpeed.Maximum + 1)
                        udCWSpeed.Value += 1;
                }
                else if (e.KeyCode == key_cw_keyer_speed_down)
                {
                    if (udCWSpeed.Value >= udCWSpeed.Minimum - 1)
                        udCWSpeed.Value -= 1;
                }
            }

            if (debug != null && debug.Visible & debug_enabled)
            {
                debug.rtbDebugMsg.AppendText("KeyDown: " + e.KeyCode.ToString() + " \n");
                SendMessage(debug.rtbDebugMsg.Handle, WM_VSCROLL, SB_BOTTOM, 0);
            }
        }

        // chkPower
        private void chkPower_CheckedChanged(object sender, System.EventArgs e) // changes yt7pwr
        {
            try
            {
                if (Audio.voice_message_record)
                    return;

                cat_ptt = false;
                MultiPSKServer.IsPTT = false;
                Audio.MOX = false;

                if (Audio.voice_message_record && VoiceMsgForm != null)
                {
                    VoiceMsgForm.RecordingEnd = true;
                    Thread.Sleep(100);
                }

                double freq;

                if (chkPower.Checked)
                {
                    DttSP.AudioReset();
                    DttSP.SetTRX(0, false);     // RX mode

                    if (CurrentClickTuneMode == ClickTuneMode.Off ||
                        CurrentClickTuneMode == ClickTuneMode.VFOA)
                        DttSP.SetRXAGCMaxGain(0, 0, (double)ptbRF.Value);
                    else if (CurrentClickTuneMode == ClickTuneMode.VFOB)
                        DttSP.SetRXAGCMaxGain(0, 1, (double)ptbRF.Value);

                    EQForm.InitEQ();

                    meter_data_ready = false;

                    Display_GDI.DataReady = false;
                    if (Display_GDI.display_data_mutex == null)
                        Display_GDI.display_data_mutex = new Mutex();
#if(DirectX)
                    Display_DirectX.DataReady = false;
#endif
                    switch (current_model)
                    {
                        case Model.GENESIS_G6:
                            if (!g6.Connected)
                            {
                                g6.USB_Serial = SetupForm.USB_serial_No;
                                g6.Connect();
                                //g6.Connect_ISO();
                            }

                            if (g6.Connected)
                            {
                                G6Init();

                                if (g6.Start())
                                    btnUSB.BackColor = Color.Green;
                                else
                                    btnUSB.BackColor = Color.Red;
                            }
                            break;

                        case Model.GENESIS_G59USB:
                            {
                                if (!g59.Connected)
                                {
                                    g59.USB_Serial = SetupForm.USB_serial_No;
                                    g59.Connect();
                                }

                                if (g59.Connected)
                                {
                                    G59Init();
                                    btnUSB.BackColor = Color.Green;
                                }
                                else
                                    btnUSB.BackColor = Color.Red;
                            }
                            break;

                        case Model.GENESIS_G59NET:
                            {
                                if (net_device.Connected)
                                {
                                    G59Init();
                                    btnNetwork.BackColor = Color.Green;
                                }
                                else
                                    btnNetwork.BackColor = Color.Red;
                            }
                            break;

                        case Model.GENESIS_G11:
                            {
                                if (!g11.Connected)
                                {
                                    g11.USB_Serial = SetupForm.USB_serial_No;
                                    g11.Connect();
                                }

                                if (g11.Connected)
                                {
                                    G11Init();
                                    btnUSB.BackColor = Color.Green;
                                }
                                else
                                    btnUSB.BackColor = Color.Red;
                            }
                            break;
                    }

                    PowerOn = true;
                    freq = loscFreq;
                    freq *= 1e6;

                    if (usb_si570_enable)
                    {
                        SI570.Start_SI570((long)freq);
                        SI570.Set_SI570_osc((long)freq);
                    }
                    else if (current_model == Model.QRP2000)
                    {
                        if (QRP2000_XTRV_enabled && current_band == Band.B2M)
                            freq -= 116000000.0 + QRP2000_IF_Freq;

                        qrp2000.Set_SI570_freq((freq / 1e6) * qrp2000_freq_multiplier);
                    }

                    if (!skins_enabled)
                        chkPower.Text = "On";

                    chkPower.BackColor = button_selected_color;
                    txtVFOAnew.ForeColor = vfo_text_light_color;
                    lblVFOA.ForeColor = vfo_text_light_color;
                    lblAFNewVFO.ForeColor = vfo_text_light_color;
                    lblRFNewVFO.ForeColor = vfo_text_light_color;
                    lblATTNewVFO.ForeColor = vfo_text_light_color;
                    lblRX2.ForeColor = vfo_text_light_color;
                    txtLOSCnew.ForeColor = vfo_text_light_color;
                    lblLOSC.ForeColor = vfo_text_light_color;
                    sMeterDigital2.MeterForeColor = Color.White;
                    sMeterDigital1.MeterForeColor = Color.White;

                    if (chkVFOSplit.Checked)
                    {
                        txtVFOBnew.ForeColor = Color.Red;
                        lblVFOB.ForeColor = Color.Red;
                    }
                    else if (chkEnableSubRX.Checked)
                    {
                        txtVFOBnew.ForeColor = vfo_text_light_color;
                        lblVFOB.ForeColor = vfo_text_light_color;
                    }

                    chkVFOSplit.Enabled = true;
                    txtVFOAFreq.ForeColor = vfo_text_light_color;
                    txtVFOAMSD.ForeColor = vfo_text_light_color;
                    txtVFOALSD.ForeColor = small_vfo_color;
                    txtVFOABand.ForeColor = band_text_light_color;
                    txtLOSCFreq.ForeColor = vfo_text_light_color;
                    txtLOSCMSD.ForeColor = vfo_text_light_color;
                    txtLOSCLSD.ForeColor = small_vfo_color;
                    txtVFOAnew.ForeColor = vfo_text_light_color;
                    txtLOSCnew.ForeColor = vfo_text_light_color;
                    txtNewVFOBand.ForeColor = band_text_light_color;
                    txtVFOBnew.BackColor = new_background_vfo_color;
                    txtVFOAnew.BackColor = new_background_vfo_color;

                    if (chkVFOSplit.Checked)
                    {
                        txtVFOBFreq.ForeColor = Color.Red;
                        txtVFOBMSD.ForeColor = Color.Red;
                        txtVFOBLSD.ForeColor = small_vfo_color;
                        txtVFOBBand.ForeColor = band_text_light_color;
                        txtVFOBnew.ForeColor = Color.Red;
                    }
                    else if (chkEnableSubRX.Checked)
                    {
                        txtVFOBFreq.ForeColor = vfo_text_light_color;
                        txtVFOBMSD.ForeColor = vfo_text_light_color;
                        txtVFOBLSD.ForeColor = small_vfo_color;
                        txtVFOBBand.ForeColor = band_text_light_color;
                        txtVFOBnew.ForeColor = vfo_text_light_color;
                    }

                    // wjt added 
                    if (PTTBitBangEnabled && serialPTT == null) // we are enabled but don't have port object 
                    {
                        //Debug.WriteLine("Forcing property set on PTTBitBangEnabled"); 
                        PTTBitBangEnabled = true; // force creation of serial ptt 
                    }
                    // wjt added ends 

                    if (WinVer == WindowsVersion.WindowsXP || WinVer == WindowsVersion.Windows2000)
                        SetupForm.AudioReceiveMux1 = SetupForm.AudioReceiveMux1;		// set receive mux

                    Audio.CurrentAudioState1 = Audio.AudioState.DTTSP;
                    Audio.callback_return = 0;      // 0=continue
                    Audio.VAC_callback_return = 0;

                    if (current_model == Model.RTL_SDR)
                    {
                        RTL_SDR.Start();
                    }

                    if (!Audio.Start())
                    {
                        chkPower.Checked = false;
                        return;
                    }

                    if (Audio.EnableEthernetClientDevice)
                    {
                        Audio.EnableLocalHost = false;
                        ClientEthernetStart();               // start recv UDP client
                    }
                    else if (Audio.EnableEthernetServerDevice)
                    {
                        if (!ServerSocket.IsOpen)
                            ServerSocket.open(SetupForm.txtMulticastIPAddress.Text, (int)SetupForm.udMulticastPort.Value,
                                SetupForm.txtServerIPAddress.Text, (int)SetupForm.udServerPort.Value, (int)SetupForm.udTTL.Value);
                    }

                    double vfoA_freq = Math.Round((LOSCFreq - VFOAFreq) * 1e6, 6);
                    double vfoB_freq = Math.Round((LOSCFreq - VFOBFreq) * 1e6, 6);

                    if (chkEnableSubRX.Checked)
                    {
                        DttSP.SetRXOn(0, 1, true);
                        DttSP.SetRXOsc(0, 1, vfoB_freq);
                        DttSP.SetRXOutputGain(0, 1, (double)ptbRX1Gain.Value / ptbRX1Gain.Maximum);
                        DttSP.SetRXOn(0, 0, true);
                        DttSP.SetRXOsc(0, 0, vfoA_freq);
                        DttSP.SetRXOutputGain(0, 0, (double)ptbRX0Gain.Value / ptbRX0Gain.Maximum);
                    }
                    else
                    {
                        DttSP.SetRXOn(0, 1, false);
                        DttSP.SetRXOn(0, 0, true);
                        DttSP.SetRXOsc(0, 0, vfoA_freq);
                        float val = (int)ptbPanMainRX.Value / 100.0f;
                        DttSP.SetRXPan(0, 0, val);
                        DttSP.SetRXOutputGain(0, 0, 1.0);
                        DttSP.SetRXOutputGain(0, 1, 0.0);
                    }

                    VFOAFreq = vfoAFreq;
                    VFOBFreq = vfoBFreq;
                    LOSCFreq = loscFreq;

                    //if (multimeter_thread == null || !multimeter_thread.IsAlive)
                    {
                        multimeter_thread = new Thread(new ThreadStart(UpdateMultimeter));
                        multimeter_thread.Name = "Multimeter Thread";
                        multimeter_thread.Priority = ThreadPriority.Lowest;
                        multimeter_thread.IsBackground = true;
                        multimeter_thread.Start();
                    }

                    if (sql_update_thread == null || !sql_update_thread.IsAlive)
                    {
                        sql_update_thread = new Thread(new ThreadStart(UpdateSQL));
                        sql_update_thread.Name = "Update SQL";
                        sql_update_thread.Priority = ThreadPriority.BelowNormal;
                        sql_update_thread.IsBackground = true;
                        sql_update_thread.Start();
                    }

                    if (noise_gate_update_thread == null || !noise_gate_update_thread.IsAlive)
                    {
                        noise_gate_update_thread = new Thread(new ThreadStart(UpdateNoiseGate));
                        noise_gate_update_thread.Name = "Update NoiseGate";
                        noise_gate_update_thread.Priority = ThreadPriority.BelowNormal;
                        noise_gate_update_thread.IsBackground = true;
                        noise_gate_update_thread.Start();
                    }

                    if (vox_update_thread == null || !vox_update_thread.IsAlive)
                    {
                        vox_update_thread = new Thread(new ThreadStart(UpdateVOX));
                        vox_update_thread.Name = "Update VOX";
                        vox_update_thread.Priority = ThreadPriority.BelowNormal;
                        vox_update_thread.IsBackground = true;
                        vox_update_thread.Start();
                    }

                    if (poll_ptt_thread == null || !poll_ptt_thread.IsAlive)
                    {
                        poll_ptt_thread = new Thread(new ThreadStart(PollPTT));
                        poll_ptt_thread.Name = "Poll PTT Thread";
                        poll_ptt_thread.Priority = ThreadPriority.Normal;
                        poll_ptt_thread.IsBackground = true;
                        poll_ptt_thread.Start();
                    }

                    pause_multimeter_thread = false;

                    if (current_model == Model.GENESIS_G59NET)
                    {
                        if (network_thread == null || !network_thread.IsAlive)
                        {
                            network_thread = new Thread(new ThreadStart(NetworkThread));
                            network_thread.Name = "Network device Thread";
                            network_thread.Priority = ThreadPriority.Normal;
                            network_thread.IsBackground = true;
                            network_thread.Start();
                        }
                    }

                    wbir_run = true;
                    if (wbir_thread == null || !wbir_thread.IsAlive)
                    {
                        wbir_thread = new Thread(new ThreadStart(WBIR_thread));
                        wbir_thread.Name = "WBIR Thread";
                        wbir_thread.Priority = ThreadPriority.Normal;
                        wbir_thread.IsBackground = true;
                        wbir_thread.Start();
                    }

                    switch (current_display_engine)
                    {
                        case DisplayEngine.GDI_PLUS:
                            Thread.Sleep(1);
                            draw_display_thread = new Thread(new ThreadStart(RunDisplay_GDI));
                            draw_display_thread.Name = "Draw Display Thread";
                            draw_display_thread.Priority = ThreadPriority.Normal;
                            draw_display_thread.IsBackground = true;
                            draw_display_thread.Start();
                            break;
#if(DirectX)
                        case DisplayEngine.DIRECT_X:
                            Thread.Sleep(1);
                            draw_display_thread = new Thread(new ThreadStart(RunDisplay_DirectX));
                            draw_display_thread.Name = "Draw Display Thread";
                            draw_display_thread.Priority = ThreadPriority.Normal;
                            draw_display_thread.IsBackground = true;
                            draw_display_thread.Start();
                            break;
#endif
                    }

                    pause_DisplayThread = false;

                    if (!rx_only)
                    {
                        chkMOX.Enabled = true;
                        chkTUN.Enabled = true;
                    }
                    chkVFOLock.Enabled = true;
                    chkVFOsinc.Enabled = true;

                    timer_peak_text.Enabled = true;

                    if (!DttSP.KeyerRunning())
                    {
                        DttSP.StartKeyer();
                        Keyer.RunKeyer = true;
                    }

                    DttSP.SetKeyerSpeed((float)udCWSpeed.Value);
                }
////////////////////////////////////// OFF /////////////////////////////////////////////////////////
                else
                {
                    if (Audio.wave_record)
                    {
                        chkRecordWav.Checked = false;
                        WaveForm.checkBoxRecord.Checked = false;
                    }

                    if (Audio.wave_playback)
                    {
                        chkPlayWav.Checked = false;
                        WaveForm.checkBoxPlay.Checked = false;
                    }

                    if (Audio.EnableEthernetClientDevice)
                    {
                        ClientSocket.stopReceive();
                        ClientSocket.UDPReceive = false;
                    }
                    else if (Audio.EnableEthernetServerDevice)
                    {
                        ServerSocket.close();
                    }

                    wbir_run = false;
                    CalibrationInProgress = false;

                    switch (current_model)
                    {
                        case Model.GENESIS_G6:
                            if (g6.Connected)
                            {
                                g6.Stop();
                            }
                            break;

                        case Model.GENESIS_G59USB:
                            g59.KEYER = 0xff;   // reset data
                            break;

                        case Model.GENESIS_G59NET:
                            net_device.KEYER = 0xff;
                            break;

                        case Model.GENESIS_G11:
                            g11.KEYER = 0xff;   // reset data
                            break;

                        case Model.RTL_SDR:
                            RTL_SDR.Stop_HW();
                            break;

                        default:
                            if (usb_si570_enable)
                                SI570.Stop_HW();
                            break;
                    }

                    PowerOn = false;
                    Audio.VAC_callback_return = 2;      // abort VAC callback
                    Audio.callback_return = 2;          // abort audio callback
                    //Thread.Sleep(100);

                    if (!skins_enabled)
                        chkPower.Text = "Standby";

                    chkMOX.Checked = false;
                    chkMOX.Enabled = false;

                    if (!TUN_in_progress)
                    {
                        chkTUN.Checked = false;
                        chkTUN.Enabled = false;
                    }
                    if (DttSP.KeyerRunning())
                    {
                        DttSP.StopKeyer();
                        Keyer.RunKeyer = false;
                    }

                    chkVFOLock.Enabled = false;
                    chkVFOsinc.Enabled = false;
                    chkPower.BackColor = SystemColors.Control;
                    chkVFOSplit.Enabled = false;
                    txtVFOAnew.ForeColor = vfo_text_dark_color;
                    lblVFOA.ForeColor = vfo_text_dark_color;
                    lblAFNewVFO.ForeColor = vfo_text_dark_color;
                    lblRFNewVFO.ForeColor = vfo_text_dark_color;
                    lblATTNewVFO.ForeColor = vfo_text_dark_color;
                    lblRX2.ForeColor = vfo_text_dark_color;
                    txtLOSCnew.ForeColor = vfo_text_dark_color;
                    lblLOSC.ForeColor = vfo_text_dark_color;
                    txtVFOBnew.ForeColor = vfo_text_dark_color;
                    lblVFOB.ForeColor = vfo_text_dark_color;
                    txtNewVFOBand.ForeColor = band_text_dark_color;
                    txtVFOAFreq.ForeColor = vfo_text_dark_color;
                    txtVFOAMSD.ForeColor = vfo_text_dark_color;
                    txtVFOALSD.ForeColor = vfo_text_dark_color;
                    txtVFOABand.ForeColor = band_text_dark_color;
                    txtVFOAnew.ForeColor = vfo_text_dark_color;
                    txtVFOBnew.ForeColor = vfo_text_dark_color;
                    txtLOSCnew.ForeColor = vfo_text_dark_color;
                    txtVFOBFreq.ForeColor = vfo_text_dark_color;
                    txtVFOBMSD.ForeColor = vfo_text_dark_color;
                    txtVFOBLSD.ForeColor = vfo_text_dark_color;
                    txtVFOBBand.ForeColor = band_text_dark_color;
                    txtLOSCFreq.ForeColor = vfo_text_dark_color;
                    txtLOSCMSD.ForeColor = vfo_text_dark_color;
                    txtLOSCLSD.ForeColor = vfo_text_dark_color;
                    timer_peak_text.Enabled = false;
                    sMeterDigital2.MeterForeColor = vfo_text_dark_color;
                    sMeterDigital1.MeterForeColor = vfo_text_dark_color;

                    if (vac_enabled)
                        Audio.StopAudioVAC();

                    if (chkRecordWav.Checked)
                        chkRecordWav.Checked = false;

                    Audio.StopAudio1();

                    Display_GDI.display_data_mutex.Close();
                    Display_GDI.display_data_mutex = null;

                    if (network_thread != null)
                        network_thread.Abort();

                    network_thread = null;

                    //if (multimeter_thread != null)
                        //multimeter_thread.Abort();

                    //multimeter_thread = null;
                    Debug.Write("PWR off! \n");
                }

                panelVFOAHover.Invalidate();
                panelVFOBHover.Invalidate();
                panelLOSCHover.Invalidate();

                if (vfo_new_look)
                {
                    panelVFOAnewHover.Invalidate();
                    panelVFOBnewHover.Invalidate();
                    panelLOSCnewHover.Invalidate();
                }

                btnHidden.Focus();

                if (EthCATIsActive)
                    CAT_client_socket.ClientServerSync("ZZPS;");        // sync with server

                Thread.Sleep(meter_delay);
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());

                if (debug != null && debug.Visible)
                {
                    this.Invoke(new DebugCallbackFunction(DebugCallback), "Error in chkPower! \n" + ex.ToString());
                }
            }
        }

        private void UpdateRXDisplayVars(int l, int h)
        {
            int low = 0, high = 0;
            if (l < 0 && h <= 0)
            {
                high = 0;
                if (l >= -910)
                    low = -1000;
                else
                    low = (int)(l * 1.1);
            }
            else if (l >= 0 && h > 0)
            {
                low = 0;
                if (h <= 910)
                    high = 1000;
                else
                    high = (int)(h * 1.1);
            }
            else if (l < 0 && h > 0)
            {
                int max_edge = Math.Max(-l, h);
                low = (int)(max_edge * -1.1);
                high = (int)(max_edge * 1.1);
            }
            Display_GDI.RXDisplayLow = low;
            Display_GDI.RXDisplayHigh = high;
#if(DirectX)
            Display_DirectX.RXDisplayLow = low;
            Display_DirectX.RXDisplayHigh = high;
#endif
        }

        public void comboDisplayMode_SelectedIndexChanged(object sender, System.EventArgs e)  // changes yt7pwr
        {
            DisplayMode tmp_mode = CurrentDisplayMode;
            pause_DisplayThread = true;
            int txt_width = picDisplay.Width / 6;
            txtDisplayPeakFreq.Width = txt_width;
            txtDisplayCursorOffset.Width = txt_width;
            txtDisplayCursorPower.Width = txt_width;
            txtDisplayCursorFreq.Width = txt_width;
            txtDisplayPeakPower.Width = txt_width;
            txtDisplayPeakOffset.Width = txt_width;

            DisplayMode old_mode = CurrentDisplayMode;

            switch (comboDisplayMode.Text)
            {
                case "Histogram":
                    {
                        switch (tmp_mode)
                        {
                            case DisplayMode.HISTOGRAM:
                            case DisplayMode.PANADAPTER:
                            case DisplayMode.PHASE:
                            case DisplayMode.PHASE2:
                            case DisplayMode.SCOPE:
                            case DisplayMode.SPECTRUM:
                                break;
                            default:
                                picWaterfall.Hide();
                                System.Drawing.Point grp_position = new System.Drawing.Point(0, 0);
                                System.Drawing.Point picDisplay_position = new System.Drawing.Point(10, 15);
                                grpDisplay.Height = this.Height - grpVFO.Height - 180;    // picDisplay
                                grpDisplay.Width = this.Width - grpBandHF.Width - 140;
                                picDisplay.Location = picDisplay_position;
                                picDisplay.Height = (grpDisplay.Height - 40);
                                picDisplay.Width = grpDisplay.Width - 19;
                                picDisplay.Show();
                                break;
                        }

                        CurrentDisplayMode = DisplayMode.HISTOGRAM;
                    }
                    break;
                case "Scope":
                    {
                        switch (tmp_mode)
                        {
                            case DisplayMode.SCOPE:
                            case DisplayMode.PANADAPTER:
                            case DisplayMode.PHASE:
                            case DisplayMode.PHASE2:
                            case DisplayMode.HISTOGRAM:
                            case DisplayMode.SPECTRUM:
                                break;
                            default:
                                picWaterfall.Hide();
                                System.Drawing.Point grp_position = new System.Drawing.Point(0, 0);
                                System.Drawing.Point picDisplay_position = new System.Drawing.Point(10, 15);
                                grpDisplay.Height = this.Height - grpVFO.Height - 180;    // picDisplay
                                grpDisplay.Width = this.Width - grpBandHF.Width - 140;
                                picDisplay.Location = picDisplay_position;
                                picDisplay.Height = (grpDisplay.Height - 40);
                                picDisplay.Width = grpDisplay.Width - 19;
                                picDisplay.Show();
                                break;
                        }

                        CurrentDisplayMode = DisplayMode.SCOPE;
                    }
                    break;
                case "Phase":
                    {
                        switch (tmp_mode)
                        {
                            case DisplayMode.PHASE:
                            case DisplayMode.PANADAPTER:
                            case DisplayMode.HISTOGRAM:
                            case DisplayMode.PHASE2:
                            case DisplayMode.SCOPE:
                            case DisplayMode.SPECTRUM:
                                break;
                            default:
                                picWaterfall.Hide();
                                System.Drawing.Point grp_position = new System.Drawing.Point(0, 0);
                                System.Drawing.Point picDisplay_position = new System.Drawing.Point(10, 15);
                                grpDisplay.Height = this.Height - grpVFO.Height - 180;    // picDisplay
                                grpDisplay.Width = this.Width - grpBandHF.Width - 140;
                                picDisplay.Location = picDisplay_position;
                                picDisplay.Height = (grpDisplay.Height - 40);
                                picDisplay.Width = grpDisplay.Width - 19;
                                picDisplay.Show();
                                break;
                        }

                        CurrentDisplayMode = DisplayMode.PHASE;
                    }
                    break;
                case "Phase2":
                    {
                        switch (tmp_mode)
                        {
                            case DisplayMode.PHASE2:
                            case DisplayMode.PANADAPTER:
                            case DisplayMode.PHASE:
                            case DisplayMode.HISTOGRAM:
                            case DisplayMode.SCOPE:
                            case DisplayMode.SPECTRUM:
                                break;
                            default:
                                picWaterfall.Hide();
                                System.Drawing.Point grp_position = new System.Drawing.Point(0, 0);
                                System.Drawing.Point picDisplay_position = new System.Drawing.Point(10, 15);
                                grpDisplay.Height = this.Height - grpVFO.Height - 180;    // picDisplay
                                grpDisplay.Width = this.Width - grpBandHF.Width - 140;
                                picDisplay.Location = picDisplay_position;
                                picDisplay.Height = (grpDisplay.Height - 40);
                                picDisplay.Width = grpDisplay.Width - 19;
                                picDisplay.Show();
                                break;
                        }

                        CurrentDisplayMode = DisplayMode.PHASE2;
                    }
                    break;
                case "Off":
                    {
                        System.Drawing.Point grp_position = new System.Drawing.Point(0, 0);
                        System.Drawing.Point picWaterfall_position = new System.Drawing.Point(10, 15);
                        grpDisplay.Height = this.Height - grpVFO.Height - 180;
                        grpDisplay.Width = this.Width - grpBandHF.Width - 140;
                        picWaterfall.Location = picWaterfall_position;
                        picWaterfall.Height = (grpDisplay.Height - 40) / 2;       // panafall           
                        picWaterfall.Width = grpDisplay.Width - 19;
                        grp_position = picWaterfall.Location;
                        grp_position.Y = picWaterfall.Height + 15;
                        picWaterfall.Show();
                        picDisplay.Location = grp_position;
                        picDisplay.Height = (grpDisplay.Height - 40) / 2;
                        picDisplay.Width = grpDisplay.Width - 19;
                        picDisplay.Show();
                        CalcDisplayFreq();
                        CurrentDisplayMode = DisplayMode.OFF;
                    }
                    break;
                case "Panafall":
                    {
                        switch (tmp_mode)
                        {
                            case DisplayMode.PANAFALL:
                            case DisplayMode.PANASCOPE:
                                break;
                            default:
                                System.Drawing.Point grp_position = new System.Drawing.Point(0, 0);
                                System.Drawing.Point picWaterfall_position = new System.Drawing.Point(10, 15);
                                grpDisplay.Height = this.Height - grpVFO.Height - 180;
                                grpDisplay.Width = this.Width - grpBandHF.Width - 140;
                                picWaterfall.Location = picWaterfall_position;
                                picWaterfall.Height = (grpDisplay.Height - 40) / 2;       // panafall           
                                picWaterfall.Width = grpDisplay.Width - 19;
                                grp_position = picWaterfall.Location;
                                grp_position.Y = picWaterfall.Height + 15;
                                picWaterfall.Show();
                                picDisplay.Location = grp_position;
                                picDisplay.Height = (grpDisplay.Height - 40) / 2;
                                picDisplay.Width = grpDisplay.Width - 19;
                                picDisplay.Show();
                                break;
                        }

                        CalcDisplayFreq();
                        CurrentDisplayMode = DisplayMode.PANAFALL;
                    }
                    break;
                case "Panafall_inv":
                    {
                        switch (tmp_mode)
                        {
                            case DisplayMode.PANAFALL_INV:
                                break;
                            default:
                                System.Drawing.Point grp_position = new System.Drawing.Point(0, 0);
                                System.Drawing.Point picWaterfall_position = new System.Drawing.Point(10, 15);
                                grpDisplay.Height = this.Height - grpVFO.Height - 180;
                                grpDisplay.Width = this.Width - grpBandHF.Width - 140;
                                picDisplay.Location = picWaterfall_position;
                                picDisplay.Height = (grpDisplay.Height - 40) / 2;       // panafall           
                                picDisplay.Width = grpDisplay.Width - 19;
                                grp_position = picDisplay.Location;
                                grp_position.Y = picDisplay.Height + 15;
                                picDisplay.Show();
                                picWaterfall.Location = grp_position;
                                picWaterfall.Height = (grpDisplay.Height - 40) / 2;
                                picWaterfall.Width = grpDisplay.Width - 19;
                                picWaterfall.Show();
                                break;
                        }

                        CalcDisplayFreq();
                        CurrentDisplayMode = DisplayMode.PANAFALL_INV;
                    }
                    break;
                case "Spectrum":
                    {
                        switch (tmp_mode)
                        {
                            case DisplayMode.SPECTRUM:
                            case DisplayMode.PANADAPTER:
                            case DisplayMode.PHASE:
                            case DisplayMode.PHASE2:
                            case DisplayMode.SCOPE:
                            case DisplayMode.HISTOGRAM:
                                break;
                            default:
                                System.Drawing.Point grp_position = new System.Drawing.Point(0, 0);
                                System.Drawing.Point picDisplay_position = new System.Drawing.Point(10, 15);
                                grpDisplay.Height = this.Height - grpVFO.Height - 180;    // picDisplay
                                grpDisplay.Width = this.Width - grpBandHF.Width - 140;
                                picDisplay.Location = picDisplay_position;
                                picDisplay.Height = (grpDisplay.Height - 40);
                                picDisplay.Width = grpDisplay.Width - 19;
                                picWaterfall.Hide();
                                picDisplay.Show();
                                break;
                        }

                        CurrentDisplayMode = DisplayMode.SPECTRUM;
                        UpdateRXDisplayVars((int)udFilterLow.Value, (int)udFilterHigh.Value);
                    }
                    break;
                case "Panascope":
                    {
                        switch (tmp_mode)
                        {
                            case DisplayMode.PANASCOPE:
                            case DisplayMode.PANAFALL:
                                break;
                            default:
                                System.Drawing.Point grp_position = new System.Drawing.Point(0, 0);
                                System.Drawing.Point picWaterfall_position = new System.Drawing.Point(10, 15);
                                grpDisplay.Height = this.Height - grpVFO.Height - 180;
                                grpDisplay.Width = this.Width - grpBandHF.Width - 140;
                                picWaterfall.Location = picWaterfall_position;
                                picWaterfall.Height = (grpDisplay.Height - 40) / 2;
                                picWaterfall.Width = grpDisplay.Width - 19;
                                grp_position = picWaterfall.Location;
                                grp_position.Y = picWaterfall.Height + 15;
                                picWaterfall.Show();
                                picDisplay.Location = grp_position;
                                picDisplay.Height = (grpDisplay.Height - 40) / 2;
                                picDisplay.Width = grpDisplay.Width - 19;
                                picDisplay.Show();
                                break;
                        }

                        CalcDisplayFreq();
                        CurrentDisplayMode = DisplayMode.PANASCOPE;
                    }
                    break;
                case "Panadapter":
                    {
                        switch (tmp_mode)
                        {
                            case DisplayMode.PANADAPTER:
                            case DisplayMode.HISTOGRAM:
                            case DisplayMode.PHASE:
                            case DisplayMode.PHASE2:
                            case DisplayMode.SCOPE:
                            case DisplayMode.SPECTRUM:
                                break;
                            default:
                                System.Drawing.Point grp_position = new System.Drawing.Point(0, 0);
                                System.Drawing.Point picDisplay_position = new System.Drawing.Point(10, 15);
                                grpDisplay.Height = this.Height - grpVFO.Height - 180;    // picDisplay
                                grpDisplay.Width = this.Width - grpBandHF.Width - 140;
                                picDisplay.Location = picDisplay_position;
                                picDisplay.Height = (grpDisplay.Height - 40);
                                picDisplay.Width = grpDisplay.Width - 19;
                                picWaterfall.Hide();
                                picDisplay.Show();
                                break;
                        }

                        CurrentDisplayMode = DisplayMode.PANADAPTER;
                        CalcDisplayFreq();
                    }
                    break;
                case "Waterfall":
                    {
                        switch (tmp_mode)
                        {
                            case DisplayMode.WATERFALL:
                                break;
                            default:
                                System.Drawing.Point picWaterfall_position = new System.Drawing.Point(10, 15);
                                picDisplay.Hide();
                                grpDisplay.Height = this.Height - grpVFO.Height - 180;    // waterfall
                                grpDisplay.Width = this.Width - grpBandHF.Width - 140;
                                picWaterfall.Location = picWaterfall_position;
                                picWaterfall.Height = (grpDisplay.Height - 40);
                                picWaterfall.Width = grpDisplay.Width - 19;
                                picWaterfall.Show();
                                break;
                        }

                        CurrentDisplayMode = DisplayMode.WATERFALL;
                        CalcDisplayFreq();
                    }
                    break;
            }

            if ((old_mode == DisplayMode.PANADAPTER || old_mode == DisplayMode.PANASCOPE) &&
                (Display_GDI.CurrentDisplayMode != DisplayMode.PANADAPTER && Display_GDI.CurrentDisplayMode != DisplayMode.PANASCOPE))
            {
                CurrentFilter = current_filter; // reset filter display limits
                DttSP.TXFilterLowCut = DttSP.TXFilterLowCut;
            }

            chkDisplayAVG.Enabled = true;
            chkDisplayPeak.Enabled = true;
            was_panadapter = false;

            if (comboDisplayMode.Focused)
                btnHidden.Focus();

            Console_Resize(sender, e);
            Thread.Sleep(200);
            Console_Resize(sender, e);

            radDisplayZoom1x_Click(null, null);

            pause_DisplayThread = false;
            VFOAFreq = vfoAFreq;
            VFOBFreq = vfoBFreq;
        }

        private void chkBIN_CheckedChanged(object sender, System.EventArgs e)
        {
            try
            {
                if (chkBIN.Checked)
                {
                    chkBIN.BackColor = button_selected_color;
                    DttSP.SetBIN(0, 0, true);
                }
                else
                {
                    chkBIN.BackColor = SystemColors.Control;
                    DttSP.SetBIN(0, 0, false);
                }
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private void chkMUT_CheckedChanged(object sender, System.EventArgs e)
        {
            if (chkMUT.Checked)
                chkMUT.BackColor = button_selected_color;
            else
                chkMUT.BackColor = SystemColors.Control;

            if (chkMUT.Checked)
            {
                Audio.mute_ch = mute_ch;

                switch (mute_ch)
                {
                    case MuteChannels.Left:
                        Audio.MonitorVolumeLeft = 0.0;
                        Audio.MonitorVolumeRight = (double)ptbAF.Value / 100.0;
                        break;

                    case MuteChannels.Right:
                        Audio.MonitorVolumeRight = 0.0;
                        Audio.MonitorVolumeLeft = (double)ptbAF.Value / 100.0;
                        break;

                    case MuteChannels.Both:
                        Audio.MonitorVolumeLeft = 0.0;
                        Audio.MonitorVolumeRight = 0.0;
                        break;

                    case MuteChannels.None:
                        Audio.MonitorVolumeLeft = (double)ptbAF.Value / 100.0;
                        Audio.MonitorVolumeRight = (double)ptbAF.Value / 100.0;
                        break;
                }
            }
            else
            {
                Audio.mute_ch = MuteChannels.None;
                Audio.MonitorVolumeLeft = (double)ptbAF.Value / 100.0;
                Audio.MonitorVolumeRight = (double)ptbAF.Value / 100.0;
                AF_ValueChanged();
            }

            if (EthCATIsActive)
                CAT_client_socket.ClientServerSync("ZZMA;");

            if (chkMUT.Focused) btnHidden.Focus();
        }

        private void PWR_ValueChanged() // changes yt7pwr
        {
            try
            {
                if (SetupForm == null)
                    return;
                else
                    SetupForm.PAPower = ptbPWR.Value;

                float val = (float)ptbPWR.Value;

                if (ptbPWR.Value > ptbPWR.Maximum)
                {
                    ptbPWR.Value = ptbPWR.Maximum;
                    lblPWRValue.Text = ptbPWR.Value.ToString();
                    return;
                }
                else if (ptbPWR.Value < ptbPWR.Minimum)
                {
                    ptbPWR.Value = ptbPWR.Minimum;
                    lblPWRValue.Text = ptbPWR.Value.ToString();
                    return;
                }

                lblPWRValue.Text = ptbPWR.Value.ToString();

                if (val == 0)
                {
                    Audio.RadioVolume = 0.0;
                    return;
                }

                double target_dbm = 10 * (double)Math.Log10((double)val * 10000);

                if(SplitAB_TX)
                    target_dbm -= GainByBand(vfoBFreq);
                else
                    target_dbm -= GainByBand(vfoAFreq);

                double target_volts = Math.Sqrt(Math.Pow(10, target_dbm * 0.1) * 0.05);		// E = Sqrt(P * R) 
                Audio.RadioVolume = target_volts / audio_volts1;

                if (EthCATIsActive)
                    CAT_client_socket.ClientServerSync("ZZPC;");        // sync with server

                if (ptbPWR.Focused)
                    btnHidden.Focus();
            }
            catch
            {

            }
        }

        private void ptbPWR_Scroll(object sender, System.EventArgs e)
        {
            udPWR1.Value = ptbPWR.Value;
            if (ptbPWR.Focused)
                btnHidden.Focus();
        }

        private void ptbPWR_Wheel(MouseEventArgs e)
        {
            if (SetupForm.FastFocus)
                ptbPWR.Focus();
        }

        private void AF_ValueChanged()
        {
            if (SetupForm == null)
                return;

            if (ptbAF.Value > ptbAF.Maximum)
            {
                ptbAF.Value = ptbAF.Maximum;
                lblAFValue.Text = ptbAF.Value.ToString();
                return;
            }
            else if (ptbAF.Value < ptbAF.Minimum)
            {
                ptbAF.Value = ptbAF.Minimum;
                lblAFValue.Text = ptbAF.Value.ToString();
                return;
            }

            lblAFValue.Text = ptbAF.Value.ToString();
            Audio.ScopeLevel = (float)ptbAF.Value;

            if (chkMUT.Checked)
            {
                Audio.mute_ch = mute_ch;

                switch (mute_ch)
                {
                    case MuteChannels.Both:
                        Audio.MonitorVolumeLeft = 0.0;
                        Audio.MonitorVolumeRight = 0.0;
                        break;

                    case MuteChannels.Left:
                        Audio.MonitorVolumeLeft = 0.0;
                        Audio.MonitorVolumeRight = (double)ptbAF.Value / 100.0;
                        break;

                    case MuteChannels.Right:
                        Audio.MonitorVolumeRight = 0.0;
                        Audio.MonitorVolumeLeft = (double)ptbAF.Value / 100.0;
                        break;

                    case MuteChannels.None:
                        Audio.MonitorVolumeLeft = (double)ptbAF.Value / 100.0;
                        Audio.MonitorVolumeRight = (double)ptbAF.Value / 100.0;
                        break;
                }

                goto end;
            }

            if ((num_channels > 2) && chkMOX.Checked && !chkMON.Checked)
            {
                // monitor is muted
                Audio.MonitorVolumeLeft = 0.0;
                Audio.MonitorVolumeRight = 0.0;
            }
            else
            {
                Audio.MonitorVolumeLeft = (double)ptbAF.Value / 100.0;
                Audio.MonitorVolumeRight = (double)ptbAF.Value / 100.0;
            }

        end:
            VACMute();

            if (!MOX && !VoiceRecording)
                RXAF = (int)ptbAF.Value;
            else 
                TXAF = (int)ptbAF.Value;

            if (EthCATIsActive)
                CAT_client_socket.ClientServerSync("ZZAG;");        // sync with server

            if (ptbAF.Focused)
                btnHidden.Focus();
        }

        private void ptbAF_Scroll(object sender, System.EventArgs e)
        {
            AF_ValueChanged();
            udAF1.Value = ptbAF.Value;
            if (ptbAF.Focused)
                btnHidden.Focus();
        }

        private void ptbAF_Wheel(MouseEventArgs e)
        {
            if (SetupForm.FastFocus)
                ptbAF.Focus();
        }

        private void lblAFValue_MouseLeave(object sender, EventArgs e)
        {
            if (lblAFValue.Focused)
                btnHidden.Focus();
        }

        private void lblRFValue_MouseLeave(object sender, EventArgs e)
        {
            if (lblRFValue.Focused)
                btnHidden.Focus();
        }

        private void lblPWRValue_MouseLeave(object sender, EventArgs e)
        {
            if (lblPWRValue.Focused)
                btnHidden.Focus();
        }

        private void lblAFValue_MouseHover(object sender, EventArgs e)
        {
            if (SetupForm.FastFocus)
                lblAFValue.Focus();
        }

        private void lblRFValue_MouseHover(object sender, EventArgs e)
        {
            if (SetupForm.FastFocus)
                lblRFValue.Focus();
        }

        private void lblPWRValue_MouseHover(object sender, EventArgs e)
        {
            if (SetupForm.FastFocus)
                lblPWRValue.Focus();
        }

        private void udMIC_ValueChanged(object sender, System.EventArgs e)
        {
            if (udMIC.Value > udMIC.Maximum)
            {
                udMIC.Value = udMIC.Maximum;
                return;
            }

            if (udMIC.Value < udMIC.Minimum)
            {
                udMIC.Value = udMIC.Minimum;
                return;
            }

            ptbMIC.Value = (int)udMIC.Value;

            double gain_db = (double)udMIC.Value;
            if (mic_boost) gain_db += 20.0;

            switch (current_model)
            {
                case Model.GENESIS_G59USB:
                case Model.GENESIS_G59NET:
                    if (line_mic_shared || G59mic_preamp)
                    {
                        Audio.MicPreamp = Math.Pow(100.0, (gain_db - 30) / 100.0); // convert to scalar
                    }
                    else
                        Audio.MicPreamp = Math.Pow(10.0, gain_db / 20.0); // convert to scalar
                    break;

                case Model.GENESIS_G11:
                    if (line_mic_shared || G11mic_preamp)
                    {
                        Audio.MicPreamp = Math.Pow(100.0, (gain_db - 30) / 100.0); // convert to scalar
                    }
                    else
                        Audio.MicPreamp = Math.Pow(10.0, gain_db / 20.0); // convert to scalar
                    break;
            }

            if (EthCATIsActive)
                CAT_client_socket.ClientServerSync("ZZMG;");        // sync with server

            if (udMIC.Focused)
                btnHidden.Focus();
        }

        private void RF_ValueChanged()
        {
            if (ptbRF.Value > ptbRF.Maximum)
            {
                ptbRF.Value = ptbRF.Maximum;
                lblRFValue.Text = ptbRF.Value.ToString();
                return;
            }
            else if (ptbRF.Value < ptbRF.Minimum)
            {
                ptbRF.Value = ptbRF.Minimum;
                lblRFValue.Text = ptbRF.Value.ToString();
                return;
            }

            lblRFValue.Text = ptbRF.Value.ToString();

            switch (CurrentAGCMode)
            {
                case AGCMode.FIXD:
                    if (SetupForm != null) SetupForm.AGCFixedGain = (int)ptbRF.Value;
                    break;
                default:
                    if (SetupForm != null) SetupForm.AGCMaxGain = (int)ptbRF.Value;
                    break;
            }

            if (EthCATIsActive)
                CAT_client_socket.ClientServerSync("ZZAR;");        // sync with server

            if (ptbRF.Focused) btnHidden.Focus();
        }

        private void ptbRF_Scroll(object sender, System.EventArgs e)
        {
            RF_ValueChanged();
            udRF1.Value = ptbRF.Value;
            if (ptbRF.Focused) btnHidden.Focus();
        }

        private void ptbRF_Wheel(MouseEventArgs e)
        {
            if (SetupForm.FastFocus)
                ptbRF.Focus();
        }

        private void tbMIC_Scroll(object sender, System.EventArgs e)
        {
            udMIC.Value = ptbMIC.Value;
            if (ptbMIC.Focused)
                btnHidden.Focus();
        }

        private void tbMIC_OnWheel(MouseEventArgs e)
        {
            if (SetupForm.FastFocus)
                ptbMIC.Focus();
        }

        private void udCWSpeed_ValueChanged(object sender, System.EventArgs e)
        {
            DttSP.SetKeyerSpeed((float)udCWSpeed.Value);
            ptbCWSpeed.Value = (int)udCWSpeed.Value;

            if ((current_model == Model.GENESIS_G59USB || current_model == Model.GENESIS_G11 ||
                CurrentModel == Model.GENESIS_G59NET || current_model == Model.GENESIS_G6) && !booting)
                SetupForm.G59CWSpeed = (int)udCWSpeed.Value;

            if (CWXForm == null || CWXForm.IsDisposed)
            {
                CWXForm = new CWX(this);
                CWXForm.StartPosition = FormStartPosition.Manual;
                CWXForm.RestoreSettings();
            }
            CWXForm.CWXWPM = (int)udCWSpeed.Value;

            if (EthCATIsActive)
                CAT_client_socket.ClientServerSync("ZZCS;");        // sync with server

            if (udCWSpeed.Focused) btnHidden.Focus();
        }

        private void tbCWSpeed_Scroll(object sender, System.EventArgs e)
        {
            udCWSpeed.Value = ptbCWSpeed.Value;
            if (ptbCWSpeed.Focused) btnHidden.Focus();
        }

        private void tbCWSpeed_Wheel(MouseEventArgs e)
        {
            if (SetupForm.FastFocus)
                ptbCWSpeed.Focus();
        }

        private void chkBreakIn_CheckedChanged(object sender, System.EventArgs e)
        {
            if (SetupForm != null)
                SetupForm.BreakInEnabled = chkBreakIn.Checked;

            if (chkBreakIn.Checked) chkBreakIn.BackColor = button_selected_color;
            else chkBreakIn.BackColor = SystemColors.Control;

            if (EthCATIsActive)
                CAT_client_socket.ClientServerSync("ZZCB;");        // sync with server

            if (chkBreakIn.Focused) btnHidden.Focus();
        }

        private void chkVOX_CheckedChanged(object sender, System.EventArgs e)
        {
            if (SetupForm != null) SetupForm.VOXEnable = chkVOX.Checked;

            if (chkVOX.Checked)
            {
                chkVOX.BackColor = button_selected_color;
            }
            else
            {
                Audio.VOXActive = false;
                chkVOX.BackColor = SystemColors.Control;
            }

            if (EthCATIsActive)
                CAT_client_socket.ClientServerSync("ZZVE;");        // sync with server

            if (chkVOX.Checked) btnHidden.Focus();
        }

        private void udSQLMainRX_ValueChanged(object sender, System.EventArgs e)
        {
            DttSP.SetSquelchVal(0, 0, -(float)udSQLMainRX.Value -
                multimeter_cal_offset -
                filter_size_cal_offset);
            ptbSQLMainRX.Value = -(int)udSQLMainRX.Value;

            if (EthCATIsActive)
                CAT_client_socket.ClientServerSync("ZZSQ;");        // sync with server

            if (udSQLMainRX.Focused)
                btnHidden.Focus();
        }

        private void chkVACEnabled_CheckedChanged(object sender, System.EventArgs e)
        {
            if (SetupForm != null) SetupForm.VACEnable = chkVACEnabled.Checked;
            vac_enabled = chkVACEnabled.Checked;

            if (chkVACEnabled.Checked) chkVACEnabled.BackColor = button_selected_color;
            else chkVACEnabled.BackColor = SystemColors.Control;
        }

        private void udVACRXGain_ValueChanged(object sender, System.EventArgs e)
        {
            if (SetupForm != null) SetupForm.VACRXGain = (int)udVACRXGain.Value;
            ptbVACRXGain.Value = (int)udVACRXGain.Value;
            if (udVACRXGain.Focused) btnHidden.Focus();
        }

        private void udVACTXGain_ValueChanged(object sender, System.EventArgs e)
        {
            if (SetupForm != null) SetupForm.VACTXGain = (int)udVACTXGain.Value;
            ptbVACTXGain.Value = (int)udVACTXGain.Value;
            if (udVACTXGain.Focused) btnHidden.Focus();
        }

        private void chkNoiseGate_CheckedChanged(object sender, System.EventArgs e)
        {
            if (SetupForm != null) SetupForm.NoiseGateEnabled = chkNoiseGate.Checked;

            if (chkNoiseGate.Checked) chkNoiseGate.BackColor = button_selected_color;
            else chkNoiseGate.BackColor = SystemColors.Control;
        }

        private void tbVACRXGain_Scroll(object sender, System.EventArgs e)
        {
            udVACRXGain.Value = ptbVACRXGain.Value;
            if (ptbVACRXGain.Focused) btnHidden.Focus();
        }

        private void tbVACRXGain_Wheel(MouseEventArgs e)
        {
            if (SetupForm.FastFocus)
                ptbVACRXGain.Focus();
        }

        private void tbVACTXGain_Scroll(object sender, System.EventArgs e)
        {
            udVACTXGain.Value = ptbVACTXGain.Value;
            if (ptbVACTXGain.Focused) btnHidden.Focus();
        }

        private void tbVACTXGain_Wheel(MouseEventArgs e)
        {
            if (SetupForm.FastFocus)
                ptbVACTXGain.Focus();
        }

        private void picSQL_Paint(object sender, System.Windows.Forms.PaintEventArgs e) // changes yt7pwr
        {
            try
            {
                int signal_x = (int)((main_RX_sql_data + 155.0) * (picSQLMainRX.Width - 1) / 142.0);
                int sql_x = (int)((ptbSQLMainRX.Value + 155.0) * (picSQLMainRX.Width - 1) / 142.0);

                if (chkMOX.Checked) signal_x = sql_x = 0;
                if (signal_x > 80)
                    signal_x = 80;
                e.Graphics.FillRectangle(new SolidBrush(Color.LimeGreen), 0, 0, signal_x, picSQLMainRX.Height);
                if (sql_x < signal_x)
                    e.Graphics.FillRectangle(new SolidBrush(Color.Red), sql_x + 1, 0, signal_x - sql_x - 1, picSQLMainRX.Height);
            }
            catch
            {
            }
        }

        private void tbSQL_Scroll(object sender, System.EventArgs e)
        {
            udSQLMainRX.Value = -ptbSQLMainRX.Value;
            if (ptbSQLMainRX.Focused) btnHidden.Focus();
        }

        private void tbSQL_OnWheel(MouseEventArgs e)
        {
            if (SetupForm.FastFocus)
                ptbSQLMainRX.Focus();
        }

        private void tbVOX_Scroll(object sender, System.EventArgs e)
        {
            udVOX.Value = ptbVOX.Value;
            if (ptbVOX.Focused) btnHidden.Focus();
        }

        private void tbVOX_OnWheel(MouseEventArgs e)
        {
            if (SetupForm.FastFocus)
                this.ptbVOX.Focus();
        }

        private void picVOX_Paint(object sender, System.Windows.Forms.PaintEventArgs e)
        {
            int peak_x = (int)(Audio.Peak * 10 * picVOX.Width);
            int vox_x = (int)(ptbVOX.Value * (picVOX.Width - 1) / 1000.0);

            if (!chkVOX.Checked) peak_x = vox_x = 0;
            e.Graphics.FillRectangle(new SolidBrush(Color.LimeGreen), 0, 0, peak_x, picVOX.Height);
            if (vox_x < peak_x)
                e.Graphics.FillRectangle(new SolidBrush(Color.Red), vox_x + 1, 0, peak_x - vox_x - 1, picVOX.Height);
        }

        private void tbNoiseGate_Scroll(object sender, System.EventArgs e)
        {
            udNoiseGate.Value = ptbNoiseGate.Value;
            if (ptbNoiseGate.Focused) btnHidden.Focus();
        }

        private void tbNoiseGate_OnWheel(MouseEventArgs e)
        {
            if (SetupForm.FastFocus)
                ptbNoiseGate.Focus();
        }

        private void picNoiseGate_Paint(object sender, System.Windows.Forms.PaintEventArgs e)
        {
            int signal_x = (int)((noise_gate_data + 160.0) * (picNoiseGate.Width - 1) / 160.0);
            int noise_x = (int)(((float)ptbNoiseGate.Value + 160.0) * (picNoiseGate.Width - 1) / 160.0);

            if (!chkMOX.Checked) signal_x = noise_x = 0;
            e.Graphics.FillRectangle(new SolidBrush(Color.LimeGreen), 0, 0, signal_x, picNoiseGate.Height);
            if (noise_x < signal_x)
                e.Graphics.FillRectangle(new SolidBrush(Color.Red), noise_x + 1, 0, signal_x - noise_x - 1, picNoiseGate.Height);
        }

        private void WheelTune_MouseDown(object sender, System.Windows.Forms.MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left)
            {
                if (current_click_tune_mode == ClickTuneMode.Off ||
                        current_click_tune_mode == ClickTuneMode.VFOA)
                    ChangeWheelTuneLeft();
                else if (current_click_tune_mode == ClickTuneMode.VFOB)
                    ChangeWheelTuneLeftSubRX();
            }
        }

        private void chkMON_CheckedChanged(object sender, System.EventArgs e)
        {
            Audio.MON = chkMON.Checked;

            if (chkMON.Checked)
            {
                chkMON.BackColor = button_selected_color;
                CW_monitor_enabled = true;

                if (current_model == Model.GENESIS_G59USB)
                    g59.WriteToDevice(7, 0);
                else if (current_model == Model.GENESIS_G59NET)
                    net_device.WriteToDevice(7, 0);
                else if (current_model == Model.GENESIS_G11)
                    g11.WriteToDevice(7, 0);

                Keyer.CWMonitorEnabled = true;
            }
            else
            {
                chkMON.BackColor = SystemColors.Control;
                CW_monitor_enabled = false;

                if (current_model == Model.GENESIS_G59USB)
                {
                    g59.WriteToDevice(24, 0);   // force CW monitor off
                    Thread.Sleep(1);
                    g59.WriteToDevice(8, 0);
                }
                else if (current_model == Model.GENESIS_G59NET)
                {
                    net_device.WriteToDevice(24, 0);    // force CW monitor off
                    Thread.Sleep(1);
                    net_device.WriteToDevice(8, 0);
                }
                else if (current_model == Model.GENESIS_G11)
                {
                    g11.WriteToDevice(24, 0);   // force CW monitor off
                    Thread.Sleep(1);
                    g11.WriteToDevice(8, 0);
                }

                Keyer.CWMonitorEnabled = false;
            }

            if (num_channels == 4 || num_channels == 6)
            {
                if (!(chkMON.Checked == false && chkMOX.Checked))
                    AF_ValueChanged();
                else
                {
                    switch (Audio.mute_ch)
                    {
                        case MuteChannels.Both:
                            Audio.MonitorVolumeLeft = 0.0;
                            Audio.MonitorVolumeRight = 0.0;
                            break;

                        case MuteChannels.Left:
                            Audio.MonitorVolumeLeft = 0.0;
                            break;

                        case MuteChannels.Right:
                            Audio.MonitorVolumeRight = 0.0;
                            break;
                    }
                }
            }

            if (EthCATIsActive)
                CAT_client_socket.ClientServerSync("ZZCM;");

            if (chkMON.Focused) btnHidden.Focus();
        }

        private void AudioMOXChanged(bool tx)  // changes yt7pwr
        {
            Audio.RadioVolume = 0;
            Audio.MonitorVolumeLeft = 0;
            Audio.MonitorVolumeRight = 0;
            Audio.VACRBReset = true;

            /////////////////////////  TX  /////////////////////////////////////

            if (tx)
            {
                Audio.MOX = true;

                switch (WinVer)
                {
                    case WindowsVersion.Windows2000:
                    case WindowsVersion.WindowsXP:
                        {
                            if (num_channels == 2 && current_soundcard != SoundCard.REALTEK_HD_AUDIO)
                            {
                                Mixer.SetMux(mixer_id1, mixer_tx_mux_id1);
                            }
                            else if (num_channels == 2 && current_soundcard == SoundCard.REALTEK_HD_AUDIO)         // for Realtek HD audio
                            {
                                if (!chkVFOSplit.Checked && current_dsp_mode != DSPMode.CWL && current_dsp_mode != DSPMode.CWU)
                                    Mixer.SetMux_RealtekHDaudio(mixer_id1, mixer_tx_mux_id1, tx);
                                else if (chkVFOSplit.Checked && current_dsp_mode_subRX != DSPMode.CWL && current_dsp_mode_subRX != DSPMode.CWU)
                                    Mixer.SetMux_RealtekHDaudio(mixer_id1, mixer_tx_mux_id1, tx);
                            }
                        }
                        break;

                    case WindowsVersion.WindowsVista:
                    case WindowsVersion.Windows7:
                    case WindowsVersion.Windows8:
                        {

                        }
                        break;
                }

                if (!cw_key_mode)
                {
                    if (Audio.CurrentAudioState1 == Audio.AudioState.DTTSP ||
                        Audio.CurrentAudioState1 == Audio.AudioState.SWITCH)
                    {
                        Audio.SwitchCount = Math.Max(DttSP.bufsize * 4 / Audio.BlockSize, 3);
                        Audio.RampDown = true;
                        Audio.RampUpNum = 1; // Math.Max(DttSP.bufsize / Audio.BlockSize, 1);
                        Audio.NextMox = true;
                        Audio.NextAudioState1 = Audio.AudioState.DTTSP;
                        Audio.CurrentAudioState1 = Audio.AudioState.SWITCH;
                        DttSP.SetTRX(thread_no, true);
                    }
                }
                else
                {
                    int tmp = (int)(Audio.SampleRate1 * 0.020 / Audio.BlockSize);
                    int num_switch_buffers = ((tmp > 5) ? tmp : 5);
                    Audio.NextMox = tx;

                    if (QSK)
                        Audio.SwitchCount = 1;
                    else
                        Audio.SwitchCount = num_switch_buffers;

                    Audio.NextAudioState1 = Audio.AudioState.SWITCH;
                    Audio.CurrentAudioState1 = Audio.AudioState.CW;
                    DttSP.SetTRX(thread_no, true);  // does this need to be here??	
                }

                switch (WinVer)
                {
                    case WindowsVersion.Windows2000:
                    case WindowsVersion.WindowsXP:
                        {
                            if (current_soundcard == SoundCard.AUDIGY_2 ||
                                current_soundcard == SoundCard.AUDIGY_2_ZS)
                                Mixer.SetLineInMute(mixer_id1, true);

                            if (num_channels == 2)
                                Mixer.SetMainMute(mixer_id1, false);
                        }
                        break;

                    case WindowsVersion.Windows8:
                    case WindowsVersion.Windows7:
                    case WindowsVersion.WindowsVista:
                        {

                        }
                        break;
                }

                ptbAF.Value = txaf;
            }

/////////////////////////  RX  /////////////////////////////////////

            else
            {
                Audio.MOX = false;
                DttSP.AudioReset();

                switch (WinVer)
                {
                    case WindowsVersion.Windows2000:
                    case WindowsVersion.WindowsXP:
                        {
                            if (num_channels == 2 && current_soundcard != SoundCard.REALTEK_HD_AUDIO)
                            {
                                Mixer.SetMux(mixer_id1, mixer_rx_mux_id1);
                            }
                            else if (num_channels == 2 && current_soundcard == SoundCard.REALTEK_HD_AUDIO)
                            {
                                if (!chkVFOSplit.Checked && current_dsp_mode != DSPMode.CWL && current_dsp_mode != DSPMode.CWU)
                                    Mixer.SetMux_RealtekHDaudio(mixer_id1, mixer_tx_mux_id1, tx);
                                else if (chkVFOSplit.Checked && current_dsp_mode_subRX != DSPMode.CWL && current_dsp_mode_subRX != DSPMode.CWU)
                                    Mixer.SetMux_RealtekHDaudio(mixer_id1, mixer_tx_mux_id1, tx);
                            }
                        }
                        break;

                    case WindowsVersion.WindowsVista:
                    case WindowsVersion.Windows7:
                    case WindowsVersion.Windows8:
                        {

                        }
                        break;
                }

                if (!cw_key_mode)
                {
                    if (Audio.CurrentAudioState1 == Audio.AudioState.DTTSP ||
                        Audio.CurrentAudioState1 == Audio.AudioState.SWITCH)
                    {
                        Audio.SwitchCount = Math.Max(DttSP.bufsize * 4 / Audio.BlockSize, 3);
                        Audio.RampDown = true;
                        Audio.RampUpNum = (int)Math.Max(DttSP.bufsize / Audio.BlockSize, 1);
                        Audio.NextMox = false;
                        Audio.NextAudioState1 = Audio.AudioState.DTTSP;
                        Audio.CurrentAudioState1 = Audio.AudioState.SWITCH;
                        DttSP.SetTRX(thread_no, false);
                        Audio.Spike = true;
                    }
                }
                else
                {
                    int tmp = (int)(Audio.SampleRate1 * 0.020 / Audio.BlockSize);
                    int num_switch_buffers = ((tmp > 5) ? tmp : 5);
                    Audio.NextMox = tx;

                    if (QSK)
                        Audio.SwitchCount = 1;
                    else
                        Audio.SwitchCount = num_switch_buffers;

                    Audio.NextAudioState1 = Audio.AudioState.DTTSP;
                    Audio.CurrentAudioState1 = Audio.AudioState.SWITCH;
                    DttSP.SetTRX(thread_no, false);
                }

                switch (WinVer)
                {
                    case WindowsVersion.Windows2000:
                    case WindowsVersion.WindowsXP:
                        {
                            if (current_soundcard == SoundCard.AUDIGY_2 ||
                                current_soundcard == SoundCard.AUDIGY_2_ZS)
                                Mixer.SetLineInMute(mixer_id1, false);

                            if (num_channels == 2)
                                Mixer.SetMainMute(mixer_id1, false);
                        }
                        break;

                    case WindowsVersion.Windows7:
                    case WindowsVersion.Windows8:
                    case WindowsVersion.WindowsVista:
                        {

                        }
                        break;
                }

                ptbAF.Value = rxaf;
            }

            PWR_ValueChanged();
            AF_ValueChanged();
        }

        private void UIMOXChangedTrue()
        {
            meter_peak_count = multimeter_peak_hold_samples;		// reset multimeter peak

            comboMeterRXMode.ForeColor = Color.Gray;
            comboMeterTXMode.ForeColor = Color.Black;

            grpBandHF.Enabled = false;
            grpMoreBands.Enabled = false;
            grpMainRXMode.Enabled = false;
            grpSubRXMode.Enabled = false;
            chkVFOSplit.Enabled = false;
            btnVFOAtoB.Enabled = false;
            btnVFOBtoA.Enabled = false;
            btnVFOSwap.Enabled = false;
            chkPower.BackColor = Color.Red;
            SetupForm.MOX = chkMOX.Checked;
            ResetMultiMeterPeak();
            chkMOX.BackColor = button_selected_color;

            picSQLMainRX.Invalidate();
        }

        private void UIMOXChangedFalse()
        {
            grpBandHF.Enabled = true;
            grpMoreBands.Enabled = true;
            grpMainRXMode.Enabled = true;
            grpSubRXMode.Enabled = true;
            chkVFOSplit.Enabled = true;
            btnVFOAtoB.Enabled = true;
            btnVFOBtoA.Enabled = true;
            btnVFOSwap.Enabled = true;

            if (PowerOn)
                chkPower.BackColor = button_selected_color;

            comboMeterTXMode.ForeColor = Color.Gray;
            comboMeterRXMode.ForeColor = Color.Black;

            Audio.HighSWRScale = 1.0;
            HighSWR = false;

            for (int i = 0; i < meter_text_history.Length; i++)
                meter_text_history[i] = 0.0f;

            SetupForm.MOX = chkMOX.Checked;
            ResetMultiMeterPeak();
            chkMOX.BackColor = SystemColors.Control;

            picNoiseGate.Invalidate();
        }

        private int saved_spectrum_grid_max = 0;
        private void chkMOX_CheckedChanged(object sender, System.EventArgs e)  // changes yt7pwr
        {
            double freq = 0.0;
            bool tx = chkMOX.Checked;

            if (rx_only || current_dsp_mode == DSPMode.WFM)
            {
                chkMOX.Checked = false;
                return;
            }

            if (chkVFOSplit.Checked)
                freq = Math.Round(vfoBFreq, 6);
            else
                freq = Math.Round(vfoAFreq, 6);

            if (chkXIT.Checked)
                freq += (int)udXIT.Value * 0.000001;

            if (tx && !IsHamBand(current_band_plan, freq))	// out of band?
            {
                if (CWX_Playing)
                {
                    CWX_Playing = false;
                    btnCWX1.Checked = false;        // stop CWX!
                    btnCWX2.Checked = false;
                    btnCWX3.Checked = false;
                    btnCWX4.Checked = false;
                    btnCWX5.Checked = false;
                    btnCWX6.Checked = false;
                    btnCWX1_Click(null, null);
                    btnCWX2_Click(null, null);
                    btnCWX3_Click(null, null);
                    btnCWX4_Click(null, null);
                    btnCWX5_Click(null, null);
                    btnCWX6_Click(null, null);
                }

                if (VoiceMsgPlayback)
                {
                    if (grpModeSpecificFM.Visible)
                    {
                        chkFMMsg1.Checked = false;
                        chkFMMsg2.Checked = false;
                        chkFMMsg3.Checked = false;
                        chkFMMsg4.Checked = false;
                        chkFMMsg5.Checked = false;
                        chkFMMsg6.Checked = false;
                        chkFMMsg1_CheckedChanged(this, EventArgs.Empty);
                        chkFMMsg2_CheckedChanged(this, EventArgs.Empty);
                        chkFMMsg3_CheckedChanged(this, EventArgs.Empty);
                        chkFMMsg4_CheckedChanged(this, EventArgs.Empty);
                        chkFMMsg5_CheckedChanged(this, EventArgs.Empty);
                        chkFMMsg6_CheckedChanged(this, EventArgs.Empty);
                    }
                    else
                    {
                        btnMsg1.Checked = false;            // stop VoiceMsg!
                        btnMsg2.Checked = false;
                        btnMsg3.Checked = false;
                        btnMsg4.Checked = false;
                        btnMsg5.Checked = false;
                        btnMsg6.Checked = false;
                        btnMsg1_Click(null, null);
                        btnMsg2_Click(null, null);
                        btnMsg3_Click(null, null);
                        btnMsg4_Click(null, null);
                        btnMsg5_Click(null, null);
                        btnMsg6_Click(null, null);
                    }
                }

                MessageBox.Show("The frequency " + freq.ToString("f6") + "MHz is not within the " +
                    "IARU Band specifications.",
                    "Transmit Error: Out Of Band",
                    MessageBoxButtons.OK,
                    MessageBoxIcon.Error);
                chkMOX.Checked = false;
                return;
            }

            ////////////////////////  TX  /////////////////////////////////////////////////

            if (tx)
            {
                if (Audio.voice_message_record && VoiceMsgForm != null)
                {
                    VoiceMsgForm.RecordingEnd = true;
                    Thread.Sleep(100);
                }

                MOX = true;
                SetTXOscFreqs(tx, true);

                saved_spectrum_grid_max = Display_GDI.SpectrumGridMax;

                if (chkVFOSplit.Checked)
                {
                    if (current_dsp_mode_subRX != DSPMode.CWU && current_dsp_mode_subRX != DSPMode.CWL)
                    {
                        Display_GDI.SpectrumGridMax = 0;

#if(DirectX)
                        Display_DirectX.SpectrumGridMax = 0;
#endif
                    }

                    int i = 0;
                    previous_filter = current_filter;

                    if (SetupForm.DSP_BufferSize(current_dsp_mode) == SetupForm.DSP_BufferSize(current_dsp_mode_subRX))
                    {
                        Audio.CurDSPMode = current_dsp_mode_subRX;
                        i = DttSP.SetTXMode(thread_no, current_dsp_mode_subRX);
                        if (i != 0)
                            MessageBox.Show("Error in DttSP.SetTXMode: " + i);
                    }
                    else
                    {
                        MessageBox.Show("DSP buffer size must be equal!");
                    }

                    Display_GDI.CurrentDSPModeSubRX = current_dsp_mode_subRX;
#if(DirectX)
                    Display_DirectX.CurrentDSPModeSubRX = current_dsp_mode_subRX;
#endif
                    switch (current_dsp_mode_subRX)
                    {
                        case (DSPMode.CWL):
                        case (DSPMode.CWU):
                            {
                                if (current_display_mode != DisplayMode.PANASCOPE || 
                                    current_display_mode != DisplayMode.SCOPE)
                                    pause_DisplayThread = true;

                                cw_key_mode = true;
                                DttSP.CWRingRestart();
                            }
                            break;
                        case DSPMode.DRM:
                            chkMOX.Checked = false;
                            return;
                            break;
                        default:  // for Phone modes save Zoom and Pan
                            {
                                cw_key_mode = false;
                                saved_tbDisplayZoom = ptbDisplayZoom.Value;
                                saved_tbDisplayPan = ptbDisplayPan.Value;
                                ptbDisplayPan.Value = 0;
                                ptbDisplayZoom.Value = 4;
                                CalcDisplayFreq();
                            }
                            break;
                    }
                }
                else
                {
                    if (current_dsp_mode != DSPMode.CWU && current_dsp_mode != DSPMode.CWL)
                    {
                        Display_GDI.SpectrumGridMax = 0;

#if(DirectX)
                        Display_DirectX.SpectrumGridMax = 0;
#endif
                    }

                    int i = 0;
                    Audio.CurDSPMode = current_dsp_mode;
                    i = DttSP.SetTXMode(thread_no, current_dsp_mode);
                    if (i != 0)
                        MessageBox.Show("Error in DttSP.SetTXMode: " + i);

                    Display_GDI.CurrentDSPMode = current_dsp_mode;
#if(DirectX)
                    Display_DirectX.CurrentDSPModeSubRX = current_dsp_mode_subRX;
#endif
                    switch (current_dsp_mode)
                    {
                        case (DSPMode.CWL):
                        case (DSPMode.CWU):
                            {
                                if (current_display_mode != DisplayMode.PANASCOPE &&
                                    current_display_mode != DisplayMode.SCOPE)
                                    pause_DisplayThread = true;

                                cw_key_mode = true;
                                DttSP.CWRingRestart();
                            }
                            break;
                        default:  // for Phone modes save Zoom and Pan
                            {
                                cw_key_mode = false;
                                saved_tbDisplayZoom = ptbDisplayZoom.Value;
                                saved_tbDisplayPan = ptbDisplayPan.Value;
                                CalcDisplayFreq();
                            }
                            break;
                    }
                }

                comboMeterTXMode_SelectedIndexChanged(sender, e);

                if (radBand60.BackColor == button_selected_color &&
                    current_dsp_mode != DSPMode.USB && !extended)
                {
                    if (CWX_Playing)
                    {
                        btnCWX1.Checked = false;    // stop CWX!
                        btnCWX2.Checked = false;
                        btnCWX3.Checked = false;
                        btnCWX4.Checked = false;
                        btnCWX5.Checked = false;
                        btnCWX6.Checked = false;
                        btnCWX1_Click(null, null);
                        btnCWX2_Click(null, null);
                        btnCWX3_Click(null, null);
                        btnCWX4_Click(null, null);
                        btnCWX5_Click(null, null);
                        btnCWX6_Click(null, null);
                    }

                    if (VoiceMsgPlayback)
                    {
                        if (grpModeSpecificFM.Visible)
                        {
                            chkFMMsg1.Checked = false;
                            chkFMMsg2.Checked = false;
                            chkFMMsg3.Checked = false;
                            chkFMMsg4.Checked = false;
                            chkFMMsg5.Checked = false;
                            chkFMMsg6.Checked = false;
                            chkFMMsg1_CheckedChanged(this, EventArgs.Empty);
                            chkFMMsg2_CheckedChanged(this, EventArgs.Empty);
                            chkFMMsg3_CheckedChanged(this, EventArgs.Empty);
                            chkFMMsg4_CheckedChanged(this, EventArgs.Empty);
                            chkFMMsg5_CheckedChanged(this, EventArgs.Empty);
                            chkFMMsg6_CheckedChanged(this, EventArgs.Empty);
                        }
                        else
                        {
                            btnMsg1.Checked = false;    // stop VoiceMsg!
                            btnMsg2.Checked = false;
                            btnMsg3.Checked = false;
                            btnMsg4.Checked = false;
                            btnMsg5.Checked = false;
                            btnMsg6.Checked = false;
                            btnMsg1_Click(null, null);
                            btnMsg2_Click(null, null);
                            btnMsg3_Click(null, null);
                            btnMsg4_Click(null, null);
                            btnMsg5_Click(null, null);
                            btnMsg6_Click(null, null);
                        }
                    }

                    MessageBox.Show(DttSP.CurrentMode.ToString() + " mode is not allowed on 60M band.",
                        "Transmit Error: Mode/Band",
                        MessageBoxButtons.OK,
                        MessageBoxIcon.Error);
                    chkMOX.Checked = false;
                    return;
                }

                AudioMOXChanged(tx);

                if (genesis_ext_PA_present)
                {
                    Thread.Sleep(ExtPA_PTT_Delay_ON);

                    if (current_model == Model.GENESIS_G59USB)
                        g59.WriteToDevice(30, 1);
                    else if (current_model == Model.GENESIS_G6)
                        g6.WriteToDevice(30, 1);
                    else if (current_model == Model.GENESIS_G11)
                        g11.WriteToDevice(30, 1);
                    else if (current_model == Model.GENESIS_G59NET)
                        net_device.WriteToDevice(30, 1);
                }

                switch (current_model)
                {
                    case Model.GENESIS_G6:
                        {
                            //Thread.Sleep(1);

                            if (chkVFOSplit.Checked)
                            {
                                if (line_mic_shared && current_dsp_mode_subRX != DSPMode.CWU &&
                                    current_dsp_mode_subRX != DSPMode.CWL)
                                    g6.WriteToDevice(26, 1);
                                else
                                    g6.WriteToDevice(26, 0);
                            }
                            else
                            {
                                if (line_mic_shared && current_dsp_mode != DSPMode.CWU &&
                                    current_dsp_mode != DSPMode.CWL)
                                    g6.WriteToDevice(26, 1);
                                else
                                    g6.WriteToDevice(26, 0);
                            }

                            g6.WriteToDevice(13, TXSwitchTime / 3);
                            g6.MUTE = true;
                        }
                        break;
                    case Model.GENESIS_G59USB:
                        {
                            Thread.Sleep(1);

                            if (chkVFOSplit.Checked)
                            {
                                if (line_mic_shared && current_dsp_mode_subRX != DSPMode.CWU &&
                                    current_dsp_mode_subRX != DSPMode.CWL)
                                    g59.WriteToDevice(26, 1);
                                else
                                    g59.WriteToDevice(26, 0);
                            }
                            else
                            {
                                if (line_mic_shared && current_dsp_mode != DSPMode.CWU &&
                                    current_dsp_mode != DSPMode.CWL)
                                    g59.WriteToDevice(26, 1);
                                else
                                    g59.WriteToDevice(26, 0);
                            }

                            g59.WriteToDevice(13, TXSwitchTime / 3);
                        }
                        break;
                    case Model.GENESIS_G59NET:
                        {
                            if (chkVFOSplit.Checked)
                            {
                                if (line_mic_shared && current_dsp_mode_subRX != DSPMode.CWU &&
                                    current_dsp_mode_subRX != DSPMode.CWL)
                                    net_device.WriteToDevice(26, 1);
                                else
                                    net_device.WriteToDevice(26, 0);
                            }
                            else
                            {
                                if (line_mic_shared && current_dsp_mode != DSPMode.CWU &&
                                    current_dsp_mode != DSPMode.CWL)
                                    net_device.WriteToDevice(26, 1);
                                else
                                    net_device.WriteToDevice(26, 0);
                            }

                            net_device.WriteToDevice(13, TXSwitchTime / 3);                // delayed transmiter ON for G59NET
                        }
                        break;
                    case Model.GENESIS_G11:
                        {
                            if (chkVFOSplit.Checked)
                            {
                                if (line_mic_shared && current_dsp_mode_subRX != DSPMode.CWU &&
                                    current_dsp_mode_subRX != DSPMode.CWL)
                                    g11.WriteToDevice(26, 1);
                                else
                                    g11.WriteToDevice(26, 0);
                            }
                            else
                            {
                                if (line_mic_shared && current_dsp_mode != DSPMode.CWU &&
                                    current_dsp_mode != DSPMode.CWL)
                                    g11.WriteToDevice(26, 1);
                                else
                                    g11.WriteToDevice(26, 0);
                            }

                            g11.WriteToDevice(13, TXSwitchTime / 3);
                        }
                        break;
                    case Model.QRP2000:
                        {
                            int[] tmp = new int[1];
                            Thread.Sleep(TXSwitchTime);
                            qrp2000.SetPTTGetCWInput(1, tmp);
                        }
                        break;
                    default:
                        {
                            if (Keyer.sp.IsOpen)                                 // connection to Genesis G**
                                Keyer.enable_tx(true);
                        }
                        break;
                }

                if (usb_si570_enable)
                    SI570.SetTX(true);

#if(DirectX)
                Display_DirectX.RefreshPanadapterGrid = true;
#endif
            }

/////////////////////////////// RX  ///////////////////////////////////////////////////////

            else
            {
                MOX = false;
                manual_mox = false;
                CWX_Playing = false;

                switch (current_model)
                {
                    case Model.GENESIS_G6:
                        {
                            g6.MUTE = false;
                            g6.KeyerNewData = false;
                            g6.WriteToDevice(26, 0);                               // Line input
                            g6.KEYER = 0xff;
                            g6.WriteToDevice(24, 0);                               //  CW monitor off
                            g6.WriteToDevice(14, 0);                               // transmiter OFF
                        }
                        break;
                    case Model.GENESIS_G59USB:
                        {
                            g59.KeyerNewData = false;
                            g59.WriteToDevice(26, 0);                               // Line input
                            g59.KEYER = 0xff;
                            Thread.Sleep(1);
                            g59.WriteToDevice(24, 0);                               //  CW monitor off
                            Thread.Sleep(1);
                            g59.WriteToDevice(14, 0);                               // transmiter OFF
                        }
                        break;
                    case Model.GENESIS_G59NET:
                        {
                            net_device.KeyerNewData = false;
                            net_device.WriteToDevice(26, 0);
                            net_device.WriteToDevice(24, 0);                        //  CW monitor off
                            net_device.WriteToDevice(14, 0);                        // transmiter OFF
                        }
                        break;
                    case Model.GENESIS_G11:
                        {
                            g11.KeyerNewData = false;
                            g11.WriteToDevice(26, 0);                               // Line input
                            g11.KEYER = 0xff;
                            Thread.Sleep(1);
                            g11.WriteToDevice(24, 0);                               //  CW monitor off
                            Thread.Sleep(1);
                            g11.WriteToDevice(14, 0);                               // transmiter OFF
                        }
                        break;
                    case Model.QRP2000:
                        {
                            int[] tmp = new int[1];
                            qrp2000.SetPTTGetCWInput(0, tmp);                       // transmiter off
                        }
                        break;
                    default:
                        {
                            if (Keyer.sp.IsOpen)
                                Keyer.enable_tx(false);
                        }
                        break;
                }

                if (genesis_ext_PA_present)
                {
                    Thread.Sleep(ExtPA_PTT_Delay_OFF);

                    if (current_model == Model.GENESIS_G59USB)
                        g59.WriteToDevice(30, 0);
                    else if (current_model == Model.GENESIS_G6)
                        g6.WriteToDevice(30, 0);
                    else if (current_model == Model.GENESIS_G11)
                        g11.WriteToDevice(30, 0);
                    else if (current_model == Model.GENESIS_G59NET)
                        net_device.WriteToDevice(30, 0);
                }

                if (!QSK)
                    FilterUpdate();

                avg_num = 0.0;                   // reset display average

                if (!chkVFOSplit.Checked && current_dsp_mode != DSPMode.CWL && current_dsp_mode != DSPMode.CWU)
                {
                    Display_GDI.SpectrumGridMax = saved_spectrum_grid_max;

#if(DirectX)
                    Display_DirectX.SpectrumGridMax = saved_spectrum_grid_max;
#endif
                }

                if (CWX_Playing)
                {
                    if (CWXForm.quit)
                    {
                        btnCWX1.Checked = false;    // stop CWX!
                        btnCWX2.Checked = false;
                        btnCWX3.Checked = false;
                        btnCWX4.Checked = false;
                        btnCWX5.Checked = false;
                        btnCWX6.Checked = false;
                        btnCWX1_Click(null, null);
                        btnCWX2_Click(null, null);
                        btnCWX3_Click(null, null);
                        btnCWX4_Click(null, null);
                        btnCWX5_Click(null, null);
                        btnCWX6_Click(null, null);
                    }
                }
                else if (VoiceMsgPlayback)
                {
                    VoiceMsgPlayback = false;
                    VoiceMsgForm.PlayStop = true;
                    Audio.voice_message_playback = false;

                    if (grpModeSpecificFM.Visible)
                    {
                        chkFMMsg1.Checked = false;
                        chkFMMsg2.Checked = false;
                        chkFMMsg3.Checked = false;
                        chkFMMsg4.Checked = false;
                        chkFMMsg5.Checked = false;
                        chkFMMsg6.Checked = false;
                        chkFMMsg1_CheckedChanged(this, EventArgs.Empty);
                        chkFMMsg2_CheckedChanged(this, EventArgs.Empty);
                        chkFMMsg3_CheckedChanged(this, EventArgs.Empty);
                        chkFMMsg4_CheckedChanged(this, EventArgs.Empty);
                        chkFMMsg5_CheckedChanged(this, EventArgs.Empty);
                        chkFMMsg6_CheckedChanged(this, EventArgs.Empty);
                    }
                    else
                    {
                        btnMsg1.Checked = false;    // stop VoiceMsg!
                        btnMsg2.Checked = false;
                        btnMsg3.Checked = false;
                        btnMsg4.Checked = false;
                        btnMsg5.Checked = false;
                        btnMsg6.Checked = false;
                        btnMsg1_Click(null, null);
                        btnMsg2_Click(null, null);
                        btnMsg3_Click(null, null);
                        btnMsg4_Click(null, null);
                        btnMsg5_Click(null, null);
                        btnMsg6_Click(null, null);
                    }
                }

                if (chkTUN.Checked)
                    chkTUN.Checked = false;

                if (vfo_new_look)
                    NewVFOSignalGauge.Value = 0.0f;
                else
                    AnalogSignalGauge.Value = 0.0f;

                if (chkVFOSplit.Checked)
                {
                    if (current_dsp_mode_subRX != DSPMode.CWL && current_dsp_mode_subRX != DSPMode.CWU)
                    {
                        Display_GDI.SpectrumGridMax = saved_spectrum_grid_max;

#if(DirectX)
                        Display_DirectX.SpectrumGridMax = saved_spectrum_grid_max;
#endif
                    }

                    switch (current_dsp_mode_subRX)
                    {
                        case (DSPMode.CWL):
                        case (DSPMode.CWU):
                            {
                                // do nothing
                            }
                            break;
                        default:  // for Phone modes restore Zoom and Pan
                            {
                                ptbDisplayZoom.Value = saved_tbDisplayZoom;
                                ptbDisplayPan.Value = saved_tbDisplayPan;
                                CalcDisplayFreq();
                            }
                            break;
                    }
                }
                else
                {
                    switch (current_dsp_mode)
                    {
                        case (DSPMode.CWL):
                        case (DSPMode.CWU):
                            {
                                // do nothing
                            }
                            break;
                        default:  // for Phone modes restore Zoom and Pan
                            {
                                ptbDisplayZoom.Value = saved_tbDisplayZoom;
                                ptbDisplayPan.Value = saved_tbDisplayPan;
                                CalcDisplayFreq();
                            }
                            break;
                    }
                }

                Audio.MonitorVolumeLeft = 0.0;
                Audio.MonitorVolumeRight = 0.0;
                AudioMOXChanged(tx);
                Audio.voice_message_playback = false;
                comboMeterRXMode_SelectedIndexChanged(sender, e);
                pause_DisplayThread = false;

                if (usb_si570_enable)
                    SI570.SetTX(false);

                AF_ValueChanged();
                SetTXOscFreqs(tx, true);
                current_ptt_mode = PTTMode.NONE;

                if (MultiPSKServer != null)
                    MultiPSKServer.IsPTT = false;

                Keyer.PrimaryKeyerMox = false;
                Keyer.SecondaryKeyerMox = false;
            }

            if (!QSK)
            {
                if (tx) mox_update_thread = new Thread(new ThreadStart(UIMOXChangedTrue));
                else mox_update_thread = new Thread(new ThreadStart(UIMOXChangedFalse));
                mox_update_thread.Name = "UIMOXChanged";
                mox_update_thread.IsBackground = true;
                mox_update_thread.Priority = ThreadPriority.Normal;
                mox_update_thread.Start();
            }

            if (EthCATIsActive)
                CAT_client_socket.ClientServerSync("ZZTX;");        // sync with server

#if DirectX
            Display_DirectX.RefreshPanadapterGrid = true;
#endif

            btnHidden.Focus();
        }

        private Thread mox_update_thread;

        private void chkMOX_Click(object sender, System.EventArgs e)
        {
            if (chkMOX.Checked)			// because the CheckedChanged event fires first
            {
                manual_mox = true;

                if (CWX_Playing || voice_msg_playback)
                {
                    chkMOX.Checked = false;
                    manual_mox = false;
                    return;
                }
            }
            else
            {
                manual_mox = false;

                if (chkTUN.Checked)
                    chkTUN.Checked = false;
            }
        }

        private void comboMeterRXMode_SelectedIndexChanged(object sender, System.EventArgs e)
        {
            if (comboMeterRXMode.Items.Count == 0 ||
                comboMeterRXMode.SelectedIndex < 0)
            {
                current_meter_rx_mode = MeterRXMode.FIRST;
            }
            else
            {
                MeterRXMode mode = MeterRXMode.FIRST;
                switch (comboMeterRXMode.Text)
                {
                    case "Signal":
                        mode = MeterRXMode.SIGNAL_STRENGTH;
                        break;
                    case "Sig Avg":
                        multimeter_avg = Display_GDI.CLEAR_FLAG;
                        mode = MeterRXMode.SIGNAL_AVERAGE;
                        break;
                    case "ADC L":
                        mode = MeterRXMode.ADC_L;
                        break;
                    case "ADC R":
                        mode = MeterRXMode.ADC_R;
                        break;
                    case "Off":
                        mode = MeterRXMode.OFF;
                        break;
                }

                current_meter_rx_mode = mode;
                if (SetupForm != null)
                    SetupForm.comboSMeterRXMode.Text = comboMeterRXMode.Text;

                if (!chkMOX.Checked)
                {
                    switch (mode)
                    {
                        case MeterRXMode.SIGNAL_STRENGTH:
                        case MeterRXMode.SIGNAL_AVERAGE:
                            lblMultiSMeter.Text = "  1   3   5   7   9  +20 +40 +60";
                            break;
                        case MeterRXMode.ADC_L:
                        case MeterRXMode.ADC_R:
                            lblMultiSMeter.Text = "-100  -80   -60   -40   -20    0";
                            break;
                        case MeterRXMode.OFF:
                            lblMultiSMeter.Text = "";
                            break;
                    }
                    ResetMultiMeterPeak();
                }
            }

            picMultiMeterDigital.Invalidate();

            if (comboMeterRXMode.Focused)
                btnHidden.Focus();
        }

        private void comboMeterTXMode_SelectedIndexChanged(object sender, System.EventArgs e)
        {
            if (comboMeterTXMode.Items.Count == 0 ||
                comboMeterTXMode.SelectedIndex < 0)
            {
                current_meter_tx_mode = MeterTXMode.FIRST;
            }
            else
            {
                MeterTXMode mode = MeterTXMode.FIRST;

                switch (comboMeterTXMode.Text)
                {
                    case "Fwd Pwr":
                        mode = MeterTXMode.FORWARD_POWER;
                        sMeterDigital2.PWR_SWR = MeterTXMode.FORWARD_POWER;
                        break;
                    case "Ref Pwr":
                        mode = MeterTXMode.REVERSE_POWER;
                        sMeterDigital2.PWR_SWR = MeterTXMode.REVERSE_POWER;
                        break;
                    case "Mic":
                        mode = MeterTXMode.MIC;
                        sMeterDigital2.PWR_SWR = MeterTXMode.MIC;
                        break;
                    case "EQ":
                        mode = MeterTXMode.EQ;
                        sMeterDigital2.PWR_SWR = MeterTXMode.EQ;
                        break;
                    case "Leveler":
                        mode = MeterTXMode.LEVELER;
                        sMeterDigital2.PWR_SWR = MeterTXMode.LEVELER;
                        break;
                    case "Lev Gain":
                        mode = MeterTXMode.LVL_G;
                        sMeterDigital2.PWR_SWR = MeterTXMode.LVL_G;
                        break;
                    case "COMP":
                        mode = MeterTXMode.COMP;
                        sMeterDigital2.PWR_SWR = MeterTXMode.COMP;
                        break;
                    case "CPDR":
                        mode = MeterTXMode.CPDR;
                        sMeterDigital2.PWR_SWR = MeterTXMode.CPDR;
                        break;
                    case "ALC":
                        mode = MeterTXMode.ALC;
                        sMeterDigital2.PWR_SWR = MeterTXMode.ALC;
                        break;
                    case "ALC Comp":
                        mode = MeterTXMode.ALC_G;
                        sMeterDigital2.PWR_SWR = MeterTXMode.ALC_G;
                        break;
                    case "SWR":
                        mode = MeterTXMode.SWR;
                        sMeterDigital2.PWR_SWR = MeterTXMode.SWR;
                        break;
                    case "Off":
                        mode = MeterTXMode.OFF;
                        sMeterDigital2.PWR_SWR = MeterTXMode.OFF;
                        break;
                }

                current_meter_tx_mode = mode;

                if (SetupForm != null)
                    SetupForm.comboSMeterTXMode.Text = comboMeterTXMode.Text;
            }

            if (chkMOX.Checked)
            {
                switch (current_meter_tx_mode)
                {
                    case MeterTXMode.FIRST:
                        lblMultiSMeter.Text = "";
                        break;
                    case MeterTXMode.MIC:
                    case MeterTXMode.EQ:
                    case MeterTXMode.LEVELER:
                    case MeterTXMode.COMP:
                    case MeterTXMode.CPDR:
                    case MeterTXMode.ALC:
                        lblMultiSMeter.Text = "-20    -10     -5      0   1   2   3";
                        break;
                    case MeterTXMode.FORWARD_POWER:
                    case MeterTXMode.REVERSE_POWER:
                        lblMultiSMeter.Text = "0      1     2     5       10      15";
                        break;
                    case MeterTXMode.SWR:
                        lblMultiSMeter.Text = "1      1.5   2     3     5    10";
                        lblMultiSMeter.Text = "0             10              20";
                        break;
                    case MeterTXMode.OFF:
                        lblMultiSMeter.Text = "";
                        break;
                    case MeterTXMode.LVL_G:
                    case MeterTXMode.ALC_G:
                        lblMultiSMeter.Text = "0       5       10      15      20";
                        break;
                }
                ResetMultiMeterPeak();
            }

            picMultiMeterDigital.Invalidate();

            if (comboMeterTXMode.Focused)
                btnHidden.Focus();
        }

        private void chkDisplayAVG_CheckedChanged(object sender, System.EventArgs e)
        {
            Display_GDI.AverageOn = chkDisplayAVG.Checked;
#if(DirectX)
            Display_DirectX.AverageOn = chkDisplayAVG.Checked;
#endif
            if (chkDisplayAVG.Checked)
            {
                chkDisplayAVG.BackColor = button_selected_color;
            }
            else
            {
                chkDisplayAVG.BackColor = SystemColors.Control;
            }
        }

        private void chkDisplayPeak_CheckedChanged(object sender, System.EventArgs e)
        {
#if DirectX
            Display_DirectX.PeakOn = chkDisplayPeak.Checked;
#endif
            Display_GDI.PeakOn = chkDisplayPeak.Checked;

            if (chkDisplayPeak.Checked)
            {
                chkDisplayPeak.BackColor = button_selected_color;
            }
            else
            {
                chkDisplayPeak.BackColor = SystemColors.Control;
            }
        }

        private void ATU_tuning_thread()                                         // yt7pwr
        {
            switch (current_model)
            {
                case Model.GENESIS_G59NET:
                case Model.GENESIS_G59USB:
                    {
                        if (ExtATU_present && g59.Connected)
                        {
                            switch (ExtATU_tuning_mode)
                            {
                                case ATUMode.FULL_TUNE:
                                    {
                                        Thread.Sleep(SetupForm.ATUCarrierDelay);
                                        g59.WriteToDevice(27, 1);                           // ATU ON
                                        Thread.Sleep(SetupForm.ATUFullTime);                // >2500mS
                                    }
                                    break;

                                case ATUMode.MEM_TUNE:
                                    {
                                        Thread.Sleep(SetupForm.ATUCarrierDelay);
                                        g59.WriteToDevice(27, 1);                           // ATU ON
                                        Thread.Sleep(SetupForm.ATUMemoryTime);              // 430-620mS
                                    }
                                    break;
                            }

                            g59.WriteToDevice(27, 0);                                       // ATU OFF
                        }
                    }
                    break;
                case Model.GENESIS_G11:
                    {
                        if (ExtATU_present && g11.Connected)
                        {
                            switch (ExtATU_tuning_mode)
                            {
                                case ATUMode.FULL_TUNE:
                                    {
                                        Thread.Sleep(SetupForm.ATUCarrierDelay);
                                        g11.WriteToDevice(27, 1);                           // ATU ON
                                        Thread.Sleep(SetupForm.ATUFullTime);                // >2500mS
                                    }
                                    break;

                                case ATUMode.MEM_TUNE:
                                    {
                                        Thread.Sleep(SetupForm.ATUCarrierDelay);
                                        g11.WriteToDevice(27, 1);                           // ATU ON
                                        Thread.Sleep(SetupForm.ATUMemoryTime);              // 430-620mS
                                    }
                                    break;
                            }

                            g11.WriteToDevice(27, 0);                                       // ATU OFF
                        }
                    }
                    break;
            }
        }

        private bool TUN_in_progress = false;
        private DSPMode pre_tune_mode = DSPMode.CWU;
        private void chkTUN_CheckedChanged(object sender, System.EventArgs e) // changes yt7pwr
        {
            cat_ptt = false;

            if (chkTUN.Checked)
            {
                TUN = true;

                if (!PowerOn)
                {
                    MessageBox.Show("Power must be on to turn on the Tune function.",
                        "Power is off",
                        MessageBoxButtons.OK,
                        MessageBoxIcon.Hand);
                    chkTUN.Checked = false;
                    return;
                }

                TUN_in_progress = true;
                DttSP.SetKeyerIambic(false);

                if (chkVFOSplit.Checked &&
                    (current_dsp_mode_subRX != DSPMode.CWL || current_dsp_mode_subRX != DSPMode.CWU))
                {
                    pre_tune_mode = current_dsp_mode_subRX;
                    CurrentDSPModeSubRX = DSPMode.CWU;
                }
                else if (current_dsp_mode != DSPMode.CWL || current_dsp_mode != DSPMode.CWU)
                {
                    pre_tune_mode = current_dsp_mode;
                    CurrentDSPMode = DSPMode.CWU;
                }

                if (!DttSP.KeyerRunning())
                {
                    DttSP.StartKeyer();
                    Keyer.RunKeyer = true;
                }

                PreviousPWR = ptbPWR.Value;
                ptbPWR.Value = (int)tune_power;
                lblPWRValue.Text = ptbPWR.Value.ToString();

                if (ExtATU_present)
                {
                    switch (ExtATU_tuning_mode)
                    {
                        case ATUMode.BYPASS:
                            {
                                switch (current_model)
                                {
                                    case Model.GENESIS_G59USB:
                                    case Model.GENESIS_G59NET:
                                        {
                                            Keyer.TuneCW = false;                               // no carrier!
                                            g59.WriteToDevice(27, 1);                           // ATU ON
                                            Thread.Sleep(SetupForm.ATUBypassTime);              // 64-96mS
                                            g59.WriteToDevice(27, 0);                           // ATU OFF                         
                                        }
                                        break;
                                    case Model.GENESIS_G11:
                                        {
                                            Keyer.TuneCW = false;                               // no carrier!
                                            g11.WriteToDevice(27, 1);                           // ATU ON
                                            Thread.Sleep(SetupForm.ATUBypassTime);              // 64-96mS
                                            g11.WriteToDevice(27, 0);                           // ATU OFF                         
                                        }
                                        break;
                                }
                            }
                            break;

                        case ATUMode.FULL_TUNE:
                        case ATUMode.MEM_TUNE:
                            {
                                Keyer.TuneCW = true;
                                ATU_thread = new Thread(new ThreadStart(ATU_tuning_thread));
                                ATU_thread.Name = "ATU tuning Thread";
                                ATU_thread.Priority = ThreadPriority.Normal;
                                ATU_thread.IsBackground = true;
                                ATU_thread.Start();
                            }
                            break;
                    }
                }
                else
                    Keyer.TuneCW = true;

                chkMOX.Checked = true;

                if (TUN)
                {
                    switch (current_model)
                    {
                        case Model.GENESIS_G59USB:
                            g59.WriteToDevice(18, (long)Keyer_mode.TUNE);
                            break;
                        case Model.GENESIS_G59NET:
                            net_device.WriteToDevice(18, (long)Keyer_mode.TUNE);
                            break;
                        case Model.GENESIS_G11:
                            g11.WriteToDevice(18, (long)Keyer_mode.TUNE);
                            break;
                        case Model.GENESIS_G6:
                            g6.WriteToDevice(18, (long)Keyer_mode.TUNE);
                            break;
                    }
                }

                if (!chkMOX.Checked)
                {
                    chkTUN.Checked = false;
                    return;
                }

                if (EthCATIsActive)
                    CAT_client_socket.ClientServerSync("ZZTU;");
            }
            else
            {
                TUN = false;
                manual_mox = false;
                TUN_in_progress = false;
                Keyer.TuneCW = false;

                switch (current_model)
                {
                    case Model.GENESIS_G59NET:
                    case Model.GENESIS_G59USB:
                        G59_setup_keyer();
                        break;
                    case Model.GENESIS_G11:
                        G11_setup_keyer();
                        break;
                    case Model.GENESIS_G6:
                        G6_setup_keyer();
                        break;
                    default:
                        DttSP.SetKeyerIambic(CWIambic);
                        break;
                }

                Audio.CurrentAudioState1 = Audio.AudioState.DTTSP;
                Thread.Sleep(100);
                chkMOX.Checked = false;
                chkTUN.BackColor = SystemColors.Control;

                if (!lock_TUN)
                    TunePower = ptbPWR.Value;    // save TUN power level

                ptbPWR.Value = (int)PreviousPWR;
                lblPWRValue.Text = ptbPWR.Value.ToString();

                if (EthCATIsActive)
                    CAT_client_socket.ClientServerSync("ZZTU;");

                if (chkVFOSplit.Checked &&
                    (current_dsp_mode_subRX != DSPMode.CWL || current_dsp_mode_subRX != DSPMode.CWU))
                {
                    CurrentDSPModeSubRX = pre_tune_mode;
                }
                else if (current_dsp_mode != DSPMode.CWL || current_dsp_mode != DSPMode.CWU)
                {
                    CurrentDSPMode = pre_tune_mode;
                }
            }
        }

        public void SetTXOscFreqs(bool tx, bool losc)       // yt7pwr
        {
            try
            {
                if (!vfoA_drag || !spectrum_drag)
                {
                    double freq = 0.0;
                    double tmpFreq = 0.0;

                    if (chkVFOSplit.Checked)
                    {
                        freq = vfoBFreq;
                    }
                    else
                    {
                        freq = vfoAFreq;
                    }

                    freq = Math.Round(freq, 6);

                    if (tx)
                    {                       
                        if (tx_IF)
                        {
                            if (chkXIT.Checked)
                            {
                                DttSP.SetTXOsc(thread_no, TX_IF_shift * 1e5 + XITValue);
                                DttSP.SetKeyerFreq((float)(TX_IF_shift * 1e5 + XITValue));
                            }
                            else
                            {
                                DttSP.SetTXOsc(thread_no, (TX_IF_shift * 1e5));
                                DttSP.SetKeyerFreq((float)(TX_IF_shift * 1e5));
                            }
                        }
                        else
                        {
                            tmpFreq = (freq - LOSCFreq) * 1e6;

                            if (chkXIT.Checked)
                                tmpFreq += XITValue;

                            DttSP.SetTXOsc(thread_no, tmpFreq);
                            DttSP.SetKeyerFreq((float)tmpFreq);
                        }

                        DttSP.SetTXFilters(tx_filter_low, tx_filter_high);
                        DttSP.SetTXIQPhase(thread_no, (double)tx_image_phase_table[(int)current_band]);
                        DttSP.SetTXIQGain(thread_no, (double)tx_image_gain_table[(int)current_band]);
                    }

                    if (losc)
                    {
                        if (tx && tx_IF)          // for fixed TX IF frequency
                        {
                            tmpFreq = (freq - (TX_IF_shift / 10));
                            tmpFreq = Math.Round(tmpFreq, 6);
                            
                            if (current_dsp_mode == DSPMode.FMN)
                            {
                                switch (rptr_mode)
                                {
                                    case RPTRmode.simplex:
                                        break;

                                    case RPTRmode.low:
                                        tmpFreq -= RPTR_offset;
                                        break;

                                    case RPTRmode.high:
                                        tmpFreq += RPTR_offset;
                                        break;
                                }

                                tmpFreq = Math.Round(tmpFreq, 6);
                            }

                            if (usb_si570_enable)
                            {
                                SI570.Set_SI570_osc((long)(tmpFreq * 1e6));
                            }
                            else
                            {
                                tmpFreq *= 1e6;

                                if (current_model == Model.GENESIS_G59USB)
                                {
                                    if (IsXTRV(freq))
                                    {
                                        switch (current_band)
                                        {
                                            case Band.B2M:
                                                tmpFreq -= g59_2m_Xtrv_losc_freq;
                                                break;
                                            case Band.BX1:
                                                tmpFreq -= xBand[1].losc * 1e6;
                                                break;
                                            case Band.BX2:
                                                tmpFreq -= xBand[2].losc * 1e6;
                                                break;
                                            case Band.BX3:
                                                tmpFreq -= xBand[3].losc * 1e6;
                                                break;
                                            case Band.BX4:
                                                tmpFreq -= xBand[4].losc * 1e6;
                                                break;
                                            case Band.BX5:
                                                tmpFreq -= xBand[5].losc * 1e6;
                                                break;
                                            case Band.BX6:
                                                tmpFreq -= xBand[6].losc * 1e6;
                                                break;
                                            case Band.BX7:
                                                tmpFreq -= xBand[7].losc * 1e6;
                                                break;
                                            case Band.BX8:
                                                tmpFreq -= xBand[8].losc * 1e6;
                                                break;
                                            case Band.BX9:
                                                tmpFreq -= xBand[9].losc * 1e6;
                                                break;
                                            case Band.BX10:
                                                tmpFreq -= xBand[10].losc * 1e6;
                                                break;
                                            case Band.BX11:
                                                tmpFreq -= xBand[11].losc * 1e6;
                                                break;
                                            case Band.BX12:
                                                tmpFreq -= xBand[12].losc * 1e6;
                                                break;
                                        }
                                    }

                                    if (tmpFreq < 0)
                                    {
                                        MessageBox.Show("Wrong OSC value!");
                                        return;
                                    }

                                    Band new_band_filter = BandFilterByFreq(tmpFreq / 1e6);

                                    if (current_band_filter != new_band_filter)
                                    {
                                        CurrentBandFilter = new_band_filter;
                                        if (debug_enabled && debug != null && debug.Visible)
                                        {
                                            debug.rtbDebugMsg.AppendText("G59 new band filter: " + new_band_filter.ToString() + "\n");
                                            SendMessage(debug.rtbDebugMsg.Handle, WM_VSCROLL, SB_BOTTOM, 0);
                                        }
                                    }

                                    if (debug_enabled && debug != null && debug.Visible)
                                    {
                                        debug.rtbDebugMsg.AppendText("G59 LOSC freq: " + Math.Round(tmpFreq, 6).ToString() + "\n");
                                        SendMessage(debug.rtbDebugMsg.Handle, WM_VSCROLL, SB_BOTTOM, 0);
                                    }

                                    g59.Set_frequency((long)(Math.Round(tmpFreq, 6)), true);
                                }
                                else if (current_model == Model.GENESIS_G59NET)
                                {
                                    if (IsXTRV(freq))
                                    {
                                        switch (current_band)
                                        {
                                            case Band.B2M:
                                                tmpFreq -= g59_2m_Xtrv_losc_freq;
                                                break;
                                            case Band.BX1:
                                                tmpFreq -= xBand[1].losc * 1e6;
                                                break;
                                            case Band.BX2:
                                                tmpFreq -= xBand[2].losc * 1e6;
                                                break;
                                            case Band.BX3:
                                                tmpFreq -= xBand[3].losc * 1e6;
                                                break;
                                            case Band.BX4:
                                                tmpFreq -= xBand[4].losc * 1e6;
                                                break;
                                            case Band.BX5:
                                                tmpFreq -= xBand[5].losc * 1e6;
                                                break;
                                            case Band.BX6:
                                                tmpFreq -= xBand[6].losc * 1e6;
                                                break;
                                            case Band.BX7:
                                                tmpFreq -= xBand[7].losc * 1e6;
                                                break;
                                            case Band.BX8:
                                                tmpFreq -= xBand[8].losc * 1e6;
                                                break;
                                            case Band.BX9:
                                                tmpFreq -= xBand[9].losc * 1e6;
                                                break;
                                            case Band.BX10:
                                                tmpFreq -= xBand[10].losc * 1e6;
                                                break;
                                            case Band.BX11:
                                                tmpFreq -= xBand[11].losc * 1e6;
                                                break;
                                            case Band.BX12:
                                                tmpFreq -= xBand[12].losc * 1e6;
                                                break;
                                        }
                                    }

                                    if (tmpFreq < 0)
                                    {
                                        MessageBox.Show("Wrong OSC value!");
                                        return;
                                    }

                                    Band new_band_filter = BandFilterByFreq(freq);

                                    if (current_band_filter != new_band_filter)
                                    {
                                        CurrentBandFilter = new_band_filter;
                                        if (debug_enabled && debug != null && debug.Visible)
                                        {
                                            debug.rtbDebugMsg.AppendText("G59 new band filter: " + new_band_filter.ToString() + "\n");
                                            SendMessage(debug.rtbDebugMsg.Handle, WM_VSCROLL, SB_BOTTOM, 0);
                                        }
                                    }

                                    if (debug_enabled && debug != null && debug.Visible)
                                    {
                                        debug.rtbDebugMsg.AppendText("G59 LOSC freq: " + Math.Round(tmpFreq, 6).ToString() + "\n");
                                        SendMessage(debug.rtbDebugMsg.Handle, WM_VSCROLL, SB_BOTTOM, 0);
                                    }

                                    net_device.SetLOSC((long)tmpFreq, true);
                                }
                                else if (current_model == Model.GENESIS_G11)
                                {
                                    if (IsXTRV(freq))
                                    {
                                        switch (current_band)
                                        {
                                            case Band.B2M:
                                                tmpFreq -= g11_Xtrv_losc_freq;
                                                break;
                                            case Band.BX1:
                                                tmpFreq -= xBand[1].losc * 1e6;
                                                break;
                                            case Band.BX2:
                                                tmpFreq -= xBand[2].losc * 1e6;
                                                break;
                                            case Band.BX3:
                                                tmpFreq -= xBand[3].losc * 1e6;
                                                break;
                                            case Band.BX4:
                                                tmpFreq -= xBand[4].losc * 1e6;
                                                break;
                                            case Band.BX5:
                                                tmpFreq -= xBand[5].losc * 1e6;
                                                break;
                                            case Band.BX6:
                                                tmpFreq -= xBand[6].losc * 1e6;
                                                break;
                                            case Band.BX7:
                                                tmpFreq -= xBand[7].losc * 1e6;
                                                break;
                                            case Band.BX8:
                                                tmpFreq -= xBand[8].losc * 1e6;
                                                break;
                                            case Band.BX9:
                                                tmpFreq -= xBand[9].losc * 1e6;
                                                break;
                                            case Band.BX10:
                                                tmpFreq -= xBand[10].losc * 1e6;
                                                break;
                                            case Band.BX11:
                                                tmpFreq -= xBand[11].losc * 1e6;
                                                break;
                                            case Band.BX12:
                                                tmpFreq -= xBand[12].losc * 1e6;
                                                break;
                                        }
                                    }

                                    if (tmpFreq < 0)
                                    {
                                        MessageBox.Show("Wrong OSC value!");
                                        return;
                                    }

                                    Band new_band_filter = BandFilterByFreq(freq);

                                    if (current_band_filter != new_band_filter)
                                    {
                                        CurrentBandFilter = new_band_filter;
                                        if (debug_enabled && debug != null && debug.Visible)
                                        {
                                            debug.rtbDebugMsg.AppendText("G59 new band filter: " + new_band_filter.ToString() + "\n");
                                            SendMessage(debug.rtbDebugMsg.Handle, WM_VSCROLL, SB_BOTTOM, 0);
                                        }
                                    }

                                    if (debug_enabled && debug != null && debug.Visible)
                                    {
                                        debug.rtbDebugMsg.AppendText("G11 LOSC freq: " + Math.Round(tmpFreq, 6).ToString() + "\n");
                                        SendMessage(debug.rtbDebugMsg.Handle, WM_VSCROLL, SB_BOTTOM, 0);
                                    }

                                    g11.Set_frequency((long)Math.Round(tmpFreq, 6), true);
                                }
                                else if (current_model == Model.QRP2000)
                                {
                                    if (QRP2000_XTRV_enabled)
                                    {
                                        if (current_band == Band.B2M)
                                        {
                                            tmpFreq -= QRP2000_IF_Freq;

                                            if (tmpFreq < 0)
                                            {
                                                MessageBox.Show("Wrong XTRV OSC value!", "XTRV error");
                                                return;
                                            }

                                            qrp2000.Set_SI570_freq((tmpFreq / 1e6) * qrp2000_xtrv_freq_multiplier);
                                        }
                                        else
                                        {
                                            switch (current_band)
                                            {
                                                case Band.BX1:
                                                    tmpFreq -= xBand[1].losc * 1e6;
                                                    break;
                                                case Band.BX2:
                                                    tmpFreq -= xBand[2].losc * 1e6;
                                                    break;
                                                case Band.BX3:
                                                    tmpFreq -= xBand[3].losc * 1e6;
                                                    break;
                                                case Band.BX4:
                                                    tmpFreq -= xBand[4].losc * 1e6;
                                                    break;
                                                case Band.BX5:
                                                    tmpFreq -= xBand[5].losc * 1e6;
                                                    break;
                                                case Band.BX6:
                                                    tmpFreq -= xBand[6].losc * 1e6;
                                                    break;
                                                case Band.BX7:
                                                    tmpFreq -= xBand[7].losc * 1e6;
                                                    break;
                                                case Band.BX8:
                                                    tmpFreq -= xBand[8].losc * 1e6;
                                                    break;
                                                case Band.BX9:
                                                    tmpFreq -= xBand[9].losc * 1e6;
                                                    break;
                                                case Band.BX10:
                                                    tmpFreq -= xBand[10].losc * 1e6;
                                                    break;
                                                case Band.BX11:
                                                    tmpFreq -= xBand[11].losc * 1e6;
                                                    break;
                                                case Band.BX12:
                                                    tmpFreq -= xBand[12].losc * 1e6;
                                                    break;
                                            }

                                            if (tmpFreq < 0)
                                            {
                                                MessageBox.Show("Wrong XTRV OSC value!", "XTRV error");
                                                return;
                                            }

                                            qrp2000.Set_SI570_freq((tmpFreq / 1e6) * qrp2000_xtrv_freq_multiplier);
                                        }
                                    }
                                    else
                                    {
                                        qrp2000.Set_SI570_freq((tmpFreq / 1e6) * qrp2000_freq_multiplier);
                                    }
                                }
                            }
                        }
                        else if (tx)
                        {
                                freq = loscFreq;
                                freq = Math.Round(freq, 6);

                                if (current_dsp_mode == DSPMode.FMN)
                                {
                                    switch (rptr_mode)
                                    {
                                        case RPTRmode.simplex:
                                            break;

                                        case RPTRmode.low:
                                            freq -= RPTR_offset;
                                            break;

                                        case RPTRmode.high:
                                            freq += RPTR_offset;
                                            break;
                                    }
                                }

                            if (usb_si570_enable)
                                SI570.Set_SI570_osc((long)(freq * 1e6));
                            else
                            {
                                if (current_model == Model.GENESIS_G59USB)
                                {
                                    freq *= 1e6;

                                    if (IsXTRV(freq))
                                    {
                                        switch (current_band)
                                        {
                                            case Band.B2M:
                                                freq -= g59_2m_Xtrv_losc_freq;
                                                break;
                                            case Band.BX1:
                                                freq -= xBand[1].losc * 1e6;
                                                break;
                                            case Band.BX2:
                                                freq -= xBand[2].losc * 1e6;
                                                break;
                                            case Band.BX3:
                                                freq -= xBand[3].losc * 1e6;
                                                break;
                                            case Band.BX4:
                                                freq -= xBand[4].losc * 1e6;
                                                break;
                                            case Band.BX5:
                                                freq -= xBand[5].losc * 1e6;
                                                break;
                                            case Band.BX6:
                                                freq -= xBand[6].losc * 1e6;
                                                break;
                                            case Band.BX7:
                                                freq -= xBand[7].losc * 1e6;
                                                break;
                                            case Band.BX8:
                                                freq -= xBand[8].losc * 1e6;
                                                break;
                                            case Band.BX9:
                                                freq -= xBand[9].losc * 1e6;
                                                break;
                                            case Band.BX10:
                                                freq -= xBand[10].losc * 1e6;
                                                break;
                                            case Band.BX11:
                                                freq -= xBand[11].losc * 1e6;
                                                break;
                                            case Band.BX12:
                                                freq -= xBand[12].losc * 1e6;
                                                break;
                                        }
                                    }

                                    if (freq < 0)
                                        MessageBox.Show("Wrong OSC value!");

                                    Band new_band_filter = BandFilterByFreq(freq / 1e6);

                                    if (current_band != new_band_filter)
                                    {
                                        CurrentBandFilter = new_band_filter;
                                        if (debug_enabled && debug != null && debug.Visible)
                                        {
                                            debug.rtbDebugMsg.AppendText("G59 new band filter: " + new_band_filter.ToString() + "\n");
                                            SendMessage(debug.rtbDebugMsg.Handle, WM_VSCROLL, SB_BOTTOM, 0);
                                        }
                                    }

                                    if (debug_enabled && debug != null && debug.Visible)
                                    {
                                        debug.rtbDebugMsg.AppendText("G59 LOSC freq: " + Math.Round(freq, 6).ToString() + "\n");
                                        SendMessage(debug.rtbDebugMsg.Handle, WM_VSCROLL, SB_BOTTOM, 0);
                                    }

                                    g59.Set_frequency((long)(Math.Round(freq, 6)), true);
                                }
                                else if (current_model == Model.GENESIS_G59NET)
                                {
                                    freq *= 1e6;

                                    if (IsXTRV(freq))
                                    {
                                        switch (current_band)
                                        {
                                            case Band.B2M:
                                                freq -= g59_2m_Xtrv_losc_freq;
                                                break;
                                            case Band.BX1:
                                                freq -= xBand[1].losc * 1e6;
                                                break;
                                            case Band.BX2:
                                                freq -= xBand[2].losc * 1e6;
                                                break;
                                            case Band.BX3:
                                                freq -= xBand[3].losc * 1e6;
                                                break;
                                            case Band.BX4:
                                                freq -= xBand[4].losc * 1e6;
                                                break;
                                            case Band.BX5:
                                                freq -= xBand[5].losc * 1e6;
                                                break;
                                            case Band.BX6:
                                                freq -= xBand[6].losc * 1e6;
                                                break;
                                            case Band.BX7:
                                                freq -= xBand[7].losc * 1e6;
                                                break;
                                            case Band.BX8:
                                                freq -= xBand[8].losc * 1e6;
                                                break;
                                            case Band.BX9:
                                                freq -= xBand[9].losc * 1e6;
                                                break;
                                            case Band.BX10:
                                                freq -= xBand[10].losc * 1e6;
                                                break;
                                            case Band.BX11:
                                                freq -= xBand[11].losc * 1e6;
                                                break;
                                            case Band.BX12:
                                                freq -= xBand[12].losc * 1e6;
                                                break;
                                        }

                                        if (freq < 0)
                                            MessageBox.Show("Wrong OSC value!");
                                    }

                                    Band new_band_filter = BandFilterByFreq(freq / 1e6);

                                    if (current_band_filter != new_band_filter)
                                    {
                                        CurrentBandFilter = new_band_filter;
                                        if (debug_enabled && debug != null && debug.Visible)
                                        {
                                            debug.rtbDebugMsg.AppendText("G59 new band filter: " + new_band_filter.ToString() + "\n");
                                            SendMessage(debug.rtbDebugMsg.Handle, WM_VSCROLL, SB_BOTTOM, 0);
                                        }
                                    }

                                    if (debug_enabled && debug != null && debug.Visible)
                                    {
                                        debug.rtbDebugMsg.AppendText("G59 LOSC freq: " + Math.Round(freq, 6).ToString() + "\n");
                                        SendMessage(debug.rtbDebugMsg.Handle, WM_VSCROLL, SB_BOTTOM, 0);
                                    }

                                    net_device.SetLOSC((long)freq, true);
                                }
                                else if (current_model == Model.GENESIS_G11)
                                {
                                    freq *= 1e6;

                                    if (IsXTRV(freq))
                                    {
                                        switch (current_band)
                                        {
                                            case Band.B2M:
                                                freq -= g11_Xtrv_losc_freq;
                                                break;
                                            case Band.BX1:
                                                freq -= xBand[1].losc * 1e6;
                                                break;
                                            case Band.BX2:
                                                freq -= xBand[2].losc * 1e6;
                                                break;
                                            case Band.BX3:
                                                freq -= xBand[3].losc * 1e6;
                                                break;
                                            case Band.BX4:
                                                freq -= xBand[4].losc * 1e6;
                                                break;
                                            case Band.BX5:
                                                freq -= xBand[5].losc * 1e6;
                                                break;
                                            case Band.BX6:
                                                freq -= xBand[6].losc * 1e6;
                                                break;
                                            case Band.BX7:
                                                freq -= xBand[7].losc * 1e6;
                                                break;
                                            case Band.BX8:
                                                freq -= xBand[8].losc * 1e6;
                                                break;
                                            case Band.BX9:
                                                freq -= xBand[9].losc * 1e6;
                                                break;
                                            case Band.BX10:
                                                freq -= xBand[10].losc * 1e6;
                                                break;
                                            case Band.BX11:
                                                freq -= xBand[11].losc * 1e6;
                                                break;
                                            case Band.BX12:
                                                freq -= xBand[12].losc * 1e6;
                                                break;
                                        }
                                    }

                                    if (freq < 0)
                                    {
                                        MessageBox.Show("Wrong OSC value!");
                                        return;
                                    }

                                    Band new_band_filter = BandFilterByFreq(freq / 1e6);

                                    if (current_band != new_band_filter)
                                    {
                                        
                                        if (debug_enabled && debug != null && debug.Visible)
                                        {
                                            debug.rtbDebugMsg.AppendText("G11 new band filter: " + new_band_filter.ToString()+ "\n");
                                            SendMessage(debug.rtbDebugMsg.Handle, WM_VSCROLL, SB_BOTTOM, 0);
                                        }
                                    }
                                    if (debug_enabled && debug != null && debug.Visible)
                                    {
                                        debug.rtbDebugMsg.AppendText("G11 LOSC freq: " + Math.Round(freq, 6).ToString() + "\n");
                                        SendMessage(debug.rtbDebugMsg.Handle, WM_VSCROLL, SB_BOTTOM, 0);
                                    }

                                    g11.Set_frequency((long)Math.Round(freq, 6), true);

                                }
                                else if (current_model == Model.QRP2000)
                                {
                                    freq *= 1e6;

                                    if (QRP2000_XTRV_enabled)
                                    {
                                        if (current_band == Band.B2M)
                                        {
                                            freq -= QRP2000_IF_Freq;
                                        }
                                        else
                                        {
                                            switch (current_band)
                                            {
                                                case Band.BX1:
                                                    freq -= xBand[1].losc * 1e6;
                                                    break;
                                                case Band.BX2:
                                                    freq -= xBand[2].losc * 1e6;
                                                    break;
                                                case Band.BX3:
                                                    freq -= xBand[3].losc * 1e6;
                                                    break;
                                                case Band.BX4:
                                                    freq -= xBand[4].losc * 1e6;
                                                    break;
                                                case Band.BX5:
                                                    freq -= xBand[5].losc * 1e6;
                                                    break;
                                                case Band.BX6:
                                                    freq -= xBand[6].losc * 1e6;
                                                    break;
                                                case Band.BX7:
                                                    freq -= xBand[7].losc * 1e6;
                                                    break;
                                                case Band.BX8:
                                                    freq -= xBand[8].losc * 1e6;
                                                    break;
                                                case Band.BX9:
                                                    freq -= xBand[9].losc * 1e6;
                                                    break;
                                                case Band.BX10:
                                                    freq -= xBand[10].losc * 1e6;
                                                    break;
                                                case Band.BX11:
                                                    freq -= xBand[11].losc * 1e6;
                                                    break;
                                                case Band.BX12:
                                                    freq -= xBand[12].losc * 1e6;
                                                    break;
                                            }
                                        }

                                        Math.Round(freq, 6);

                                        if (freq < 0)
                                            MessageBox.Show("Wrong OSC value!");
                                        else
                                        {
                                            qrp2000.Set_SI570_freq((freq / 1e6) * qrp2000_xtrv_freq_multiplier);
                                        }
                                    }
                                    else
                                    {
                                        Math.Round(freq, 6);

                                        if (freq < 0)
                                            MessageBox.Show("Wrong OSC value!");
                                        else
                                        {
                                            qrp2000.Set_SI570_freq((freq / 1e6) * qrp2000_freq_multiplier);
                                        }
                                    }
                                }
                            }
                        }
                        else
                        {                                   // rx losc set
                            tmpFreq = loscFreq;

                            if (usb_si570_enable)
                                SI570.Set_SI570_osc((long)(freq * 1e6));
                            else
                            {
                                if (current_model == Model.GENESIS_G59USB)
                                {
                                    tmpFreq = loscFreq * 1e6;

                                    if (IsXTRV(vfoAFreq))
                                    {
                                        switch (current_band)
                                        {
                                            case Band.B2M:
                                                tmpFreq -= g59_2m_Xtrv_losc_freq;
                                                break;
                                            case Band.BX1:
                                                tmpFreq -= xBand[1].losc * 1e6;
                                                break;
                                            case Band.BX2:
                                                tmpFreq -= xBand[2].losc * 1e6;
                                                break;
                                            case Band.BX3:
                                                tmpFreq -= xBand[3].losc * 1e6;
                                                break;
                                            case Band.BX4:
                                                tmpFreq -= xBand[4].losc * 1e6;
                                                break;
                                            case Band.BX5:
                                                tmpFreq -= xBand[5].losc * 1e6;
                                                break;
                                            case Band.BX6:
                                                tmpFreq -= xBand[6].losc * 1e6;
                                                break;
                                            case Band.BX7:
                                                tmpFreq -= xBand[7].losc * 1e6;
                                                break;
                                            case Band.BX8:
                                                tmpFreq -= xBand[8].losc * 1e6;
                                                break;
                                            case Band.BX9:
                                                tmpFreq -= xBand[9].losc * 1e6;
                                                break;
                                            case Band.BX10:
                                                tmpFreq -= xBand[10].losc * 1e6;
                                                break;
                                            case Band.BX11:
                                                tmpFreq -= xBand[11].losc * 1e6;
                                                break;
                                            case Band.BX12:
                                                tmpFreq -= xBand[12].losc * 1e6;
                                                break;
                                        }
                                    }

                                    if (tmpFreq < 0)
                                    {
                                        MessageBox.Show("Wrong OSC value!");
                                        return;
                                    }

                                    Band new_band_filter = BandFilterByFreq(tmpFreq / 1e6);
                                    if (current_band_filter != new_band_filter)
                                    {
                                        CurrentBandFilter = new_band_filter;
                                        if (debug_enabled && debug != null && debug.Visible)
                                        {
                                            debug.rtbDebugMsg.AppendText("G59 new band filter: " + new_band_filter.ToString() + "\n");
                                            SendMessage(debug.rtbDebugMsg.Handle, WM_VSCROLL, SB_BOTTOM, 0);
                                        }
                                    }

                                    if (debug_enabled && debug != null && debug.Visible)
                                    {
                                        debug.rtbDebugMsg.AppendText("G59 LOSC freq: " + Math.Round(tmpFreq, 6).ToString() + "\n");
                                        SendMessage(debug.rtbDebugMsg.Handle, WM_VSCROLL, SB_BOTTOM, 0);
                                    }

                                    g59.Set_frequency((long)Math.Round(tmpFreq, 6), true);        // force reload Si570
                                }
                                else if (current_model == Model.GENESIS_G59NET)
                                {
                                    tmpFreq = loscFreq * 1e6;

                                    if (IsXTRV(freq))
                                    {
                                        switch (current_band)
                                        {
                                            case Band.B2M:
                                                tmpFreq -= g59_2m_Xtrv_losc_freq;
                                                break;
                                            case Band.BX1:
                                                tmpFreq -= xBand[1].losc * 1e6;
                                                break;
                                            case Band.BX2:
                                                tmpFreq -= xBand[2].losc * 1e6;
                                                break;
                                            case Band.BX3:
                                                tmpFreq -= xBand[3].losc * 1e6;
                                                break;
                                            case Band.BX4:
                                                tmpFreq -= xBand[4].losc * 1e6;
                                                break;
                                            case Band.BX5:
                                                tmpFreq -= xBand[5].losc * 1e6;
                                                break;
                                            case Band.BX6:
                                                tmpFreq -= xBand[6].losc * 1e6;
                                                break;
                                            case Band.BX7:
                                                tmpFreq -= xBand[7].losc * 1e6;
                                                break;
                                            case Band.BX8:
                                                tmpFreq -= xBand[8].losc * 1e6;
                                                break;
                                            case Band.BX9:
                                                tmpFreq -= xBand[9].losc * 1e6;
                                                break;
                                            case Band.BX10:
                                                tmpFreq -= xBand[10].losc * 1e6;
                                                break;
                                            case Band.BX11:
                                                tmpFreq -= xBand[11].losc * 1e6;
                                                break;
                                            case Band.BX12:
                                                tmpFreq -= xBand[12].losc * 1e6;
                                                break;
                                        }
                                    }

                                    if (tmpFreq < 0)
                                    {
                                        MessageBox.Show("Wrong OSC value!");
                                        return;
                                    }
                                    else
                                    {
                                        Band new_band_filter = BandFilterByFreq(tmpFreq / 1e6);

                                        if (current_band != new_band_filter)
                                        {
                                            CurrentBandFilter = new_band_filter;
                                            if (debug_enabled && debug != null && debug.Visible)
                                            {
                                                debug.rtbDebugMsg.AppendText("G59 new band filter: " + new_band_filter.ToString() + "\n");
                                                SendMessage(debug.rtbDebugMsg.Handle, WM_VSCROLL, SB_BOTTOM, 0);
                                            }
                                        }

                                        if (debug_enabled && debug != null && debug.Visible)
                                        {
                                            debug.rtbDebugMsg.AppendText("G59 LOSC freq: " + Math.Round(tmpFreq, 6).ToString() + "\n");
                                            SendMessage(debug.rtbDebugMsg.Handle, WM_VSCROLL, SB_BOTTOM, 0);
                                        }

                                        net_device.SetLOSC((long)(tmpFreq), true);
                                    }
                                }
                                else if (current_model == Model.GENESIS_G11)
                                {
                                    tmpFreq = loscFreq * 1e6;

                                    if (IsXTRV(freq))
                                    {
                                        switch (current_band)
                                        {
                                            case Band.B2M:
                                                tmpFreq -= g11_Xtrv_losc_freq;
                                                break;
                                            case Band.BX1:
                                                tmpFreq -= xBand[1].losc * 1e6;
                                                break;
                                            case Band.BX2:
                                                tmpFreq -= xBand[2].losc * 1e6;
                                                break;
                                            case Band.BX3:
                                                tmpFreq -= xBand[3].losc * 1e6;
                                                break;
                                            case Band.BX4:
                                                tmpFreq -= xBand[4].losc * 1e6;
                                                break;
                                            case Band.BX5:
                                                tmpFreq -= xBand[5].losc * 1e6;
                                                break;
                                            case Band.BX6:
                                                tmpFreq -= xBand[6].losc * 1e6;
                                                break;
                                            case Band.BX7:
                                                tmpFreq -= xBand[7].losc * 1e6;
                                                break;
                                            case Band.BX8:
                                                tmpFreq -= xBand[8].losc * 1e6;
                                                break;
                                            case Band.BX9:
                                                tmpFreq -= xBand[9].losc * 1e6;
                                                break;
                                            case Band.BX10:
                                                tmpFreq -= xBand[10].losc * 1e6;
                                                break;
                                            case Band.BX11:
                                                tmpFreq -= xBand[11].losc * 1e6;
                                                break;
                                            case Band.BX12:
                                                tmpFreq -= xBand[12].losc * 1e6;
                                                break;
                                        }
                                    }

                                    if (tmpFreq < 0)
                                    {
                                        MessageBox.Show("Wrong OSC value!");
                                        return;
                                    }

                                    Band new_band_filter = BandFilterByFreq(tmpFreq / 1e6);

                                    if (current_band != new_band_filter )
                                    {
                                        CurrentBandFilter = new_band_filter;

                                        if (debug_enabled && debug != null && debug.Visible)
                                        {
                                            debug.rtbDebugMsg.AppendText("G11 new band filter: " + new_band_filter.ToString() + "\n");
                                            SendMessage(debug.rtbDebugMsg.Handle, WM_VSCROLL, SB_BOTTOM, 0);
                                        }
                                    }

                                    if (debug_enabled && debug != null && debug.Visible)
                                    {
                                        debug.rtbDebugMsg.AppendText("G11 LOSC tmpFreq: " + Math.Round(tmpFreq, 6).ToString() + "\n");
                                        SendMessage(debug.rtbDebugMsg.Handle, WM_VSCROLL, SB_BOTTOM, 0);
                                    }

                                    g11.Set_frequency((long)(Math.Round(tmpFreq, 6)), true);              // force reload Si570
                                }
                                else if (current_model == Model.QRP2000)
                                {
                                    tmpFreq = loscFreq * 1e6;

                                    if (QRP2000_XTRV_enabled)
                                    {
                                        if (current_band == Band.B2M)
                                        {
                                            tmpFreq -= QRP2000_IF_Freq;

                                            Math.Round(tmpFreq, 6);

                                            if (tmpFreq < 0)
                                            {
                                                MessageBox.Show("Wrong OSC value!");
                                                return;
                                            }

                                            qrp2000.Set_SI570_freq((tmpFreq / 1e6) * qrp2000_xtrv_freq_multiplier);
                                        }
                                        else
                                        {
                                            switch (current_band)
                                            {
                                                case Band.BX1:
                                                    tmpFreq -= xBand[1].losc * 1e6;
                                                    break;
                                                case Band.BX2:
                                                    tmpFreq -= xBand[2].losc * 1e6;
                                                    break;
                                                case Band.BX3:
                                                    tmpFreq -= xBand[3].losc * 1e6;
                                                    break;
                                                case Band.BX4:
                                                    tmpFreq -= xBand[4].losc * 1e6;
                                                    break;
                                                case Band.BX5:
                                                    tmpFreq -= xBand[5].losc * 1e6;
                                                    break;
                                                case Band.BX6:
                                                    tmpFreq -= xBand[6].losc * 1e6;
                                                    break;
                                                case Band.BX7:
                                                    tmpFreq -= xBand[7].losc * 1e6;
                                                    break;
                                                case Band.BX8:
                                                    tmpFreq -= xBand[8].losc * 1e6;
                                                    break;
                                                case Band.BX9:
                                                    tmpFreq -= xBand[9].losc * 1e6;
                                                    break;
                                                case Band.BX10:
                                                    tmpFreq -= xBand[10].losc * 1e6;
                                                    break;
                                                case Band.BX11:
                                                    tmpFreq -= xBand[11].losc * 1e6;
                                                    break;
                                                case Band.BX12:
                                                    tmpFreq -= xBand[12].losc * 1e6;
                                                    break;
                                            }

                                            Math.Round(tmpFreq, 6);

                                            if (tmpFreq < 0)
                                            {
                                                MessageBox.Show("Wrong OSC value!");
                                                return;
                                            }

                                            qrp2000.Set_SI570_freq(tmpFreq / 1e6 * qrp2000_xtrv_freq_multiplier);
                                        }
                                    }
                                    else
                                    {
                                        qrp2000.Set_SI570_freq(tmpFreq / 1e6 * qrp2000_freq_multiplier);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private void HideFocus(object sender, EventArgs e)
        {
            btnHidden.Focus();
        }

        private void chkVFOLock_CheckedChanged(object sender, System.EventArgs e)  // changes yt7pwr
        {
            VFOLock = chkVFOLock.Checked;
            if (chkVFOLock.Checked)
                chkVFOLock.BackColor = button_selected_color;
            else
                chkVFOLock.BackColor = SystemColors.Control;
        }

        private void chkVFOsinc_Click(object sender, EventArgs e)
        {
            if (chkVFOsinc.Checked && (chkEnableSubRX.Checked || chkVFOSplit.Checked))
            {
                chkVFOsinc.BackColor = button_selected_color;
                VFO_SINC = true;
            }
            else
            {
                chkVFOsinc.Checked = false;
                chkVFOsinc.BackColor = SystemColors.Control;
                VFO_SINC = false;
            }
        }

        private void radMoreBands_Click(object sender, System.EventArgs e) // changes yt7pwr
        {
            show_more_bands = true;
            grpBandHF.Visible = false;
            grpMoreBands.Visible = true;
        }

        private void udMIC_LostFocus(object sender, EventArgs e)
        {
            udMIC_ValueChanged(sender, e);
        }

        private void udSQLMainRX_LostFocus(object sender, EventArgs e)
        {
            udSQLMainRX_ValueChanged(sender, e);
        }

        private void udFilterLow_LostFocus(object sender, EventArgs e)
        {
            udFilterLow_ValueChanged(sender, e);
        }

        private void udFilterHigh_LostFocus(object sender, EventArgs e)
        {
            udFilterHigh_ValueChanged(sender, e);
        }

        private void udRIT_LostFocus(object sender, EventArgs e)
        {
            udRIT_ValueChanged(sender, e);
        }

        private void udXIT_LostFocus(object sender, EventArgs e)
        {
            udXIT_ValueChanged(sender, e);
        }

        private void tbCPDR_Scroll(object sender, System.EventArgs e)
        {
            udCPDR.Value = ptbCPDR.Value;
            if (ptbCPDR.Focused) btnHidden.Focus();
        }

        private void tbCPDR_OnWheel(MouseEventArgs e)
        {
            if (SetupForm.FastFocus)
                ptbCPDR.Focus();
        }

        private void tbCOMP_Scroll(object sender, System.EventArgs e)
        {
            udCOMP.Value = ptbCOMP.Value;
            if (ptbCPDR.Focused) btnHidden.Focus();
        }

        private void tbCOMP_OnWheel(MouseEventArgs e)
        {
            if (SetupForm.FastFocus)
                ptbCOMP.Focus();
        }

        private void udCOMP_ValueChanged(object sender, System.EventArgs e)
        {
            ptbCOMP.Value = (int)udCOMP.Value;
            if (SetupForm != null)
                SetupForm.COMPVal = (int)udCOMP.Value;

        }

        private void udCPDR_ValueChanged(object sender, System.EventArgs e)
        {
            ptbCPDR.Value = (int)udCPDR.Value;
            if (SetupForm != null)
                SetupForm.CPDRVal = (int)udCPDR.Value;
        }

        private void udNoiseGate_ValueChanged(object sender, System.EventArgs e)
        {
            ptbNoiseGate.Value = (int)udNoiseGate.Value;
            if (SetupForm != null) SetupForm.NoiseGate = ptbNoiseGate.Value;
        }

        private void btnChangeTuneStepSmaller_Click(object sender, System.EventArgs e)
        {
            ChangeWheelTuneRight();
        }

        private void btnChangeTuneStepLarger_Click(object sender, System.EventArgs e)
        {
            ChangeWheelTuneLeft();
        }

        private void btnTuneStepChangeSmallerSubRX_Click(object sender, EventArgs e)   // yt7pwr
        {
            ChangeWheelTuneRightSubRX();
        }

        private void btnChangeTuneStepLargerSubRX_Click(object sender, EventArgs e)    // yt7pwr
        {
            ChangeWheelTuneLeftSubRX();
        }

        private void udVOX_ValueChanged(object sender, System.EventArgs e)
        {
            ptbVOX.Value = (int)udVOX.Value;
            if (SetupForm != null) SetupForm.VOXSens = ptbVOX.Value;
        }

        private void comboTXProfile_SelectedIndexChanged(object sender, System.EventArgs e)
        {
            if (SetupForm != null) SetupForm.TXProfile = comboTXProfile.Text;
            if (comboTXProfile.Focused) btnHidden.Focus();
        }

        private void chkShowTXFilter_CheckedChanged(object sender, System.EventArgs e)
        {
            Display_GDI.DrawTXFilter = chkShowTXFilter.Checked;
#if(DirectX)
            Display_DirectX.DrawTXFilter = chkShowTXFilter.Checked;
            Display_DirectX.RefreshPanadapterGrid = true;
#endif
        }

        private void mnuFilterReset_Click(object sender, System.EventArgs e)
        {
            try
            {
                DialogResult dr = MessageBox.Show(
                    "Are you sure you want to reset all custom filter settings to the default?",
                    "Reset Filters?",
                    MessageBoxButtons.YesNo,
                    MessageBoxIcon.Question);

                if (dr == DialogResult.No) return;

                InitFilterPresets(ref filter_presets, ref filter_presets_subRX);

                radFilter1.Text = filter_presets[(int)current_dsp_mode].GetName(Filter.F1);
                radFilter2.Text = filter_presets[(int)current_dsp_mode].GetName(Filter.F2);
                radFilter3.Text = filter_presets[(int)current_dsp_mode].GetName(Filter.F3);
                radFilter4.Text = filter_presets[(int)current_dsp_mode].GetName(Filter.F4);
                radFilter5.Text = filter_presets[(int)current_dsp_mode].GetName(Filter.F5);
                radFilter6.Text = filter_presets[(int)current_dsp_mode].GetName(Filter.F6);
                radFilter7.Text = filter_presets[(int)current_dsp_mode].GetName(Filter.F7);
                radFilter8.Text = filter_presets[(int)current_dsp_mode].GetName(Filter.F8);
                radFilter9.Text = filter_presets[(int)current_dsp_mode].GetName(Filter.F9);
                radFilter10.Text = filter_presets[(int)current_dsp_mode].GetName(Filter.F10);
                radFilterVar1.Text = filter_presets[(int)current_dsp_mode].GetName(Filter.VAR1);
                radFilterVar2.Text = filter_presets[(int)current_dsp_mode].GetName(Filter.VAR2);
                CurrentFilter = current_filter;

                if (filterForm != null && !filterForm.IsDisposed)
                {
                    filterForm.CurrentDSPMode = current_dsp_mode;
                }
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private void chkCWVAC_CheckedChanged(object sender, System.EventArgs e)
        {
            if (SetupForm != null) SetupForm.VACEnable = chkCWVAC.Checked;
            if (chkCWVAC.Checked) chkCWVAC.BackColor = button_selected_color;
            else chkCWVAC.BackColor = SystemColors.Control;
        }

        private void chkCWIambic_CheckedChanged(object sender, System.EventArgs e)
        {
            if (SetupForm != null) SetupForm.CWIambic = chkCWIambic.Checked;
        }

        private void udCWPitch_ValueChanged(object sender, System.EventArgs e)
        {
            if (SetupForm != null) SetupForm.CWPitch = (int)udCWPitch.Value;
            if (udCWPitch.Focused) btnHidden.Focus();
        }

        private void comboVACSampleRate_SelectedIndexChanged(object sender, System.EventArgs e)
        {
            if (SetupForm != null) SetupForm.VACSampleRate = comboVACSampleRate.Text;
            if (comboVACSampleRate.Focused) btnHidden.Focus();
        }

        private bool RX_RL_swap = false; // yt7pwr
        public bool RX_IQ_channel_swap
        {
            get { return RX_RL_swap; }
            set { RX_RL_swap = value; }
        }

        private bool TX_RL_swap = false; // yt7pwr
        public bool TX_IQ_channel_swap
        {
            get { return TX_RL_swap; }
            set
            {
                TX_RL_swap = value;

                if (MOX)
                    SetTXOscFreqs(true, true);
            }
        }

        private void chkShowTXCWFreq_CheckedChanged(object sender, System.EventArgs e)
        {
            Display_GDI.DrawTXCWFreq = chkShowTXCWFreq.Checked;
#if(DirectX)
            Display_DirectX.DrawTXCWFreq = chkShowTXCWFreq.Checked;
            Display_DirectX.RefreshPanadapterGrid = true;
#endif
        }

        #endregion

        #region VFO Events

        private void Console_MouseWheel(object sender, System.Windows.Forms.MouseEventArgs e) // changes yt7pwr
        {
            try
            {
                if (this.ActiveControl is TextBoxTS ||
                    this.ActiveControl is NumericUpDownTS ||
                    this.ActiveControl is TrackBarTS ||
                    this.ActiveControl is PrettyTrackBar)
                {
                    Console_KeyPress(this, new KeyPressEventArgs((char)Keys.Enter));
                    return;
                }

                int numberToMove = e.Delta / 120;	// 1 per click

                if (numberToMove != 0)
                {
                    int left, right, top, bottom;
                    double losc_freq = loscFreq;

                    btnZAP.Checked = false;     // first stop memory zapping

                    if (vfo_new_look)
                    {
                        GetNewVFOACharWidth();
                        left = grpVFOnew.Left + txtVFOAnew.Left;
                        right = left + txtVFOAnew.Width;
                        top = grpVFOnew.Top + txtVFOAnew.Top;
                        bottom = top + txtVFOAnew.Height;
                        if (e.X > left && e.X < right && e.Y > top && e.Y < bottom) // new VFOA
                        {
                            double freq = vfoAFreq;
                            double mult = 1000.0;
                            memory = false;

                            if (PowerOn)
                            {
                                if (vfoA_new_hover_digit < 6)
                                {
                                    mult = Math.Pow(10, vfoA_new_hover_digit) / 10000000;

                                    if (mult <= 1.0)
                                    {
                                        freq += mult * numberToMove;
                                        MaxFreq = LOSCFreq + DttSP.SampleRate / 2 * 1e-6;
                                        MinFreq = LOSCFreq - DttSP.SampleRate / 2 * 1e-6;

                                        if (freq > max_freq && !continuous_tuning)
                                            freq = max_freq;
                                        else if (freq < min_freq && !continuous_tuning)
                                            freq = min_freq;
                                    }
                                }

                                if (!vfo_lock)
                                {
                                    memory = false;
                                    vfoa_lock = true;
                                    VFOAFreq = freq;
                                    UpdateVFOAFreq(freq);
                                    vfoa_lock = false;
                                }

                                if (!vfob_split_extended && vfo_sinc && chkEnableSubRX.Checked &&
                                    (freq >= min_freq || freq <= max_freq))
                                {
                                    freq = double.Parse(txtVFOBnew.Text);
                                    freq += mult * numberToMove;
                                    if (freq > max_freq)
                                        freq = max_freq;
                                    else if (freq < min_freq)
                                        freq = min_freq;

                                    vfob_lock = true;
                                    VFOBFreq = freq;
                                    UpdateVFOBFreq(freq);
                                    vfob_lock = false;
                                }
                                else if (vfob_split_extended && vfo_sinc &&
                                    chkEnableSubRX.Checked)
                                {
                                    freq = double.Parse(txtVFOBnew.Text);
                                    freq += mult * numberToMove;
                                    vfob_lock = true;
                                    VFOBFreq = freq;
                                    UpdateVFOBFreq(freq);
                                    vfoa_lock = true;
                                }
                            }
                            return;
                        }

                        left = grpVFOnew.Left + txtVFOBnew.Left;
                        right = left + txtVFOBnew.Width;
                        top = grpVFOnew.Top + txtVFOBnew.Top;
                        bottom = top + txtVFOBnew.Height;
                        if (e.X > left && e.X < right && e.Y > top && e.Y < bottom) // new VFOB
                        {
                            if (PowerOn)
                            {
                                double freq = vfoBFreq;
                                double mult = 1000.0;

                                if ((vfob_split_extended && vfoB_new_hover_digit < 7) ||
                                    (!vfob_split_extended && vfoB_new_hover_digit < 6))
                                {
                                    mult = Math.Pow(10, vfoB_new_hover_digit) / 10000000;

                                    if (mult <= 1.0)
                                    {
                                        freq += mult * numberToMove;

                                        if (!chkEnableSubRX.Checked && chkVFOSplit.Checked && vfob_split_extended)
                                        {

                                        }
                                        else
                                        {
                                            MaxFreq = LOSCFreq + DttSP.SampleRate / 2 * 1e-6;
                                            MinFreq = LOSCFreq - DttSP.SampleRate / 2 * 1e-6;
                                            if (freq > max_freq)
                                                freq = max_freq;
                                            else if (freq < min_freq)
                                                freq = min_freq;
                                        }

                                        if (!vfo_lock)
                                        {
                                            vfob_lock = true;
                                            VFOBFreq = freq;
                                            UpdateVFOBFreq(freq);
                                            vfob_lock = false;
                                            Display_GDI.VFOB = (long)(freq * 1e6);
#if(DirectX)
                                            Display_DirectX.VFOB = (long)(freq * 1e6);
#endif
                                        }

                                        if (!vfob_split_extended && vfo_sinc && chkEnableSubRX.Checked &&
                                            (freq >= min_freq || freq <= max_freq))
                                        {
                                            freq = Math.Round(vfoAFreq, 6);
                                            freq += mult * numberToMove;
                                            if (freq > max_freq)
                                                freq = max_freq;
                                            else if (freq < min_freq)
                                                freq = min_freq;

                                            vfob_lock = true;
                                            VFOAFreq = freq;
                                            UpdateVFOAFreq(freq);
                                            vfob_lock = false;
                                            Display_GDI.VFOA = (long)(freq * 1e6);
#if(DirectX)
                                            Display_DirectX.VFOA = (long)(freq * 1e6);
#endif
                                        }
                                        else if (vfo_sinc && chkEnableSubRX.Checked &&
                                            vfob_split_extended)
                                        {
                                            freq = Math.Round(vfoAFreq, 6);
                                            freq += mult * numberToMove;
                                            vfoa_lock = true;
                                            VFOAFreq = freq;
                                            UpdateVFOAFreq(freq);
                                            vfoa_lock = false;
                                            Display_GDI.VFOA = (long)(freq * 1e6);
#if(DirectX)
                                            Display_DirectX.VFOA = (long)(freq * 1e6);
#endif
                                        }
                                    }
                                }
                            }
                            return;
                        }

                        left = grpVFOnew.Left + txtLOSCnew.Left;
                        right = left + txtLOSCnew.Width;
                        top = grpVFOnew.Top + txtLOSCnew.Top;
                        bottom = top + txtLOSCnew.Height;
                        if (e.X > left && e.X < right && e.Y > top && e.Y < bottom) // new LOSC
                        {
                            losc_change = true;

                            if (PowerOn)
                            {
                                if (losc_new_hover_digit != 7)
                                {
                                    double freq = LOSCFreq;
                                    double mult = 1000.0;

                                    if (losc_new_hover_digit == 8)
                                        mult = 1.0;
                                    else
                                        mult = Math.Pow(10, losc_new_hover_digit) / 10000000;

                                    if (mult <= 1.0)
                                    {
                                        freq += (mult * numberToMove);
                                        freq = Math.Round(freq, 6);

                                        if (!vfo_lock)
                                        {
                                            vfoa_lock = true;
                                            freq = Math.Round(freq, 6);

                                            switch (current_model)
                                            {
                                                case Model.GENESIS_G137:
                                                    if (freq > 0.0 && freq < 0.3)
                                                    {
                                                        LOSCFreq = freq;
                                                        UpdateLOSCFreq(freq.ToString("f6"));
                                                    }
                                                    break;
                                                case Model.GENESIS_G500:
                                                    if (freq > 0.4 && freq < 0.6)
                                                    {
                                                        LOSCFreq = freq;
                                                        UpdateLOSCFreq(freq.ToString("f6"));
                                                    }
                                                    break;
                                                default:
                                                    {
                                                        if (freq >= 0.1 && freq <= 500000.0)
                                                        {
                                                            LOSCFreq = freq;
                                                            UpdateLOSCFreq(freq.ToString("f6"));
                                                        }
                                                    }
                                                    break;

                                                    vfoa_lock = false;
                                            }

                                            Display_GDI.LOSC = (long)(freq * 1e6);
#if(DirectX)
                                            Display_DirectX.LOSC = (long)(freq * 1e6);
#endif

                                            losc_change = false;
                                            vfoa_lock = true;
                                            VFOAFreq = vfoAFreq;
                                            vfoa_lock = false;
                                            if (vfoAFreq != (double)saved_vfoa_freq)
                                                memory = false;
                                            txtVFOAnew_LostFocus(sender, e);
                                            if (chkEnableSubRX.Checked)
                                                txtVFOBnew_LostFocus(sender, e);
                                        }
                                    }
                                }
                            }
                            return;
                        }
                    }
                    else
                    {
                        left = grpVFOA.Left + txtVFOAFreq.Left;
                        right = left + txtVFOAFreq.Width;
                        top = grpVFOA.Top + txtVFOAFreq.Top;
                        bottom = top + txtVFOAFreq.Height;

                        if (e.X > left && e.X < right &&			// Update VFOA
                            e.Y > top && e.Y < bottom)
                        {
                            if (PowerOn)
                            {
                                memory = false;
                                GetVFOCharWidth(1);  // VFOA
                                double freq = double.Parse(txtVFOAFreq.Text);
                                double mult = 1000.0;
                                if (vfoA_hover_digit < 0)
                                {
                                    int x = right + 2 - (vfoA_pixel_offset - 5);
                                    while (x < e.X && mult > 0.0000011)
                                    {
                                        mult /= 10.0;
                                        x += vfoA_char_width;
                                        if (mult == 1.0)
                                            x += vfoA_decimal_space;
                                        else x += vfoA_char_space;
                                    }
                                }
                                else
                                {
                                    mult = Math.Pow(10, -vfoA_hover_digit) * 1000.0;
                                }

                                if (mult <= 1.0)
                                {
                                    freq += mult * numberToMove;
                                    MaxFreq = LOSCFreq + DttSP.SampleRate / 2 * 1e-6;
                                    MinFreq = LOSCFreq - DttSP.SampleRate / 2 * 1e-6;
                                    if (freq > max_freq && !continuous_tuning)
                                        freq = max_freq;
                                    else if (freq < min_freq && !continuous_tuning)
                                        freq = min_freq;

                                    if (!vfo_lock)
                                    {
                                        vfoa_lock = true;
                                        VFOAFreq = freq;
                                        UpdateVFOAFreq(freq);
                                        vfoa_lock = false;
                                        Display_GDI.VFOA = (long)(freq * 1e6);
                                    }
                                    if (vfob_split_extended && vfo_sinc && chkEnableSubRX.Checked &&
                                        (freq >= min_freq || freq <= max_freq))
                                    {
                                        freq = double.Parse(txtVFOBFreq.Text);
                                        freq += mult * numberToMove;
                                        if (freq > max_freq)
                                            freq = max_freq;
                                        else if (freq < min_freq)
                                            freq = min_freq;
                                    }
                                    else if (vfob_split_extended && vfo_sinc && !chkEnableSubRX.Checked)
                                    {
                                        freq = double.Parse(txtVFOBFreq.Text);
                                        freq += mult * numberToMove;
                                    }

                                    vfob_lock = true;
                                    VFOBFreq = freq;
                                    UpdateVFOBFreq(freq);
                                    vfob_lock = false;
                                    Display_GDI.VFOB = (long)(freq * 1e6);
#if(DirectX)
                                    Display_DirectX.VFOB = (long)(freq * 1e6);
#endif

                                    txtLOSCFreq_LostFocus(null, null);
                                }
                            }
                            return;
                        }
                        else
                        {
                            left = grpVFOB.Left + txtVFOBFreq.Left;
                            right = left + txtVFOBFreq.Width;
                            top = grpVFOB.Top + txtVFOBFreq.Top;
                            bottom = top + txtVFOBFreq.Height;
                            if (e.X > left && e.X < right &&		// Update VFOB
                                e.Y > top && e.Y < bottom)
                            {
                                if (PowerOn)
                                {
                                    GetVFOCharWidth(2);  // VFOB
                                    double freq = double.Parse(txtVFOBFreq.Text);
                                    double mult = 1000.0;

                                    if ((vfob_split_extended && vfoB_hover_digit < 7) ||
                                    (!vfob_split_extended && vfoB_hover_digit < 6))
                                    {
                                        int x = right + 2 - (vfoB_pixel_offset - 5);
                                        while (x < e.X && mult > 0.0000011)
                                        {
                                            mult /= 10;
                                            x += vfoB_char_width;
                                            if (mult == 1.0)
                                                x += vfoB_decimal_space;
                                            else x += vfoB_char_space;
                                        }
                                    }
                                    else
                                    {
                                        mult = Math.Pow(10, -vfoB_hover_digit) * 1000.0;
                                    }

                                    if (mult <= 1.0)
                                        freq += mult * numberToMove;

                                    if (!chkEnableSubRX.Checked && chkVFOSplit.Checked && vfob_split_extended)
                                    {

                                    }
                                    else
                                    {
                                        MaxFreq = LOSCFreq + DttSP.SampleRate / 2 * 1e-6;
                                        MinFreq = LOSCFreq - DttSP.SampleRate / 2 * 1e-6;
                                        if (freq > max_freq)
                                            freq = max_freq;
                                        else if (freq < min_freq)
                                            freq = min_freq;
                                    }
                                    if (!vfo_lock)
                                    {
                                        vfob_lock = true;
                                        VFOBFreq = freq;
                                        UpdateVFOBFreq(freq);
                                        vfob_lock = false;
                                        Display_GDI.VFOB = (long)(freq * 1e6);
#if(DirectX)
                                        Display_DirectX.VFOB = (long)(freq * 1e6);
#endif
                                    }

                                    if (!vfob_split_extended && vfo_sinc && chkEnableSubRX.Checked &&
                                        (freq >= min_freq || freq <= max_freq))
                                    {
                                        freq = Math.Round(vfoAFreq, 6);
                                        freq += mult * numberToMove;
                                        if (freq > max_freq)
                                            freq = max_freq;
                                        else if (freq < min_freq)
                                            freq = min_freq;

                                        vfoa_lock = true;
                                        VFOAFreq = freq;
                                        UpdateVFOAFreq(freq);
                                        vfoa_lock = false;
                                        Display_GDI.VFOA = (long)(freq * 1e6);
#if(DirectX)
                                        Display_DirectX.VFOA = (long)(freq * 1e6);
#endif
                                    }
                                    else if (vfob_split_extended && vfo_sinc && !chkEnableSubRX.Checked)
                                    {
                                        freq = Math.Round(vfoAFreq, 6);
                                        freq += mult * numberToMove;

                                        if (freq > max_freq)
                                            freq = max_freq;
                                        else if (freq < min_freq)
                                            freq = min_freq;

                                        vfoa_lock = true;
                                        VFOAFreq = freq;
                                        UpdateVFOAFreq(freq);
                                        vfoa_lock = false;
                                        Display_GDI.VFOA = (long)(freq * 1e6);
#if(DirectX)
                                        Display_DirectX.VFOA = (long)(freq * 1e6);
#endif
                                    }
                                }
                                return;
                            }
                        }
                    }

                    left = grpVFOBetween.Left + lblMemoryNumber.Left;
                    right = left + lblMemoryNumber.Width;
                    top = grpVFOBetween.Top + lblMemoryNumber.Top;
                    bottom = top + lblMemoryNumber.Height;
                    if (e.X > left && e.X < right &&		// Update memory number
                        e.Y > top && e.Y < bottom)
                    {
                        if (numberToMove > 0)
                        {
                            if (MemoryNumber < 99)
                                MemoryNumber++;
                            else if (MemoryNumber == 99)
                                MemoryNumber = 1;
                        }
                        else if (numberToMove < 0)
                        {
                            if (MemoryNumber > 1)
                                MemoryNumber--;
                            else if (MemoryNumber == 1)
                                MemoryNumber = 99;
                        }

                        txtMemory_fill();
                        return;
                    }

                    if (grpModeSpecificFM.Visible && (current_dsp_mode == DSPMode.FMN ||
                        current_dsp_mode == DSPMode.WFM))
                    {
                        left = grpModeSpecificFM.Left + lblFMMemory.Left;
                        right = left + lblFMMemory.Width;
                        top = grpModeSpecificFM.Top + lblFMMemory.Top;
                        bottom = top + lblFMMemory.Height;

                        if (e.X > left && e.X < right &&		// Update FM memory number
                            e.Y > top && e.Y < bottom)
                        {
                            if (numberToMove > 0)
                            {
                                if (FMmemoryNumber < 99)
                                    FMmemoryNumber++;
                                else if (FMmemoryNumber == 99)
                                    FMmemoryNumber = 1;
                            }
                            else if (numberToMove < 0)
                            {
                                if (FMmemoryNumber > 1)
                                    FMmemoryNumber--;
                                else if (FMmemoryNumber == 1)
                                    FMmemoryNumber = 99;
                            }
                            
                            txtFMmemory_fill();
                            return;
                        }
                    }

                    left = grpSoundControls.Left + lblAFValue.Left;
                    right = left + lblAFValue.Width;
                    top = grpSoundControls.Top + lblAFValue.Top;
                    bottom = top + lblAFValue.Height;
                    if (e.X > left && e.X < right &&		// Update AF value number
                        e.Y > top && e.Y < bottom)
                    {
                        if (numberToMove > 0)
                        {
                            ptbAF.Value++;
                            udAF1.Value = ptbAF.Value;
                            AF_ValueChanged();
                        }
                        else
                        {
                            ptbAF.Value--;
                            udAF1.Value = ptbAF.Value;
                            AF_ValueChanged();
                        }

                        return;
                    }

                    left = grpSoundControls.Left + lblRFValue.Left;
                    right = left + lblRFValue.Width;
                    top = grpSoundControls.Top + lblRFValue.Top;
                    bottom = top + lblRFValue.Height;
                    if (e.X > left && e.X < right &&		// Update RF value number
                        e.Y > top && e.Y < bottom)
                    {
                        if (numberToMove > 0)
                        {
                            ptbRF.Value++;
                            udRF1.Value = ptbRF.Value;
                            RF_ValueChanged();
                        }
                        else
                        {
                            ptbRF.Value--;
                            udRF1.Value = ptbRF.Value;
                            RF_ValueChanged();
                        }

                        return;
                    }

                    left = grpSoundControls.Left + lblPWRValue.Left;
                    right = left + lblPWRValue.Width;
                    top = grpSoundControls.Top + lblPWRValue.Top;
                    bottom = top + lblPWRValue.Height;
                    if (e.X > left && e.X < right &&		// Update PWR value number
                        e.Y > top && e.Y < bottom)
                    {
                        if (numberToMove > 0)
                        {
                            ptbPWR.Value++;
                            udPWR1.Value = ptbPWR.Value;
                            PWR_ValueChanged();
                        }
                        else
                        {
                            ptbPWR.Value--;
                            udPWR1.Value = ptbPWR.Value;
                            PWR_ValueChanged();
                        }

                        return;
                    }

                    left = grpLOSC.Left + txtLOSCFreq.Left;
                    right = left + txtLOSCFreq.Width;
                    top = grpLOSC.Top + txtLOSCFreq.Top;
                    bottom = top + txtLOSCFreq.Height;
                    if (e.X > left && e.X < right &&		// Update LOSC
                        e.Y > top && e.Y < bottom)
                    {
                        losc_change = true;

                        if (PowerOn)
                        {
                            double freq = LOSCFreq;
                            double freq_vfoB = VFOBFreq;
                            double mult = 1000.0;
                            if (losc_hover_digit < 0)
                            {
                                int x = right + 2 - (losc_pixel_offset - 5);
                                while (x < e.X && mult > 0.0000011)
                                {
                                    mult /= 10;
                                    x += losc_char_width;
                                    if (mult == 1.0)
                                        x += losc_decimal_space;
                                    else x += losc_char_space;
                                }
                            }
                            else
                            {
                                mult = Math.Pow(10, -losc_hover_digit) * 1000.0;
                            }

                            if (mult <= 1.0)
                            {
                                freq += mult * numberToMove;
                                freq = Math.Round(freq, 6);

                                if (!(freq < 0.1))
                                {
                                    if (!vfo_lock)
                                    {
                                        freq = Math.Round(freq, 6);
                                        if (!vfo_lock)
                                        {
                                            vfoa_lock = true;
                                            LOSCFreq = freq;
                                            UpdateLOSCFreq(freq.ToString("f6"));
                                            vfoa_lock = false;
                                            Display_GDI.LOSC = (long)(freq * 1e6);
#if(DirectX)
                                            Display_DirectX.LOSC = (long)(freq * 1e6);
#endif
                                        }

                                        losc_change = false;
                                        vfoa_lock = true;
                                        VFOAFreq = vfoAFreq;
                                        vfoa_lock = false;
                                        if (vfoAFreq != (double)saved_vfoa_freq)
                                            memory = false;
                                    }
                                }
                            }
                        }
                        return;
                    }

                    else
                    {
                        memory = false;
                        double freqA = 0.0f;
                        double freqB = 0.0f;

                        freqA = vfoAFreq; // double.Parse(txtVFOAnew.Text);
                        freqB = vfoBFreq; // double.Parse(txtVFOBnew.Text);

                        int tmp_numberToMove = numberToMove;

                        MaxFreq = LOSCFreq + DttSP.SampleRate / 2 * 1e-6;
                        MinFreq = LOSCFreq - DttSP.SampleRate / 2 * 1e-6;

                        double multA = wheel_tune_list[wheel_tune_index];
                        double multB = wheel_tune_list[wheel_tune_index_subRX];
                        if (shift_down && multA >= 0.000009) multA /= 10;
                        if (shift_down && multB >= 0.000009) multB /= 10;

                        if (current_click_tune_mode == ClickTuneMode.Off ||
                            current_click_tune_mode == ClickTuneMode.VFOA ||
                             vfo_sinc)
                        {
                            if (multA == 0.009)
                            {
                                freqA = freqA + numberToMove * multA;
                            }
                            else
                            {
                                if (numberToMove > 0)
                                {
                                    double tempA = Math.Round(freqA, 6);
                                    freqA = Math.Floor(freqA / multA);
                                    if ((double)Math.Round(freqA * multA, 6) == tempA) freqA -= 1.0;
                                    freqA = (double)Math.Round(((freqA + numberToMove) * multA), 6);
                                    if ((freqA == tempA) && numberToMove == 1)
                                        freqA += numberToMove * multA;
                                }
                                else
                                {
                                    double freq = Double.Parse(txtVFOAFreq.Text);
                                    double mult = wheel_tune_list[wheel_tune_index];
                                    if (shift_down && mult >= 0.000009) mult /= 10;

                                    double temp = freq;
                                    numberToMove += 1;
                                    freq = Math.Floor(freq / mult);
                                    if ((double)Math.Round(freq * mult, 6) == temp) freq -= 1.0;
                                    freqA = (freq + numberToMove) * mult;
                                }

                                numberToMove = tmp_numberToMove;

                                if (vfo_sinc)
                                {
                                    if (numberToMove > 0)
                                    {
                                        double tempB = freqB;
                                        freqB = Math.Floor(freqB / multA);
                                        if ((double)Math.Round(freqB * multA, 6) == tempB) freqB -= 1.0;
                                        freqB = (freqB + tmp_numberToMove) * multA;
                                        if ((freqB == tempB) && numberToMove == 1)
                                            freqB += numberToMove * multA;
                                    }
                                    else
                                    {
                                        double tempB = freqB;
                                        if (numberToMove < 0) tmp_numberToMove -= 1;
                                        freqB = Math.Floor((freqB / multA) + 1.0);
                                        if ((double)Math.Round(freqB * multA, 6) == tempB) freqB += 1.0;
                                        freqB = (freqB + tmp_numberToMove) * multA;
                                    }
                                }
                            }

                            if (freqA > MaxFreq && !continuous_tuning)
                                freqA = max_freq;
                            else if (freqA < MinFreq && !continuous_tuning)
                                freqA = min_freq;

                            if (!vfo_lock)
                            {
                                vfoa_lock = true;
                                VFOAFreq = freqA;
                                UpdateVFOAFreq(freqA);
                                vfoa_lock = false;
                            }
                            if (!vfob_split_extended && vfo_sinc && (chkEnableSubRX.Checked || chkVFOSplit.Checked))
                            {
                                if (freqB > MaxFreq)
                                    freqB = max_freq;
                                else if (freqB < MinFreq)
                                    freqB = min_freq;

                                vfob_lock = true;
                                VFOBFreq = freqB;
                                UpdateVFOBFreq(freqB);
                                vfob_lock = false;
                            }
                            else if (vfob_split_extended && vfo_sinc)
                            {
                                vfob_lock = true;
                                VFOBFreq = freqB;
                                UpdateVFOBFreq(freqB);
                                vfob_lock = false;
                            }
                        }
                        else if (current_click_tune_mode == ClickTuneMode.VFOB)
                        {
                            if (multB == 0.009)
                            {
                                freqB = freqB + numberToMove * multB;
                            }
                            else
                            {
                                if (numberToMove > 0)
                                {
                                    double tempB = freqB;
                                    freqB = Math.Floor(freqB / multB);
                                    if ((double)Math.Round(freqB * multB, 6) == tempB) freqB -= 1.0;
                                    freqB = (double)Math.Round(((freqB + numberToMove) * multB), 6);
                                    if ((freqB == tempB) && numberToMove == 1)
                                        freqB += numberToMove * multB;
                                }
                                else
                                {
                                    double tempB = freqB;
                                    if (numberToMove < 0) numberToMove -= 1;
                                    freqB = Math.Floor((freqB / multB) + 1.0);
                                    if ((double)Math.Round(freqB * multB, 6) == tempB) freqB += 1.0;
                                    freqB = (freqB + numberToMove) * multB;
                                }
                            }

                            if (freqB > MaxFreq)
                                freqB = max_freq;
                            else if (freqB < MinFreq)
                                freqB = min_freq;

                            if (!vfo_lock)
                            {
                                vfob_lock = true;
                                VFOBFreq = freqB;
                                UpdateVFOBFreq(freqB);
                                vfob_lock = false;
                            }
                        }

                        MaxFreq = Math.Round(LOSCFreq + DttSP.SampleRate / 2 * 1e-6, 6);
                        MinFreq = Math.Round(LOSCFreq - DttSP.SampleRate / 2 * 1e-6, 6);
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        public void txtVFOAFreq_LostFocus(object sender, System.EventArgs e) // changes yt7pwr
        {
            try
            {
                if (txtVFOAFreq.Text == "." || txtVFOAFreq.Text == "")
                {
                    VFOAFreq = saved_vfoa_freq;
                }

                double tmp_vfoA = Double.Parse(txtVFOAFreq.Text);
                if (tmp_vfoA > 0.01 && tmp_vfoA < 500000.0)
                {
                    if (tmp_vfoA >= MinFreq && tmp_vfoA <= MaxFreq)
                        VFOAFreq = tmp_vfoA;
                    else
                        VFOAFreq = saved_vfoa_freq;
                }
                else
                    VFOAFreq = saved_vfoa_freq;
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private void txtVFOAFreq_KeyPress(object sender, System.Windows.Forms.KeyPressEventArgs e)
        {
            string separator = System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator;
            int KeyCode = (int)e.KeyChar;
            if ((KeyCode < 48 || KeyCode > 57) &&			// numeric keys
                KeyCode != 8 &&								// backspace
                !e.KeyChar.ToString().Equals(separator) &&	// decimal
                KeyCode != 27)								// escape
            {
                e.Handled = true;
            }
            else
            {
                if (e.KeyChar.ToString().Equals(separator))
                {
                    e.Handled = (((TextBoxTS)sender).Text.IndexOf(separator) >= 0);
                }
                else if (KeyCode == 27)
                {
                    VFOAFreq = saved_vfoa_freq;
                    btnHidden.Focus();
                }
            }
            if (e.KeyChar == (char)Keys.Enter)
            {
                txtVFOAFreq_LostFocus(txtVFOAFreq, new System.EventArgs());
                btnHidden.Focus();
            }
        }

        private void txtVFOAFreq_MouseMove(object sender, System.Windows.Forms.MouseEventArgs e)
        {
            if (this.ContainsFocus)
            {
                int old_digit = vfoA_hover_digit;
                int digit_index = 0;
                GetVFOCharWidth(1);

                int x = txtVFOAFreq.Width - (vfoA_pixel_offset - 5);
                while (x < e.X)
                {
                    digit_index++;

                    if (small_lsd && txtVFOALSD.Visible)
                    {
                        if (digit_index < 6)
                            x += (vfoA_char_width + vfoA_char_space);
                        else
                            x += (vfoA_small_char_width + vfoA_small_char_space);

                        if (digit_index == 3)
                            x += (vfoA_decimal_space - vfoA_char_space);
                        if (digit_index == 6)
                            x += vfoA_small_char_width;
                    }
                    else
                    {
                        x += vfoA_char_width;
                        if (digit_index == 3)
                            x += vfoA_decimal_space;
                        else
                            x += vfoA_char_space;
                    }
                }

                if (digit_index < 3) digit_index = -1;
                if (digit_index > 9) digit_index = 9;
                vfoA_hover_digit = digit_index;
                if (vfoA_hover_digit != old_digit)
                    panelVFOAHover.Invalidate();
            }
        }

        private void txtVFOAFreq_MouseLeave(object sender, System.EventArgs e)
        {
            vfoA_hover_digit = -1;
            panelVFOAHover.Invalidate();
        }

        // txtVFOBFreq
        private void txtVFOBFreq_LostFocus(object sender, System.EventArgs e)  // changes yt7pwr
        {
            try
            {
                if (txtVFOBFreq.Text == "." || txtVFOBFreq.Text == "")
                {
                    VFOBFreq = saved_vfob_freq;
                }

                double vfoB = Double.Parse(txtVFOBFreq.Text);

                if (vfoB > MinFreq && vfoB < MaxFreq)
                    VFOBFreq = vfoB;
                else
                    VFOBFreq = saved_vfob_freq;
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private void txtVFOBFreq_KeyPress(object sender, KeyPressEventArgs e)
        {
            string separator = System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator;
            int KeyCode = (int)e.KeyChar;
            if ((KeyCode < 48 || KeyCode > 57) &&			// numeric keys
                KeyCode != 8 &&								// backspace
                !e.KeyChar.ToString().Equals(separator) &&	// decimal
                KeyCode != 27)								// escape
            {
                e.Handled = true;
            }
            else
            {
                if (e.KeyChar.ToString().Equals(separator))
                {
                    e.Handled = (((TextBoxTS)sender).Text.IndexOf(separator) >= 0);
                }
                else if (KeyCode == 27)
                {
                    VFOBFreq = saved_vfob_freq;
                    btnHidden.Focus();
                }
            }
            if (e.KeyChar == (char)Keys.Enter)
            {
                txtVFOBFreq_LostFocus(txtVFOBFreq, new System.EventArgs());
                btnHidden.Focus();
            }
        }

        private void txtVFOBFreq_MouseMove(object sender, System.Windows.Forms.MouseEventArgs e)
        {
            if (this.ContainsFocus)
            {
                int old_digit = vfoB_hover_digit;
                int digit_index = 0;
                GetVFOCharWidth(2);

                int x = txtVFOBFreq.Width - (vfoB_pixel_offset - 5);
                while (x < e.X)
                {
                    digit_index++;

                    if (small_lsd && txtVFOBLSD.Visible)
                    {
                        if (digit_index < 6)
                            x += (vfoB_char_width + vfoB_char_space);
                        else
                            x += (vfoB_small_char_width + vfoB_small_char_space);

                        if (digit_index == 3)
                            x += (vfoB_decimal_space - vfoB_char_space);
                        if (digit_index == 6)
                            x += vfoB_small_char_width;
                    }
                    else
                    {
                        x += vfoB_char_width;
                        if (digit_index == 3)
                            x += vfoB_decimal_space;
                        else
                            x += vfoB_char_space;
                    }
                }

                if (digit_index < 3) digit_index = -1;
                if (digit_index > 9) digit_index = 9;
                vfoB_hover_digit = digit_index;
                if (vfoB_hover_digit != old_digit)
                    panelVFOBHover.Invalidate();
            }
        }

        private void txtVFOBFreq_MouseLeave(object sender, System.EventArgs e)
        {
            vfoB_hover_digit = -1;
            panelVFOBHover.Invalidate();
        }

        private void panelVFOAHover_MouseMove(object sender, System.Windows.Forms.MouseEventArgs e)
        {
            Control c1 = (Control)sender;
            Control c2 = txtVFOAFreq;
            int client_width = (c1.Size.Width - c1.ClientSize.Width) + (c2.Size.Width - c2.ClientSize.Width);
            int client_height = (c1.Size.Height - c1.ClientSize.Height) + (c2.Size.Height - c2.ClientSize.Height);
            int x_offset = c1.Left - c2.Left - client_width / 2;
            int y_offset = c1.Top - c2.Top - client_height / 2;
            txtVFOAFreq_MouseMove(sender, new MouseEventArgs(e.Button, e.Clicks, e.X + x_offset, e.Y + y_offset, e.Delta));
        }

        private void panelVFOBHover_MouseMove(object sender, System.Windows.Forms.MouseEventArgs e)
        {
            Control c1 = (Control)sender;
            Control c2 = txtVFOBFreq;
            int client_width = (c1.Size.Width - c1.ClientSize.Width) + (c2.Size.Width - c2.ClientSize.Width);
            int client_height = (c1.Size.Height - c1.ClientSize.Height) + (c2.Size.Height - c2.ClientSize.Height);
            int x_offset = c1.Left - c2.Left - client_width / 2;
            int y_offset = c1.Top - c2.Top - client_height / 2;
            txtVFOBFreq_MouseMove(sender, new MouseEventArgs(e.Button, e.Clicks, e.X + x_offset, e.Y + y_offset, e.Delta));
        }

        private void txtVFOALSD_MouseDown(object sender, System.Windows.Forms.MouseEventArgs e)
        {
            txtVFOAMSD.Visible = false;
            txtVFOALSD.Visible = false;
            txtVFOAFreq.Focus();
            txtVFOAFreq.SelectAll();
        }

        private void txtVFOALSD_MouseMove(object sender, System.Windows.Forms.MouseEventArgs e)
        {
            Control c1 = (Control)sender;
            Control c2 = txtVFOAFreq;
            int client_width = (c1.Size.Width - c1.ClientSize.Width) + (c2.Size.Width - c2.ClientSize.Width);
            int client_height = (c1.Size.Height - c1.ClientSize.Height) + (c2.Size.Height - c2.ClientSize.Height);
            int x_offset = c1.Left - c2.Left - client_width / 2;
            int y_offset = c1.Top - c2.Top - client_height / 2;
            txtVFOAFreq_MouseMove(sender, new MouseEventArgs(e.Button, e.Clicks, e.X + x_offset, e.Y + y_offset, e.Delta));
        }

        private void txtVFOAMSD_MouseDown(object sender, System.Windows.Forms.MouseEventArgs e)
        {
            txtVFOAMSD.Visible = false;
            txtVFOALSD.Visible = false;
            txtVFOAFreq.Focus();
            txtVFOAFreq.SelectAll();
        }

        private void txtVFOAMSD_MouseMove(object sender, System.Windows.Forms.MouseEventArgs e)
        {
            txtVFOAFreq_MouseMove(txtVFOAMSD,
                new MouseEventArgs(e.Button, e.Clicks, e.X, e.Y, e.Delta));
        }


        private void txtVFOAMSD_MouseLeave(object sender, System.EventArgs e)
        {
            txtVFOAFreq_MouseLeave(txtVFOAMSD, e);
        }

        private void txtVFOBMSD_MouseDown(object sender, System.Windows.Forms.MouseEventArgs e)
        {
            txtVFOBMSD.Visible = false;
            txtVFOBLSD.Visible = false;
            txtVFOBFreq.Focus();
            txtVFOBFreq.SelectAll();
        }

        private void txtVFOBMSD_MouseLeave(object sender, System.EventArgs e)
        {
            txtVFOBFreq_MouseLeave(txtVFOBMSD, e);
        }

        private void txtVFOBMSD_MouseMove(object sender, System.Windows.Forms.MouseEventArgs e)
        {
            txtVFOBFreq_MouseMove(txtVFOBMSD,
                new MouseEventArgs(e.Button, e.Clicks, e.X, e.Y, e.Delta));
        }

        private void txtVFOBLSD_MouseDown(object sender, System.Windows.Forms.MouseEventArgs e)
        {
            txtVFOBMSD.Visible = false;
            txtVFOBLSD.Visible = false;
            txtVFOBFreq.Focus();
            txtVFOBFreq.SelectAll();
        }

        private void txtVFOBLSD_MouseMove(object sender, System.Windows.Forms.MouseEventArgs e)
        {
            Control c1 = (Control)sender;
            Control c2 = txtVFOBFreq;
            int client_width = (c1.Size.Width - c1.ClientSize.Width) + (c2.Size.Width - c2.ClientSize.Width);
            int client_height = (c1.Size.Height - c1.ClientSize.Height) + (c2.Size.Height - c2.ClientSize.Height);
            int x_offset = c1.Left - c2.Left - client_width / 2;
            int y_offset = c1.Top - c2.Top - client_height / 2;
            txtVFOBFreq_MouseMove(sender, new MouseEventArgs(e.Button, e.Clicks, e.X + x_offset, e.Y + y_offset, e.Delta));
        }

        #endregion

        #region Display Events

        private bool vfoa_notch_low_drag = false;
        private bool vfoa_notch_high_drag = false;
        private bool vfoa_whole_notch_drag = false;
        private bool vfoa_low_filter_drag = false;
        private bool vfoa_high_filter_drag = false;
        private bool vfoa_whole_filter_drag = false;
        private bool vfob_low_filter_drag = false;
        private bool vfob_high_filter_drag = false;
        private bool vfob_whole_filter_drag = false;
        private int vfoa_whole_filter_start_x = 0;
        private int vfoa_whole_notch_start_x = 0;
        private int vfoa_whole_filter_start_low = 0;
        private int vfoa_whole_filter_start_high = 0;
        private int vfob_whole_filter_start_x = 0;
        private int vfob_whole_filter_start_low = 0;
        private int vfob_whole_filter_start_high = 0;
        private bool spectrum_drag = false;
        private bool spectrum_drag_start = false;
        public bool spectrum_drag_enabled = false;
        private int spectrum_drag_last_x = 0;
        private int vfob_drag_last_x = 0;
        private int vfoA_drag_last_x = 0;
        private double vfob_drag_start_freq = 0.0;
        private double vfoA_drag_start_freq = 0.0;
        private bool vfob_drag = false;
        private bool vfoA_drag = false;
        private bool vfoA_notch_drag = false;
        public bool allow_vfo_drag = false;

        private void picDisplay_MouseMove(object sender, System.Windows.Forms.MouseEventArgs e) // changes yt7pwr
        {
            if (!ConsoleClosing)
            {
                try
                {
                    if (SetupForm.FastFocus)
                        picDisplay.Focus();
                    int vfoa_x = 0;
                    int vfoa_low_x = 0;
                    int vfoa_high_x = 0;
                    int vfob_x = 0;
                    int vfob_low_x = 0;
                    int vfob_high_x = 0;
                    int notch_low = 0;
                    int notch_high = 0;

                    if (!chkMOX.Checked)
                    {
                        switch (current_dsp_mode)
                        {
                            case (DSPMode.CWU):
                            case (DSPMode.CWL):
                                {
                                    vfoa_x = HzToPixel((float)((vfoAFreq - loscFreq) * 1e6));
                                    vfoa_low_x = vfoa_x - (HzToPixel((DttSP.RXFilterHighCut - DttSP.RXFilterLowCut) / 2) - HzToPixel(0.0f));
                                    vfoa_high_x = vfoa_x + (HzToPixel((DttSP.RXFilterHighCut - DttSP.RXFilterLowCut) / 2) - HzToPixel(0.0f));
                                }
                                break;
                            default:
                                {
                                    vfoa_x = HzToPixel((float)((vfoAFreq - loscFreq) * 1e6));
                                    vfoa_low_x = vfoa_x + (HzToPixel(DttSP.RXFilterLowCut) - HzToPixel(0.0f));
                                    vfoa_high_x = vfoa_x + (HzToPixel(DttSP.RXFilterHighCut) - HzToPixel(0.0f));

                                    if (DttSP.RXFilterHighCut < 0 && DttSP.RXFilterLowCut < 0)
                                    {
                                        notch_high = vfoa_x - HzToPixel(notch_high_value) + HzToPixel(0.0f); ;
                                        notch_low = vfoa_x - HzToPixel(notch_low_value) + HzToPixel(0.0f);
                                    }
                                    else
                                    {
                                        notch_low = vfoa_x + HzToPixel(notch_low_value) - HzToPixel(0.0f);
                                        notch_high = vfoa_x + HzToPixel(notch_high_value) - HzToPixel(0.0f);
                                    }
                                }
                                break;
                        }

                        switch (current_dsp_mode_subRX)
                        {
                            case (DSPMode.CWU):
                            case (DSPMode.CWL):
                                {
                                    vfob_x = HzToPixel((float)((vfoAFreq - loscFreq) * 1e6));
                                    vfob_low_x = vfob_x - (HzToPixel((DttSP.RXFilterHighCutSubRX - DttSP.RXFilterLowCutSubRX) / 2) - HzToPixel(0.0f));
                                    vfob_high_x = vfob_x + (HzToPixel((DttSP.RXFilterHighCutSubRX - DttSP.RXFilterLowCutSubRX) / 2) - HzToPixel(0.0f));
                                }
                                break;
                            default:
                                {
                                    vfob_x = HzToPixel((float)((vfoBFreq - loscFreq) * 1e6));
                                    vfob_low_x = vfob_x + (HzToPixel(DttSP.RXFilterLowCutSubRX) - HzToPixel(0.0f));
                                    vfob_high_x = vfob_x + (HzToPixel(DttSP.RXFilterHighCutSubRX) - HzToPixel(0.0f));
                                }
                                break;
                        }
                    }
                    else
                    {
                        vfoa_low_x = HzToPixel(DttSP.TXFilterLowCut);
                        vfoa_high_x = HzToPixel(DttSP.TXFilterHighCut);
                    }

                    switch (current_display_mode)
                    {
                        case DisplayMode.WATERFALL:
                            DisplayCursorX = e.X;
                            DisplayCursorY = e.Y;
                            float x = PixelToHz(e.X);
                            float y = PixelToDb(e.Y);
                            double freq = loscFreq + (double)x * 0.0000010;
                            txtDisplayCursorOffset.Text = x.ToString("f1") + "Hz";
                            txtDisplayCursorPower.Text = y.ToString("f1") + "dBm";

                            string temp_text = freq.ToString("f6") + " MHz";
                            int jper = temp_text.IndexOf(separator) + 4;
                            txtDisplayCursorFreq.Text = String.Copy(temp_text.Insert(jper, " "));
                            break;
                        case DisplayMode.PANAFALL:
                        case DisplayMode.PANAFALL_INV:
                        case DisplayMode.PANADAPTER:
                        case DisplayMode.HISTOGRAM:
                        case DisplayMode.PANASCOPE:
                            DisplayCursorX = e.X;
                            DisplayCursorY = e.Y;
                            x = PixelToHz(e.X);
                            y = PixelToDb(e.Y);
                            freq = loscFreq + (double)x * 0.0000010;
                            txtDisplayCursorOffset.Text = x.ToString("f1") + "Hz";
                            txtDisplayCursorPower.Text = y.ToString("f1") + "dBm";

                            temp_text = freq.ToString("f6") + " MHz";
                            jper = temp_text.IndexOf(separator) + 4;
                            txtDisplayCursorFreq.Text = String.Copy(temp_text.Insert(jper, " "));

                            if (current_click_tune_mode == ClickTuneMode.Off)
                            {
                                if (Cursor != Cursors.Hand)
                                {
                                    if ((DttSP.RXFilterLowCut < 0 && DttSP.RXFilterHighCut < 0) &&
                                        (Math.Abs(e.X - notch_high) < 3 || Math.Abs(e.X - notch_low) < 3) && filter_mode == FilterMode.NOTCH)
                                    {
                                        Cursor = Cursors.SizeWE;
                                    }
                                    else if ((Math.Abs(e.X - notch_high) < 3 || Math.Abs(e.X - notch_low) < 3) && filter_mode == FilterMode.NOTCH)
                                    {
                                        Cursor = Cursors.SizeWE;
                                    }
                                    else if (((Math.Abs(e.X - vfoa_low_x) < 3 || Math.Abs(e.X - vfoa_high_x) < 3) ||
                                        (vfoa_high_filter_drag || vfoa_low_filter_drag)) &&
                                        (filter_mode == FilterMode.PASS_BAND || filter_mode == FilterMode.NOTCH))
                                    {
                                        Cursor = Cursors.SizeWE;
                                    }
                                    else if (chkEnableSubRX.Checked && (Math.Abs(e.X - vfob_low_x) < 3 || Math.Abs(e.X - vfob_high_x) < 3 ||
                                        vfob_high_filter_drag || vfob_low_filter_drag))
                                    {
                                        Cursor = Cursors.SizeWE;
                                    }
                                    else if (e.X > vfoa_low_x && e.X < vfoa_high_x)
                                    {
                                        Cursor = Cursors.NoMoveHoriz;
                                    }
                                    else if (chkEnableSubRX.Checked && (e.X > vfob_low_x && e.X < vfob_high_x))
                                    {
                                        Cursor = Cursors.NoMoveHoriz;
                                    }
                                    else
                                    {
                                        Cursor = Cursors.Cross;
                                    }
                                }

                                if (vfoa_notch_high_drag && filter_mode == FilterMode.NOTCH)
                                {
                                    if (!chkMOX.Checked)
                                    {
                                        {
                                            x = PixelToHz(e.X - vfoa_x);
                                            x -= PixelToHz(0.0F);
                                            if (DttSP.RXFilterHighCut < 0 && DttSP.RXFilterLowCut < 0)
                                            {
                                                if (x >= DttSP.RXFilterLowCut + 25 &&
                                                    x <= DttSP.RXFilterHighCut - 25)
                                                {
                                                    if (Math.Abs(x) - 50 >= notch_low_value)
                                                    {
                                                        NotchHigh = (int)Math.Abs(x);
                                                        ptbNotchWidth.Value = notch_high_value - notch_low_value;
                                                        ptbNotchShift.Value = -((notch_high_value - (notch_high_value - notch_low_value) / 2) -
                                                            (Math.Abs(DttSP.RXFilterLowCut) - Math.Abs(DttSP.RXFilterHighCut)) / 2);
                                                        FilterUpdate();
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                if (Math.Abs(x) >= DttSP.RXFilterLowCut + 25 &&
                                                    Math.Abs(x) <= DttSP.RXFilterHighCut - 25)
                                                {
                                                    if (Math.Abs(x) - 50 >= notch_low_value)
                                                    {
                                                        NotchHigh = (int)Math.Abs(x);
                                                        ptbNotchWidth.Value = notch_high_value - notch_low_value;
                                                        ptbNotchShift.Value = ((notch_high_value - (notch_high_value - notch_low_value) / 2) -
                                                            (DttSP.RXFilterHighCut - DttSP.RXFilterLowCut) / 2);
                                                        FilterUpdate();
                                                    }
                                                }
                                            }
                                        }
                                        break;
                                    }
                                }
                                else if (vfoa_notch_low_drag && filter_mode == FilterMode.NOTCH)
                                {
                                    if (!chkMOX.Checked)
                                    {
                                        {
                                            x = PixelToHz(e.X - vfoa_x);
                                            x -= PixelToHz(0.0F);

                                            if (DttSP.RXFilterLowCut < 0 && DttSP.RXFilterHighCut < 0)
                                            {
                                                if (x >= DttSP.RXFilterLowCut + 25 &&
                                                    x <= DttSP.RXFilterHighCut - 25)
                                                {
                                                    if (Math.Abs(x) + 50 <= notch_high_value)
                                                    {
                                                        NotchLow = (int)Math.Abs(x);
                                                        ptbNotchWidth.Value = notch_high_value - notch_low_value;
                                                        ptbNotchShift.Value = -((notch_high_value - (notch_high_value - notch_low_value) / 2) -
                                                            (Math.Abs(DttSP.RXFilterLowCut) - Math.Abs(DttSP.RXFilterHighCut)) / 2);
                                                        FilterUpdate();
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                if (Math.Abs(x) >= DttSP.RXFilterLowCut &&
                                                    Math.Abs(x) <= DttSP.RXFilterHighCut - 25)
                                                {
                                                    if (Math.Abs(x) + 50 <= notch_high_value)
                                                    {
                                                        NotchLow = (int)Math.Abs(x);
                                                        ptbNotchWidth.Value = notch_high_value - notch_low_value;
                                                        ptbNotchShift.Value = ((notch_high_value - (notch_high_value - notch_low_value) / 2) -
                                                            (DttSP.RXFilterHighCut - DttSP.RXFilterLowCut) / 2);
                                                        FilterUpdate();
                                                    }
                                                }
                                            }
                                        }
                                        break;
                                    }
                                }
                                else if (vfoa_whole_notch_drag && filter_mode == FilterMode.NOTCH)
                                {
                                    if (!chkMOX.Checked)
                                    {
                                        int diff = (int)(PixelToHz(e.X) - PixelToHz(vfoa_whole_notch_start_x));

                                        if (DttSP.RXFilterHighCut < 0 && DttSP.RXFilterLowCut < 0)
                                        {
                                            diff = -(int)(PixelToHz(e.X) - PixelToHz(vfoa_whole_notch_start_x));

                                            if (NotchLow + diff >= Math.Abs(DttSP.RXFilterHighCut - 25) &&
                                                NotchHigh + diff <= Math.Abs(DttSP.RXFilterLowCut + 25))
                                            {
                                                NotchHigh += diff;
                                                NotchLow += diff;
                                                vfoa_whole_notch_start_x = e.X;
                                                ptbNotchShift.Value = -((notch_high_value - (notch_high_value - notch_low_value) / 2) -
                                                    (Math.Abs(DttSP.RXFilterLowCut) - Math.Abs(DttSP.RXFilterHighCut)) / 2);
                                                FilterUpdate();
                                            }
                                        }
                                        else
                                        {
                                            if (NotchLow + diff >= DttSP.RXFilterLowCut + 25 &&
                                                NotchHigh + diff <= DttSP.RXFilterHighCut - 25)
                                            {
                                                NotchLow += diff;
                                                NotchHigh += diff;
                                                vfoa_whole_notch_start_x = e.X;
                                                ptbNotchShift.Value = ((notch_high_value - (notch_high_value - notch_low_value) / 2) -
                                                    (DttSP.RXFilterHighCut - DttSP.RXFilterLowCut) / 2);
                                                FilterUpdate();
                                            }
                                        }
                                        break;
                                    }
                                }
                                else if (vfoa_high_filter_drag)
                                {
                                    if (!chkMOX.Checked)
                                    {
                                        SelectVarFilter();
                                        int new_high = 0;
                                        switch (current_dsp_mode)
                                        {
                                            case (DSPMode.CWU):
                                            case (DSPMode.CWL):
                                                {
                                                    if (ptbDisplayZoom.Value == 4)
                                                    {
                                                        new_high = (int)(PixelToHz((e.X - vfoa_x) + picDisplay.Width / 2));
                                                        UpdateFilters(DttSP.RXFilterLowCut, new_high);
                                                    }
                                                    else
                                                    {
                                                        x = PixelToHz((e.X - vfoa_x));
                                                        x -= PixelToHz(0.0F);
                                                        x = x * 2;
                                                        UpdateFilters(DttSP.RXFilterLowCut, (int)x);
                                                    }
                                                }
                                                break;
                                            default:
                                                {
                                                    if (ptbDisplayZoom.Value == 4)
                                                    {
                                                        new_high = (int)(PixelToHz((e.X - vfoa_x) + picDisplay.Width / 2));
                                                        UpdateFilters(DttSP.RXFilterLowCut, new_high);
                                                    }
                                                    else
                                                    {
                                                        x = PixelToHz((e.X - vfoa_x));
                                                        x -= PixelToHz(0.0F);
                                                        UpdateFilters(DttSP.RXFilterLowCut, (int)x);
                                                    }
                                                }
                                                break;
                                        }
                                    }
                                    else
                                    {
                                        int new_high = (int)Math.Max(PixelToHz(e.X), DttSP.TXFilterLowCut + 10);
                                        switch (current_dsp_mode)
                                        {
                                            case DSPMode.LSB:
                                            case DSPMode.CWL:
                                            case DSPMode.DIGL:
                                                int new_low = -new_high;
                                                SetupForm.TXFilterLow = new_low;
                                                break;
                                            case DSPMode.USB:
                                            case DSPMode.CWU:
                                            case DSPMode.DIGU:
                                            case DSPMode.AM:
                                            case DSPMode.SAM:
                                            case DSPMode.FMN:
                                            case DSPMode.DSB:
                                                SetupForm.TXFilterHigh = new_high;
                                                break;
                                        }
                                    }
                                }
                                else if (vfob_high_filter_drag)
                                {
                                    if (!chkMOX.Checked)
                                    {
                                        SelectVarFilterSubRX();
                                        int new_high = 0;
                                        switch (current_dsp_mode_subRX)
                                        {
                                            case (DSPMode.CWU):
                                            case (DSPMode.CWL):
                                                {
                                                    if (ptbDisplayZoom.Value == 4)
                                                    {
                                                        new_high = (int)(PixelToHz((e.X - vfob_x) + picDisplay.Width / 2));
                                                        UpdateFiltersSubRX(DttSP.RXFilterLowCutSubRX, new_high);
                                                    }
                                                    else
                                                    {
                                                        x = PixelToHz((e.X - vfob_x));
                                                        x -= PixelToHz(0.0F);
                                                        x = x * 2;
                                                        UpdateFiltersSubRX(DttSP.RXFilterLowCutSubRX, (int)x);
                                                    }
                                                }
                                                break;
                                            default:
                                                {
                                                    if (ptbDisplayZoom.Value == 4)
                                                    {
                                                        new_high = (int)(PixelToHz((e.X - vfob_x) + picDisplay.Width / 2));
                                                        UpdateFiltersSubRX(DttSP.RXFilterLowCutSubRX, new_high);
                                                    }
                                                    else
                                                    {
                                                        x = PixelToHz((e.X - vfob_x));
                                                        x -= PixelToHz(0.0F);
                                                        UpdateFiltersSubRX(DttSP.RXFilterLowCutSubRX, (int)x);
                                                    }
                                                }
                                                break;
                                        }
                                    }
                                    else
                                    {
                                        if (chkVFOSplit.Checked)
                                        {
                                            int new_high = (int)Math.Max(PixelToHz(e.X), DttSP.TXFilterLowCut + 10);
                                            switch (current_dsp_mode_subRX)
                                            {
                                                case DSPMode.LSB:
                                                case DSPMode.CWL:
                                                case DSPMode.DIGL:
                                                    int new_low = -new_high;
                                                    SetupForm.TXFilterLow = new_low;
                                                    break;
                                                case DSPMode.USB:
                                                case DSPMode.CWU:
                                                case DSPMode.DIGU:
                                                case DSPMode.AM:
                                                case DSPMode.SAM:
                                                case DSPMode.FMN:
                                                case DSPMode.DSB:
                                                    SetupForm.TXFilterHigh = new_high;
                                                    break;
                                            }
                                        }
                                    }
                                }
                                else if (vfoa_low_filter_drag)
                                {
                                    if (!chkMOX.Checked)
                                    {
                                        SelectVarFilter();
                                        float zero = 0.0F;
                                        int new_low = 0;
                                        switch (current_dsp_mode)
                                        {
                                            case (DSPMode.CWU):
                                            case (DSPMode.CWL):
                                                {
                                                    if (ptbDisplayZoom.Value == 4)
                                                    {
                                                        new_low = (int)(PixelToHz((e.X - vfoa_x) + picDisplay.Width / 2));
                                                        UpdateFilters(new_low, DttSP.RXFilterHighCut);
                                                    }
                                                    else
                                                    {
                                                        x = PixelToHz((e.X - vfoa_x));
                                                        x -= PixelToHz(0.0F);
                                                        UpdateFilters((int)x, DttSP.RXFilterHighCut);
                                                    }
                                                }
                                                break;
                                            default:
                                                {
                                                    if (ptbDisplayZoom.Value == 4)
                                                    {
                                                        new_low = (int)(PixelToHz((e.X - vfoa_x) + picDisplay.Width / 2));
                                                        UpdateFilters(new_low, DttSP.RXFilterHighCut);
                                                    }
                                                    else
                                                    {
                                                        new_low = (int)(PixelToHz(e.X - vfoa_x) + DttSP.RXDisplayHigh / 2);
                                                        x = PixelToHz((e.X - vfoa_x));
                                                        x -= PixelToHz(zero);
                                                        UpdateFilters((int)x, DttSP.RXFilterHighCut);
                                                    }
                                                }
                                                break;
                                        }
                                    }
                                    else
                                    {
                                        int new_low = (int)(Math.Min(PixelToHz(e.X), DttSP.TXFilterHighCut - 10));
                                        switch (current_dsp_mode)
                                        {
                                            case DSPMode.LSB:
                                            case DSPMode.CWL:
                                            case DSPMode.DIGL:
                                            case DSPMode.AM:
                                            case DSPMode.SAM:
                                            case DSPMode.FMN:
                                            case DSPMode.DSB:
                                                int new_high = -new_low;
                                                SetupForm.TXFilterHigh = new_high;
                                                break;
                                            case DSPMode.USB:
                                            case DSPMode.CWU:
                                            case DSPMode.DIGU:
                                                SetupForm.TXFilterLow = new_low;
                                                break;
                                        }
                                    }
                                }
                                else if (vfob_low_filter_drag)
                                {
                                    if (!chkMOX.Checked)
                                    {
                                        SelectVarFilterSubRX();
                                        float zero = 0.0F;
                                        int new_low = 0;
                                        switch (current_dsp_mode_subRX)
                                        {
                                            case (DSPMode.CWU):
                                            case (DSPMode.CWL):
                                                {
                                                    if (ptbDisplayZoom.Value == 4)
                                                    {
                                                        new_low = (int)(PixelToHz((e.X - vfob_x) + picDisplay.Width / 2));
                                                        UpdateFiltersSubRX(new_low, DttSP.RXFilterHighCutSubRX);
                                                    }
                                                    else
                                                    {
                                                        x = PixelToHz((e.X - vfob_x));
                                                        x -= PixelToHz(0.0F);
                                                        UpdateFiltersSubRX((int)x, DttSP.RXFilterHighCutSubRX);
                                                    }
                                                }
                                                break;
                                            default:
                                                {
                                                    if (ptbDisplayZoom.Value == 4)
                                                    {
                                                        new_low = (int)(PixelToHz((e.X - vfob_x) + picDisplay.Width / 2));
                                                        UpdateFiltersSubRX(new_low, DttSP.RXFilterHighCutSubRX);
                                                    }
                                                    else
                                                    {
                                                        new_low = (int)(PixelToHz(e.X - vfob_x) + DttSP.RXDisplayHigh / 2);
                                                        x = PixelToHz((e.X - vfob_x));
                                                        x -= PixelToHz(zero);
                                                        UpdateFiltersSubRX((int)x, DttSP.RXFilterHighCutSubRX);
                                                    }
                                                }
                                                break;
                                        }
                                    }
                                    else
                                    {
                                        if (chkVFOSplit.Checked)
                                        {
                                            int new_low = (int)(Math.Min(PixelToHz(e.X), DttSP.TXFilterHighCut - 10));
                                            switch (current_dsp_mode_subRX)
                                            {
                                                case DSPMode.LSB:
                                                case DSPMode.CWL:
                                                case DSPMode.DIGL:
                                                case DSPMode.AM:
                                                case DSPMode.SAM:
                                                case DSPMode.FMN:
                                                case DSPMode.DSB:
                                                    int new_high = -new_low;
                                                    SetupForm.TXFilterHigh = new_high;
                                                    break;
                                                case DSPMode.USB:
                                                case DSPMode.CWU:
                                                case DSPMode.DIGU:
                                                    SetupForm.TXFilterLow = new_low;
                                                    break;
                                            }
                                        }
                                    }
                                }
                                else if (vfoa_whole_filter_drag)
                                {
                                    int diff = (int)(PixelToHz(e.X) - PixelToHz(vfoa_whole_filter_start_x));

                                    if (!chkMOX.Checked)
                                    {
                                        UpdateFilters(vfoa_whole_filter_start_low + diff, vfoa_whole_filter_start_high + diff);
                                    }
                                    else
                                    {
                                        switch (current_dsp_mode)
                                        {
                                            case DSPMode.LSB:
                                            case DSPMode.DIGL:
                                                SetupForm.TXFilterLow = vfoa_whole_filter_start_low - diff;
                                                SetupForm.TXFilterHigh = vfoa_whole_filter_start_high - diff;
                                                break;
                                            case DSPMode.USB:
                                            case DSPMode.DIGU:
                                                SetupForm.TXFilterLow = vfoa_whole_filter_start_low + diff;
                                                SetupForm.TXFilterHigh = vfoa_whole_filter_start_high + diff;
                                                break;
                                            case DSPMode.AM:
                                            case DSPMode.SAM:
                                            case DSPMode.FMN:
                                            case DSPMode.DSB:
                                                SetupForm.TXFilterHigh = vfoa_whole_filter_start_high + diff;
                                                break;
                                        }
                                    }
                                }
                                else if (vfob_whole_filter_drag)
                                {
                                    int diff = (int)(PixelToHz(e.X) - PixelToHz(vfob_whole_filter_start_x));

                                    if (!chkMOX.Checked)
                                    {
                                        UpdateFiltersSubRX(vfob_whole_filter_start_low + diff, vfob_whole_filter_start_high + diff);
                                    }
                                    else
                                    {
                                        if (chkVFOSplit.Checked)
                                        {
                                            switch (current_dsp_mode_subRX)
                                            {
                                                case DSPMode.LSB:
                                                case DSPMode.DIGL:
                                                    SetupForm.TXFilterLow = vfob_whole_filter_start_low - diff;
                                                    SetupForm.TXFilterHigh = vfob_whole_filter_start_high - diff;
                                                    break;
                                                case DSPMode.USB:
                                                case DSPMode.DIGU:
                                                    SetupForm.TXFilterLow = vfob_whole_filter_start_low + diff;
                                                    SetupForm.TXFilterHigh = vfob_whole_filter_start_high + diff;
                                                    break;
                                                case DSPMode.AM:
                                                case DSPMode.SAM:
                                                case DSPMode.FMN:
                                                case DSPMode.DSB:
                                                    SetupForm.TXFilterHigh = vfob_whole_filter_start_high + diff;
                                                    break;
                                            }
                                        }
                                    }
                                }
                                else if (vfoA_drag)
                                {
                                    memory = false;
                                    int diff = (int)(PixelToHz(e.X) - PixelToHz(vfoA_drag_last_x));
                                    VFOAFreq = vfoA_drag_start_freq + diff * 1e-6;
                                    double vfoAdiff = vfoAFreq - vfoA_drag_start_freq;

                                    if (vfo_sinc)
                                        VFOBFreq += vfoAdiff;

                                    vfoA_drag_start_freq = vfoAFreq;
                                    vfoA_drag_last_x = e.X;

                                }
                                else if (vfob_drag)
                                {
                                    int diff = (int)(PixelToHz(e.X) - PixelToHz(vfob_drag_last_x));
                                    VFOBFreq = vfob_drag_start_freq + diff * 1e-6;
                                    double vfoBdiff = vfoBFreq - vfob_drag_start_freq;

                                    if (vfo_sinc)
                                        VFOAFreq += vfoBdiff;

                                    vfob_drag_start_freq = vfoBFreq;
                                    vfob_drag_last_x = e.X;
                                }
                                else if (spectrum_drag && spectrum_drag_enabled)
                                {
                                    spectrum_drag_start = true;
                                    chkVFOLock.Checked = false;
                                    int diff = (int)(PixelToHz(e.X) - PixelToHz(spectrum_drag_last_x));
                                    LOSCFreq -= diff / 1e6;
                                    spectrum_drag_last_x = e.X;

                                    if (chkVFOsinc.Checked)
                                    {
                                        VFOAFreq = vfoAFreq;
                                        VFOBFreq = vfoBFreq;
                                    }
                                    else
                                    {
                                        VFOAFreq -= diff / 1e6;
                                        VFOBFreq -= diff / 1e6;
                                    }
                                }
                            }
                            break;
                        default:
                            txtDisplayCursorOffset.Text = "";
                            txtDisplayCursorPower.Text = "";
                            txtDisplayCursorFreq.Text = "";
                            break;
                    }

                    double zoom_factor = ptbDisplayZoom.Value / 16;
                    if (spectrum_drag && zoom_factor > 1)
                    {
                        if (!chkMOX.Checked)
                        {
                            memory = false;
                            float start_freq = PixelToHz(spectrum_drag_last_x);
                            float end_freq = PixelToHz(e.X);
                            spectrum_drag_last_x = e.X;
                            float delta = end_freq - start_freq;
                            VFOAFreq -= delta * 0.0000010;
                        }
                    }
                }
                catch (Exception)
                {

                }
            }
        }

        private void picDisplay_MouseLeave(object sender, System.EventArgs e)
        {
            if (!ConsoleClosing)
            {
                txtDisplayCursorOffset.Text = "";
                txtDisplayCursorPower.Text = "";
                txtDisplayCursorFreq.Text = "";
                DisplayCursorX = -1;
                DisplayCursorY = -1;
                Cursor = Cursors.Default;
            }
        }

        private void picDisplay_MouseDown(object sender, System.Windows.Forms.MouseEventArgs e) // changes yt7pwr
        {
            try
            {
                int filter_low, filter_high;
                int notch_low = 0;
                int notch_high = 0;

                if (current_display_mode == DisplayMode.PANADAPTER ||
                    current_display_mode == DisplayMode.PANAFALL ||
                    current_display_mode == DisplayMode.PANAFALL_INV ||
                    current_display_mode == DisplayMode.PANASCOPE)
                    picDisplay.Focus();

                filter_low = DttSP.TXFilterLowCut;
                filter_high = DttSP.TXFilterHighCut;

                if (e.Button == MouseButtons.Left && PowerOn)
                {
                    ptbDisplayPan.Value = 0;

                    if (current_click_tune_mode != ClickTuneMode.Off)
                    {
                        switch (Display_GDI.CurrentDisplayMode)
                        {
                            case DisplayMode.PANAFALL:
                            case DisplayMode.PANAFALL_INV:
                            case DisplayMode.WATERFALL:
                            case DisplayMode.PANADAPTER:
                            case DisplayMode.HISTOGRAM:
                            case DisplayMode.PANASCOPE:
                                float x = PixelToHz(e.X);
                                double freq = loscFreq + (double)x * 0.0000010;
                                MaxFreq = LOSCFreq + DttSP.SampleRate / 2 * 1e-6;
                                MinFreq = LOSCFreq - DttSP.SampleRate / 2 * 1e-6;

                                if (freq > MaxFreq)
                                    freq = MaxFreq;
                                if (freq < MinFreq)
                                    freq = MinFreq;

                                if (current_click_tune_mode == ClickTuneMode.VFOA)
                                {
                                    memory = false;
                                    vfoa_lock = true;
                                    VFOAFreq = Math.Round(freq, 6);
                                    vfoa_lock = false;
                                }
                                else
                                {
                                    vfob_lock = true;
                                    VFOBFreq = Math.Round(freq, 6);
                                    vfob_lock = false;
                                }
                                break;
                            default:
                                break;
                        }
                    }
                    else
                    {
                        if (Display_GDI.CurrentDisplayMode == DisplayMode.PANADAPTER ||
                            Display_GDI.CurrentDisplayMode == DisplayMode.PANAFALL ||
                            Display_GDI.CurrentDisplayMode == DisplayMode.PANAFALL_INV ||
                            Display_GDI.CurrentDisplayMode == DisplayMode.HISTOGRAM ||
                            Display_GDI.CurrentDisplayMode == DisplayMode.PANASCOPE
                            && current_dsp_mode != DSPMode.DRM)
                        {
                            int vfoA_x = 0;
                            int lowA_x = 0;
                            int highA_x = 0;
                            int vfoB_x = 0;
                            int lowB_x = 0;
                            int highB_x = 0;

                            if (!chkMOX.Checked)
                            {
                                switch (current_dsp_mode)
                                {
                                    case (DSPMode.CWL):
                                    case (DSPMode.CWU):
                                        {
                                            vfoA_x = HzToPixel((float)((vfoAFreq - loscFreq) * 1e6));
                                            lowA_x = vfoA_x - (HzToPixel((DttSP.RXFilterHighCut - DttSP.RXFilterLowCut) / 2) - HzToPixel(0.0f));
                                            highA_x = vfoA_x + (HzToPixel((DttSP.RXFilterHighCut - DttSP.RXFilterLowCut) / 2) - HzToPixel(0.0f));
                                        }
                                        break;
                                    default:
                                        {
                                            vfoA_x = HzToPixel((float)((VFOAFreq - LOSCFreq) * 1e6));
                                            lowA_x = vfoA_x + (HzToPixel(DttSP.RXFilterLowCut) - HzToPixel(0.0f));
                                            highA_x = vfoA_x + (HzToPixel(DttSP.RXFilterHighCut) - HzToPixel(0.0f));

                                            if (DttSP.RXFilterLowCut < 0 && DttSP.RXFilterHighCut < 0)
                                            {
                                                notch_low = vfoA_x - HzToPixel(notch_low_value) + HzToPixel(0.0f);
                                                notch_high = vfoA_x - HzToPixel(notch_high_value) + HzToPixel(0.0f);
                                            }
                                            else
                                            {
                                                notch_low = vfoA_x + HzToPixel(notch_low_value) - HzToPixel(0.0f); ;
                                                notch_high = vfoA_x + HzToPixel(notch_high_value) - HzToPixel(0.0f);
                                            }
                                        }
                                        break;
                                }
                                switch (current_dsp_mode_subRX)
                                {
                                    case (DSPMode.CWL):
                                    case (DSPMode.CWU):
                                        {
                                            vfoB_x = HzToPixel((float)((vfoBFreq - loscFreq) * 1e6));
                                            lowB_x = vfoB_x - (HzToPixel((DttSP.RXFilterHighCutSubRX - DttSP.RXFilterLowCutSubRX) / 2) - HzToPixel(0.0f));
                                            highB_x = vfoB_x + (HzToPixel((DttSP.RXFilterHighCutSubRX - DttSP.RXFilterLowCutSubRX) / 2) - HzToPixel(0.0f));
                                        }
                                        break;
                                    default:
                                        {
                                            vfoB_x = HzToPixel((float)((vfoBFreq - loscFreq) * 1e6));
                                            lowB_x = vfoB_x + (HzToPixel(DttSP.RXFilterLowCutSubRX) - HzToPixel(0.0f));
                                            highB_x = vfoB_x + (HzToPixel(DttSP.RXFilterHighCutSubRX) - HzToPixel(0.0f));
                                        }
                                        break;
                                }
                            }
                            else
                            {
                                lowA_x = HzToPixel(DttSP.TXFilterLowCut);
                                highA_x = HzToPixel(DttSP.TXFilterHighCut);
                                lowB_x = HzToPixel(DttSP.TXFilterLowCut);
                                highB_x = HzToPixel(DttSP.TXFilterHighCut);
                            }

                            int vfob_x = 0;
                            int vfob_low_x = 0;
                            int vfob_high_x = 0;

                            if (chkEnableSubRX.Checked && !chkMOX.Checked)
                            {
                                switch (current_dsp_mode_subRX)
                                {
                                    case (DSPMode.CWL):
                                    case (DSPMode.CWU):
                                        {
                                            vfob_x = HzToPixel((float)((vfoBFreq - loscFreq) * 1e6));
                                            vfob_low_x = vfob_x - (HzToPixel((DttSP.RXFilterHighCutSubRX - DttSP.RXFilterLowCutSubRX) / 2) - HzToPixel(0.0f));
                                            vfob_high_x = vfob_x + (HzToPixel((DttSP.RXFilterHighCutSubRX - DttSP.RXFilterLowCutSubRX) / 2) - HzToPixel(0.0f));
                                        }
                                        break;
                                    default:
                                        {
                                            vfob_x = HzToPixel((float)((vfoBFreq - loscFreq) * 1e6));
                                            vfob_low_x = vfob_x + (HzToPixel(DttSP.RXFilterLowCutSubRX) - HzToPixel(0.0f));
                                            vfob_high_x = vfob_x + (HzToPixel(DttSP.RXFilterHighCutSubRX) - HzToPixel(0.0f));
                                        }
                                        break;
                                }
                            }

                            if (filter_mode == FilterMode.NOTCH)
                            {
                                if (Math.Abs(e.X - lowA_x) < 3 && e.X < highA_x)                  // vfoA low
                                {
                                    vfoa_low_filter_drag = true;
                                    Cursor = Cursors.SizeWE;
                                }
                                else if (Math.Abs(e.X - highA_x) < 3)                             // vfoA high
                                {
                                    vfoa_high_filter_drag = true;
                                    Cursor = Cursors.SizeWE;
                                }
                                else if ((DttSP.RXFilterHighCut < 0 && DttSP.RXFilterLowCut < 0) &&
                                    Math.Abs(e.X - notch_low) < 3 && e.X > notch_high)            // notch low for LSB
                                {
                                    vfoa_notch_low_drag = true;
                                    Cursor = Cursors.SizeWE;
                                }
                                else if ((Math.Abs(e.X - notch_low) < 3 && e.X < notch_high))     // notch low for USB
                                {
                                    vfoa_notch_low_drag = true;
                                    Cursor = Cursors.SizeWE;
                                }
                                else if ((DttSP.RXFilterLowCut < 0 && DttSP.RXFilterHighCut < 0) &&
                                    (Math.Abs(e.X - notch_high) < 3) || (Math.Abs(e.X - notch_low) < 3))                         // notch high
                                {
                                    vfoa_notch_high_drag = true;
                                    Cursor = Cursors.SizeWE;
                                }
                                else if (Math.Abs(e.X - notch_high) < 3)                          // notch high
                                {
                                    vfoa_notch_high_drag = true;
                                    Cursor = Cursors.SizeWE;
                                }
                                else if (DttSP.RXFilterLowCut < 0 && DttSP.RXFilterHighCut < 0)   // all notch
                                {
                                    vfoa_whole_notch_drag = true;
                                    vfoa_whole_notch_start_x = e.X;
                                    Cursor = Cursors.SizeWE;
                                }
                                else if ((e.X > notch_low && e.X < notch_high))                   // all notch
                                {
                                    vfoa_whole_notch_drag = true;
                                    vfoa_whole_notch_start_x = e.X;
                                    Cursor = Cursors.SizeWE;
                                }
                                else if (e.X > lowA_x && e.X < highA_x)                            // vfoA
                                {
                                    if (!allow_vfo_drag)
                                    {
                                        vfoa_whole_filter_drag = true;
                                        vfoa_whole_filter_start_x = e.X;

                                        if (!chkMOX.Checked)
                                        {
                                            vfoa_whole_filter_start_low = (int)udFilterLow.Value;
                                            vfoa_whole_filter_start_high = (int)udFilterHigh.Value;
                                        }
                                        else
                                        {
                                            vfoa_whole_filter_start_low = SetupForm.TXFilterLow;
                                            vfoa_whole_filter_start_high = SetupForm.TXFilterHigh;
                                        }


                                        Cursor = Cursors.NoMoveHoriz;
                                    }
                                    else
                                    {
                                        vfoA_drag_last_x = e.X;
                                        vfoA_drag = true;
                                        vfoA_drag_start_freq = VFOAFreq;
                                        Cursor = Cursors.SizeWE;
                                    }
                                }
                                else
                                {
                                    spectrum_drag_last_x = e.X;
                                    spectrum_drag = true;
                                    Cursor = Cursors.Hand;
                                }
                            }
                            else if (chkEnableSubRX.Checked && Math.Abs(e.X - vfob_low_x) < 3 && e.X < vfob_high_x)  // vfoB low
                            {
                                vfob_low_filter_drag = true;
                                Cursor = Cursors.SizeWE;
                            }
                            else if (chkEnableSubRX.Checked && Math.Abs(e.X - vfob_high_x) < 3)                // vfoB high
                            {
                                vfob_high_filter_drag = true;
                                Cursor = Cursors.SizeWE;
                            }
                            else if (chkEnableSubRX.Checked && e.X > lowB_x && e.X < highB_x)                  // vfoB
                            {
                                if (!allow_vfo_drag)
                                {
                                    vfob_whole_filter_drag = true;
                                    vfob_whole_filter_start_x = e.X;
                                    if (!chkMOX.Checked)
                                    {
                                        vfob_whole_filter_start_low = (int)udSubRXFilterLow.Value;
                                        vfob_whole_filter_start_high = (int)udSubRXFilterHigh.Value;
                                    }
                                    else
                                    {
                                        if (chkVFOSplit.Checked)
                                        {
                                            vfob_whole_filter_start_low = SetupForm.TXFilterLow;
                                            vfob_whole_filter_start_high = SetupForm.TXFilterHigh;
                                        }
                                    }

                                    Cursor = Cursors.NoMoveHoriz;
                                }
                                else
                                {
                                    vfob_drag_last_x = e.X;
                                    vfob_drag = true;
                                    vfob_drag_start_freq = VFOBFreq;
                                    Cursor = Cursors.SizeWE;
                                }
                            }
                            else if (chkEnableSubRX.Checked && !chkMOX.Checked &&
                                (e.X > vfob_low_x - 3 && e.X < vfob_high_x + 3))
                            {
                                vfob_drag_last_x = e.X;
                                vfob_drag_start_freq = vfoBFreq;
                                vfob_drag = true;
                                Cursor = Cursors.SizeWE;
                            }
                            else if (Math.Abs(e.X - lowA_x) < 3 && e.X < highA_x)           // vfoA low
                            {
                                vfoa_low_filter_drag = true;
                                Cursor = Cursors.SizeWE;
                            }
                            else if (Math.Abs(e.X - highA_x) < 3)                        // vfoA high
                            {
                                vfoa_high_filter_drag = true;
                                Cursor = Cursors.SizeWE;
                            }
                            else if (e.X > lowA_x && e.X < highA_x)                // vfoA
                            {
                                if (!allow_vfo_drag)
                                {
                                    vfoa_whole_filter_drag = true;
                                    vfoa_whole_filter_start_x = e.X;

                                    if (!chkMOX.Checked)
                                    {
                                        vfoa_whole_filter_start_low = (int)udFilterLow.Value;
                                        vfoa_whole_filter_start_high = (int)udFilterHigh.Value;
                                    }
                                    else
                                    {
                                        vfoa_whole_filter_start_low = SetupForm.TXFilterLow;
                                        vfoa_whole_filter_start_high = SetupForm.TXFilterHigh;
                                    }

                                    Cursor = Cursors.NoMoveHoriz;
                                }
                                else
                                {
                                    vfoA_drag_last_x = e.X;
                                    vfoA_drag = true;
                                    vfoA_drag_start_freq = VFOAFreq;
                                    Cursor = Cursors.SizeWE;
                                }
                            }
                            else
                            {
                                spectrum_drag_last_x = e.X;
                                spectrum_drag = true;
                                Cursor = Cursors.Hand;
                            }
                        }
                        else
                        {
                            spectrum_drag_last_x = e.X;
                            spectrum_drag = true;
                            Cursor = Cursors.Hand;
                        }
                    }
                }
                else if (e.Button == MouseButtons.Right && PowerOn)
                {
                    switch (current_click_tune_mode)
                    {
                        case ClickTuneMode.Off:
                            CurrentClickTuneMode = ClickTuneMode.VFOA;
                            if (!minimal_screen)
                            {
                                grpMainRXFilter.BringToFront();
                                grpSubRXFilter.SendToBack();          // visible only MainRX settings
                                grpMainRXMode.Visible = true;
                                grpMainRXMode.BringToFront();
                                grpSubRXMode.Visible = false;
                                grpDSPMainRX.Visible = true;
                                grpDSPMainRX.BringToFront();
                                grpDSPSubRX.Visible = false;

                                switch (current_dsp_mode)
                                {
                                    case DSPMode.AM:
                                    case DSPMode.DSB:
                                    case DSPMode.LSB:
                                    case DSPMode.SAM:
                                    case DSPMode.SPEC:
                                    case DSPMode.USB:
                                        grpModeSpecificDigital.SendToBack();
                                        grpModeSpecificCW.SendToBack();
                                        grpModeSpecificPhone.BringToFront();
                                        grpModeSpecificFM.SendToBack();
                                        break;
                                    case DSPMode.CWL:
                                    case DSPMode.CWU:
                                        grpModeSpecificCW.BringToFront();
                                        grpModeSpecificDigital.SendToBack();
                                        grpModeSpecificPhone.SendToBack();
                                        grpModeSpecificFM.SendToBack();
                                        break;
                                    case DSPMode.DIGL:
                                    case DSPMode.DIGU:
                                    case DSPMode.DRM:
                                        grpModeSpecificDigital.BringToFront();
                                        grpModeSpecificCW.SendToBack();
                                        grpModeSpecificPhone.SendToBack();
                                        grpModeSpecificFM.SendToBack();
                                        break;
                                    case DSPMode.FMN:
                                    case DSPMode.WFM:
                                        grpModeSpecificDigital.SendToBack();
                                        grpModeSpecificCW.SendToBack();
                                        grpModeSpecificFM.BringToFront();
                                        grpModeSpecificPhone.SendToBack();
                                        break;
                                    default:
                                        grpModeSpecificDigital.SendToBack();
                                        grpModeSpecificCW.SendToBack();
                                        grpModeSpecificPhone.BringToFront();
                                        grpModeSpecificFM.SendToBack();
                                        break;
                                }
                            }
                            break;
                        case ClickTuneMode.VFOA:
                            if (chkVFOSplit.Checked || chkEnableSubRX.Checked)
                            {
                                CurrentClickTuneMode = ClickTuneMode.VFOB;
                                if (!minimal_screen)
                                {
                                    grpMainRXMode.Visible = false;
                                    grpSubRXFilter.BringToFront();
                                    grpMainRXFilter.SendToBack();
                                    grpSubRXMode.Visible = true;
                                    grpSubRXMode.BringToFront();
                                    grpDSPMainRX.Visible = false;
                                    grpDSPSubRX.Visible = true;

                                    switch (current_dsp_mode_subRX)
                                    {
                                        case DSPMode.AM:
                                        case DSPMode.DRM:
                                        case DSPMode.DSB:
                                        case DSPMode.LSB:
                                        case DSPMode.SAM:
                                        case DSPMode.SPEC:
                                        case DSPMode.USB:
                                            grpModeSpecificDigital.SendToBack();
                                            grpModeSpecificCW.SendToBack();
                                            grpModeSpecificPhone.BringToFront();
                                            grpModeSpecificFM.SendToBack();
                                            break;
                                        case DSPMode.CWL:
                                        case DSPMode.CWU:
                                            grpModeSpecificCW.BringToFront();
                                            grpModeSpecificDigital.SendToBack();
                                            grpModeSpecificPhone.SendToBack();
                                            grpModeSpecificFM.SendToBack();
                                            break;
                                        case DSPMode.DIGL:
                                        case DSPMode.DIGU:
                                            grpModeSpecificCW.SendToBack();
                                            grpModeSpecificPhone.SendToBack();
                                            grpModeSpecificDigital.BringToFront();
                                            grpModeSpecificFM.SendToBack();
                                            break;
                                        case DSPMode.FMN:
                                        case DSPMode.WFM:
                                            grpModeSpecificDigital.SendToBack();
                                            grpModeSpecificCW.SendToBack();
                                            grpModeSpecificFM.BringToFront();
                                            grpModeSpecificPhone.SendToBack();
                                            break;
                                        default:
                                            grpModeSpecificDigital.SendToBack();
                                            grpModeSpecificCW.SendToBack();
                                            grpModeSpecificPhone.BringToFront();
                                            grpModeSpecificFM.SendToBack();
                                            break;
                                    }
                                }
                            }
                            else
                            {
                                CurrentClickTuneMode = ClickTuneMode.Off;
                                if (!minimal_screen)
                                {
                                    grpMainRXFilter.BringToFront();
                                    grpSubRXFilter.SendToBack();          // visible only MainRX settings
                                    grpMainRXMode.Visible = true;
                                    grpMainRXMode.BringToFront();
                                    grpSubRXMode.Visible = false;
                                    grpDSPMainRX.Visible = true;
                                    grpDSPMainRX.BringToFront();
                                    grpDSPSubRX.Visible = false;

                                    switch (current_dsp_mode)
                                    {
                                        case DSPMode.AM:
                                        case DSPMode.DRM:
                                        case DSPMode.DSB:
                                        case DSPMode.LSB:
                                        case DSPMode.SAM:
                                        case DSPMode.SPEC:
                                        case DSPMode.USB:
                                            grpModeSpecificDigital.SendToBack();
                                            grpModeSpecificCW.SendToBack();
                                            grpModeSpecificPhone.BringToFront();
                                            grpModeSpecificFM.SendToBack();
                                            break;
                                        case DSPMode.CWL:
                                        case DSPMode.CWU:
                                            grpModeSpecificCW.BringToFront();
                                            grpModeSpecificDigital.SendToBack();
                                            grpModeSpecificPhone.SendToBack();
                                            grpModeSpecificFM.SendToBack();
                                            break;
                                        case DSPMode.DIGL:
                                        case DSPMode.DIGU:
                                            grpModeSpecificCW.SendToBack();
                                            grpModeSpecificPhone.SendToBack();
                                            grpModeSpecificDigital.BringToFront();
                                            grpModeSpecificFM.SendToBack();
                                            break;
                                        case DSPMode.FMN:
                                        case DSPMode.WFM:
                                            grpModeSpecificDigital.SendToBack();
                                            grpModeSpecificCW.SendToBack();
                                            grpModeSpecificFM.BringToFront();
                                            grpModeSpecificPhone.SendToBack();
                                            break;
                                        default:
                                            grpModeSpecificDigital.SendToBack();
                                            grpModeSpecificCW.SendToBack();
                                            grpModeSpecificPhone.BringToFront();
                                            grpModeSpecificFM.SendToBack();
                                            break;
                                    }
                                }
                            }
                            break;
                        case ClickTuneMode.VFOB:
                            {
                                CurrentClickTuneMode = ClickTuneMode.Off;
                                if (!minimal_screen)
                                {
                                    grpMainRXFilter.BringToFront();
                                    grpSubRXFilter.SendToBack();          // visible only MainRX settings
                                    grpMainRXMode.Visible = true;
                                    grpMainRXMode.BringToFront();
                                    grpSubRXMode.Visible = false;
                                    grpDSPMainRX.Visible = true;
                                    grpDSPMainRX.BringToFront();
                                    grpDSPSubRX.Visible = false;

                                    switch (current_dsp_mode)
                                    {
                                        case DSPMode.AM:
                                        case DSPMode.DRM:
                                        case DSPMode.DSB:
                                        case DSPMode.LSB:
                                        case DSPMode.SAM:
                                        case DSPMode.SPEC:
                                        case DSPMode.USB:
                                            grpModeSpecificDigital.SendToBack();
                                            grpModeSpecificCW.SendToBack();
                                            grpModeSpecificPhone.BringToFront();
                                            grpModeSpecificFM.SendToBack();
                                            break;
                                        case DSPMode.CWL:
                                        case DSPMode.CWU:
                                            grpModeSpecificCW.BringToFront();
                                            grpModeSpecificDigital.SendToBack();
                                            grpModeSpecificPhone.SendToBack();
                                            grpModeSpecificFM.SendToBack();
                                            break;
                                        case DSPMode.DIGL:
                                        case DSPMode.DIGU:
                                            grpModeSpecificCW.SendToBack();
                                            grpModeSpecificPhone.SendToBack();
                                            grpModeSpecificDigital.BringToFront();
                                            grpModeSpecificFM.SendToBack();
                                            break;
                                        case DSPMode.FMN:
                                        case DSPMode.WFM:
                                            grpModeSpecificDigital.SendToBack();
                                            grpModeSpecificCW.SendToBack();
                                            grpModeSpecificFM.BringToFront();
                                            grpModeSpecificPhone.SendToBack();
                                            break;
                                        default:
                                            grpModeSpecificDigital.SendToBack();
                                            grpModeSpecificCW.SendToBack();
                                            grpModeSpecificFM.SendToBack();
                                            grpModeSpecificPhone.BringToFront();
                                            break;
                                    }
                                }
                            }
                            break;
                    }
                }
                else if (e.Button == MouseButtons.Middle)
                {
                    if (current_click_tune_mode == ClickTuneMode.Off ||
                        current_click_tune_mode == ClickTuneMode.VFOA)
                        ChangeWheelTuneLeft();
                    else if (current_click_tune_mode == ClickTuneMode.VFOB)
                        ChangeWheelTuneLeftSubRX();
                }
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private void picDisplay_MouseUp(object sender, System.Windows.Forms.MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left)
            {
                if (current_click_tune_mode == ClickTuneMode.Off &&
                    !(vfoA_drag ||
                    vfoa_low_filter_drag == true ||
                    vfoa_high_filter_drag == true ||
                    vfoa_whole_filter_drag == true ||
                    vfob_low_filter_drag == true ||
                    vfob_high_filter_drag == true ||
                    vfob_whole_filter_drag == true ||
                    vfob_drag == true ||
                    vfoa_whole_notch_drag == true ||
                    vfoa_notch_high_drag == true ||
                    vfoa_notch_low_drag == true ||
                    spectrum_drag_start == true))
                {
                    switch (Display_GDI.CurrentDisplayMode)
                    {
                        case DisplayMode.PANAFALL:
                        case DisplayMode.PANAFALL_INV:
                        case DisplayMode.WATERFALL:
                        case DisplayMode.PANADAPTER:
                        case DisplayMode.HISTOGRAM:
                        case DisplayMode.PANASCOPE:
                            float x = PixelToHz(e.X);
                            double freq = loscFreq + (double)x * 0.0000010;
                            MaxFreq = LOSCFreq + DttSP.SampleRate / 2 * 1e-6;
                            MinFreq = LOSCFreq - DttSP.SampleRate / 2 * 1e-6;

                            if (freq > MaxFreq)
                                freq = MaxFreq;
                            if (freq < MinFreq)
                                freq = MinFreq;

                            memory = false;
                            vfoa_lock = true;
                            VFOAFreq = Math.Round(freq, 6);
                            vfoa_lock = false;
                            break;
                        default:
                            break;
                    }
                }

                if (Display_GDI.CurrentDisplayMode == DisplayMode.PANADAPTER
                    || Display_GDI.CurrentDisplayMode == DisplayMode.PANAFALL ||
                    Display_GDI.CurrentDisplayMode == DisplayMode.PANAFALL_INV ||
                    Display_GDI.CurrentDisplayMode == DisplayMode.HISTOGRAM ||
                    Display_GDI.CurrentDisplayMode == DisplayMode.PANASCOPE)
                {
                    vfoA_drag = false;
                    vfoa_low_filter_drag = false;
                    vfoa_high_filter_drag = false;
                    vfoa_whole_filter_drag = false;
                    vfob_low_filter_drag = false;
                    vfob_high_filter_drag = false;
                    vfob_whole_filter_drag = false;
                    vfob_drag = false;
                    vfoa_whole_notch_drag = false;
                    vfoa_notch_high_drag = false;
                    vfoa_notch_low_drag = false;
                }

                int vfoa_low_x = 0;
                int vfoa_high_x = 0;
                int vfob_low_x = 0;
                int vfob_high_x = 0;
                int notch_low = 0;
                int notch_high = 0;

                if (!chkMOX.Checked)
                {
                    vfoa_low_x = HzToPixel((int)udFilterLow.Value);
                    vfoa_high_x = HzToPixel((int)udFilterHigh.Value);
                    vfob_low_x = HzToPixel((int)udSubRXFilterLow.Value);
                    vfob_high_x = HzToPixel((int)udSubRXFilterHigh.Value);
                    notch_high = HzToPixel(ptbNotchShift.Value);
                    notch_low = HzToPixel(ptbNotchWidth.Value);
                }
                else
                {
                    vfoa_low_x = HzToPixel(DttSP.TXFilterLowCut);
                    vfoa_high_x = HzToPixel(DttSP.TXFilterHighCut);
                    vfob_low_x = HzToPixel(DttSP.TXFilterLowCut);
                    vfob_high_x = HzToPixel(DttSP.TXFilterHighCut);
                }

                if (Math.Abs(e.X - notch_low) < 3 || Math.Abs(e.X - notch_high) < 3 ||
                    vfoa_notch_high_drag || vfoa_notch_low_drag)
                {
                    Cursor = Cursors.SizeWE;
                }
                else if (Math.Abs(e.X - vfoa_low_x) < 3 || Math.Abs(e.X - vfoa_high_x) < 3 ||
                    vfoa_high_filter_drag || vfoa_low_filter_drag)
                {
                    Cursor = Cursors.SizeWE;
                }
                else if (chkEnableSubRX.Checked && (Math.Abs(e.X - vfob_low_x) < 3 || Math.Abs(e.X - vfob_high_x) < 3 ||
                    vfob_high_filter_drag || vfob_low_filter_drag))
                {
                    Cursor = Cursors.SizeWE;
                }
                else if (e.X > vfoa_low_x && e.X < vfoa_high_x)
                {
                    Cursor = Cursors.NoMoveHoriz;
                }
                else if (chkEnableSubRX.Checked && (e.X > vfob_low_x && e.X < vfob_high_x))
                {
                    Cursor = Cursors.NoMoveHoriz;
                }
                else
                {
                    Cursor = Cursors.Cross;
                }

                if (vfoA_notch_drag)
                {
                    vfoA_notch_drag = false;
                }

                if (vfoA_drag)
                {
                    memory = false;
                    vfoA_drag = false;
                    VFOAFreq = Double.Parse(txtVFOAFreq.Text);
                }
                if (vfob_drag == true && chkEnableSubRX.Checked)
                {
                    vfob_drag = false;
                    VFOBFreq = Double.Parse(txtVFOBFreq.Text);
                }

                if (spectrum_drag)
                {
                    spectrum_drag_start = false;
                    spectrum_drag = false;
                    VFOAFreq = vfoAFreq;
                    VFOBFreq = vfoBFreq;
                }
            }
        }

        private void picDisplay_Resize(object sender, System.EventArgs e) // yt7pwr
        {
            try
            {
                if (PowerOn)
                    pause_DisplayThread = true;

                Display_GDI.Target = picDisplay;
                switch (current_display_engine)
                {
                    case (DisplayEngine.GDI_PLUS):
                        {
                            Thread.Sleep(100);
                            Display_GDI.Init();
                            UpdateDisplay();
                            picDisplay.Invalidate();
                        }
                        break;
#if(DirectX)
                    case (DisplayEngine.DIRECT_X):
                        ReinitDirectX("");
                        break;
#endif
                }

                pause_DisplayThread = false;
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        #endregion

        # region Display zoom yt7pwr

        private void radDisplayZoom1x_Click(object sender, System.EventArgs e)
        {
            ptbDisplayZoom.Value = 4;
            ptbDisplayPan.Value = 0;
            CalcDisplayFreq();
            if (!skins_enabled && !booting)
            {
                radDisplayZoom1x.BackColor = button_selected_color;
                radDisplayZoom2x.BackColor = SystemColors.Control;
                radDisplayZoom4x.BackColor = SystemColors.Control;
                radDisplayZoom8x.BackColor = SystemColors.Control;
                radDisplayZoom16x.BackColor = SystemColors.Control;
                radDisplayZoom32x.BackColor = SystemColors.Control;
            }
            else
            {
                radDisplayZoom1x.Checked = true;
            }
        }

        private void radDisplayZoom2x_Click(object sender, System.EventArgs e)
        {
            ptbDisplayZoom.Value = 8;
            CalcDisplayFreq();
            if (!skins_enabled && !booting)
            {
                radDisplayZoom2x.BackColor = button_selected_color;
                radDisplayZoom1x.BackColor = SystemColors.Control;
                radDisplayZoom4x.BackColor = SystemColors.Control;
                radDisplayZoom8x.BackColor = SystemColors.Control;
                radDisplayZoom16x.BackColor = SystemColors.Control;
                radDisplayZoom32x.BackColor = SystemColors.Control;
            }
            else
            {
                radDisplayZoom2x.Checked = true;
            }
        }

        private void radDisplayZoom4x_Click(object sender, System.EventArgs e)
        {
            ptbDisplayZoom.Value = 16;
            CalcDisplayFreq();
            if (!skins_enabled && !booting)
            {
                radDisplayZoom4x.BackColor = button_selected_color;
                radDisplayZoom1x.BackColor = SystemColors.Control;
                radDisplayZoom2x.BackColor = SystemColors.Control;
                radDisplayZoom8x.BackColor = SystemColors.Control;
                radDisplayZoom16x.BackColor = SystemColors.Control;
                radDisplayZoom32x.BackColor = SystemColors.Control;
            }
            else
            {
                radDisplayZoom4x.Checked = true;
            }
        }

        private void radDisplayZoom8x_Click(object sender, System.EventArgs e)
        {
            ptbDisplayZoom.Value = 32;
            CalcDisplayFreq();
            if (!skins_enabled && !booting)
            {
                radDisplayZoom8x.BackColor = button_selected_color;
                radDisplayZoom1x.BackColor = SystemColors.Control;
                radDisplayZoom2x.BackColor = SystemColors.Control;
                radDisplayZoom4x.BackColor = SystemColors.Control;
                radDisplayZoom16x.BackColor = SystemColors.Control;
                radDisplayZoom32x.BackColor = SystemColors.Control;
            }
            else
            {
                radDisplayZoom8x.Checked = true;
            }
        }

        private void radDisplayZoom16x_Click(object sender, System.EventArgs e)
        {
            ptbDisplayZoom.Value = 64;
            CalcDisplayFreq();
            if (!skins_enabled && !booting)
            {
                radDisplayZoom16x.BackColor = button_selected_color;
                radDisplayZoom1x.BackColor = SystemColors.Control;
                radDisplayZoom2x.BackColor = SystemColors.Control;
                radDisplayZoom4x.BackColor = SystemColors.Control;
                radDisplayZoom8x.BackColor = SystemColors.Control;
                radDisplayZoom32x.BackColor = SystemColors.Control;
            }
            else
            {
                radDisplayZoom16x.Checked = true;
            }
        }

        private void radDisplayZoom32x_Click(object sender, System.EventArgs e)
        {
            ptbDisplayZoom.Value = 128;
            CalcDisplayFreq();
            if (!skins_enabled && !booting)
            {
                radDisplayZoom32x.BackColor = button_selected_color;
                radDisplayZoom1x.BackColor = SystemColors.Control;
                radDisplayZoom2x.BackColor = SystemColors.Control;
                radDisplayZoom4x.BackColor = SystemColors.Control;
                radDisplayZoom8x.BackColor = SystemColors.Control;
                radDisplayZoom16x.BackColor = SystemColors.Control;
            }
            else
            {
                radDisplayZoom32x.Checked = true;
            }
        }

        private void tbDisplayZoom_Wheel(MouseEventArgs e)
        {
            if (SetupForm.FastFocus)
                ptbDisplayZoom.Focus();
        }

        private void tbDisplayPan_Wheel(MouseEventArgs e)
        {
            if (SetupForm.FastFocus)
                ptbDisplayPan.Focus();
        }

        private void tbDisplayZoom_Scroll(object sender, EventArgs e)
        {
            double zoom_factor = ptbDisplayZoom.Value / 4;

            if (!skins_enabled && !booting)
            {
                radDisplayZoom1x.Checked = false;
                radDisplayZoom2x.Checked = false;
                radDisplayZoom4x.Checked = false;
                radDisplayZoom8x.Checked = false;
                radDisplayZoom16x.Checked = false;
                radDisplayZoom32x.Checked = false;

                if (zoom_factor == 1.0)
                {
                    radDisplayZoom1x.BackColor = button_selected_color;
                    ptbDisplayPan.Value = 0;
                }
                else
                {
                    radDisplayZoom1x.BackColor = SystemColors.Control;
                }

                if (zoom_factor == 2.0)
                {
                    radDisplayZoom2x.BackColor = button_selected_color;
                }
                else
                {
                    radDisplayZoom2x.BackColor = SystemColors.Control;
                }

                if (zoom_factor == 4.0)
                {
                    radDisplayZoom4x.BackColor = button_selected_color;
                }
                else
                {
                    radDisplayZoom4x.BackColor = SystemColors.Control;
                }

                if (zoom_factor == 8.0)
                {
                    radDisplayZoom8x.BackColor = button_selected_color;
                }
                else
                {
                    radDisplayZoom8x.BackColor = SystemColors.Control;
                }

                if (zoom_factor == 16.0)
                {
                    radDisplayZoom16x.BackColor = button_selected_color;
                }
                else
                {
                    radDisplayZoom16x.BackColor = SystemColors.Control;
                }

                if (zoom_factor == 32.0)
                {
                    radDisplayZoom32x.BackColor = button_selected_color;
                }
                else
                {
                    radDisplayZoom32x.BackColor = SystemColors.Control;
                }
            }
            else if (skins_enabled && !booting)
            {
                radDisplayZoom1x.Checked = false;
                radDisplayZoom2x.Checked = false;
                radDisplayZoom4x.Checked = false;
                radDisplayZoom8x.Checked = false;
                radDisplayZoom16x.Checked = false;
                radDisplayZoom32x.Checked = false;

                switch ((int)zoom_factor)
                {
                    case (1):
                        radDisplayZoom1x.Checked = true;
                        ptbDisplayPan.Value = 0;
                        break;
                    case (2):
                        radDisplayZoom2x.Checked = true;
                        break;
                    case (4):
                        radDisplayZoom4x.Checked = true;
                        break;
                    case (8):
                        radDisplayZoom8x.Checked = true;
                        break;
                    case (16):
                        radDisplayZoom16x.Checked = true;
                        break;
                    case (32):
                        radDisplayZoom32x.Checked = true;
                        break;
                }
            }

            CalcDisplayFreq();

            if (ptbDisplayZoom.Focused) btnHidden.Focus();
        }

        private void tbDisplayPan_Scroll(object sender, EventArgs e)
        {
            CalcDisplayFreq();
            if (ptbDisplayPan.Focused) btnHidden.Focus();
        }

        #endregion

        #region Band Button Events
        // ======================================================
        // Band Button Events
        // ======================================================

        private void btnBand160_Click(object sender, System.EventArgs e) // changes yt7pwr
        {
            run_memory_zap = false;

            if (!radBand160.Checked)
                Band160(true, false, false);
            else
            {
                if (last_band == "160M")
                    Band160(true, true, true);
                else
                    last_band = "160M";
            }
        }

        private void btnBand160_CheckedChanged(object sender, System.EventArgs e) // changes yt7pwr
        {
            run_memory_zap = false;

            if (!vfoa_lock && !vfob_lock)
            {
                if (radBand160.Checked)
                {
                    Band160(false, true, false);
                }
                else
                {
                    last_band = "160M";
                    SaveBand();
                }
            }
        }

        private void Band160(bool save_band_stack, bool get_band_stack, bool clicked)
        {
            if (save_band_stack)
                SaveBand();

            if (last_band.Equals("160M") && save_band_stack && get_band_stack && !clicked)
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_160m_index = (band_160m_index - 1 + band_160m_register) % band_160m_register;
                else
                    band_160m_index = (band_160m_index + 1) % band_160m_register;
            }
            else if (last_band.Equals("160M") && get_band_stack && save_band_stack && clicked)
            {
                band_160m_index = (band_160m_index + 1) % band_160m_register;
            }

            if (get_band_stack)
            {
                string filterMainRX, filterSubRX, modeMainRX, modeSubRX;
                double freqA;
                double freqB;
                double losc_freq;
                int af, rf, sql1, sql2;
                double pwr;
                bool sql1_on, sql2_on;
                CurrentBand = Band.B160M;

                if (DB.GetBandStack("160M", band_160m_index, out modeMainRX, out modeSubRX, out filterMainRX, out filterSubRX,
                    out freqA, out freqB, out losc_freq, out af, out rf, out pwr, out sql1, out sql1_on, out sql2, out sql2_on))
                {
                    SetBand(modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq, af, rf, pwr, sql1, sql1_on, sql2, sql2_on);
                }

                MaxFreq = LOSCFreq + DttSP.SampleRate / 2 * 1e-6;
                MinFreq = LOSCFreq - DttSP.SampleRate / 2 * 1e-6;
                NewVFOLargeFont = new_vfo_large_font;   // refresh Hover
                NewVFOSmallFont = new_vfo_small_font;
                VFOLargeFont = vfo_large_font;
                VFOSmallFont = vfo_small_font;
                WBIR_state = WBIR_State.NoAdapt;        // reset WBIR
            }
        }

        private void btnBand80_Click(object sender, System.EventArgs e) // changes yt7pwr
        {
            run_memory_zap = false;

            if (!radBand80.Checked)
                Band80(true, false, false);
            else
            {
                if (last_band == "80M")
                    Band80(true, true, true);
                else
                    last_band = "80M";
            }
        }

        private void btnBand80_CheckedChanged(object sender, System.EventArgs e) // changes yt7pwr
        {
            run_memory_zap = false;

            if (!vfoa_lock && !vfob_lock)
            {
                if (radBand80.Checked)
                    Band80(false, true, false);
                else
                {
                    last_band = "80m";
                    SaveBand();
                }
            }
        }

        private void Band80(bool save_band_stack, bool get_band_stack, bool clicked)
        {
            if (save_band_stack)
                SaveBand();

            if (last_band.Equals("80M") && get_band_stack && save_band_stack && !clicked)
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_80m_index = (band_80m_index - 1 + band_80m_register) % band_80m_register;
                else
                    band_80m_index = (band_80m_index + 1) % band_80m_register;
            }
            else if (last_band.Equals("80M") && get_band_stack && save_band_stack && clicked)
            {
                band_80m_index = (band_80m_index + 1) % band_80m_register;
            }

            if (get_band_stack)
            {
                string filterMainRX, filterSubRX, modeMainRX, modeSubRX;
                double freqA;
                double freqB;
                double losc_freq;
                int af, rf, sql1, sql2;
                double pwr;
                bool sql1_on, sql2_on;
                CurrentBand = Band.B80M;

                if (DB.GetBandStack("80M", band_80m_index, out modeMainRX, out modeSubRX, out filterMainRX, out filterSubRX,
                    out freqA, out freqB, out losc_freq, out af, out rf, out pwr, out sql1, out sql1_on, out sql2, out sql2_on))
                {
                    SetBand(modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq, af, rf, pwr, sql1, sql1_on, sql2, sql2_on);
                }

                MaxFreq = LOSCFreq + DttSP.SampleRate / 2 * 1e-6;
                MinFreq = LOSCFreq - DttSP.SampleRate / 2 * 1e-6;
                NewVFOLargeFont = new_vfo_large_font;  // refresh Hover
                NewVFOSmallFont = new_vfo_small_font;
                VFOLargeFont = vfo_large_font;
                VFOSmallFont = vfo_small_font;
                WBIR_state = WBIR_State.NoAdapt;
            }
        }

        private void btnBand60_Click(object sender, System.EventArgs e) // changes yt7pwr
        {
            run_memory_zap = false;

            if (!radBand60.Checked)
                Band60(true, false, false);
            else
            {
                if (last_band == "60M")
                    Band60(true, true, true);
                else
                    last_band = "60M";
            }
        }

        private void btnBand60_CheckedChanged(object sender, System.EventArgs e) // changes yt7pwr
        {
            run_memory_zap = false;

            if (!vfoa_lock && !vfob_lock)
            {
                if (radBand60.Checked)
                {
                    Band60(false, true, false);
                }
                else
                {
                    last_band = "60M";
                    SaveBand();
                }
            }
        }

        private void Band60(bool save_band_stack, bool get_band_stack, bool clicked)
        {
            if (save_band_stack)
                SaveBand();

            if (last_band.Equals("60M") && save_band_stack)
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_60m_index = (band_60m_index - 1 + band_60m_register) % band_60m_register;
                else
                    band_60m_index = (band_60m_index + 1) % band_60m_register;
            }
            else if (last_band.Equals("60M") && get_band_stack && save_band_stack && clicked)
            {
                band_60m_index = (band_60m_index + 1) % band_60m_register;
            }

            if (get_band_stack)
            {
                string filterMainRX, filterSubRX, modeMainRX, modeSubRX;
                double freqA;
                double freqB;
                double losc_freq;
                int af, rf, sql1, sql2;
                double pwr;
                bool sql1_on, sql2_on;
                CurrentBand = Band.B60M;

                if (DB.GetBandStack("60M", band_60m_index, out modeMainRX, out modeSubRX, out filterMainRX, out filterSubRX,
                    out freqA, out freqB, out losc_freq, out af, out rf, out pwr, out sql1, out sql1_on, out sql2, out sql2_on))
                {
                    SetBand(modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq, af, rf, pwr, sql1, sql1_on, sql2, sql2_on);
                }

                MaxFreq = LOSCFreq + DttSP.SampleRate / 2 * 1e-6;
                MinFreq = LOSCFreq - DttSP.SampleRate / 2 * 1e-6;
                NewVFOLargeFont = new_vfo_large_font;  // refresh Hover
                NewVFOSmallFont = new_vfo_small_font;
                VFOLargeFont = vfo_large_font;
                VFOSmallFont = vfo_small_font;
                WBIR_state = WBIR_State.NoAdapt;
            }
        }

        private void btnBand40_Click(object sender, System.EventArgs e) // changes yt7pwr
        {
            run_memory_zap = false;

            if (!radBand40.Checked)
                Band40(true, false, false);
            else
            {
                if (last_band == "40M")
                    Band40(true, true, true);
                else
                    last_band = "40M";
            }
        }

        private void btnBand40_CheckedChanged(object sender, System.EventArgs e) // changes yt7pwr
        {
            run_memory_zap = false;

            if (!vfoa_lock && !vfob_lock)
            {
                if (radBand40.Checked)
                {
                    Band40(false, true, false);
                }
                else
                {
                    last_band = "40M";
                    SaveBand();
                }
            }
        }

        private void Band40(bool save_band_stack, bool get_band_stack, bool clicked)
        {
            if (save_band_stack)
                SaveBand();

            if (last_band.Equals("40M") && save_band_stack && get_band_stack && !clicked)
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_40m_index = (band_40m_index - 1 + band_40m_register) % band_40m_register;
                else
                    band_40m_index = (band_40m_index + 1) % band_40m_register;
            }
            else if (last_band.Equals("40M") && get_band_stack && save_band_stack && clicked)
            {
                band_40m_index = (band_40m_index + 1) % band_40m_register;
            }

            if (get_band_stack)
            {
                string filterMainRX, filterSubRX, modeMainRX, modeSubRX;
                double freqA;
                double freqB;
                double losc_freq;
                int af, rf, sql1, sql2;
                double pwr;
                bool sql1_on, sql2_on;
                CurrentBand = Band.B40M;

                if (DB.GetBandStack("40M", band_40m_index, out modeMainRX, out modeSubRX, out filterMainRX, out filterSubRX,
                    out freqA, out freqB, out losc_freq, out af, out rf, out pwr, out sql1, out sql1_on, out sql2, out sql2_on))
                {
                    SetBand(modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq, af, rf, pwr, sql1, sql1_on, sql2, sql2_on);
                }

                MaxFreq = LOSCFreq + DttSP.SampleRate / 2 * 1e-6;
                MinFreq = LOSCFreq - DttSP.SampleRate / 2 * 1e-6;
                NewVFOLargeFont = new_vfo_large_font;  // refresh Hover
                NewVFOSmallFont = new_vfo_small_font;
                VFOLargeFont = vfo_large_font;
                VFOSmallFont = vfo_small_font;
                WBIR_state = WBIR_State.NoAdapt;
            }
        }

        private void btnBand30_Click(object sender, System.EventArgs e) // changes yt7pwr
        {
            run_memory_zap = false;

            if (!radBand30.Checked)
                Band30(true, false, false);
            else
            {
                if (last_band == "30M")
                    Band30(true, true, true);
                else
                    last_band = "30M";
            }
        }

        private void btnBand30_CheckedChanged(object sender, System.EventArgs e) // changes yt7pwr
        {
            run_memory_zap = false;

            if (!vfoa_lock && !vfob_lock)
            {
                if (radBand30.Checked)
                {
                    Band30(false, true, false);
                }
                else
                {
                    last_band = "30M";
                    SaveBand();
                }
            }
        }

        private void Band30(bool save_band_stack, bool get_band_stack, bool clicked)
        {
            if (save_band_stack)
                SaveBand();

            if (last_band.Equals("30M") && save_band_stack && get_band_stack && !clicked)
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_30m_index = (band_30m_index - 1 + band_30m_register) % band_30m_register;
                else
                    band_30m_index = (band_30m_index + 1) % band_30m_register;
            }
            else if (last_band.Equals("30M") && get_band_stack && save_band_stack && clicked)
            {
                band_30m_index = (band_30m_index + 1) % band_30m_register;
            }

            if (get_band_stack)
            {
                string filterMainRX, filterSubRX, modeMainRX, modeSubRX;
                double freqA;
                double freqB;
                double losc_freq;
                int af, rf, sql1, sql2;
                double pwr;
                bool sql1_on, sql2_on;
                CurrentBand = Band.B30M;

                if (DB.GetBandStack("30M", band_30m_index, out modeMainRX, out modeSubRX, out filterMainRX, out filterSubRX,
                    out freqA, out freqB, out losc_freq, out af, out rf, out pwr, out sql1, out sql1_on, out sql2, out sql2_on))
                {
                    SetBand(modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq, af, rf, pwr, sql1, sql1_on, sql2, sql2_on);
                }

                MaxFreq = LOSCFreq + DttSP.SampleRate / 2 * 1e-6;
                MinFreq = LOSCFreq - DttSP.SampleRate / 2 * 1e-6;
                NewVFOLargeFont = new_vfo_large_font;  // refresh Hover
                NewVFOSmallFont = new_vfo_small_font;
                VFOLargeFont = vfo_large_font;
                VFOSmallFont = vfo_small_font;
                WBIR_state = WBIR_State.NoAdapt;
            }
        }

        private void btnBand20_Click(object sender, System.EventArgs e) // changes yt7pwr
        {
            run_memory_zap = false;

            if (!radBand20.Checked)
                Band20(true, false, false);
            else
            {
                if (last_band == "20M")
                    Band20(true, true, true);
                else
                    last_band = "20M";
            }
        }

        private void btnBand20_CheckedChanged(object sender, System.EventArgs e) // changes yt7pwr
        {
            run_memory_zap = false;

            if (!vfoa_lock && !vfob_lock)
            {
                if (radBand20.Checked)
                {
                    Band20(false, true, false);
                }
                else
                {
                    last_band = "20M";
                    SaveBand();
                }
            }
        }

        private void Band20(bool save_band_stack, bool get_band_stack, bool clicked)
        {
            if (save_band_stack)
                SaveBand();

            if (last_band.Equals("20M") && save_band_stack && get_band_stack && !clicked)
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_20m_index = (band_20m_index - 1 + band_20m_register) % band_20m_register;
                else
                    band_20m_index = (band_20m_index + 1) % band_20m_register;
            }
            else if (last_band.Equals("20M") && get_band_stack && save_band_stack && clicked)
            {
                band_20m_index = (band_20m_index + 1) % band_20m_register;
            }

            if (get_band_stack)
            {
                string filterMainRX, filterSubRX, modeMainRX, modeSubRX;
                double freqA;
                double freqB;
                double losc_freq;
                int af, rf, sql1, sql2;
                double pwr;
                bool sql1_on, sql2_on;
                CurrentBand = Band.B20M;

                if (DB.GetBandStack("20M", band_20m_index, out modeMainRX, out modeSubRX, out filterMainRX, out filterSubRX,
                    out freqA, out freqB, out losc_freq, out af, out rf, out pwr, out sql1, out sql1_on, out sql2, out sql2_on))
                {
                    SetBand(modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq, af, rf, pwr, sql1, sql1_on, sql2, sql2_on);
                }

                MaxFreq = LOSCFreq + DttSP.SampleRate / 2 * 1e-6;
                MinFreq = LOSCFreq - DttSP.SampleRate / 2 * 1e-6;
                NewVFOLargeFont = new_vfo_large_font;  // refresh Hover
                NewVFOSmallFont = new_vfo_small_font;
                VFOLargeFont = vfo_large_font;
                VFOSmallFont = vfo_small_font;
                WBIR_state = WBIR_State.NoAdapt;
            }
        }

        private void btnBand17_Click(object sender, System.EventArgs e) // changes yt7pwr
        {
            run_memory_zap = false;

            if (!radBand17.Checked)
                Band17(true, false, false);
            else
            {
                if (last_band == "17M")
                    Band17(true, true, true);
                else
                    last_band = "17M";
            }
        }

        private void btnBand17_CheckedChanged(object sender, System.EventArgs e) // changes yt7pwr
        {
            run_memory_zap = false;

            if (!vfoa_lock && !vfob_lock)
            {
                if (radBand17.Checked)
                {
                    Band17(false, true, false);
                }
                else
                {
                    last_band = "17M";
                    SaveBand();
                }
            }
        }

        private void Band17(bool save_band_stack, bool get_band_stack, bool clicked)
        {
            if (save_band_stack)
                SaveBand();

            if (last_band.Equals("17M") && save_band_stack && get_band_stack && !clicked)
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_17m_index = (band_17m_index - 1 + band_17m_register) % band_17m_register;
                else
                    band_17m_index = (band_17m_index + 1) % band_17m_register;
            }
            else if (last_band.Equals("17M") && get_band_stack && save_band_stack && clicked)
            {
                band_17m_index = (band_17m_index + 1) % band_17m_register;
            }

            if (get_band_stack)
            {
                string filterMainRX, filterSubRX, modeMainRX, modeSubRX;
                double freqA;
                double freqB;
                double losc_freq;
                int af, rf, sql1, sql2;
                double pwr;
                bool sql1_on, sql2_on;
                CurrentBand = Band.B17M;

                if (DB.GetBandStack("17M", band_17m_index, out modeMainRX, out modeSubRX, out filterMainRX, out filterSubRX,
                    out freqA, out freqB, out losc_freq, out af, out rf, out pwr, out sql1, out sql1_on, out sql2, out sql2_on))
                {
                    SetBand(modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq, af, rf, pwr, sql1, sql1_on, sql2, sql2_on);
                }

                MaxFreq = LOSCFreq + DttSP.SampleRate / 2 * 1e-6;
                MinFreq = LOSCFreq - DttSP.SampleRate / 2 * 1e-6;
                NewVFOLargeFont = new_vfo_large_font;  // refresh Hover
                NewVFOSmallFont = new_vfo_small_font;
                VFOLargeFont = vfo_large_font;
                VFOSmallFont = vfo_small_font;
                WBIR_state = WBIR_State.NoAdapt;
            }
        }

        private void btnBand15_Click(object sender, System.EventArgs e) // changes yt7pwr
        {
            run_memory_zap = false;

            if (!radBand15.Checked)
                Band15(true, false, false);
            else
            {
                if (last_band == "15M")
                    Band15(true, true, true);
                else
                    last_band = "15M";
            }
        }

        private void btnBand15_CheckedChanged(object sender, System.EventArgs e) // changes yt7pwr
        {
            run_memory_zap = false;

            if (!vfoa_lock && !vfob_lock)
            {
                if (radBand15.Checked)
                {
                    Band15(false, true, false);
                }
                else
                {
                    last_band = "15M";
                    SaveBand();
                }
            }
        }

        private void Band15(bool save_band_stack, bool get_band_stack, bool clicked)
        {
            if (save_band_stack)
                SaveBand();

            if (last_band.Equals("15M") && save_band_stack && get_band_stack && !clicked)
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_15m_index = (band_15m_index - 1 + band_15m_register) % band_15m_register;
                else
                    band_15m_index = (band_15m_index + 1) % band_15m_register;
            }
            else if (last_band.Equals("15M") && get_band_stack && save_band_stack && clicked)
            {
                band_15m_index = (band_15m_index + 1) % band_15m_register;
            }

            if (get_band_stack)
            {
                string filterMainRX, filterSubRX, modeMainRX, modeSubRX;
                double freqA;
                double freqB;
                double losc_freq;
                int af, rf, sql1, sql2;
                double pwr;
                bool sql1_on, sql2_on;
                CurrentBand = Band.B15M;

                if (DB.GetBandStack("15M", band_15m_index, out modeMainRX, out modeSubRX, out filterMainRX, out filterSubRX,
                    out freqA, out freqB, out losc_freq, out af, out rf, out pwr, out sql1, out sql1_on, out sql2, out sql2_on))
                {
                    SetBand(modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq, af, rf, pwr, sql1, sql1_on, sql2, sql2_on);
                }

                MaxFreq = LOSCFreq + DttSP.SampleRate / 2 * 1e-6;
                MinFreq = LOSCFreq - DttSP.SampleRate / 2 * 1e-6;
                NewVFOLargeFont = new_vfo_large_font;  // refresh Hover
                NewVFOSmallFont = new_vfo_small_font;
                VFOLargeFont = vfo_large_font;
                VFOSmallFont = vfo_small_font;
                WBIR_state = WBIR_State.NoAdapt;
            }
        }

        private void btnBand12_Click(object sender, System.EventArgs e) // changes yt7pwr
        {
            run_memory_zap = false;

            if (!radBand12.Checked)
                Band12(true, false, false);
            else
            {
                if (last_band == "12M")
                    Band12(true, true, true);
                else
                    last_band = "12M";
            }
        }

        private void btnBand12_CheckedChanged(object sender, System.EventArgs e) // changes yt7pwr
        {
            run_memory_zap = false;

            if (!vfoa_lock && !vfob_lock)
            {
                if (radBand12.Checked)
                {
                    Band12(false, true, false);
                }
                else
                {
                    last_band = "12M";
                    SaveBand();
                }
            }
        }

        private void Band12(bool save_band_stack, bool get_band_stack, bool clicked)
        {
            if (save_band_stack)
                SaveBand();

            if (last_band.Equals("12M") && save_band_stack && get_band_stack && !clicked)
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_12m_index = (band_12m_index - 1 + band_12m_register) % band_12m_register;
                else
                    band_12m_index = (band_12m_index + 1) % band_12m_register;
            }
            else if (last_band.Equals("12M") && get_band_stack && save_band_stack && clicked)
            {
                band_12m_index = (band_12m_index + 1) % band_12m_register;
            }

            if (get_band_stack)
            {
                string filterMainRX, filterSubRX, modeMainRX, modeSubRX;
                double freqA;
                double freqB;
                double losc_freq;
                int af, rf, sql1, sql2;
                double pwr;
                bool sql1_on, sql2_on;
                CurrentBand = Band.B12M;

                if (DB.GetBandStack("12M", band_12m_index, out modeMainRX, out modeSubRX, out filterMainRX, out filterSubRX,
                    out freqA, out freqB, out losc_freq, out af, out rf, out pwr, out sql1, out sql1_on, out sql2, out sql2_on))
                {
                    SetBand(modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq, af, rf, pwr, sql1, sql1_on, sql2, sql2_on);
                }

                MaxFreq = LOSCFreq + DttSP.SampleRate / 2 * 1e-6;
                MinFreq = LOSCFreq - DttSP.SampleRate / 2 * 1e-6;
                NewVFOLargeFont = new_vfo_large_font;  // refresh Hover
                NewVFOSmallFont = new_vfo_small_font;
                VFOLargeFont = vfo_large_font;
                VFOSmallFont = vfo_small_font;
                WBIR_state = WBIR_State.NoAdapt;
            }
        }

        private void btnBand10_Click(object sender, System.EventArgs e) // changes yt7pwr
        {
            run_memory_zap = false;

            if (!radBand10.Checked)
                Band10(true, false, false);
            else
            {
                if (last_band == "10M")
                    Band10(true, true, true);
                else
                    last_band = "10M";
            }
        }

        private void btnBand10_CheckedChanged(object sender, System.EventArgs e) // changes yt7pwr
        {
            run_memory_zap = false;

            if (!vfoa_lock && !vfob_lock)
            {
                if (radBand10.Checked)
                {
                    Band10(false, true, false);
                }
                else
                {
                    last_band = "10M";
                    SaveBand();
                }
            }
        }

        private void Band10(bool save_band_stack, bool get_band_stack, bool clicked)
        {
            if (save_band_stack)
                SaveBand();

            if (last_band.Equals("10M") && save_band_stack && get_band_stack && !clicked)
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_10m_index = (band_10m_index - 1 + band_10m_register) % band_10m_register;
                else
                    band_10m_index = (band_10m_index + 1) % band_10m_register;
            }
            else if (last_band.Equals("10M") && get_band_stack && save_band_stack && clicked)
            {
                band_10m_index = (band_10m_index + 1) % band_10m_register;
            }

            if (get_band_stack)
            {
                string filterMainRX, filterSubRX, modeMainRX, modeSubRX;
                double freqA;
                double freqB;
                double losc_freq;
                int af, rf, sql1, sql2;
                double pwr;
                bool sql1_on, sql2_on;
                CurrentBand = Band.B10M;

                if (DB.GetBandStack("10M", band_10m_index, out modeMainRX, out modeSubRX, out filterMainRX, out filterSubRX,
                    out freqA, out freqB, out losc_freq, out af, out rf, out pwr, out sql1, out sql1_on, out sql2, out sql2_on))
                {
                    SetBand(modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq, af, rf, pwr, sql1, sql1_on, sql2, sql2_on);
                }

                MaxFreq = LOSCFreq + DttSP.SampleRate / 2 * 1e-6;
                MinFreq = LOSCFreq - DttSP.SampleRate / 2 * 1e-6;
                NewVFOLargeFont = new_vfo_large_font;  // refresh Hover
                NewVFOSmallFont = new_vfo_small_font;
                VFOLargeFont = vfo_large_font;
                VFOSmallFont = vfo_small_font;
                WBIR_state = WBIR_State.NoAdapt;
            }
        }

        private void btnBand6_Click(object sender, System.EventArgs e) // changes yt7pwr
        {
            run_memory_zap = false;

            if (!radBand6.Checked)
                Band6(true, false, false);
            else
            {
                if (last_band == "6M")
                    Band6(true, true, true);
                else
                    last_band = "6M";
            }
        }

        private void btnBand6_CheckedChanged(object sender, System.EventArgs e) // changes yt7pwr
        {
            run_memory_zap = false;

            if (!vfoa_lock && !vfob_lock)
            {
                if (radBand6.Checked)
                {
                    Band6(false, true, false);
                }
                else
                {
                    last_band = "6M";
                    SaveBand();
                }
            }
        }

        private void Band6(bool save_band_stack, bool get_band_stack, bool clicked)
        {
            if (save_band_stack)
                SaveBand();

            if (last_band.Equals("6M") && save_band_stack && get_band_stack && !clicked)
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_6m_index = (band_6m_index - 1 + band_6m_register) % band_6m_register;
                else
                    band_6m_index = (band_6m_index + 1) % band_6m_register;
            }
            else if (last_band.Equals("6M") && get_band_stack && save_band_stack && clicked)
            {
                band_6m_index = (band_6m_index + 1) % band_6m_register;
            }

            if (get_band_stack)
            {
                string filterMainRX, filterSubRX, modeMainRX, modeSubRX;
                double freqA;
                double freqB;
                double losc_freq;
                int af, rf, sql1, sql2;
                double pwr;
                bool sql1_on, sql2_on;
                CurrentBand = Band.B6M;

                if (DB.GetBandStack("6M", band_6m_index, out modeMainRX, out modeSubRX, out filterMainRX, out filterSubRX,
                    out freqA, out freqB, out losc_freq, out af, out rf, out pwr, out sql1, out sql1_on, out sql2, out sql2_on))
                {
                    SetBand(modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq, af, rf, pwr, sql1, sql1_on, sql2, sql2_on);
                }

                MaxFreq = LOSCFreq + DttSP.SampleRate / 2 * 1e-6;
                MinFreq = LOSCFreq - DttSP.SampleRate / 2 * 1e-6;
                NewVFOLargeFont = new_vfo_large_font;  // refresh Hover
                NewVFOSmallFont = new_vfo_small_font;
                VFOLargeFont = vfo_large_font;
                VFOSmallFont = vfo_small_font;
                WBIR_state = WBIR_State.NoAdapt;
            }
        }

        private void btnBand2_Click(object sender, System.EventArgs e) // changes yt7pwr
        {
            run_memory_zap = false;

            if (!radBand2.Checked)
                Band2(true, false, false);
            else
            {
                if (last_band == "2M")
                    Band2(true, true, true);
                else
                    last_band = "2M";
            }
        }

        private void btnBand2_CheckedChanged(object sender, System.EventArgs e) // changes yt7pwr
        {
            run_memory_zap = false;

            if (!vfoa_lock && !vfob_lock)
            {
                if (radBand2.Checked)
                {
                    Band2(false, true, false);
                }
                else
                {
                    last_band = "2M";
                    SaveBand();
                }
            }
        }

        private void Band2(bool save_band_stack, bool get_band_stack, bool clicked)
        {
            if (save_band_stack)
                SaveBand();

            if (last_band.Equals("2M") && save_band_stack && get_band_stack && !clicked)
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_2m_index = (band_2m_index - 1 + band_2m_register) % band_2m_register;
                else
                    band_2m_index = (band_2m_index + 1) % band_2m_register;
            }
            else if (last_band.Equals("2M") && get_band_stack && save_band_stack && clicked)
            {
                band_2m_index = (band_2m_index + 1) % band_2m_register;
            }

            if (get_band_stack)
            {
                string filterMainRX, filterSubRX, modeMainRX, modeSubRX;
                double freqA;
                double freqB;
                double losc_freq;
                int af, rf, sql1, sql2;
                double pwr;
                bool sql1_on, sql2_on;
                CurrentBand = Band.B2M;

                if (DB.GetBandStack("2M", band_2m_index, out modeMainRX, out modeSubRX, out filterMainRX, out filterSubRX,
                    out freqA, out freqB, out losc_freq, out af, out rf, out pwr, out sql1, out sql1_on, out sql2, out sql2_on))
                {
                    SetBand(modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq, af, rf, pwr, sql1, sql1_on, sql2, sql2_on);
                }

                MaxFreq = LOSCFreq + DttSP.SampleRate / 2 * 1e-6;
                MinFreq = LOSCFreq - DttSP.SampleRate / 2 * 1e-6;

                if (current_model == Model.GENESIS_G59USB)
                {
                    if ((144000000.0 - g59_2m_Xtrv_losc_freq) >= 14000000.0 && (144000000.0 - g59_2m_Xtrv_losc_freq) <= 14500000.0)
                        g59.WriteToDevice(3, (long)(BandFilter.B20M));
                    else if ((144000000.0 - g59_2m_Xtrv_losc_freq) >= 28000000.0 && (144000000.0 - g59_2m_Xtrv_losc_freq) <= 30000000.0)
                        g59.WriteToDevice(3, (long)(BandFilter.B10M));
                    Thread.Sleep(1);
                }
                else if (current_model == Model.GENESIS_G59NET)
                {
                    if ((144000000.0 - g59_2m_Xtrv_losc_freq) >= 14000000.0 && (144000000.0 - g59_2m_Xtrv_losc_freq) <= 14500000.0)
                        net_device.WriteToDevice(3, (long)(BandFilter.B20M));     // 14MHz IF
                    else if ((144000000.0 - g59_2m_Xtrv_losc_freq) >= 28000000.0 && (144000000.0 - g59_2m_Xtrv_losc_freq) <= 30000000.0)
                        net_device.WriteToDevice(3, (long)(BandFilter.B10M));     // 28MHz IF
                }
                else if (current_model == Model.GENESIS_G11)
                {
                    if ((144000000.0 - g11_Xtrv_losc_freq) >= 14000000.0 && (144000000.0 - g11_Xtrv_losc_freq) <= 14500000.0)
                        G11SetBandFilter(vfoAFreq);
                    else if ((144000000.0 - g11_Xtrv_losc_freq) >= 28000000.0 && (144000000.0 - g11_Xtrv_losc_freq) <= 30000000.0)
                        G11SetBandFilter(vfoAFreq);
                    Thread.Sleep(1);
                }

                NewVFOLargeFont = new_vfo_large_font;  // refresh Hover
                NewVFOSmallFont = new_vfo_small_font;
                VFOLargeFont = vfo_large_font;
                VFOSmallFont = vfo_small_font;
                WBIR_state = WBIR_State.NoAdapt;
            }
        }

        private void btnBandWWV_Click(object sender, System.EventArgs e) // changes yt7pwr
        {
            run_memory_zap = false;

            if (!radBandWWV.Checked)
                BandWWV(true, false, false);
            else
            {
                if (last_band == "WWV")
                    BandWWV(true, true, true);
                else
                    last_band = "WWV";
            }
        }

        private void btnBandWWV_CheckedChanged(object sender, System.EventArgs e) // changes yt7pwr
        {
            run_memory_zap = false;

            if (!vfoa_lock && !vfob_lock)
            {
                if (radBandWWV.Checked)
                {
                    BandWWV(false, true, false);
                }
                else
                {
                    last_band = "WWV";
                    SaveBand();
                }
            }
        }

        private void BandWWV(bool save_band_stack, bool get_band_stack, bool clicked)
        {
            if (save_band_stack)
                SaveBand();

            if (last_band.Equals("WWV") && save_band_stack && get_band_stack && !clicked)
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_wwv_index = (band_wwv_index - 1 + band_wwv_register) % band_wwv_register;
                else
                    band_wwv_index = (band_wwv_index + 1) % band_wwv_register;
            }
            else if (last_band.Equals("WWV") && get_band_stack && save_band_stack && clicked)
            {
                band_wwv_index = (band_wwv_index + 1) % band_wwv_register;
            }

            if (get_band_stack)
            {
                string filterMainRX, filterSubRX, modeMainRX, modeSubRX;
                double freqA;
                double freqB;
                double losc_freq;
                int af, rf, sql1, sql2;
                double pwr;
                bool sql1_on, sql2_on;
                CurrentBand = Band.WWV;

                if (DB.GetBandStack("WWV", band_wwv_index, out modeMainRX, out modeSubRX, out filterMainRX, out filterSubRX,
                    out freqA, out freqB, out losc_freq, out af, out rf, out pwr, out sql1, out sql1_on, out sql2, out sql2_on))
                {
                    SetBand(modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq, af, rf, pwr, sql1, sql1_on, sql2, sql2_on);
                }

                MaxFreq = LOSCFreq + DttSP.SampleRate / 2 * 1e-6;
                MinFreq = LOSCFreq - DttSP.SampleRate / 2 * 1e-6;
                NewVFOLargeFont = new_vfo_large_font;  // refresh Hover
                NewVFOSmallFont = new_vfo_small_font;
                VFOLargeFont = vfo_large_font;
                VFOSmallFont = vfo_small_font;
                WBIR_state = WBIR_State.NoAdapt;
            }
        }

        private void btnBandGEN_Click(object sender, System.EventArgs e) // changes yt7pwr
        {
            run_memory_zap = false;

            if (!radBandGEN.Checked)
                BandGEN(true, false, false);
            else
            {
                if (last_band == "GEN")
                    BandGEN(true, true, true);
                else
                    last_band = "GEN";
            }
        }

        private void btnBandGEN_CheckedChanged(object sender, System.EventArgs e) // changes yt7pwr
        {
            run_memory_zap = false;

            if (!vfoa_lock && !vfob_lock)
            {
                if (radBandGEN.Checked)
                {
                    BandGEN(false, true, false);
                }
                else
                {
                    last_band = "GEN";
                    SaveBand();
                }
            }
        }

        private void BandGEN(bool save_band_stack, bool get_band_stack, bool clicked)
        {
            if (save_band_stack)
                SaveBand();

            if (last_band == "GEN" && save_band_stack && get_band_stack && !clicked)
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_gen_index = (band_gen_index - 1 + band_gen_register) % band_gen_register;
                else
                    band_gen_index = (band_gen_index + 1) % band_gen_register;
            }
            else if (last_band.Equals("GEN") && get_band_stack && save_band_stack && clicked)
            {
                band_gen_index = (band_gen_index + 1) % band_gen_register;
            }

            if (get_band_stack)
            {
                string filterMainRX, filterSubRX, modeMainRX, modeSubRX;
                double freqA;
                double freqB;
                double losc_freq;
                int af, rf, sql1, sql2;
                double pwr;
                bool sql1_on, sql2_on;
                CurrentBand = Band.GEN;

                if (DB.GetBandStack("GEN", band_gen_index, out modeMainRX, out modeSubRX, out filterMainRX, out filterSubRX,
                    out freqA, out freqB, out losc_freq, out af, out rf, out pwr, out sql1, out sql1_on, out sql2, out sql2_on))
                {
                    SetBand(modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq, af, rf, pwr, sql1, sql1_on, sql2, sql2_on);
                }

                MaxFreq = LOSCFreq + DttSP.SampleRate / 2 * 1e-6;
                MinFreq = LOSCFreq - DttSP.SampleRate / 2 * 1e-6;
                NewVFOLargeFont = new_vfo_large_font;  // refresh Hover
                NewVFOSmallFont = new_vfo_small_font;
                VFOLargeFont = vfo_large_font;
                VFOSmallFont = vfo_small_font;
                WBIR_state = WBIR_State.NoAdapt;
            }
        }

        #endregion

        #region Mode Button Events
        // ======================================================
        // Mode Button Events
        // ======================================================

        private void SetMode(DSPMode new_mode) // changes yt7pwr
        {
            if (new_mode == DSPMode.FIRST || new_mode == DSPMode.LAST) return;

            DttSP.CurrentMode = (DSPMode)new_mode;				// set new DSP mode
            Audio.CurDSPMode = new_mode;
            Display_GDI.CurrentDSPMode = new_mode;

            double freq = vfoAFreq;

            g59.KEYER = 0xff;
            g11.KEYER = 0xff;
            net_device.KEYER = 0xff;
            ptbFilterShift.Value = 0;
            btnFilterShiftReset.BackColor = SystemColors.Control;

            switch (old_dsp_mode)
            {
                case DSPMode.LSB:
                case DSPMode.USB:
                case DSPMode.DSB:
                case DSPMode.CWU:
                case DSPMode.CWL:
                    break;
                case DSPMode .WFM:
                case DSPMode.FMN:
                    if (new_mode != DSPMode.AM &&
                        new_mode != DSPMode.SAM &&
                        new_mode != DSPMode.FMN)
                    {
                        chkMON.Enabled = true;
                        chkBIN.Enabled = true;
                    }
                    break;
                case DSPMode.AM:
                    if (new_mode != DSPMode.AM &&
                        new_mode != DSPMode.SAM &&
                        new_mode != DSPMode.FMN)
                    {
                        chkMON.Enabled = true;
                        chkBIN.Enabled = true;
                    }
                    break;
                case DSPMode.SAM:
                    if (new_mode != DSPMode.AM &&
                        new_mode != DSPMode.SAM &&
                        new_mode != DSPMode.FMN)
                    {
                        chkMON.Enabled = true;
                        chkBIN.Enabled = true;
                    }
                    break;
                case DSPMode.SPEC:
                    comboDisplayMode.Items.Insert(1, "Panadapter");
                    ptbFilterShift.Enabled = true;
                    btnFilterShiftReset.Enabled = true;
                    if (new_mode != DSPMode.DRM)
                    {
                        grpMainRXFilter.Enabled = true;
                        grpSubRXFilter.Enabled = true;
                    }

                    if (was_panadapter) comboDisplayMode.Text = "Panadapter";
                    break;
                case DSPMode.DIGL:
                    if (vac_auto_enable &&
                        new_mode != DSPMode.DIGU &&
                        new_mode != DSPMode.DRM)
                    {
                        SetupForm.VACEnable = false;
                    }
                    break;
                case DSPMode.DIGU:
                    if (vac_auto_enable &&
                        new_mode != DSPMode.DIGL &&
                        new_mode != DSPMode.DRM)
                    {
                        SetupForm.VACEnable = false;
                    }
                    break;
                case DSPMode.DRM:
                    if (vac_auto_enable &&
                        new_mode != DSPMode.DIGL &&
                        new_mode != DSPMode.DIGU)
                        SetupForm.VACEnable = false;
                    chkMOX.Enabled = true;
                    ptbFilterShift.Enabled = true;
                    btnFilterShiftReset.Enabled = true;
                    if (new_mode != DSPMode.SPEC)
                    {
                        grpMainRXFilter.Enabled = true;
                        grpSubRXFilter.Enabled = true;
                    }
                    break;
            }

            switch (new_mode)
            {
                case DSPMode.LSB:
                    SetupForm.grpCWXKeys.Visible = false;
                    SetupForm.grpVoiceMsgSetup.Visible = true;
                    grpMainRXMode.Text = "VFO A Mode - LSB";

                    if (!rx_only && PowerOn)
                        chkMOX.Enabled = true;

                    DttSP.SetTXFilters(tx_filter_low, tx_filter_high);
                    if (!minimal_screen)
                    {
                        grpModeSpecificPhone.BringToFront();
                        grpModeSpecificFM.SendToBack();
                        grpModeSpecificDigital.SendToBack();
                        grpModeSpecificCW.SendToBack();
                    }
                    if (old_dsp_mode == DSPMode.DIGL || old_dsp_mode == DSPMode.DIGU ||
                        old_dsp_mode == DSPMode.CWU || old_dsp_mode == DSPMode.CWL)
                    {
                        SetupForm.DSPBufferSize = 0;    // force refresh
                    }
                    break;
                case DSPMode.USB:
                    SetupForm.grpCWXKeys.Visible = false;
                    grpMainRXMode.Text = "VFO A Mode - USB";

                    if (!rx_only && PowerOn)
                        chkMOX.Enabled = true;

                    DttSP.SetTXFilters(tx_filter_low, tx_filter_high);
                    if (!minimal_screen)
                    {
                        grpModeSpecificPhone.BringToFront();
                        grpModeSpecificFM.SendToBack();
                        grpModeSpecificDigital.SendToBack();
                        grpModeSpecificCW.SendToBack();
                    }
                    if (old_dsp_mode == DSPMode.DIGL || old_dsp_mode == DSPMode.DIGU ||
                        old_dsp_mode == DSPMode.CWU || old_dsp_mode == DSPMode.CWL)
                    {
                        SetupForm.DSPBufferSize = 0;    // force refresh
                    }
                    break;
                case DSPMode.DSB:
                    SetupForm.grpCWXKeys.Visible = false;
                    SetupForm.grpVoiceMsgSetup.Visible = true;
                    grpMainRXMode.Text = "VFO A Mode - DSB";

                    if (!rx_only && PowerOn)
                        chkMOX.Enabled = true;

                    DttSP.SetTXFilters(tx_filter_low, tx_filter_high);

                    if (!minimal_screen)
                    {
                        grpModeSpecificPhone.BringToFront();
                        grpModeSpecificFM.SendToBack();
                        grpModeSpecificDigital.SendToBack();
                        grpModeSpecificCW.SendToBack();
                    }

                    if (old_dsp_mode == DSPMode.DIGL || old_dsp_mode == DSPMode.DIGU ||
                        old_dsp_mode == DSPMode.CWU || old_dsp_mode == DSPMode.CWL)
                    {
                        SetupForm.DSPBufferSize = 0;    // force refresh
                    }
                    break;
                /*case DSPMode.CWL:
                    chkManualNotchFilter.Checked = false;
                    SetupForm.grpCWXKeys.Visible = true;
                    SetupForm.grpVoiceMsgSetup.Visible = false;
                    grpMainRXMode.Text = "VFO A Mode - CWL";

                    if (!rx_only && PowerOn)
                    {
                        chkMOX.Enabled = true;
                        DttSP.CWRingRestart();
                        if (!DttSP.KeyerRunning())
                        {
                            DttSP.StartKeyer();
                            Keyer.RunKeyer = true;
                        }

                        DttSP.SetKeyerSpeed((float)udCWSpeed.Value);
                    }

                    cw_key_mode = true;
                    DttSP.SetTXFilters(tx_filter_low, tx_filter_high);

                    if (!minimal_screen)
                    {
                        grpModeSpecificDigital.SendToBack();
                        grpModeSpecificPhone.SendToBack();
                        grpModeSpecificFM.SendToBack();
                        grpModeSpecificCW.BringToFront();
                    }

                    if (old_dsp_mode != DSPMode.CWU && old_dsp_mode != DSPMode.CWL)
                    {
                        SetupForm.DSPBufferSize = 0;    // force refresh
                    }
                    break;*/
                case DSPMode.CWU:
                    chkManualNotchFilter.Checked = false;
                    SetupForm.grpCWXKeys.Visible = true;
                    SetupForm.grpVoiceMsgSetup.Visible = false;
                    grpMainRXMode.Text = "VFO A Mode - CW";

                    if (!rx_only && PowerOn)
                    {
                        chkMOX.Enabled = true;
                        DttSP.CWRingRestart();

                        if (!DttSP.KeyerRunning())
                        {
                            DttSP.StartKeyer();
                            Keyer.RunKeyer = true;
                        }

                        DttSP.SetKeyerSpeed((float)udCWSpeed.Value);
                    }

                    cw_key_mode = true;
                    DttSP.SetTXFilters(tx_filter_low, tx_filter_high);

                    if (!minimal_screen)
                    {
                        grpModeSpecificDigital.SendToBack();
                        grpModeSpecificPhone.SendToBack();
                        grpModeSpecificFM.SendToBack();
                        grpModeSpecificCW.BringToFront();
                    }

                    if (old_dsp_mode != DSPMode.CWU && old_dsp_mode != DSPMode.CWL)
                    {
                        SetupForm.DSPBufferSize = 0;    // force refresh
                    }
                    break;
                case DSPMode.WFM:
                    SetupForm.grpVoiceMsgSetup.Visible = false;
                    SetupForm.grpCWXKeys.Visible = false;
                    grpMainRXMode.Text = "VFO A Mode - WFM";

                    if (!rx_only && PowerOn)
                        chkMOX.Enabled = true;

                    chkBIN.Checked = false;
                    DttSP.SetTXFilters(tx_filter_low, tx_filter_high);

                    if (!minimal_screen)
                    {
                        grpModeSpecificPhone.SendToBack();
                        grpModeSpecificFM.BringToFront();
                        grpModeSpecificDigital.SendToBack();
                        grpModeSpecificCW.SendToBack();
                    }

                    if (old_dsp_mode == DSPMode.DIGL || old_dsp_mode == DSPMode.DIGU ||
                        old_dsp_mode == DSPMode.CWU || old_dsp_mode == DSPMode.CWL)
                    {
                        SetupForm.DSPBufferSize = 0;    // force refresh
                    }
                    break;
                case DSPMode.FMN:
                    SetupForm.grpVoiceMsgSetup.Visible = true;
                    SetupForm.grpCWXKeys.Visible = false;
                    grpMainRXMode.Text = "VFO A Mode - FMN";

                    if (!rx_only && PowerOn)
                        chkMOX.Enabled = true;

                    chkBIN.Checked = false;
                    //chkBIN.Enabled = false;
                    DttSP.SetTXFilters(tx_filter_low, tx_filter_high);
                    if (!minimal_screen)
                    {
                        grpModeSpecificPhone.SendToBack();
                        grpModeSpecificFM.BringToFront();
                        grpModeSpecificDigital.SendToBack();
                        grpModeSpecificCW.SendToBack();
                    }
                    if (old_dsp_mode == DSPMode.DIGL || old_dsp_mode == DSPMode.DIGU ||
                        old_dsp_mode == DSPMode.CWU || old_dsp_mode == DSPMode.CWL)
                    {
                        SetupForm.DSPBufferSize = 0;    // force refresh
                    }
                    break;
                case DSPMode.AM:
                    SetupForm.grpCWXKeys.Visible = false;
                    SetupForm.grpVoiceMsgSetup.Visible = true;
                    grpMainRXMode.Text = "VFO A Mode - AM";

                    if (!rx_only && PowerOn)
                        chkMOX.Enabled = true;

                    chkBIN.Checked = false;
                    //chkBIN.Enabled = false;
                    DttSP.SetTXFilters(tx_filter_low, tx_filter_high);
                    if (!minimal_screen)
                    {
                        grpModeSpecificPhone.BringToFront();
                        grpModeSpecificFM.SendToBack();
                        grpModeSpecificDigital.SendToBack();
                        grpModeSpecificCW.SendToBack();
                    }
                    if (old_dsp_mode == DSPMode.DIGL || old_dsp_mode == DSPMode.DIGU ||
                        old_dsp_mode == DSPMode.CWU || old_dsp_mode == DSPMode.CWL)
                    {
                        SetupForm.DSPBufferSize = 0;    // force refresh
                    }
                    break;
                case DSPMode.SAM:
                    SetupForm.grpCWXKeys.Visible = false;
                    SetupForm.grpVoiceMsgSetup.Visible = true;
                    grpMainRXMode.Text = "VFO A Mode - SAM";

                    if (!rx_only && PowerOn)
                        chkMOX.Enabled = true;

                    chkBIN.Checked = false;
                    //chkBIN.Enabled = false;
                    DttSP.SetTXFilters(tx_filter_low, tx_filter_high);
                    if (!minimal_screen)
                    {
                        grpModeSpecificPhone.BringToFront();
                        grpModeSpecificFM.SendToBack();
                        grpModeSpecificDigital.SendToBack();
                        grpModeSpecificCW.SendToBack();
                    }
                    if (old_dsp_mode == DSPMode.DIGL || old_dsp_mode == DSPMode.DIGU ||
                        old_dsp_mode == DSPMode.CWU || old_dsp_mode == DSPMode.CWL)
                    {
                        SetupForm.DSPBufferSize = 0;    // force refresh
                    }
                    break;
                case DSPMode.SPEC:
                    SetupForm.grpCWXKeys.Visible = false;
                    SetupForm.grpVoiceMsgSetup.Visible = false;
                    grpMainRXMode.Text = "VFO A Mode - SPEC";
                    DttSP.SetRXOsc(0, 0, 0.0);
                    grpMainRXFilter.Enabled = false;
                    grpSubRXFilter.Enabled = false;
                    grpMainRXFilter.Text = "VFO A Filter - " + (DttSP.SampleRate / 1000).ToString("f0") + "kHz";
                    ptbFilterShift.Enabled = false;
                    btnFilterShiftReset.Enabled = false;
                    bool save_pan;
                    if (save_pan = (Display_GDI.CurrentDisplayMode == DisplayMode.PANADAPTER))
                    {
                        comboDisplayMode.Text = "Spectrum";
                    }
                    comboDisplayMode.Items.Remove("Panadapter");
                    was_panadapter = save_pan;
                    DttSP.RXDisplayLow = -(int)DttSP.SampleRate / 2;
                    DttSP.RXDisplayHigh = (int)DttSP.SampleRate / 2;
                    if (!minimal_screen)
                    {
                        grpModeSpecificPhone.BringToFront();
                        grpModeSpecificFM.SendToBack();
                        grpModeSpecificDigital.SendToBack();
                        grpModeSpecificCW.SendToBack();
                    }
                    if (old_dsp_mode == DSPMode.DIGL || old_dsp_mode == DSPMode.DIGU ||
                        old_dsp_mode == DSPMode.CWU || old_dsp_mode == DSPMode.CWL)
                    {
                        SetupForm.DSPBufferSize = 0;    // force refresh
                    }
                    break;
                case DSPMode.DIGL:
                    SetupForm.grpCWXKeys.Visible = false;
                    SetupForm.grpVoiceMsgSetup.Visible = false;
                    grpMainRXMode.Text = "VFO A Mode - DIGL";
                    DttSP.SetTXFilters(tx_filter_low, tx_filter_high);
                    if (vac_auto_enable)
                        SetupForm.VACEnable = true;
                    if (!minimal_screen)
                    {
                        grpModeSpecificCW.SendToBack();
                        grpModeSpecificPhone.SendToBack();
                        grpModeSpecificFM.SendToBack();
                        grpModeSpecificDigital.BringToFront();
                    }
                    if (old_dsp_mode != DSPMode.DIGL && old_dsp_mode != DSPMode.DIGU)
                    {
                        SetupForm.DSPBufferSize = 0;    // force refresh
                    }
                    break;
                case DSPMode.DIGU:
                    SetupForm.grpCWXKeys.Visible = false;
                    SetupForm.grpVoiceMsgSetup.Visible = false;
                    grpMainRXMode.Text = "VFO A Mode - DIGU";
                    DttSP.SetTXFilters(tx_filter_low, tx_filter_high);
                    if (vac_auto_enable)
                        SetupForm.VACEnable = true;
                    if (!minimal_screen)
                    {
                        grpModeSpecificCW.SendToBack();
                        grpModeSpecificPhone.SendToBack();
                        grpModeSpecificFM.SendToBack();
                        grpModeSpecificDigital.BringToFront();
                    }
                    if (old_dsp_mode != DSPMode.DIGL && old_dsp_mode != DSPMode.DIGU)
                    {
                        SetupForm.DSPBufferSize = 0;    // force refresh
                    }
                    break;
                case DSPMode.DRM:
                    SetupForm.grpCWXKeys.Visible = false;
                    SetupForm.grpVoiceMsgSetup.Visible = false;
                    grpMainRXMode.Text = "VFO A Mode - DRM";
                    if (vac_auto_enable)
                        SetupForm.VACEnable = true;
                    chkMOX.Enabled = false;
                    grpMainRXFilter.Enabled = false;
                    grpSubRXFilter.Enabled = false;
                    ptbFilterShift.Enabled = false;
                    btnFilterShiftReset.Enabled = false;
                    grpMainRXFilter.Text = "VFO A Filter - DRM";
                    DttSP.SetRXFilters(0, 10500);
                    if (!minimal_screen)
                    {
                        grpModeSpecificCW.SendToBack();
                        grpModeSpecificPhone.SendToBack();
                        grpModeSpecificFM.SendToBack();
                        grpModeSpecificDigital.BringToFront();
                    }
                    if (old_dsp_mode == DSPMode.DIGL || old_dsp_mode == DSPMode.DIGU ||
                        old_dsp_mode == DSPMode.CWU || old_dsp_mode == DSPMode.CWL)
                    {
                        SetupForm.DSPBufferSize = 0;    // force refresh
                    }
                    break;
            }

            radFilter1.Text = filter_presets[(int)new_mode].GetName(Filter.F1);
            radFilter2.Text = filter_presets[(int)new_mode].GetName(Filter.F2);
            radFilter3.Text = filter_presets[(int)new_mode].GetName(Filter.F3);
            radFilter4.Text = filter_presets[(int)new_mode].GetName(Filter.F4);
            radFilter5.Text = filter_presets[(int)new_mode].GetName(Filter.F5);
            radFilter6.Text = filter_presets[(int)new_mode].GetName(Filter.F6);
            radFilter7.Text = filter_presets[(int)new_mode].GetName(Filter.F7);
            radFilter8.Text = filter_presets[(int)new_mode].GetName(Filter.F8);
            radFilter9.Text = filter_presets[(int)new_mode].GetName(Filter.F9);
            radFilter10.Text = filter_presets[(int)new_mode].GetName(Filter.F10);
            radFilterVar1.Text = filter_presets[(int)new_mode].GetName(Filter.VAR1);
            radFilterVar2.Text = filter_presets[(int)new_mode].GetName(Filter.VAR2);

            current_dsp_mode = new_mode;

            if (current_dsp_mode == DSPMode.WFM)
            {
                if(chkWFMstereo.Checked)
                    DttSP.FMenableStereo(0, 0, 1);
            }
            else
            {
                DttSP.FMenableStereo(0, 0, 0);
            }

            if (current_dsp_mode != DSPMode.SPEC && !callibrating)
                CurrentFilter = filter_presets[(int)new_mode].LastFilter;

            tbFilterWidthScroll_newMode();      // wjt

#if(DirectX)
            Display_DirectX.CurrentDSPMode = new_mode;

            switch (new_mode)
            {
                case DSPMode.CWL:
                case DSPMode.CWU:
                    if (chkShowTXCWFreq.Checked)
                    {
                        Display_DirectX.DrawTXCWFreq = true;
                    }
                    else
                    {
                        Display_DirectX.DrawTXCWFreq = false;
                    }

                    Display_DirectX.RefreshPanadapterGrid = true;
                    Display_DirectX.DrawTXFilter = false;
                    break;
                case DSPMode.DRM:
                case DSPMode.SPEC:
                    Display_DirectX.DrawTXFilter = false;
                    Display_DirectX.DrawTXCWFreq = false;
                    Display_DirectX.RefreshPanadapterGrid = true;
                    break;
                default:
                    if (chkShowTXFilter.Checked)
                        Display_DirectX.DrawTXFilter = true;
                    else
                        Display_DirectX.DrawTXFilter = false;

                    Display_DirectX.RefreshPanadapterGrid = true;
                    Display_DirectX.DrawTXCWFreq = false;
                    break;
            }
#endif

            if (!chkVFOSplit.Checked)
            {
                if (current_model == Model.GENESIS_G59USB)
                {
                    if (TUN)
                        g59.WriteToDevice(18, (long)Keyer_mode.TUNE);
                    else
                    {
                        SetupForm.KeyerModeChange();
                    }

                    Thread.Sleep(1);
                }
                else if (current_model == Model.GENESIS_G59NET)
                {
                    if (TUN)
                        net_device.WriteToDevice(18, (long)Keyer_mode.TUNE);
                    else
                    {
                        SetupForm.KeyerModeChange();
                    }
                }
                else if (current_model == Model.GENESIS_G11)
                {
                    if (TUN)
                        g11.WriteToDevice(18, (long)Keyer_mode.TUNE);
                    else
                    {
                        SetupForm.KeyerModeChange();
                    }

                    Thread.Sleep(1);
                }
                else if (current_model == Model.GENESIS_G6)
                {
                    if (TUN)
                        g6.WriteToDevice(18, (long)Keyer_mode.TUNE);
                    else
                    {
                        SetupForm.KeyerModeChange();
                    }
                }
            }

            if (EthCATIsActive)
                CAT_client_socket.ClientServerSync("ZZMD;");        // sync with server
        }

        private void radModeLSB_CheckedChanged(object sender, System.EventArgs e)
        {
            if (radModeLSB.Checked)
                SetMode(DSPMode.LSB);
            else
                old_dsp_mode = DSPMode.LSB;
        }

        private void radModeUSB_CheckedChanged(object sender, System.EventArgs e)
        {
            if (radModeUSB.Checked)
                SetMode(DSPMode.USB);
            else
                old_dsp_mode = DSPMode.USB;
        }

        private void radModeDSB_CheckedChanged(object sender, System.EventArgs e)
        {
            if (radModeDSB.Checked)
                SetMode(DSPMode.DSB);
            else
                old_dsp_mode = DSPMode.DSB;
        }

        private void radModeWFM_CheckedChanged(object sender, System.EventArgs e)
        {
            if (radModeWFM.Checked)
                SetMode(DSPMode.WFM);
            else
                old_dsp_mode = DSPMode.WFM;

        }

        private void radModeCWU_CheckedChanged(object sender, System.EventArgs e)
        {
            if (radModeCWU.Checked)
                SetMode(DSPMode.CWU);
            else
                old_dsp_mode = DSPMode.CWU;
        }

        private void radModeFMN_CheckedChanged(object sender, System.EventArgs e)
        {
            if (radModeFMN.Checked)
                SetMode(DSPMode.FMN);
            else
                old_dsp_mode = DSPMode.FMN;
        }

        private void radModeAM_CheckedChanged(object sender, System.EventArgs e)
        {
            if (radModeAM.Checked)
                SetMode(DSPMode.AM);
            else
                old_dsp_mode = DSPMode.AM;
        }

        private void radModeSAM_CheckedChanged(object sender, System.EventArgs e)
        {
            if (radModeSAM.Checked)
                SetMode(DSPMode.SAM);
            else
                old_dsp_mode = DSPMode.SAM;
        }

        private void radModeDIGU_CheckedChanged(object sender, System.EventArgs e)
        {
            if (radModeDIGU.Checked)
                SetMode(DSPMode.DIGU);
            else
                old_dsp_mode = DSPMode.DIGU;
        }

        private void radModeSPEC_CheckedChanged(object sender, System.EventArgs e)
        {
            if (radModeSPEC.Checked)
                SetMode(DSPMode.SPEC);
            else
                old_dsp_mode = DSPMode.SPEC;
        }

        private void radModeDIGL_CheckedChanged(object sender, System.EventArgs e)
        {
            if (radModeDIGL.Checked)
                SetMode(DSPMode.DIGL);
            else
                old_dsp_mode = DSPMode.DIGL;
        }

        private void radModeDRM_CheckedChanged(object sender, System.EventArgs e)
        {
            if (radModeDRM.Checked)
                SetMode(DSPMode.DRM);
            else
                old_dsp_mode = DSPMode.DRM;
        }

        #endregion

        #region Filter Button Events
        // ======================================================
        // Filter Button Events
        // ======================================================

        public void SetFilter(Filter new_filter)
        {
            if (current_dsp_mode == DSPMode.FIRST || current_dsp_mode == DSPMode.LAST) return;

            int low = 0, high = 0;

            current_filter = new_filter;
            low = filter_presets[(int)current_dsp_mode].GetLow(new_filter);
            high = filter_presets[(int)current_dsp_mode].GetHigh(new_filter);
            filter_presets[(int)current_dsp_mode].LastFilter = new_filter;

            grpMainRXFilter.Text = "VFO A Filter - " + filter_presets[(int)current_dsp_mode].GetName(new_filter);

            switch (new_filter)
            {
                case Filter.VAR1:
                    radFilterVar1.BackColor = button_selected_color;
                    udFilterLow.BackColor = button_selected_color;
                    udFilterHigh.BackColor = button_selected_color;
                    udFilterLow.Enabled = true;
                    udFilterHigh.Enabled = true;
                    break;
                case Filter.VAR2:
                    radFilterVar2.BackColor = button_selected_color;
                    udFilterLow.BackColor = button_selected_color;
                    udFilterHigh.BackColor = button_selected_color;
                    udFilterLow.Enabled = true;
                    udFilterHigh.Enabled = true;
                    break;
                default:
                    udFilterLow.Enabled = false;
                    udFilterHigh.Enabled = false;
                    udFilterLow.BackColor = SystemColors.Window;
                    udFilterHigh.BackColor = SystemColors.Window;
                    break;
            }

            UpdateFilters(low, high);

            if (EthCATIsActive)
                CAT_client_socket.ClientServerSync("ZZFI;");        // sync with server
        }

        private void radFilter1_CheckedChanged(object sender, System.EventArgs e)
        {
            if (radFilter1.Checked)
            {
                SetFilter(Filter.F1);
            }
        }

        private void radFilter2_CheckedChanged(object sender, System.EventArgs e)
        {
            if (radFilter2.Checked)
                SetFilter(Filter.F2);
        }

        private void radFilter3_CheckedChanged(object sender, System.EventArgs e)
        {
            if (radFilter3.Checked)
                SetFilter(Filter.F3);
        }

        private void radFilter4_CheckedChanged(object sender, System.EventArgs e)
        {
            if (radFilter4.Checked)
                SetFilter(Filter.F4);
        }

        private void radFilter5_CheckedChanged(object sender, System.EventArgs e)
        {
            if (radFilter5.Checked)
                SetFilter(Filter.F5);
        }

        private void radFilter6_CheckedChanged(object sender, System.EventArgs e)
        {
            if (radFilter6.Checked)
                SetFilter(Filter.F6);
        }

        private void radFilter7_CheckedChanged(object sender, System.EventArgs e)
        {
            if (radFilter7.Checked)
                SetFilter(Filter.F7);
        }

        private void radFilter8_CheckedChanged(object sender, System.EventArgs e)
        {
            if (radFilter8.Checked)
                SetFilter(Filter.F8);
        }

        private void radFilter9_CheckedChanged(object sender, System.EventArgs e)
        {
            if (radFilter9.Checked)
                SetFilter(Filter.F9);
        }

        private void radFilter10_CheckedChanged(object sender, System.EventArgs e)
        {
            if (radFilter10.Checked)
                SetFilter(Filter.F10);
        }

        private void radFilterVar1_CheckedChanged(object sender, System.EventArgs e)
        {
            if (radFilterVar1.Checked)
                SetFilter(Filter.VAR1);
        }

        private void radFilterVar2_CheckedChanged(object sender, System.EventArgs e)
        {
            if (radFilterVar2.Checked)
                SetFilter(Filter.VAR2);
        }

        private void udFilterLow_ValueChanged(object sender, System.EventArgs e)
        {
            if (!booting)
            {
                //if (udFilterLow.Focused)
                {
                    if (udFilterLow.Value >= udFilterHigh.Value - 10)
                    {
                        udFilterLow.Value = udFilterHigh.Value - 10;
                        return;
                    }

                    UpdateFilters((int)udFilterLow.Value, (int)udFilterHigh.Value);

                    if (!save_filter_changes)
                        filter_presets[(int)current_dsp_mode].SetLow(current_filter, (int)udFilterLow.Value);
                }

                if (save_filter_changes)
                    filter_presets[(int)current_dsp_mode].SetLow(current_filter, (int)udFilterLow.Value);

                if (udFilterLow.Focused)
                    btnHidden.Focus();
            }
        }

        private void udFilterHigh_ValueChanged(object sender, System.EventArgs e)
        {
            try
            {
                if (!booting)
                {
                    //            if (udFilterHigh.Focused)
                    {
                        if (udFilterHigh.Value <= udFilterLow.Value + 10)
                        {
                            udFilterHigh.Value = udFilterLow.Value + 10;
                            return;
                        }

                        UpdateFilters((int)udFilterLow.Value, (int)udFilterHigh.Value);

                        //if (!save_filter_changes)
                            filter_presets[(int)current_dsp_mode].SetHigh(current_filter, (int)udFilterHigh.Value);
                    }

                    //if (save_filter_changes)
                        //filter_presets[(int)current_dsp_mode].SetHigh(current_filter, (int)udFilterHigh.Value);

                    if (udFilterHigh.Focused)
                        btnHidden.Focus();
                }
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private void DoFilterShift(int shift, bool redraw)
        {
            // VK6APH: Does the Filter Shift function, alters the filter low and high frequency values 
            // as the Filter Shift slider is moved. We need to keep the last Filter Shift values
            // that the variable filters use since, unlike the other filters, there are 
            // no pre-set bandwidths that they can default to when the Filter Shift is 
            // turned off. These values are stored in the public variables last_var1_shift and
            // last_var2_shift. 
            int IFShift;
            int low;
            int high;
            int bandwidth;
            int max_shift = 20000;		// needed when using variable filters so we can't exceed +/- 10kHz DSP limits

            if (current_dsp_mode == DSPMode.SPEC ||
                current_dsp_mode == DSPMode.DRM)
                return;

            bandwidth = (int)Math.Abs(udFilterHigh.Value - udFilterLow.Value); // calculate current filter bandwidth 

            // set the maximum IF Shift depending on filter bandwidth in use 
            if (bandwidth > 800)
            {
                ptbFilterShift.Maximum = 1000;  // max IF Shift +/- 1kHz for filters > 800Hz wide
                ptbFilterShift.Minimum = -1000;
            }
            else
            {
                ptbFilterShift.Maximum = 500;	// max IF Shift +/- 500Hz for filters < 800Hz wide
                ptbFilterShift.Minimum = -500;
            }
            // calculate how far the IF Shift slider has moved
            // if we are using variable bandwidth filters need to use their last shift value
            if (current_filter == Filter.VAR1)
                IFShift = shift - last_var1_shift;
            else if (current_filter == Filter.VAR2)
                IFShift = shift - last_var2_shift;
            else
                IFShift = shift - last_filter_shift;

            high = (int)Math.Min(udFilterHigh.Value + IFShift, max_shift);	// limit high shift to maximum value
            low = (int)Math.Max(udFilterLow.Value + IFShift, -max_shift);	// limit low shift to maximum value

            DttSP.SetFilter(low, high);	    				// select new filters
            udFilterLow.Value = low;						// display new low value 
            udFilterHigh.Value = high;						// display new high value
            //            if (redraw) Display_GDI.DrawBackground();			// draw new background for updated filter values

            // store the last IF Shift applied for use next time
            if (current_filter == Filter.VAR1)
                last_var1_shift = last_var1_shift + IFShift;
            else if (current_filter == Filter.VAR2)
                last_var2_shift = last_var2_shift + IFShift;
            else
                last_filter_shift = last_filter_shift + IFShift;
            // show the IF Shift is active by setting the zero button colour
            if (shift != 0)
                btnFilterShiftReset.BackColor = button_selected_color;
        }

        private void tbFilterShift_Scroll(object sender, System.EventArgs e)
        {
            SelectVarFilter();

            int bw = DttSP.RXFilterHighCut - DttSP.RXFilterLowCut;
            int default_center = 0;

            switch (current_dsp_mode)
            {
                case DSPMode.USB:
                    default_center = default_low_cut + bw / 2;
                    break;
                case DSPMode.LSB:
                    default_center = -default_low_cut - bw / 2;
                    break;
                case DSPMode.CWU:
                    default_center = cw_pitch;
                    break;
                case DSPMode.CWL:
                    default_center = -cw_pitch;
                    break;
                case DSPMode.DIGU:
                    default_center = digu_click_tune_offset;
                    break;
                case DSPMode.DIGL:
                    default_center = -digl_click_tune_offset;
                    break;
            }

            int adjusted_max = max_filter_shift;
            if (default_center > 0)
            {
                if (ptbFilterShift.Value > 0)
                {
                    adjusted_max = Math.Min(max_filter_shift, 20000 - (Math.Abs(default_center) + bw / 2));
                }
            }
            else if (default_center < 0)
            {
                if (ptbFilterShift.Value < 0)
                {
                    adjusted_max = Math.Min(max_filter_shift, 20000 - (Math.Abs(default_center) + bw / 2));
                }
            }
            else //default_center == 0
            {
                adjusted_max = Math.Min(max_filter_shift, 20000 - bw / 2);
            }

            int range = ptbFilterShift.Maximum - ptbFilterShift.Minimum;
            int new_center = default_center + (int)((float)ptbFilterShift.Value / (range / 2) * adjusted_max);
            UpdateFilters(new_center - bw / 2, new_center + bw / 2);

            btnFilterShiftReset.BackColor = button_selected_color;

            if (ptbFilterShift.Focused)
                btnHidden.Focus();
        }

        private void tbFilterShift_Wheel(MouseEventArgs e)
        {
            if (SetupForm.FastFocus)
                ptbFilterShift.Focus();
        }

        private void tbFilterShift_Update(int low, int high)
        {
            int bw = DttSP.RXFilterHighCut - DttSP.RXFilterLowCut;
            int default_center = 0;
            int current_center = (low + high) / 2;

            switch (current_dsp_mode)
            {
                case DSPMode.USB:
                    default_center = default_low_cut + bw / 2;
                    break;
                case DSPMode.LSB:
                    default_center = -default_low_cut - bw / 2;
                    break;
                case DSPMode.CWU:
                    default_center = cw_pitch;
                    break;
                case DSPMode.CWL:
                    default_center = -cw_pitch;
                    break;
                case DSPMode.DIGU:
                    default_center = digu_click_tune_offset;
                    break;
                case DSPMode.DIGL:
                    default_center = -digl_click_tune_offset;
                    break;
            }

            int adjusted_max = max_filter_shift;
            if (default_center > 0)
            {
                if (current_center > default_center)
                {
                    adjusted_max = Math.Min(max_filter_shift, 20000 - (Math.Abs(default_center) + bw / 2));
                }
            }
            else if (default_center < 0)
            {
                if (current_center < default_center)
                {
                    adjusted_max = Math.Min(max_filter_shift, 20000 - (Math.Abs(default_center) + bw / 2));
                }
            }
            else //default_center == 0
            {
                adjusted_max = Math.Min(max_filter_shift, 20000 - bw / 2);
            }

            int range = ptbFilterShift.Maximum - ptbFilterShift.Minimum;
            int delta = current_center - default_center;
            int new_val = (int)((float)delta / adjusted_max * (range / 2));
            if (new_val > ptbFilterShift.Maximum) new_val = ptbFilterShift.Maximum;
            if (new_val < ptbFilterShift.Minimum) new_val = ptbFilterShift.Minimum;
            ptbFilterShift.Value = new_val;
        }

        private void btnFilterShiftReset_Click(object sender, System.EventArgs e)
        {
            int bw = DttSP.RXFilterHighCut - DttSP.RXFilterLowCut;
            int low, high;
            switch (current_dsp_mode)
            {
                case DSPMode.AM:
                case DSPMode.SAM:
                case DSPMode.FMN:
                case DSPMode.DSB:
                    ptbFilterShift.Value = 0;
                    tbFilterShift_Scroll(this, EventArgs.Empty);
                    break;
                case DSPMode.USB:
                    low = default_low_cut;
                    high = low + bw;
                    UpdateFilters(low, high);
                    break;
                case DSPMode.CWU:
                    low = cw_pitch - bw / 2;
                    high = cw_pitch + bw / 2;
                    if (low < 0)
                    {
                        int delta = -low;
                        low += delta;
                        high += delta;
                    }
                    else if (high > 20000)
                    {
                        int delta = high - 20000;
                        high -= delta;
                        low -= delta;
                    }
                    UpdateFilters(low, high);
                    break;
                case DSPMode.DIGU:
                    low = digu_click_tune_offset - bw / 2;
                    high = digu_click_tune_offset + bw / 2;
                    if (low < 0)
                    {
                        int delta = -low;
                        low += delta;
                        high += delta;
                    }
                    else if (high > 20000)
                    {
                        int delta = high - 20000;
                        high -= delta;
                        low -= delta;
                    }
                    UpdateFilters(low, high);
                    break;
                case DSPMode.LSB:
                    high = -default_low_cut;
                    low = high - bw;
                    UpdateFilters(low, high);
                    break;
                case DSPMode.CWL:
                    high = -cw_pitch + bw / 2;
                    low = -cw_pitch - bw / 2;
                    if (high > 0)
                    {
                        int delta = -high;
                        low -= delta;
                        high -= delta;
                    }
                    else if (low < -20000)
                    {
                        int delta = low + 20000;
                        high += delta;
                        low += delta;
                    }
                    UpdateFilters(low, high);
                    break;
                case DSPMode.DIGL:
                    high = -digl_click_tune_offset + bw / 2;
                    low = -digl_click_tune_offset - bw / 2;
                    if (high > 0)
                    {
                        int delta = -high;
                        low -= delta;
                        high -= delta;
                    }
                    else if (low < -20000)
                    {
                        int delta = low + 20000;
                        high += delta;
                        low += delta;
                    }
                    UpdateFilters(low, high);
                    break;
            }
            btnFilterShiftReset.BackColor = SystemColors.Control;	// make button grey
        }

        private FilterWidthMode current_filter_width_mode_subRX = FilterWidthMode.Linear;
        public FilterWidthMode CurrentFilterWidthModeSubRX
        {
            get { return current_filter_width_mode_subRX; }
            set
            {
                current_filter_width_mode_subRX = value;
                UpdateFiltersSubRX(DttSP.RXFilterLowCut, DttSP.RXFilterHighCut);
            }
        }

        private FilterWidthMode current_filter_width_mode = FilterWidthMode.Linear;
        public FilterWidthMode CurrentFilterWidthMode
        {
            get { return current_filter_width_mode; }
            set
            {
                current_filter_width_mode = value;
                UpdateFilters(DttSP.RXFilterLowCut, DttSP.RXFilterHighCut);
            }
        }

        private void tbSubRXFilterWidth_Update(int low, int high)  // yt7pwr
        {
            int bw = high - low;
            switch (current_dsp_mode_subRX)
            {
                case DSPMode.AM:
                case DSPMode.SAM:
                case DSPMode.FMN:
                case DSPMode.DSB:
                    bw /= 2;
                    break;
            }

            int range = ptbSubRXFilterWidth.Maximum - ptbSubRXFilterWidth.Minimum;
            int new_val = 0;

            switch (current_filter_width_mode)
            {
                case FilterWidthMode.Linear:
                    new_val = ptbSubRXFilterWidth.Minimum + (int)((float)bw / max_filter_width_subRX * range);
                    break;
                case FilterWidthMode.Log:
                    double max_log = Math.Log(ptbSubRXFilterWidth.Maximum);
                    double temp = max_log - (float)bw / max_filter_width_subRX * max_log;
                    new_val = ptbSubRXFilterWidth.Maximum - (int)Math.Pow(Math.E, temp);
                    break;
                case FilterWidthMode.Log10:
                    max_log = Math.Log10(ptbSubRXFilterWidth.Maximum);
                    temp = max_log - (float)bw / max_filter_width_subRX * max_log;
                    new_val = ptbSubRXFilterWidth.Maximum - (int)Math.Pow(10, temp);
                    break;
            }

            if (new_val > ptbSubRXFilterWidth.Maximum) new_val = ptbSubRXFilterWidth.Maximum;
            if (new_val < ptbSubRXFilterWidth.Minimum) new_val = ptbSubRXFilterWidth.Minimum;
            ptbSubRXFilterWidth.Value = new_val;
        }

        private void tbFilterWidth_Update(int low, int high)
        {
            int bw = high - low;
            switch (current_dsp_mode)
            {
                case DSPMode.AM:
                case DSPMode.SAM:
                case DSPMode.FMN:
                case DSPMode.DSB:
                    bw /= 2;
                    break;
            }

            int range = ptbFilterWidth.Maximum - ptbFilterWidth.Minimum;
            int new_val = 0;

            switch (current_filter_width_mode)
            {
                case FilterWidthMode.Linear:
                    new_val = ptbFilterWidth.Minimum + (int)((float)bw / max_filter_width * range);
                    break;
                case FilterWidthMode.Log:
                    double max_log = Math.Log(ptbFilterWidth.Maximum);
                    double temp = max_log - (float)bw / max_filter_width * max_log;
                    new_val = ptbFilterWidth.Maximum - (int)Math.Pow(Math.E, temp);
                    break;
                case FilterWidthMode.Log10:
                    max_log = Math.Log10(ptbFilterWidth.Maximum);
                    temp = max_log - (float)bw / max_filter_width * max_log;
                    new_val = ptbFilterWidth.Maximum - (int)Math.Pow(10, temp);
                    break;
            }

            if (new_val > ptbFilterWidth.Maximum) new_val = ptbFilterWidth.Maximum;
            if (new_val < ptbFilterWidth.Minimum) new_val = ptbFilterWidth.Minimum;
            ptbFilterWidth.Value = new_val;
        }

        private void tbFilterWidth_Scroll(object sender, System.EventArgs e)
        {
            if (current_dsp_mode == DSPMode.DRM || current_dsp_mode == DSPMode.SPEC)
            {
                return;  // no good in this mode 
            }

            SelectVarFilter();

            int range = ptbFilterWidth.Maximum - ptbFilterWidth.Minimum;
            int new_bw = 0;

            switch (current_filter_width_mode)
            {
                case FilterWidthMode.Linear:
                    new_bw = (int)((float)(ptbFilterWidth.Value - ptbFilterWidth.Minimum) / range * max_filter_width);
                    break;
                case FilterWidthMode.Log:
                    double max_log = Math.Log(ptbFilterWidth.Maximum);
                    double temp = Math.Log(Math.Max((ptbFilterWidth.Maximum - ptbFilterWidth.Value), 1.0));
                    temp = max_log - temp;
                    new_bw = (int)((float)(temp / max_log * max_filter_width));
                    break;
                case FilterWidthMode.Log10:
                    max_log = Math.Log10(ptbFilterWidth.Maximum);
                    temp = Math.Log10(Math.Max((ptbFilterWidth.Maximum - ptbFilterWidth.Value), 1.0));
                    temp = max_log - temp;
                    new_bw = (int)((float)(temp / max_log * max_filter_width));
                    break;
            }

            new_bw = Math.Max(new_bw, 10);
            int current_center = (DttSP.RXFilterLowCut + DttSP.RXFilterHighCut) / 2;
            int low = 0, high = 0;
            switch (current_dsp_mode)
            {
                case DSPMode.AM:
                case DSPMode.SAM:
                case DSPMode.FMN:
                case DSPMode.DSB:
                    low = current_center - new_bw;
                    high = current_center + new_bw;
                    if (low < -max_filter_width)
                    {
                        low += (-max_filter_width - low);
                        high += (-max_filter_width - low);
                    }
                    else if (high > max_filter_width)
                    {
                        high -= (high - max_filter_width);
                        low -= (high - max_filter_width);
                    }
                    break;
                case DSPMode.LSB:
                    high = -default_low_cut;
                    low = high - new_bw;
                    break;
                case DSPMode.CWL:
                case DSPMode.DIGL:
                    low = current_center - new_bw / 2;
                    high = current_center + new_bw / 2;
                    if (high > -default_low_cut && DttSP.RXFilterHighCut <= -default_low_cut)
                    {
                        high = -default_low_cut;
                        low = high - new_bw;
                    }
                    else if (low < -20000)
                    {
                        low = -20000;
                        high = low + new_bw;
                    }
                    break;
                case DSPMode.USB:
                    low = default_low_cut;
                    high = low + new_bw;
                    break;
                case DSPMode.CWU:
                case DSPMode.DIGU:
                    low = current_center - new_bw / 2;
                    high = current_center + new_bw / 2;
                    if (low < default_low_cut && DttSP.RXFilterLowCut >= default_low_cut)
                    {
                        low = default_low_cut;
                        high = low + new_bw;
                    }
                    else if (high > 20000)
                    {
                        high = 20000;
                        low = high - new_bw;
                    }
                    break;
            }
            UpdateFilters(low, high);

            if (ptbFilterWidth.Focused)
                btnHidden.Focus();
        }

        private void tbFilterWidth_Wheel(MouseEventArgs e)
        {
            if (SetupForm.FastFocus)
                ptbFilterWidth.Focus();
        }

        private void tbFilterWidthScroll_newModeSubRX()  // yt7pwr
        {
            //centerSave = 0;  // dump any save center with scroller is keeping 
            switch (current_dsp_mode_subRX)
            {
                case DSPMode.SPEC:
                case DSPMode.DRM:
                    ptbSubRXFilterWidth.Enabled = false;
                    break;

                default:
                    ptbSubRXFilterWidth.Enabled = true;
                    break;
            }
        }

        private void tbFilterWidthScroll_newMode()
        {
            //centerSave = 0;  // dump any save center with scroller is keeping 
            switch (current_dsp_mode)
            {
                case DSPMode.SPEC:
                case DSPMode.DRM:
                    ptbFilterWidth.Enabled = false;
                    break;

                default:
                    ptbFilterWidth.Enabled = true;
                    break;
            }
        }
        #endregion

        #region VFO Button Events

        // Added 6/20/05 BT for CAT commands
        public void CATVFOSwap(string pChangec)
        {
            string c = pChangec;
            if (c.Length > 0)
            {
                switch (c)
                {
                    case "0":
                        btnVFOAtoB_Click(btnVFOAtoB, EventArgs.Empty);  // VFOA->VFOB
                        break;
                    case "1":
                        btnVFOBtoA_Click(btnVFOBtoA, EventArgs.Empty);  // VFOB->VFOA
                        break;
                    case "2":
                        btnVFOSwap_Click(btnVFOSwap, EventArgs.Empty);  // VFOA<->VFOB
                        break;
                    case "3":
                        VFOBFreq = VFOAFreq;                            // VFOB == VFOA
                        break;
                    case "4":
                        VFOAFreq = VFOBFreq;                            // VFOA == VFOB
                        break;
                    case "5":
                        VFOAFreq = LOSCFreq;                            // VFOA == LOSC
                        break;
                    case "6":
                        VFOBFreq = LOSCFreq;                            // VFOB == LOSC
                        break;
                }
            }
        }


        private void btnVFOAtoB_Click(object sender, System.EventArgs e)
        {
            try
            {
                txtVFOBFreq.Text = txtVFOAFreq.Text;
                txtVFOBFreq_LostFocus(this, EventArgs.Empty);
                txtVFOBnew.Text = txtVFOAnew.Text;
                txtVFOBnew_LostFocus(this, EventArgs.Empty);
                vfob_dsp_mode = current_dsp_mode;
                vfob_filter = current_filter;
                btnVFOAtoB.Checked = false;
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private void btnVFOBtoA_Click(object sender, System.EventArgs e)
        {
            try
            {
                CurrentDSPMode = vfob_dsp_mode;
                CurrentFilter = vfob_filter;
                txtVFOAFreq.Text = txtVFOBFreq.Text;
                txtVFOAFreq_LostFocus(this, EventArgs.Empty);
                txtVFOAnew.Text = txtVFOBnew.Text;
                txtVFOAnew_LostFocus(this, EventArgs.Empty);
                btnVFOBtoA.Checked = false;
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private void btnVFOSwap_Click(object sender, System.EventArgs e)
        {
            try
            {
                string temp = txtVFOAFreq.Text;

                if (!chkEnableSubRX.Checked)
                {
                    DSPMode mode = current_dsp_mode;
                    Filter filter = current_filter;

                    CurrentDSPMode = vfob_dsp_mode;
                    CurrentFilter = vfob_filter;
                    vfob_dsp_mode = mode;
                    vfob_filter = filter;
                }

                txtVFOAFreq.Text = txtVFOBFreq.Text;
                txtVFOAFreq_LostFocus(null, null);
                txtVFOAnew.Text = txtVFOBnew.Text;
                txtVFOAnew_LostFocus(null, null);
                txtVFOBFreq.Text = temp;
                txtVFOBFreq_LostFocus(null, null);
                VFOAFreq = vfoAFreq;
                VFOBFreq = vfoBFreq;
                LOSCFreq = loscFreq;
                btnVFOSwap.Checked = false;
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private void chkVFOSplit_CheckedChanged(object sender, System.EventArgs e) // changes yt7pwr
        {
            try
            {
                chkVFOsinc.Checked = false;
                VFO_SINC = false;
                Display_GDI.SplitEnabled = chkVFOSplit.Checked;
#if(DirectX)
                Display_DirectX.SplitEnabled = chkVFOSplit.Checked;
#endif
                if (chkVFOSplit.Checked)
                {
                    SplitAB_TX = true;
                    DttSP.SplitEnable = true;
                    SetModeSubRX(current_dsp_mode_subRX);      // force refresh
                    //chkXIT.Checked = false;
                    chkVFOSplit.BackColor = button_selected_color;
                    grpVFOB.Font = new Font("Microsoft Sans Serif", 8.25F, FontStyle.Bold);
                    grpVFOB.ForeColor = Color.Red;
                    lblVFOBTX.Visible = true;
                    lblVFOATX.Visible = false;
                    lblVFOBTX.BackColor = Color.Red;
                    lblVFOBTX.ForeColor = Color.White;

                    if (PowerOn)
                    {
                        txtVFOBnew.ForeColor = Color.Red;
                        lblVFOB.ForeColor = Color.Red;
                        txtVFOBFreq.ForeColor = Color.Red;
                        txtVFOBMSD.ForeColor = Color.Red;
                        txtVFOBLSD.ForeColor = small_vfo_color;
                        txtVFOBBand.ForeColor = band_text_light_color;
                    }
                }
                else
                {
                    SplitAB_TX = false;
                    DttSP.SplitEnable = false;
                    //SetMode(current_dsp_mode);      // force refresh
                    chkVFOSplit.BackColor = SystemColors.Control;
                    grpVFOB.Font = new Font("Microsoft Sans Serif", 8.25F, FontStyle.Regular);
                    grpVFOB.ForeColor = Color.Black;

                    if (PowerOn)
                    {
                        if (chkEnableSubRX.Checked)
                        {
                            txtVFOBnew.ForeColor = vfo_text_light_color;
                            lblVFOB.ForeColor = vfo_text_light_color;
                            txtVFOBFreq.ForeColor = vfo_text_light_color;
                            txtVFOBMSD.ForeColor = vfo_text_light_color;
                            txtVFOBLSD.ForeColor = small_vfo_color;
                            txtVFOBBand.ForeColor = band_text_light_color;
                        }
                        else
                        {
                            txtVFOBFreq.ForeColor = vfo_text_dark_color;
                            txtVFOBMSD.ForeColor = vfo_text_dark_color;
                            txtVFOBLSD.ForeColor = vfo_text_dark_color;
                            txtVFOBBand.ForeColor = band_text_dark_color;
                            txtVFOBnew.ForeColor = vfo_text_dark_color;
                            lblVFOB.ForeColor = vfo_text_dark_color;
                        }

                        lblVFOBTX.BackColor = console_color;
                        lblVFOBTX.ForeColor = console_color;
                        lblVFOATX.BackColor = Color.Red;
                        lblVFOATX.ForeColor = Color.White;
                    }

                    lblVFOBTX.Visible = false;
                    lblVFOATX.Visible = true;
                }

                if (MOX)
                    SetTXOscFreqs(true, true);

                DSPMode tmp_mode;

                if (chkVFOSplit.Checked)
                    tmp_mode = current_dsp_mode_subRX;
                else
                    tmp_mode = current_dsp_mode;

                if (current_model == Model.GENESIS_G59USB)
                {
                    G59_setup_keyer();
                }
                else if (current_model == Model.GENESIS_G59NET)
                {
                    G59_setup_keyer();
                }
                else if (current_model == Model.GENESIS_G11)
                {
                    G11_setup_keyer();
                }
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private void chkXIT_CheckedChanged(object sender, System.EventArgs e)
        {
            try
            {
                if (chkXIT.Checked)
                {
                    chkXIT.BackColor = button_selected_color;
                    Display_GDI.XIT = (int)udXIT.Value;
#if(DirectX)
                    Display_DirectX.XIT = (int)udXIT.Value;
#endif
                }
                else
                {
                    chkXIT.BackColor = SystemColors.Control;
                    Display_GDI.XIT = 0;
#if(DirectX)
                    Display_DirectX.XIT = 0;
#endif
                }

                if (chkMOX.Checked)
                {
                    if (chkVFOSplit.Checked)
                        txtVFOBFreq_LostFocus(this, EventArgs.Empty);
                    else
                        txtVFOAFreq_LostFocus(this, EventArgs.Empty);
                }

                if (MOX)
                    SetTXOscFreqs(true, true);
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private void chkRIT_CheckedChanged(object sender, System.EventArgs e)
        {
            try
            {
                if (chkRIT.Checked)
                {
                    chkRIT.BackColor = button_selected_color;
                    Display_GDI.RIT = (int)udRIT.Value;
#if(DirectX)
                    Display_DirectX.RIT = (int)udRIT.Value;
#endif
                }
                else
                {
                    chkRIT.BackColor = SystemColors.Control;
                    Display_GDI.RIT = 0;
#if(DirectX)
                    Display_DirectX.RIT = 0;
#endif
                }

                if (!chkMOX.Checked)
                    txtVFOAFreq_LostFocus(this, EventArgs.Empty);

                VFOAFreq = VFOAFreq;
                VFOBFreq = vfoBFreq;
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private void udRIT_ValueChanged(object sender, System.EventArgs e)
        {
            try
            {
                if (chkRIT.Checked && !chkMOX.Checked)
                {
                    if (VFOnewlook)
                        txtVFOAnew_LostFocus(this, EventArgs.Empty);
                    else
                        txtVFOAFreq_LostFocus(this, EventArgs.Empty);
                }

                if (chkRIT.Checked)
                {
                    Display_GDI.RIT = (int)udRIT.Value;
#if(DirectX)
                    Display_DirectX.RIT = (int)udRIT.Value;
#endif
                }

                VFOAFreq = vfoAFreq;
                if (chkEnableSubRX.Checked)
                    VFOBFreq = VFOBFreq;

                if (udRIT.Focused)
                    btnHidden.Focus();
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private void udXIT_ValueChanged(object sender, System.EventArgs e)
        {
            try
            {
                if (chkXIT.Checked && chkMOX.Checked)
                {
                    if (chkVFOSplit.Checked)
                        txtVFOBFreq_LostFocus(this, EventArgs.Empty);
                    else
                        txtVFOAFreq_LostFocus(this, EventArgs.Empty);
                }

                if (chkXIT.Checked)
                {
                    Display_GDI.XIT = (int)udXIT.Value;
#if(DirectX)
                    Display_DirectX.XIT = (int)udXIT.Value;
#endif
                }

                if (udXIT.Focused)
                    btnHidden.Focus();
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private void btnXITReset_Click(object sender, System.EventArgs e) // changes yt7pwr
        {
            try
            {
                udXIT.Value = 0;

                if (MOX)
                    SetTXOscFreqs(true, true);
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private void btnRITReset_Click(object sender, System.EventArgs e)
        {
            udRIT.Value = 0;

            if (!MOX)
                SetTXOscFreqs(true, false);
        }

        unsafe private int FindPeakFreqInPassband()
        {
            // convert hz to buckets in the averaging data
            int lo_cut_hz = (int)udFilterLow.Value;
            int hi_cut_hz = (int)udFilterHigh.Value;
            double hz_per_bucket = DttSP.SampleRate / Display_GDI.BUFFER_SIZE;
            int zero_hz_bucket = Display_GDI.BUFFER_SIZE / 2;
            int lo_bucket = (int)(((double)lo_cut_hz / hz_per_bucket)) + zero_hz_bucket;
            int hi_bucket = (int)(((double)hi_cut_hz / hz_per_bucket)) + zero_hz_bucket;

            //~~~~ 
            float max_val = float.MinValue;
            int max_bucket = 0;

            float[] spectrum_data;

            // reuse the existing display data if there is any
            switch (Display_GDI.CurrentDisplayMode)
            {
                case DisplayMode.PANADAPTER:
                    if (chkDisplayAVG.Checked)
                    {
                        spectrum_data = Display_GDI.average_buffer;
                    }
                    else
                    {
                        spectrum_data = Display_GDI.current_display_data;
                    }
                    break;
                case DisplayMode.PANAFALL:
                case DisplayMode.PANAFALL_INV:
                case DisplayMode.WATERFALL:
                    if (chkDisplayAVG.Checked)
                    {
                        spectrum_data = Display_GDI.average_waterfall_buffer;
                    }
                    else
                    {
                        spectrum_data = Display_GDI.current_waterfall_data;
                    }
                    break;

                // no specturm data - go get some 
                default:
                    spectrum_data = new float[Display_GDI.BUFFER_SIZE];
                    if (spectrum_data == null)
                    {
                        return -1; // bail out - not buffer 
                    }
                    fixed (float* ptr = &(spectrum_data[0]))
                        DttSP.GetSpectrum(0, ptr);
                    break;
            }


            for (int i = lo_bucket; i <= hi_bucket; i++)
            {
                if (spectrum_data[i] > max_val)
                {
                    max_bucket = i;
                    max_val = spectrum_data[i];
                }
            }
            int peak_hz = (int)(((double)(max_bucket - zero_hz_bucket)) * hz_per_bucket);
            return peak_hz;
        }

        #endregion

        #region DSP Button Events

        private void chkNR_CheckedChanged(object sender, System.EventArgs e)
        {
            if (chkNR.Checked)
            {
                chkNR.BackColor = button_selected_color;
                DttSP.SetNR(0, 0, true);
                CATNR = 1;
            }
            else
            {
                chkNR.BackColor = SystemColors.Control;
                DttSP.SetNR(0, 0, false);
                CATNR = 0;
            }

            if (EthCATIsActive)
                CAT_client_socket.ClientServerSync("ZZNR;");        // sync with server
        }

        private void chkANF_CheckedChanged(object sender, System.EventArgs e)
        {
            if (chkANF.Checked)
            {
                chkANF.BackColor = button_selected_color;
                DttSP.SetANF(0, 0, true);
                CATANF = 1;
            }
            else
            {
                chkANF.BackColor = SystemColors.Control;
                DttSP.SetANF(0, 0, false);
                CATANF = 0;
            }

            if (EthCATIsActive)
                CAT_client_socket.ClientServerSync("ZZNT;");        // sync with server
        }

        private void chkNB_CheckedChanged(object sender, System.EventArgs e)
        {
            if (chkNB.Checked)
            {
                chkNB.BackColor = button_selected_color;
                DttSP.SetNB(0, 0, true);
                CATNB1 = 1;
            }
            else
            {
                chkNB.BackColor = SystemColors.Control;
                DttSP.SetNB(0, 0, false);
                CATNB1 = 0;
            }

            if (EthCATIsActive)
                CAT_client_socket.ClientServerSync("ZZNA;");        // sync with server
        }

        private void chkDSPComp_CheckedChanged(object sender, System.EventArgs e)
        {
            if (chkDSPComp.Checked)
            {
                chkDSPComp.BackColor = button_selected_color;
                DttSP.SetTXAGCFF(thread_no, true);
            }
            else
            {
                chkDSPComp.BackColor = SystemColors.Control;
                DttSP.SetTXAGCFF(thread_no, false);
            }
        }

        private void chkDSPNB2_CheckedChanged(object sender, System.EventArgs e)
        {
            if (chkDSPNB2.Checked)
            {
                chkDSPNB2.BackColor = button_selected_color;
                DttSP.SetSDROM(0, 0, true);
                CATNB2 = 1;
            }
            else
            {
                chkDSPNB2.BackColor = SystemColors.Control;
                DttSP.SetSDROM(0, 0, false);
                CATNB2 = 0;
            }

            if (EthCATIsActive)
                CAT_client_socket.ClientServerSync("ZZNB;");        // sync with server
        }

        private void chkDSPCompander_CheckedChanged(object sender, System.EventArgs e)
        {
            if (chkDSPCompander.Checked)
            {
                DttSP.SetTXCompandSt(thread_no, true);
                chkDSPCompander.BackColor = button_selected_color;
            }
            else
            {
                DttSP.SetTXCompandSt(thread_no, false);
                chkDSPCompander.BackColor = SystemColors.Control;
            }
        }

        #endregion

        #region Menu Events

        private void menu_setup_Click(object sender, System.EventArgs e)
        {
            if (SetupForm.IsDisposed)
                SetupForm = new Setup(this);
            SetupForm.Show();
            SetupForm.Focus();
        }

        private void menu_wave_Click(object sender, System.EventArgs e)
        {
            if (WaveForm.IsDisposed)
                WaveForm = new WaveControl(this);

            WaveForm.Show();
            WaveForm.Focus();
        }

        private void mnuEQ_Click(object sender, System.EventArgs e)
        {
            if (EQForm == null || EQForm.IsDisposed)
                EQForm = new EQForm();
            EQForm.Show();
            EQForm.Focus();
        }

        private void mnuCWX_Click(object sender, System.EventArgs e)
        {
            if (current_dsp_mode == DSPMode.LSB)
                CurrentDSPMode = DSPMode.CWL;
            else if (current_dsp_mode == DSPMode.USB)
                CurrentDSPMode = DSPMode.CWU;

            if (current_dsp_mode != DSPMode.CWL &&
                current_dsp_mode != DSPMode.CWU)
            {
                MessageBox.Show("The radio must be in CWL or CWU mode in order to open the " +
                    "CWX Control Form.",
                    "CWX Error: Wrong Mode",
                    MessageBoxButtons.OK,
                    MessageBoxIcon.Error);
                return;
            }

            //	cw_key_mode = true;
            if (CWXForm == null || CWXForm.IsDisposed)
            {
                CWXForm = new CWX(this);
                CWXForm.StartPosition = FormStartPosition.Manual;
                CWXForm.RestoreSettings();

                Win32.SetWindowPos(CWXForm.Handle.ToInt32(),
                    -1, this.Left, this.Top, CWXForm.Width, CWXForm.Height, 0);
            }

            btnCWX1.Checked = false;
            btnCWX2.Checked = false;
            btnCWX3.Checked = false;
            btnCWX4.Checked = false;
            btnCWX5.Checked = false;
            btnCWX6.Checked = false;
            CWXForm.stopButton_Click(null, null);
            CWXForm.Show();
            CWXForm.Focus();
            CWXForm.setup_timer();      // kick timer!  yt7pwr
        }

        private void menuItemFilterConfigure_Click(object sender, System.EventArgs e)
        {
            if (current_click_tune_mode == ClickTuneMode.Off || current_click_tune_mode == ClickTuneMode.VFOA)
            {
                if (current_dsp_mode == DSPMode.DRM || current_dsp_mode == DSPMode.SPEC) return;

                if (filterForm == null || filterForm.IsDisposed)
                    filterForm = new FilterForm(this, current_dsp_mode, current_filter, false);

                /*filterForm.show_subRX = false;
                filterForm.CurrentDSPMode = current_dsp_mode;
                filterForm.CurrentFilter = current_filter;*/
                filterForm.Show();
                filterForm.Focus();
            }
            else
            {
                if (current_dsp_mode_subRX == DSPMode.DRM || current_dsp_mode_subRX == DSPMode.SPEC) return;

                if (filterForm == null || filterForm.IsDisposed)
                    filterForm = new FilterForm(this, current_dsp_mode_subRX, current_filter_subRX, true);

                /*filterForm.show_subRX = true;
                filterForm.CurrentDSPModeSubRX = current_dsp_mode_subRX;
                filterForm.CurrentFilterSubRX = current_filter_subRX;*/
                filterForm.Show();
                filterForm.Focus();
            }
        }

        #endregion

        #region SUB RX

        private void tbPanMainRX_Scroll(object sender, System.EventArgs e) // changes yt7pwr
        {
            float val = (int)ptbPanMainRX.Value / 100.0f;

            //if (chkPanSwap.Checked) val = 1.0f - val;
            DttSP.SetRXPan(0, 0, val);
            pan_main_rx = ptbPanMainRX.Value;

            if (ptbPanMainRX.Focused)
                btnHidden.Focus();
        }

        private void tbPanMainRX_OnWheel(MouseEventArgs e) // yt7pwr
        {
            if (SetupForm.FastFocus)
                ptbPanMainRX.Focus();
        }

        private void tbPanSubRX_Scroll(object sender, System.EventArgs e) // changes yt7pwr
        {
            float val = (int)ptbPanSubRX.Value / 100.0f;
            //if (chkPanSwap.Checked) val = 1.0f - val;
            DttSP.SetRXPan(0, 1, val);
            pan_sub_rx = ptbPanSubRX.Value;

            if (ptbPanSubRX.Focused)
                btnHidden.Focus();
        }

        private void tbPanSubRX_OnWheel(MouseEventArgs e)   // yt7pwr
        {
            if (SetupForm.FastFocus)
                ptbPanSubRX.Focus();
        }

        private void chkEnableSubRX_CheckedChanged(object sender, System.EventArgs e) // changes yt7pwr
        {
            if (chkEnableSubRX.Checked)
            {
                VFOBFreq = vfoBFreq;        // force reload SubRX

                if (chkVFOsinc.Checked)
                {
                    chkVFOsinc.BackColor = button_selected_color;
                    vfo_sinc = true;
                }

                tbPanMainRX_Scroll(this, EventArgs.Empty);
                tbRX0Gain_Scroll(this, EventArgs.Empty);
                DttSP.SetRXOn(0, 1, true);
                DttSP.SetRXOutputGain(0, 1, (double)ptbRX1Gain.Value / ptbRX1Gain.Maximum);
                DttSP.SetRXOutputGain(0, 0, (double)ptbRX0Gain.Value / ptbRX0Gain.Maximum);
                chkEnableSubRX.BackColor = button_selected_color;

                if (PowerOn)
                {
                    txtVFOBFreq_LostFocus(this, EventArgs.Empty);
                    if (!chkVFOSplit.Checked)
                    {
                        txtVFOBnew.ForeColor = vfo_text_light_color;
                        lblVFOB.ForeColor = vfo_text_light_color;
                        txtVFOBFreq.ForeColor = vfo_text_light_color;
                        txtVFOBMSD.ForeColor = vfo_text_light_color;
                        txtVFOBLSD.ForeColor = small_vfo_color;
                        txtVFOBBand.ForeColor = band_text_light_color;
                    }
                }
            }
            else
            {
                VFOBFreq = vfoBFreq;        // force reload SubRX
                chkVFOsinc.Checked = false;
                chkVFOsinc.BackColor = SystemColors.Control;
                vfo_sinc = false;
                DttSP.SetRXOn(0, 1, false);
                DttSP.SetRXOutputGain(0, 1, 0.0);
                DttSP.SetRXOutputGain(0, 0, 1.0);
                chkEnableSubRX.BackColor = SystemColors.Control;

                if (PowerOn)
                {
                    if (!chkVFOSplit.Checked)
                    {
                        txtVFOBnew.ForeColor = vfo_text_dark_color;
                        lblVFOB.ForeColor = vfo_text_dark_color;
                        txtVFOBFreq.ForeColor = vfo_text_dark_color;
                        txtVFOBMSD.ForeColor = vfo_text_dark_color;
                        txtVFOBLSD.ForeColor = vfo_text_dark_color;
                        txtVFOBBand.ForeColor = band_text_dark_color;
                    }
                }
            }
            Display_GDI.SubRXEnabled = chkEnableSubRX.Checked;
#if(DirectX)
            Display_DirectX.SubRXEnabled = chkEnableSubRX.Checked;
#endif

            if (EthCATIsActive)
                CAT_client_socket.ClientServerSync("ZZMU;");

            //if (chkPanSwap.Focused) btnHidden.Focus();
        }

        private void tbRX0Gain_Scroll(object sender, System.EventArgs e)
        {
            DttSP.SetRXOutputGain(0, 0, (double)ptbRX0Gain.Value / ptbRX0Gain.Maximum);

            if (ptbRX0Gain.Focused)
                btnHidden.Focus();
        }

        private void tbRX0Gain_OnWheel(MouseEventArgs e)
        {
            if (SetupForm.FastFocus)
                ptbRX0Gain.Focus();
        }

        private void tbRX1Gain_Scroll(object sender, System.EventArgs e)
        {
            DttSP.SetRXOutputGain(0, 1, (double)ptbRX1Gain.Value / ptbRX1Gain.Maximum);

            if (ptbRX1Gain.Focused)
                btnHidden.Focus();
        }

        private void tbRX1Gain_OnWheel(MouseEventArgs e)
        {
            if (SetupForm.FastFocus)
                ptbRX1Gain.Focus();
        }

        #endregion

        #region LOSC event yt7pwr

        private void panelLOSCHover_MouseMove(object sender, System.Windows.Forms.MouseEventArgs e)
        {
            Control c1 = (Control)sender;
            Control c2 = txtLOSCFreq;
            int client_width = (c1.Size.Width - c1.ClientSize.Width) + (c2.Size.Width - c2.ClientSize.Width);
            int client_height = (c1.Size.Height - c1.ClientSize.Height) + (c2.Size.Height - c2.ClientSize.Height);
            int x_offset = c1.Left - c2.Left - client_width / 2;
            int y_offset = c1.Top - c2.Top - client_height / 2;
            txtLOSCFreq_MouseMove(sender, new MouseEventArgs(e.Button, e.Clicks, e.X + x_offset, e.Y + y_offset, e.Delta));
        }

        private void txtLOSCLSD_MouseDown(object sender, MouseEventArgs e)
        {
            txtLOSCMSD.Visible = false;
            txtLOSCLSD.Visible = false;
            txtLOSCFreq.Focus();
            txtLOSCFreq.SelectAll();
        }

        private void txtLOSCMSD_MouseLeave(object sender, EventArgs e)
        {
            txtLOSCFreq_MouseLeave(txtLOSCMSD, e);
        }

        private void txtLOSCMSD_MouseMove(object sender, MouseEventArgs e)
        {
            txtLOSCFreq_MouseMove(txtLOSCMSD,
                new MouseEventArgs(e.Button, e.Clicks, e.X, e.Y, e.Delta));
        }

        private void txtLOSCMSD_MouseDown(object sender, MouseEventArgs e)
        {
            txtLOSCMSD.Visible = false;
            txtLOSCLSD.Visible = false;
            txtLOSCFreq.Focus();
            txtLOSCFreq.SelectAll();
        }

        private void txtLOSCFreq_MouseLeave(object sender, EventArgs e)
        {
            losc_hover_digit = -1;
            panelVFOAHover.Invalidate();
        }

        private void txtLOSCLSD_MouseMove(object sender, MouseEventArgs e)
        {
            Control c1 = (Control)sender;
            Control c2 = txtLOSCFreq;
            int client_width = (c1.Size.Width - c1.ClientSize.Width) + (c2.Size.Width - c2.ClientSize.Width);
            int client_height = (c1.Size.Height - c1.ClientSize.Height) + (c2.Size.Height - c2.ClientSize.Height);
            int x_offset = c1.Left - c2.Left - client_width / 2;
            int y_offset = c1.Top - c2.Top - client_height / 2;
            txtLOSCFreq_MouseMove(sender, new MouseEventArgs(e.Button, e.Clicks, e.X + x_offset, e.Y + y_offset, e.Delta));
        }

        private void txtLOSCFreq_MouseMove(object sender, System.Windows.Forms.MouseEventArgs e)
        {
            if (this.ContainsFocus)
            {
                int old_digit = losc_hover_digit;
                int digit_index = 0;
                GetLOSCCharWidth();

                int x = txtLOSCFreq.Width - (losc_pixel_offset - 5);
                while (x < e.X)
                {
                    digit_index++;

                    if (small_lsd && txtLOSCLSD.Visible)
                    {
                        if (digit_index < 6)
                            x += (losc_char_width + losc_char_space);
                        else
                            x += (losc_small_char_width + losc_small_char_space);

                        if (digit_index == 3)
                            x += (losc_decimal_space - losc_char_space);
                        if (digit_index == 6)
                            x += losc_small_char_width;
                    }
                    else
                    {
                        x += losc_char_width;
                        if (digit_index == 3)
                            x += losc_decimal_space;
                        else
                            x += losc_char_space;
                    }
                }

                if (digit_index < 3) digit_index = -1;
                if (digit_index > 9) digit_index = 9;
                losc_hover_digit = digit_index;
                if (losc_hover_digit != old_digit)
                    panelLOSCHover.Invalidate();
            }
        }

        private void txtLOSCFreq_LostFocus(object sender, System.EventArgs e)
        {
            if (txtLOSCFreq.Text == "." || txtLOSCFreq.Text == "")
            {
                LOSCFreq = saved_losc_freq;
                return;
            }
            double loscfreq = double.Parse(txtLOSCFreq.Text);
            if (loscfreq > 0.0 && loscfreq < 500000.0)
            {
                UpdateLOSCFreq(loscfreq.ToString("f6"));
                LOSCFreq = loscfreq;
                Display_GDI.LOSC = (long)(loscfreq * 1e6);
#if(DirectX)
                Display_DirectX.LOSC = (long)(loscfreq * 1e6);
#endif
            }

            if (small_lsd)
            {
                txtLOSCMSD.Visible = true;
                txtLOSCLSD.Visible = true;
            }

            saved_losc_freq = (float)LOSCFreq;
            btnHidden.Focus();
        }

        private void txtLOSCFreq_KeyPress(object sender, KeyPressEventArgs e)
        {
            string separator = System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator;
            int KeyCode = (int)e.KeyChar;
            if ((KeyCode < 48 || KeyCode > 57) &&			// numeric keys
                KeyCode != 8 &&								// backspace
                !e.KeyChar.ToString().Equals(separator) &&	// decimal
                KeyCode != 27)								// escape
            {
                e.Handled = true;
            }
            else
            {
                if (e.KeyChar.ToString().Equals(separator))
                {
                    e.Handled = (((TextBoxTS)sender).Text.IndexOf(separator) >= 0);
                }
                else if (KeyCode == 27)
                {
                    LOSCFreq = saved_losc_freq;
                    btnHidden.Focus();
                }
            }
            if (e.KeyChar == (char)Keys.Enter)
            {
                txtLOSCFreq_LostFocus(txtLOSCFreq, new System.EventArgs());
                btnHidden.Focus();
            }
        }
        #endregion

        #region Waterfall yt7pwr

        private void picWaterfall_MouseDown(object sender, MouseEventArgs e)
        {
            if (current_display_mode != DisplayMode.PANASCOPE)
            {
                picWaterfall.Focus();
                picDisplay_MouseDown(sender, e);
            }
        }

        private void picWaterfall_MouseMove(object sender, System.Windows.Forms.MouseEventArgs e) // yt7pwr
        {
            if (!ConsoleClosing)
            {
                try
                {
                    if (SetupForm.FastFocus)
                        picWaterfall.Focus();

                    int vfoa_x = 0;
                    int vfob_x = 0;
                    int vfoa_low_x = 0;
                    int vfoa_high_x = 0;
                    int vfob_low_x = 0;
                    int vfob_high_x = 0;
                    int notch_low = 0;
                    int notch_high = 0;

                    if (!chkMOX.Checked)
                    {
                        vfoa_x = HzToPixel((float)((vfoAFreq - loscFreq) * 1e6));
                        vfoa_low_x = vfoa_x + (HzToPixel(DttSP.RXFilterLowCut) - HzToPixel(0.0f));
                        vfoa_high_x = vfoa_x + (HzToPixel(DttSP.RXFilterHighCut) - HzToPixel(0.0f));
                        if (chkEnableSubRX.Checked)
                        {
                            vfob_x = HzToPixel((float)((vfoBFreq - loscFreq) * 1e6));
                            vfob_low_x = vfob_x + (HzToPixel(DttSP.RXFilterLowCutSubRX) - HzToPixel(0.0f));
                            vfob_high_x = vfob_x + (HzToPixel(DttSP.RXFilterHighCutSubRX) - HzToPixel(0.0f));
                        }

                        if (DttSP.RXFilterHighCut < 0 && DttSP.RXFilterLowCut < 0)
                        {
                            notch_high = vfoa_x - HzToPixel(notch_high_value) + HzToPixel(0.0f); ;
                            notch_low = vfoa_x - HzToPixel(notch_low_value) + HzToPixel(0.0f);
                        }
                        else
                        {
                            notch_low = vfoa_x + HzToPixel(notch_low_value) - HzToPixel(0.0f);
                            notch_high = vfoa_x + HzToPixel(notch_high_value) - HzToPixel(0.0f);
                        }
                    }
                    else
                    {
                        vfoa_low_x = HzToPixel(DttSP.TXFilterLowCut);
                        vfoa_high_x = HzToPixel(DttSP.TXFilterHighCut);
                    }

                    switch (Display_GDI.CurrentDisplayMode)
                    {
                        case DisplayMode.WATERFALL:
                            DisplayCursorX = e.X;
                            DisplayCursorY = e.Y;
                            float x = PixelToHz(e.X);
                            float y = PixelToDb(e.Y);
                            double freq = loscFreq + (double)x * 0.0000010;
                            txtDisplayCursorOffset.Text = x.ToString("f1") + "Hz";

                            string temp_text = freq.ToString("f6") + " MHz";
                            int jper = temp_text.IndexOf(separator) + 4;
                            txtDisplayCursorFreq.Text = String.Copy(temp_text.Insert(jper, " "));
                            break;
                        case DisplayMode.PANAFALL:
                        case DisplayMode.PANAFALL_INV:
                        case DisplayMode.PANADAPTER:
                            DisplayCursorX = e.X;
                            DisplayCursorY = e.Y;
                            x = PixelToHz(e.X);
                            y = PixelToDb(e.Y);
                            freq = loscFreq + (double)x * 0.0000010;
                            txtDisplayCursorOffset.Text = x.ToString("f1") + "Hz";

                            temp_text = freq.ToString("f6") + " MHz";
                            jper = temp_text.IndexOf(separator) + 4;
                            txtDisplayCursorFreq.Text = String.Copy(temp_text.Insert(jper, " "));

                            if (current_click_tune_mode == ClickTuneMode.Off)
                            {
                                if (Cursor != Cursors.Hand)
                                {
                                    if ((DttSP.RXFilterLowCut < 0 && DttSP.RXFilterHighCut < 0) &&
                                        (Math.Abs(e.X - notch_high) < 3 || Math.Abs(e.X - notch_low) < 3) && filter_mode == FilterMode.NOTCH)
                                    {
                                        Cursor = Cursors.SizeWE;
                                    }
                                    else if ((Math.Abs(e.X - notch_high) < 3 || Math.Abs(e.X - notch_low) < 3) && filter_mode == FilterMode.NOTCH)
                                    {
                                        Cursor = Cursors.SizeWE;
                                    }
                                    else if (((Math.Abs(e.X - vfoa_low_x) < 3 || Math.Abs(e.X - vfoa_high_x) < 3) ||
                                        (vfoa_high_filter_drag || vfoa_low_filter_drag)) &&
                                        (filter_mode == FilterMode.PASS_BAND || filter_mode == FilterMode.NOTCH))
                                    {
                                        Cursor = Cursors.SizeWE;
                                    }
                                    else if (chkEnableSubRX.Checked && (Math.Abs(e.X - vfob_low_x) < 3 || Math.Abs(e.X - vfob_high_x) < 3 ||
                                        vfob_high_filter_drag || vfob_low_filter_drag))
                                    {
                                        Cursor = Cursors.SizeWE;
                                    }
                                    else if (e.X > vfoa_low_x && e.X < vfoa_high_x)
                                    {
                                        Cursor = Cursors.NoMoveHoriz;
                                    }
                                    else if (chkEnableSubRX.Checked && (e.X > vfob_low_x && e.X < vfob_high_x))
                                    {
                                        Cursor = Cursors.NoMoveHoriz;
                                    }
                                    else
                                    {
                                        Cursor = Cursors.Cross;
                                    }
                                }

                                if (vfoa_notch_high_drag && filter_mode == FilterMode.NOTCH)
                                {
                                    if (!chkMOX.Checked)
                                    {
                                        {
                                            x = PixelToHz(e.X - vfoa_x);
                                            x -= PixelToHz(0.0F);
                                            if (DttSP.RXFilterHighCut < 0 && DttSP.RXFilterLowCut < 0)
                                            {
                                                if (x >= DttSP.RXFilterLowCut + 25 &&
                                                    x <= DttSP.RXFilterHighCut - 25)
                                                {
                                                    if (Math.Abs(x) - 50 >= notch_low_value)
                                                    {
                                                        NotchHigh = (int)Math.Abs(x);
                                                        ptbNotchShift.Value = -((notch_high_value - (notch_high_value - notch_low_value) / 2) -
                                                            (Math.Abs(DttSP.RXFilterLowCut) - Math.Abs(DttSP.RXFilterHighCut)) / 2);
                                                        FilterUpdate();
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                if (Math.Abs(x) >= DttSP.RXFilterLowCut + 25 &&
                                                    Math.Abs(x) <= DttSP.RXFilterHighCut - 25)
                                                {
                                                    if (Math.Abs(x) - 50 >= notch_low_value)
                                                    {
                                                        NotchHigh = (int)Math.Abs(x);
                                                        ptbNotchShift.Value = ((notch_high_value - (notch_high_value - notch_low_value) / 2) -
                                                            (DttSP.RXFilterHighCut - DttSP.RXFilterLowCut) / 2);
                                                        FilterUpdate();
                                                    }
                                                }
                                            }
                                        }
                                        break;
                                    }
                                }
                                else if (vfoa_notch_low_drag && filter_mode == FilterMode.NOTCH)
                                {
                                    if (!chkMOX.Checked)
                                    {
                                        {
                                            x = PixelToHz(e.X - vfoa_x);
                                            x -= PixelToHz(0.0F);

                                            if (DttSP.RXFilterLowCut < 0 && DttSP.RXFilterHighCut < 0)
                                            {
                                                if (x >= DttSP.RXFilterLowCut + 25 &&
                                                    x <= DttSP.RXFilterHighCut - 25)
                                                {
                                                    if (Math.Abs(x) + 50 <= notch_high_value)
                                                    {
                                                        NotchLow = (int)Math.Abs(x);
                                                        ptbNotchShift.Value = -((notch_high_value - (notch_high_value - notch_low_value) / 2) -
                                                            (Math.Abs(DttSP.RXFilterLowCut) - Math.Abs(DttSP.RXFilterHighCut)) / 2);
                                                        FilterUpdate();
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                if (Math.Abs(x) >= DttSP.RXFilterLowCut &&
                                                    Math.Abs(x) <= DttSP.RXFilterHighCut - 25)
                                                {
                                                    if (Math.Abs(x) + 50 <= notch_high_value)
                                                    {
                                                        NotchLow = (int)Math.Abs(x);
                                                        ptbNotchShift.Value = ((notch_high_value - (notch_high_value - notch_low_value) / 2) -
                                                            (DttSP.RXFilterHighCut - DttSP.RXFilterLowCut) / 2);
                                                        FilterUpdate();
                                                    }
                                                }
                                            }
                                        }
                                        break;
                                    }
                                }
                                else if (vfoa_whole_notch_drag && filter_mode == FilterMode.NOTCH)
                                {
                                    if (!chkMOX.Checked)
                                    {
                                        int diff = (int)(PixelToHz(e.X) - PixelToHz(vfoa_whole_notch_start_x));

                                        if (DttSP.RXFilterHighCut < 0 && DttSP.RXFilterLowCut < 0)
                                        {
                                            diff = -(int)(PixelToHz(e.X) - PixelToHz(vfoa_whole_notch_start_x));

                                            if (NotchLow + diff >= Math.Abs(DttSP.RXFilterHighCut - 25) &&
                                                NotchHigh + diff <= Math.Abs(DttSP.RXFilterLowCut + 25))
                                            {
                                                NotchHigh += diff;
                                                NotchLow += diff;
                                                vfoa_whole_notch_start_x = e.X;
                                                ptbNotchShift.Value = -((notch_high_value - (notch_high_value - notch_low_value) / 2) -
                                                    (Math.Abs(DttSP.RXFilterLowCut) - Math.Abs(DttSP.RXFilterHighCut)) / 2);
                                                FilterUpdate();
                                            }
                                        }
                                        else
                                        {
                                            if (NotchLow + diff >= DttSP.RXFilterLowCut + 25 &&
                                                NotchHigh + diff <= DttSP.RXFilterHighCut - 25)
                                            {
                                                NotchLow += diff;
                                                NotchHigh += diff;
                                                vfoa_whole_notch_start_x = e.X;
                                                ptbNotchShift.Value = ((notch_high_value - (notch_high_value - notch_low_value) / 2) -
                                                    (DttSP.RXFilterHighCut - DttSP.RXFilterLowCut) / 2);
                                                FilterUpdate();
                                            }
                                        }
                                        break;
                                    }
                                }
                                else if (vfoa_high_filter_drag)
                                {
                                    if (!chkMOX.Checked)
                                    {
                                        SelectVarFilter();
                                        float zero = 0.0F;
                                        int new_high = 0;
                                        if (ptbDisplayZoom.Value == 4)
                                        {
                                            new_high = (int)(PixelToHz((e.X - vfoa_x) + picDisplay.Width / 2));
                                            UpdateFilters(DttSP.RXFilterLowCut, new_high);
                                        }
                                        else
                                        {
                                            new_high = (int)(PixelToHz(e.X - vfoa_x) + DttSP.RXDisplayHigh / 2);
                                            x = PixelToHz((e.X - vfoa_x));
                                            x -= PixelToHz(zero);
                                            UpdateFilters(DttSP.RXFilterLowCut, (int)x);
                                        }
                                    }
                                    else
                                    {
                                        int new_high = (int)Math.Max(PixelToHz(e.X), DttSP.TXFilterLowCut + 10);
                                        switch (current_dsp_mode)
                                        {
                                            case DSPMode.LSB:
                                            case DSPMode.CWL:
                                            case DSPMode.DIGL:
                                                int new_low = -new_high;
                                                SetupForm.TXFilterLow = new_low;
                                                break;
                                            case DSPMode.USB:
                                            case DSPMode.CWU:
                                            case DSPMode.DIGU:
                                            case DSPMode.AM:
                                            case DSPMode.SAM:
                                            case DSPMode.FMN:
                                            case DSPMode.DSB:
                                                SetupForm.TXFilterHigh = new_high;
                                                break;
                                        }
                                    }
                                }
                                if (vfob_high_filter_drag)
                                {
                                    if (!chkMOX.Checked)
                                    {
                                        SelectVarFilterSubRX();
                                        float zero = 0.0F;
                                        int new_high = 0;
                                        if (ptbDisplayZoom.Value == 4)
                                        {
                                            new_high = (int)(PixelToHz((e.X - vfob_x) + picDisplay.Width / 2));
                                            UpdateFiltersSubRX(DttSP.RXFilterLowCutSubRX, new_high);
                                        }
                                        else
                                        {
                                            new_high = (int)(PixelToHz(e.X - vfob_x) + DttSP.RXDisplayHigh / 2);
                                            x = PixelToHz((e.X - vfob_x));
                                            x -= PixelToHz(zero);
                                            UpdateFiltersSubRX(DttSP.RXFilterLowCutSubRX, (int)x);
                                        }
                                    }
                                    else
                                    {
                                        if (chkVFOSplit.Checked)
                                        {
                                            int new_high = (int)Math.Max(PixelToHz(e.X), DttSP.TXFilterLowCut + 10);
                                            switch (current_dsp_mode_subRX)
                                            {
                                                case DSPMode.LSB:
                                                case DSPMode.CWL:
                                                case DSPMode.DIGL:
                                                    int new_low = -new_high;
                                                    SetupForm.TXFilterLow = new_low;
                                                    break;
                                                case DSPMode.USB:
                                                case DSPMode.CWU:
                                                case DSPMode.DIGU:
                                                case DSPMode.AM:
                                                case DSPMode.SAM:
                                                case DSPMode.FMN:
                                                case DSPMode.DSB:
                                                    SetupForm.TXFilterHigh = new_high;
                                                    break;
                                            }
                                        }
                                    }
                                }
                                else if (vfoa_low_filter_drag)
                                {
                                    if (!chkMOX.Checked)
                                    {
                                        SelectVarFilter();
                                        float zero = 0.0F;
                                        int new_low = 0;
                                        if (ptbDisplayZoom.Value == 4)
                                        {
                                            new_low = (int)(PixelToHz((e.X - vfoa_x) + picDisplay.Width / 2));
                                            UpdateFilters(new_low, DttSP.RXFilterHighCut);
                                        }
                                        else
                                        {
                                            new_low = (int)(PixelToHz(e.X - vfoa_x) + DttSP.RXDisplayHigh / 2);
                                            x = PixelToHz((e.X - vfoa_x));
                                            x -= PixelToHz(zero);
                                            UpdateFilters((int)x, DttSP.RXFilterHighCut);
                                        }

                                    }
                                    else
                                    {
                                        int new_low = (int)(Math.Min(PixelToHz(e.X), DttSP.TXFilterHighCut - 10));
                                        switch (current_dsp_mode)
                                        {
                                            case DSPMode.LSB:
                                            case DSPMode.CWL:
                                            case DSPMode.DIGL:
                                            case DSPMode.AM:
                                            case DSPMode.SAM:
                                            case DSPMode.FMN:
                                            case DSPMode.DSB:
                                                int new_high = -new_low;
                                                SetupForm.TXFilterHigh = new_high;
                                                break;
                                            case DSPMode.USB:
                                            case DSPMode.CWU:
                                            case DSPMode.DIGU:
                                                SetupForm.TXFilterLow = new_low;
                                                break;
                                        }
                                    }
                                }
                                else if (vfob_low_filter_drag)
                                {
                                    if (!chkMOX.Checked)
                                    {
                                        SelectVarFilterSubRX();
                                        float zero = 0.0F;
                                        int new_low = 0;
                                        if (ptbDisplayZoom.Value == 4)
                                        {
                                            new_low = (int)(PixelToHz((e.X - vfob_x) + picDisplay.Width / 2));
                                            UpdateFiltersSubRX(new_low, DttSP.RXFilterHighCutSubRX);
                                        }
                                        else
                                        {
                                            new_low = (int)(PixelToHz(e.X - vfob_x) + DttSP.RXDisplayHigh / 2);
                                            x = PixelToHz((e.X - vfob_x));
                                            x -= PixelToHz(zero);
                                            UpdateFiltersSubRX((int)x, DttSP.RXFilterHighCutSubRX);
                                        }
                                    }
                                    else
                                    {
                                        if (chkVFOSplit.Checked)
                                        {
                                            int new_low = (int)(Math.Min(PixelToHz(e.X), DttSP.TXFilterHighCut - 10));
                                            switch (current_dsp_mode_subRX)
                                            {
                                                case DSPMode.LSB:
                                                case DSPMode.CWL:
                                                case DSPMode.DIGL:
                                                case DSPMode.AM:
                                                case DSPMode.SAM:
                                                case DSPMode.FMN:
                                                case DSPMode.DSB:
                                                    int new_high = -new_low;
                                                    SetupForm.TXFilterHigh = new_high;
                                                    break;
                                                case DSPMode.USB:
                                                case DSPMode.CWU:
                                                case DSPMode.DIGU:
                                                    SetupForm.TXFilterLow = new_low;
                                                    break;
                                            }
                                        }
                                    }
                                }
                                else if (vfoa_whole_filter_drag)
                                {
                                    int diff = (int)(PixelToHz(e.X) - PixelToHz(vfoa_whole_filter_start_x));

                                    if (!chkMOX.Checked)
                                    {
                                        UpdateFilters(vfoa_whole_filter_start_low + diff, vfoa_whole_filter_start_high + diff);
                                    }
                                    else
                                    {
                                        switch (current_dsp_mode)
                                        {
                                            case DSPMode.LSB:
                                            case DSPMode.DIGL:
                                                SetupForm.TXFilterLow = vfoa_whole_filter_start_low - diff;
                                                SetupForm.TXFilterHigh = vfoa_whole_filter_start_high - diff;
                                                break;
                                            case DSPMode.USB:
                                            case DSPMode.DIGU:
                                                SetupForm.TXFilterLow = vfoa_whole_filter_start_low + diff;
                                                SetupForm.TXFilterHigh = vfoa_whole_filter_start_high + diff;
                                                break;
                                            case DSPMode.AM:
                                            case DSPMode.SAM:
                                            case DSPMode.FMN:
                                            case DSPMode.DSB:
                                                SetupForm.TXFilterHigh = vfoa_whole_filter_start_high + diff;
                                                break;
                                        }
                                    }
                                }
                                else if (vfob_whole_filter_drag)
                                {
                                    int diff = (int)(PixelToHz(e.X) - PixelToHz(vfoa_whole_filter_start_x));

                                    if (!chkMOX.Checked)
                                    {
                                        UpdateFiltersSubRX(vfoa_whole_filter_start_low + diff, vfoa_whole_filter_start_high + diff);
                                    }
                                    else
                                    {
                                        if (chkVFOSplit.Checked)
                                        {
                                            switch (current_dsp_mode_subRX)
                                            {
                                                case DSPMode.LSB:
                                                case DSPMode.DIGL:
                                                    SetupForm.TXFilterLow = vfoa_whole_filter_start_low - diff;
                                                    SetupForm.TXFilterHigh = vfoa_whole_filter_start_high - diff;
                                                    break;
                                                case DSPMode.USB:
                                                case DSPMode.DIGU:
                                                    SetupForm.TXFilterLow = vfoa_whole_filter_start_low + diff;
                                                    SetupForm.TXFilterHigh = vfoa_whole_filter_start_high + diff;
                                                    break;
                                                case DSPMode.AM:
                                                case DSPMode.SAM:
                                                case DSPMode.FMN:
                                                case DSPMode.DSB:
                                                    SetupForm.TXFilterHigh = vfoa_whole_filter_start_high + diff;
                                                    break;
                                            }
                                        }
                                    }
                                }
                                else if (vfoA_drag)
                                {
                                    int diff = (int)(PixelToHz(e.X) - PixelToHz(vfoA_drag_last_x));
                                    VFOAFreq = vfoA_drag_start_freq + diff * 1e-6;
                                }
                                else if (vfob_drag && chkEnableSubRX.Checked)
                                {
                                    int diff = (int)(PixelToHz(e.X) - PixelToHz(vfob_drag_last_x));
                                    VFOBFreq = vfob_drag_start_freq + diff * 1e-6;
                                }
                                else if (spectrum_drag)
                                {
                                    chkVFOLock.Checked = false;
                                    int diff = (int)(PixelToHz(e.X) - PixelToHz(spectrum_drag_last_x));
                                    LOSCFreq -= diff / 1e6;
                                    spectrum_drag_last_x = e.X;
                                    if (chkVFOsinc.Checked)
                                    {
                                        VFOAFreq = vfoAFreq;
                                        VFOBFreq = vfoBFreq;
                                    }
                                    else
                                    {
                                        VFOAFreq -= diff / 1e6;
                                        VFOBFreq -= diff / 1e6;
                                    }
                                }
                            }
                            break;
                        default:
                            txtDisplayCursorOffset.Text = "";
                            txtDisplayCursorPower.Text = "";
                            txtDisplayCursorFreq.Text = "";
                            break;
                    }

                    double zoom_factor = ptbDisplayZoom.Value / 16;
                    if (spectrum_drag && zoom_factor > 1)
                    {
                        if (!chkMOX.Checked)
                        {
                            float start_freq = PixelToHz(spectrum_drag_last_x);
                            float end_freq = PixelToHz(e.X);
                            spectrum_drag_last_x = e.X;
                            float delta = end_freq - start_freq;
                            VFOAFreq -= delta * 0.0000010;
                        }
                    }
                }
                catch (Exception)
                {

                }
            }
        }

        private void picWaterfall_MouseLeave(object sender, EventArgs e)
        {
            picDisplay_MouseLeave(sender, e);
        }

        private void picWaterfall_MouseUp(object sender, MouseEventArgs e)
        {
            picDisplay_MouseUp(sender, e);
        }

        private void picWaterfall_Paint(object sender, PaintEventArgs e)
        {
            try
            {
                switch (current_display_engine)
                {
                    case DisplayEngine.GDI_PLUS:
                        switch (current_display_mode)
                        {
                            case DisplayMode.WATERFALL:
                            case DisplayMode.PANAFALL:
                            case DisplayMode.PANAFALL_INV:
                            case DisplayMode.PANASCOPE:
                                if (!Display_GDI.RenderWaterfall(ref e))
                                    this.Invoke(new GDICallbackFunction(ReinitGDI), "picWaterfall");
                                break;
                        }
                        break;
#if(DirectX)
                    case DisplayEngine.DIRECT_X:
                        if (current_display_mode == DisplayMode.WATERFALL)
                        {
                            try
                            {
                                if (!Display_DirectX.RenderDirectX())
                                {
                                    ReinitDirectX("");
                                }
                            }
                            catch (Exception ex)
                            {
                                Debug.Write(ex.ToString());
                            }
                        }
                        break;
#endif
                }
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private void picWaterfall_Resize(object sender, EventArgs e)
        {
            try
            {
                Display_GDI.Target = picWaterfall;

                switch (current_display_engine)
                {
                    case (DisplayEngine.GDI_PLUS):
                        {
                            if (current_display_mode == DisplayMode.WATERFALL)
                            {
                                Thread.Sleep(100);
                                Display_GDI.Init();
                                UpdateDisplay();
                                picWaterfall.Invalidate();
                            }
                        }
                        break;

#if(DirectX)
                    case (DisplayEngine.DIRECT_X):
                        if (current_display_mode == DisplayMode.WATERFALL)
                        {
                            ReinitDirectX("");
                        }
                        break;
#endif
                }
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }

        }

        #endregion

        #region USB button  yt7pwr

        public void btnUSB_Click(object sender, EventArgs e)
        {
            ReInit_USB();
        }

        public bool ReInit_USB()
        {
            bool result = false;

            try
            {
                if (!booting)
                {
                    switch (current_model)
                    {
                        case Model.QRP2000:
                            {
                                if (qrp2000 == null)
                                    qrp2000 = new QRP2000(this);
                                qrp2000.Close_QRP2000();
                                btnUSB.BackColor = Color.Red;
                                qrp2000.QRP2000_Init();
                                result = qrp2000.QRP2000Status();
                                if (result)
                                    btnUSB.BackColor = Color.Green;
                            }
                            break;

                        case Model.GENESIS_G6:
                            {
                                btnUSB.Visible = true;

                                if (!g6.Connected)
                                {
                                    g6.USB_Serial = SetupForm.USB_serial_No;
                                    result = g6.Connect();
                                    //result = g6.Connect_ISO();

                                    if (result)
                                    {
                                        btnUSB.BackColor = Color.Green;
                                    }
                                    else
                                    {
                                        btnUSB.BackColor = Color.Red;
                                    }
                                }
                                else
                                    btnUSB.BackColor = Color.Green;
                            }
                            break;

                        case Model.GENESIS_G59USB:
                            {
                                btnUSB.Visible = true;

                                if (!g59.Connected)
                                {
                                    g59.USB_Serial = SetupForm.USB_serial_No;
                                    result = g59.Connect();

                                    if (result)
                                    {
                                        btnUSB.BackColor = Color.Green;
                                    }
                                    else
                                    {
                                        btnUSB.BackColor = Color.Red;
                                    }
                                }
                                else
                                    btnUSB.BackColor = Color.Green;
                            }
                            break;

                        case Model.GENESIS_G11:
                            {
                                btnUSB.Visible = true;

                                if (!g11.Connected)
                                {
                                    g11.USB_Serial = SetupForm.USB_serial_No;
                                    result = g11.Connect();

                                    if (result)
                                    {
                                        btnUSB.BackColor = Color.Green;
                                    }
                                    else
                                    {
                                        btnUSB.BackColor = Color.Red;
                                    }
                                }
                                else
                                    btnUSB.BackColor = Color.Green;
                            }
                            break;

                        case Model.RTL_SDR:
                            {
                                btnUSB.Visible = true;

                                result = RTL_SDR.InitUSB();

                                if (result)
                                {
                                    btnUSB.BackColor = Color.Green;
                                }
                                else
                                {
                                    btnUSB.BackColor = Color.Red;
                                }
                            }
                            break;

                        default:
                            {
                                if (usb_si570_enable == true)
                                {
                                    btnUSB.BackColor = Color.Red;
                                    if (SI570 == null)
                                        SI570 = new ExtIO_si570_usb(this);
                                    result = SI570.Init_USB();
                                    if (result)
                                    {
                                        btnUSB.Visible = true;
                                        btnUSB.BackColor = Color.Green;
                                    }
                                    else
                                    {
                                        btnUSB.Visible = false;
                                    }
                                }
                                else
                                {
                                    btnUSB.BackColor = Color.Red;
                                    g59.Connected = false;
                                    g11.Connected = false;
                                    g6.Connected = false;
                                    btnUSB.Visible = false;
                                }
                            }
                            break;
                    }
                }

                if (EthCATIsActive)
                    CAT_client_socket.ClientServerSync("ZZUB;");     // sync with server

                return result;
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
                return false;
            }
        }

        #endregion

        #region About yt7pwr
        private void mnuAbout_Click(object sender, EventArgs e) // yt7pwr
        {
            if (AboutForm == null || AboutForm.IsDisposed)
            {
                AboutForm = new About(this);
                AboutForm.StartPosition = FormStartPosition.Manual;
            }

            AboutForm.Show();
            AboutForm.Focus();
            Win32.SetWindowPos(AboutForm.Handle.ToInt32(),
                -1, this.Left, this.Top, AboutForm.Width, AboutForm.Height, 0);
        }
        #endregion

        #region Genesis buttons yt7pwr

        public void Si570_calibrate()
        {
            if (current_model == Model.GENESIS_G59USB)
            {
                g59.Si570_freq = 56000000;  // reinit!
                double freq = double.Parse(txtLOSCFreq.Text);
                freq *= 1000000;

                if (loscFreq < 17.0)
                    g59.si570_fxtal = si570_fxtal1;
                else if (loscFreq < 30.0)
                    g59.si570_fxtal = si570_fxtal2;
                else
                    g59.si570_fxtal = si570_fxtal3;

                g59.Set_frequency((long)(Math.Round(freq, 6)), true);
            }
            else if (current_model == Model.GENESIS_G59NET)
            {
                net_device.Si570_freq = 56000000;  // reinit!
                double freq = double.Parse(txtLOSCFreq.Text);
                freq *= 1000000;

                if (loscFreq < 17.0)
                    net_device.si570_fxtal = si570_fxtal1;
                else if (loscFreq < 30.0)
                    net_device.si570_fxtal = si570_fxtal2;
                else
                    net_device.si570_fxtal = si570_fxtal3;

                net_device.SetLOSC((long)freq, true);
            }
            else if (current_model == Model.GENESIS_G11)
            {
                g11.Si570_freq = 56000000;  // reinit!
                double freq = double.Parse(txtLOSCFreq.Text);
                freq *= 1000000;

                if (loscFreq < 17.0)
                    g11.si570_fxtal = si570_fxtal1;
                else if (loscFreq < 30.0)
                    g11.si570_fxtal = si570_fxtal2;
                else
                    g11.si570_fxtal = si570_fxtal3;

                g11.Set_frequency((long)Math.Round(freq, 6), true);
            }
            else if (current_model == Model.GENESIS_G6)
            {
                g6.Si570_freq = 56000000;  // reinit!
                double freq = double.Parse(txtLOSCFreq.Text);
                freq *= 1000000;

                if (loscFreq < 17.0)
                    g6.si570_fxtal = si570_fxtal1;
                else if (loscFreq < 30.0)
                    g6.si570_fxtal = si570_fxtal2;
                else
                    g6.si570_fxtal = si570_fxtal3;

                g6.Set_frequency((long)Math.Round(freq, 6), true);
            }
        }

        private void chkG11AFbtn_CheckedChanged(object sender, EventArgs e)
        {
            if (current_model == Model.GENESIS_G11)
            {
                if (chkG11AFbtn.Checked)
                {
                    chkG11AFbtn.BackColor = Color.GreenYellow;
                    lblAFNewVFO.BackColor = Color.Red;
                    g11.WriteToDevice(5, 0);                      // AF ON
                }
                else
                {
                    chkG11AFbtn.BackColor = SystemColors.Control;
                    lblAFNewVFO.BackColor = NewBackgroundVFOColor;
                    g11.WriteToDevice(6, 0);                      // AF OFF
                }

                WBIR_state = WBIR_State.DelayAdapt;

                if (EthCATIsActive)
                    CAT_client_socket.ClientServerSync("ZZGA;");                    // sync with server

                if (!MOX)
                {
                    if (vfo_new_look)
                        txtLOSCnew_LostFocus(null, null);
                    else
                        txtLOSCFreq_LostFocus(null, null);                              // force WBIR reinit!
                }
            }
        }

        private void chkG11RFbtn_CheckedChanged(object sender, EventArgs e)
        {
            if (current_model == Model.GENESIS_G11)
            {
                if (chkG11RFbtn.Checked)
                {
                    chkG11RFbtn.BackColor = Color.GreenYellow;
                    lblRFNewVFO.BackColor = Color.Red;
                    g11.WriteToDevice(11, 0);               // PREAMP ON
                }
                else
                {
                    chkG11RFbtn.BackColor = SystemColors.Control;
                    lblRFNewVFO.BackColor = NewBackgroundVFOColor;
                    g11.WriteToDevice(12, 0);               // PREAMP OFF
                }

                WBIR_state = WBIR_State.DelayAdapt;

                if (EthCATIsActive)
                    CAT_client_socket.ClientServerSync("ZZGR;");                // sync with server

                if (!MOX)
                {
                    if (vfo_new_look)
                        txtLOSCnew_LostFocus(null, null);
                    else
                        txtLOSCFreq_LostFocus(null, null);                          // force WBIR reinit!
                }
            }
        }

        private void chkG11ATTbtn_CheckedChanged(object sender, EventArgs e)
        {
            if (current_model == Model.GENESIS_G11)
            {
                if (chkG11ATTbtn.Checked)
                {
                    chkG11ATTbtn.BackColor = Color.GreenYellow;
                    lblATTNewVFO.BackColor = Color.Red;
                    g11.WriteToDevice(16, 0);                       // ATT ON
                }
                else
                {
                    chkG11ATTbtn.BackColor = SystemColors.Control;
                    lblATTNewVFO.BackColor = NewBackgroundVFOColor;
                    g11.WriteToDevice(17, 0);                       // ATT OFF
                }

                WBIR_state = WBIR_State.DelayAdapt;


                if (EthCATIsActive)
                    CAT_client_socket.ClientServerSync("ZZGN;");                    // sync with server

                if (!MOX)
                {
                    if (vfo_new_look)
                        txtLOSCnew_LostFocus(null, null);
                    else
                        txtLOSCFreq_LostFocus(null, null);                              // force WBIR reinit!
                }
            }
        }

        public bool RF_button
        {
            get 
            {
                switch (current_model)
                {
                    case Model.GENESIS_G59USB:
                    case Model.GENESIS_G59NET:
                        return btnHIGH_RF.Checked;
                        
                    case Model.GENESIS_G11:
                        return chkG11RFbtn.Checked;

                    default:
                        return false;
                }
            }
            set
            {
                switch (current_model)
                {
                    case Model.GENESIS_G59USB:
                    case Model.GENESIS_G59NET:
                        btnHIGH_RF.Checked = value;
                        break;

                    case Model.GENESIS_G11:
                        chkG11RFbtn.Checked = value;
                        break;
                }
            }
        }

        private void btnHIGH_RF_CheckedChanged(object sender, EventArgs e)
        {
            switch (current_model)
            {
                case Model.GENESIS_G59USB:
                case Model.GENESIS_G59NET:
                    {
                        if (current_model == Model.GENESIS_G59USB)
                        {
                            if (btnHIGH_RF.Checked)
                            {
                                btnHIGH_RF.BackColor = Color.GreenYellow;
                                lblRFNewVFO.BackColor = Color.Red;
                                g59.WriteToDevice(11, 0);               // PREAMP ON
                            }
                            else
                            {
                                btnHIGH_RF.BackColor = SystemColors.Control;
                                lblRFNewVFO.BackColor = NewBackgroundVFOColor;
                                g59.WriteToDevice(12, 0);               // PREAMP OFF
                            }
                        }
                        else if (current_model == Model.GENESIS_G59NET)
                        {
                            if (btnHIGH_RF.Checked)
                            {
                                btnHIGH_RF.BackColor = Color.GreenYellow;
                                lblRFNewVFO.BackColor = Color.Red;
                                net_device.WriteToDevice(11, 0);               // PREAMP ON
                            }
                            else
                            {
                                btnHIGH_RF.BackColor = SystemColors.Control;
                                lblRFNewVFO.BackColor = NewBackgroundVFOColor;
                                net_device.WriteToDevice(12, 0);               // PREAMP OFF
                            }
                        }
                    }

                    WBIR_state = WBIR_State.DelayAdapt;

                    break;
                default:
                    break;
            }

            if (EthCATIsActive)
                CAT_client_socket.ClientServerSync("ZZGR;");                // sync with server

            if (!MOX)
            {
                if (vfo_new_look)
                    txtLOSCnew_LostFocus(null, null);
                else
                    txtLOSCFreq_LostFocus(null, null);                          // force WBIR reinit!
            }
        }

        public bool AF_button
        {
            get 
            {
                switch (current_model)
                {
                    case Model.GENESIS_G11:
                        return chkG11AFbtn.Checked;

                    case Model.GENESIS_G59USB:
                    case Model.GENESIS_G59NET:
                        return btnHIGH_AF.Checked;

                    default:
                        return false;
                }
            }

            set 
            {
                switch (current_model)
                {
                    case Model.GENESIS_G59USB:
                    case Model.GENESIS_G59NET:
                        btnHIGH_AF.Checked = value;
                        break;

                    case Model.GENESIS_G11:
                        chkG11AFbtn.Checked = value;
                        break;
                }
            }
        }

        private void btnHIGH_AF_CheckedChanged(object sender, EventArgs e)
        {
            switch (current_model)
            {
                case Model.GENESIS_G59USB:
                case Model.GENESIS_G59NET:
                    {
                        if (current_model == Model.GENESIS_G59USB)
                        {
                            if (btnHIGH_AF.Checked)
                            {
                                btnHIGH_AF.BackColor = Color.GreenYellow;
                                lblAFNewVFO.BackColor = Color.Red;
                                g59.WriteToDevice(5, 0);                      // AF ON
                            }
                            else
                            {
                                btnHIGH_AF.BackColor = SystemColors.Control;
                                lblAFNewVFO.BackColor = NewBackgroundVFOColor;
                                g59.WriteToDevice(6, 0);                      // AF OFF
                            }
                        }
                        else if (current_model == Model.GENESIS_G59NET)
                        {
                            if (btnHIGH_AF.Checked)
                            {
                                btnHIGH_AF.BackColor = Color.GreenYellow;
                                lblAFNewVFO.BackColor = Color.Red;
                                net_device.WriteToDevice(5, 0);                // AF ON
                            }
                            else
                            {
                                btnHIGH_AF.BackColor = SystemColors.Control;
                                lblAFNewVFO.BackColor = NewBackgroundVFOColor;
                                net_device.WriteToDevice(6, 0);                // AF OFF
                            }
                        }
                    }

                    WBIR_state = WBIR_State.DelayAdapt;

                    break;
                default:
                    break;
            }

            if (EthCATIsActive)
                CAT_client_socket.ClientServerSync("ZZGA;");                    // sync with server

            if (!MOX)
            {
                if (vfo_new_look)
                    txtLOSCnew_LostFocus(null, null);
                else
                    txtLOSCFreq_LostFocus(null, null);                              // force WBIR reinit!
            }
        }

        public bool ATT_button
        {
            get 
            {
                switch (current_model)
                {
                    case Model.GENESIS_G59USB:
                    case Model.GENESIS_G59NET:
                        return btnATT.Checked;

                    case Model.GENESIS_G11:
                        return chkG11ATTbtn.Checked;

                    default:
                        return false;
                }
            }

            set 
            {
                switch (current_model)
                {
                    case Model.GENESIS_G59USB:
                    case Model.GENESIS_G59NET:
                        btnATT.Checked = value;
                        break;

                    case Model.GENESIS_G11:
                        chkG11ATTbtn.Checked = value;
                        break;
                }
            }
        }

        private void btnATT_CheckedChanged(object sender, EventArgs e)
        {
            switch (current_model)
            {
                case Model.GENESIS_G59USB:
                case Model.GENESIS_G59NET:
                    {
                        if (current_model == Model.GENESIS_G59USB)
                        {
                            if (btnATT.Checked)
                            {
                                btnATT.BackColor = Color.GreenYellow;
                                lblATTNewVFO.BackColor = Color.Red;
                                g59.WriteToDevice(16, 0);                       // ATT ON
                            }
                            else
                            {
                                btnATT.BackColor = SystemColors.Control;
                                lblATTNewVFO.BackColor = NewBackgroundVFOColor;
                                g59.WriteToDevice(17, 0);                       // ATT OFF
                            }
                        }
                        else if (current_model == Model.GENESIS_G59NET)
                        {
                            if (btnATT.Checked)
                            {
                                btnATT.BackColor = Color.GreenYellow;
                                lblATTNewVFO.BackColor = Color.Red;
                                net_device.WriteToDevice(16, 0);                // ATT ON
                            }
                            else
                            {
                                btnATT.BackColor = SystemColors.Control;
                                lblATTNewVFO.BackColor = NewBackgroundVFOColor;
                                net_device.WriteToDevice(17, 0);                // ATT OFF
                            }
                        }
                    }

                    WBIR_state = WBIR_State.DelayAdapt;

                    break;
                default:
                    break;
            }

            if (EthCATIsActive)
                CAT_client_socket.ClientServerSync("ZZGN;");                    // sync with server

            if (!MOX)
            {
                if (vfo_new_look)
                    txtLOSCnew_LostFocus(null, null);
                else
                    txtLOSCFreq_LostFocus(null, null);                              // force WBIR reinit!
            }
        }

        private void lblAFNewVFO_Click(object sender, EventArgs e)
        {
            if (current_model == Model.GENESIS_G59USB || current_model == Model.GENESIS_G59NET)
            {
                if (btnHIGH_AF.Checked)
                    btnHIGH_AF.Checked = false;
                else
                    btnHIGH_AF.Checked = true;
            }
            else if (current_model == Model.GENESIS_G11)
            {
                if (chkG11AFbtn.Checked)
                    chkG11AFbtn.Checked = false;
                else
                    chkG11AFbtn.Checked = true;
            }
            else if (current_model == Model.GENESIS_G6)
            {
                if (chkG6AF.Checked)
                    chkG6AF.Checked = false;
                else
                    chkG6AF.Checked = true;
            }
        }

        private void lblRFNewVFO_Click(object sender, EventArgs e)
        {
            if (current_model == Model.GENESIS_G59USB || current_model == Model.GENESIS_G59NET)
            {
                if (btnHIGH_RF.Checked)
                    btnHIGH_RF.Checked = false;
                else
                    btnHIGH_RF.Checked = true;
            }
            else if (current_model == Model.GENESIS_G11)
            {
                if (chkG11RFbtn.Checked)
                    chkG11RFbtn.Checked = false;
                else
                    chkG11RFbtn.Checked = true;
            }
            else if (current_model == Model.GENESIS_G6)
            {
                if (chkG6RF.Checked)
                    chkG6RF.Checked = false;
                else
                    chkG6RF.Checked = true;
            }
        }

        private void lblATTNewVFO_Click(object sender, EventArgs e)
        {
            if (current_model == Model.GENESIS_G59USB || current_model == Model.GENESIS_G59NET)
            {
                if (btnATT.Checked)
                    btnATT.Checked = false;
                else
                    btnATT.Checked = true;
            }
            else if (current_model == Model.GENESIS_G11)
            {
                if (chkG11ATTbtn.Checked)
                    chkG11ATTbtn.Checked = false;
                else
                    chkG11ATTbtn.Checked = true;
            }
            else if (current_model == Model.GENESIS_G6)
            {
                if (chkG6ATT_6dB.Checked)
                    chkG6ATT_6dB.Checked = false;
                else
                    chkG6ATT_6dB.Checked = true;
            }
        }

        public void btnG80_X1_Click(object sender, EventArgs e)
        {
            LOSCFreq = G80Xtal1;
            btnG80_X1.Checked = true;
            btnG80_X1.Text = G80Xtal1.ToString();
            if (!skins_enabled && !booting)
            {
                btnG80_X1.BackColor = button_selected_color;
                btnG80_X2.BackColor = SystemColors.Control;
                btnG80_X3.BackColor = SystemColors.Control;
                btnG80_X4.BackColor = SystemColors.Control;
            }
        }

        public void btnG80_X2_Click(object sender, EventArgs e)
        {
            LOSCFreq = G80Xtal2;
            btnG80_X2.Checked = true;
            btnG80_X2.Text = G80Xtal2.ToString();
            if (!skins_enabled && !booting)
            {
                btnG80_X1.BackColor = SystemColors.Control;
                btnG80_X2.BackColor = button_selected_color;
                btnG80_X3.BackColor = SystemColors.Control;
                btnG80_X4.BackColor = SystemColors.Control;
            }
        }

        public void btnG80_X3_Click(object sender, EventArgs e)
        {
            LOSCFreq = G80Xtal3;
            btnG80_X3.Checked = true;
            btnG80_X3.Text = G80Xtal3.ToString();
            if (!skins_enabled && !booting)
            {
                btnG80_X1.BackColor = SystemColors.Control;
                btnG80_X2.BackColor = SystemColors.Control;
                btnG80_X3.BackColor = button_selected_color;
                btnG80_X4.BackColor = SystemColors.Control;
            }
        }

        public void btnG80_X4_Click(object sender, EventArgs e)
        {
            LOSCFreq = G80Xtal4;
            btnG80_X4.Checked = true;
            btnG80_X4.Text = G80Xtal4.ToString();
            if (!skins_enabled && !booting)
            {
                btnG80_X1.BackColor = SystemColors.Control;
                btnG80_X2.BackColor = SystemColors.Control;
                btnG80_X3.BackColor = SystemColors.Control;
                btnG80_X4.BackColor = button_selected_color;
            }
        }

        public void btnG160_X1_Click(object sender, EventArgs e)
        {
            LOSCFreq = G160Xtal1;
            btnG160_X1.Checked = true;
            btnG160_X1.Text = G160Xtal1.ToString();
            if (!skins_enabled && !booting)
            {
                btnG160_X1.BackColor = button_selected_color;
                btnG160_X2.BackColor = SystemColors.Control;
            }
        }

        public void btnG160_X2_Click(object sender, EventArgs e)
        {
            LOSCFreq = G160Xtal2;
            btnG160_X2.Checked = true;
            btnG160_X2.Text = G160Xtal2.ToString();
            if (!skins_enabled && !booting)
            {
                btnG160_X1.BackColor = SystemColors.Control;
                btnG160_X2.BackColor = button_selected_color;
            }
        }

        public void btnG3020_X1_Click(object sender, EventArgs e)
        {
            LOSCFreq = G3020Xtal1;
            btnG3020_X1.Checked = true;
            btnG3020_X1.Text = G3020Xtal1.ToString();
            if (!skins_enabled && !booting)
            {
                btnG3020_X1.BackColor = button_selected_color;
                btnG3020_X2.BackColor = SystemColors.Control;
                btnG3020_X3.BackColor = SystemColors.Control;
                btnG3020_X4.BackColor = SystemColors.Control;
            }
        }

        public void btnG3020_X2_Click(object sender, EventArgs e)
        {
            LOSCFreq = G3020Xtal2;
            btnG3020_X2.Checked = true;
            btnG3020_X2.Text = G3020Xtal2.ToString();
            if (!skins_enabled && !booting)
            {
                btnG3020_X1.BackColor = SystemColors.Control;
                btnG3020_X2.BackColor = button_selected_color;
                btnG3020_X3.BackColor = SystemColors.Control;
                btnG3020_X4.BackColor = SystemColors.Control;
            }
        }

        public void btnG3020_X3_Click(object sender, EventArgs e)
        {
            LOSCFreq = G3020Xtal3;
            btnG3020_X3.Checked = true;
            btnG3020_X3.Text = G3020Xtal3.ToString();
            if (!skins_enabled && !booting)
            {
                btnG3020_X1.BackColor = SystemColors.Control;
                btnG3020_X2.BackColor = SystemColors.Control;
                btnG3020_X3.BackColor = button_selected_color;
                btnG3020_X4.BackColor = SystemColors.Control;
            }
        }

        public void btnG3020_X4_Click(object sender, EventArgs e)
        {
            LOSCFreq = G3020Xtal4;
            btnG3020_X4.Checked = true;
            btnG3020_X4.Text = G3020Xtal4.ToString();
            if (!skins_enabled && !booting)
            {
                btnG3020_X1.BackColor = SystemColors.Control;
                btnG3020_X2.BackColor = SystemColors.Control;
                btnG3020_X3.BackColor = SystemColors.Control;
                btnG3020_X4.BackColor = button_selected_color;
            }
        }

        public void btnG40_X1_Click(object sender, EventArgs e)
        {
            LOSCFreq = G40Xtal1;
            btnG40_X1.Checked = true;
            btnG40_X1.Text = G40Xtal1.ToString();
            if (!skins_enabled)
                btnG40_X1.BackColor = button_selected_color;
        }

        public void btnG137_X1_Click(object sender, EventArgs e)
        {
            LOSCFreq = G137Xtal1;
            btnG137_X1.Checked = true;
            btnG137_X1.Text = G137Xtal1.ToString();
            if (!skins_enabled)
                btnG137_X1.BackColor = button_selected_color;
        }

        public void btnG500_X1_Click(object sender, EventArgs e)
        {
            LOSCFreq = G500Xtal1;
            btnG500_X1.Checked = true;
            btnG500_X1.Text = G500Xtal1.ToString();
            if (!skins_enabled)
                btnG500_X1.BackColor = button_selected_color;
        }

        private void xtalToolStripMenuItem(object sender, EventArgs e)
        {
            try
            {
                switch (current_model)
                {
                    case Model.GENESIS_G3020:
                        {
                            if (btnG3020_X1.Checked)
                                SetupForm.udG3020Xtal1.Value = (decimal)LOSCFreq;
                            else if (btnG3020_X2.Checked)
                                SetupForm.udG3020Xtal2.Value = (decimal)LOSCFreq;
                            else if (btnG3020_X3.Checked)
                                SetupForm.udG3020Xtal3.Value = (decimal)LOSCFreq;
                            else if (btnG3020_X4.Checked)
                                SetupForm.udG3020Xtal4.Value = (decimal)LOSCFreq;
                        }
                        break;
                    case Model.GENESIS_G137:
                        SetupForm.udG137Xtal1.Value = (decimal)LOSCFreq;
                        break;
                    case Model.GENESIS_G500:
                        SetupForm.udG500Xtal1.Value = (decimal)LOSCFreq;
                        break;
                    case Model.GENESIS_G40:
                        SetupForm.udG40Xtal1.Value = (decimal)LOSCFreq;
                        break;
                    case Model.GENESIS_G80:
                        {
                            if (btnG80_X1.Checked)
                                SetupForm.udG80Xtal1.Value = (decimal)LOSCFreq;
                            else if (btnG80_X2.Checked)
                                SetupForm.udG80Xtal2.Value = (decimal)LOSCFreq;
                            else if (btnG80_X3.Checked)
                                SetupForm.udG80Xtal3.Value = (decimal)LOSCFreq;
                            else if (btnG80_X4.Checked)
                                SetupForm.udG80Xtal4.Value = (decimal)LOSCFreq;
                        }
                        break;
                    case Model.GENESIS_G160:
                        {
                            if (btnG160_X1.Checked)
                                SetupForm.udG160Xtal1.Value = (decimal)LOSCFreq;
                            else if (btnG160_X2.Checked)
                                SetupForm.udG160Xtal2.Value = (decimal)LOSCFreq;
                        }
                        break;
                }
            }
            catch
            {
                MessageBox.Show("Wrong value!");
            }
        }

        private void btnVFOA_Click(object sender, EventArgs e)
        {
            CurrentDSPMode = (DSPMode)mode_restore;
            memory = false;
            losc_change = true;
            LOSCFreq = losc_restore;
            VFOAFreq = vfoa_restore;
            VFOBFreq = vfob_restore;
            losc_change = false;
            ptbDisplayZoom.Value = zoom_restore;
            tbDisplayZoom_Scroll(sender, e);
            ptbDisplayPan.Value = pan_restore;
            SetFilter(filter_restore);
            CalcDisplayFreq();
            btnVFOA.Checked = false;
        }

        private void lblRX2_Click(object sender, EventArgs e)
        {
            switch (current_model)
            {
                case Model.GENESIS_G59USB:
                case Model.GENESIS_G59NET:
                    {
                        if (lblRX2.BackColor == Color.Red)
                        {
                            lblRX2.BackColor = NewBackgroundVFOColor;
                            SetupForm.chkG59RX2.Checked = false;
                        }
                        else
                        {
                            lblRX2.BackColor = Color.Red;
                            SetupForm.chkG59RX2.Checked = true;
                        }
                    }
                    break;
                case Model.GENESIS_G11:
                    {
                        if (lblRX2.BackColor == Color.Red)
                        {
                            lblRX2.BackColor = NewBackgroundVFOColor;
                            SetupForm.chkG11RX2.Checked = false;
                        }
                        else
                        {
                            lblRX2.BackColor = Color.Red;
                            SetupForm.chkG11RX2.Checked = true;
                        }
                    }
                    break;
                case Model.GENESIS_G6:
                    {
                        if (lblRX2.BackColor == Color.Red)
                        {
                            lblRX2.BackColor = NewBackgroundVFOColor;
                            SetupForm.chkG6RX2input.Checked = false;
                        }
                        else
                        {
                            lblRX2.BackColor = Color.Red;
                            SetupForm.chkG6RX2input.Checked = true;
                        }
                    }
                    break;
            }
        }

        #endregion

        #region Skins  yt7pwr

        public void CheckSkins()
        {
            string path = Application.StartupPath + "\\Skins\\";

            if (Directory.Exists(path + SetupForm.comboAppSkin.Text))
            {
                if (SetupForm.comboAppSkin.Text == "ClasicXP" || SetupForm.comboAppSkin.Text == "ClasicXP OliveGreen" ||
                    SetupForm.comboAppSkin.Text == "ClasicXP Silver" || SetupForm.comboAppSkin.Text == "Clasic2000")
                    SkinsEnabled = false;
                else
                {
                    SkinsEnabled = true;
                }

                SetupForm.ReloadSkins();
            }
            else
                SkinsEnabled = false;

            if (chkVFOSplit.Checked)
            {
                lblVFOATX.Visible = false;
                lblVFOBTX.Visible = true;
                lblVFOBTX.BackColor = Color.Red;
                lblVFOBTX.ForeColor = Color.White;
            }
            else
            {
                lblVFOATX.Visible = true;
                lblVFOBTX.Visible = false;
                lblVFOATX.BackColor = Color.Red;
                lblVFOATX.ForeColor = Color.White;
            }
        }
        #endregion

        #region Memory Events yt7pwr
        // ======================================================
        // Memory Events
        // ======================================================

        private void MemoryButton_MouseHover(object sender, EventArgs e)
        {
            lblMemoryNumber.Focus();
        }

        private void MemoryButton_MouseLeave(object sender, EventArgs e)
        {
            if (lblMemoryNumber.Focused)
                btnHidden.Focus();
        }

        private void btnMemoryQuickSave_Click(object sender, System.EventArgs e)
        {
            int number;
            Int32.TryParse(lblMemoryNumber.Text, out number);
            btnZAP.Checked = false;
            if (DB.SaveMemory(number, VFOAFreq, LOSCFreq, (int)CurrentDSPMode, (int)current_filter, StepSize,
                comboAGCMainRX.SelectedIndex, (int)udSQLMainRX.Value, (int)ptbDisplayZoom.Value, (int)ptbDisplayPan.Value,
                txtNewVFOBand.Text))
                txtMemory_fill();
        }

        private void btnMemoryQuickRestore_Click(object sender, System.EventArgs e)
        {
            try
            {
                int number;
                Int32.TryParse(lblMemoryNumber.Text, out number);
                double vfoa, losc_freq;
                int modeID, filterID, stepID, agcID, squelchID, zoomID, panID;
                bool in_use = false;
                string text = "";
                ArrayList memory_list;

                // first save data for restoring

                vfoa_restore = vfoAFreq;
                vfob_restore = vfoBFreq;
                losc_restore = loscFreq;
                filter_restore = current_filter;
                zoom_restore = ptbDisplayZoom.Value;
                pan_restore = ptbDisplayPan.Value;
                mode_restore = (int)current_dsp_mode;

                memory_list = DB.GetMemory(number);

                if (memory_list != null)
                {
                    foreach (string s in memory_list)				// string is in the format "freq,losc,mode,filter,cleared,text"
                    {
                        string[] vals = s.Split('/');

                        string freq = vals[1];
                        Double.TryParse(freq, out vfoa);
                        string losc = vals[2];
                        Double.TryParse(losc, out losc_freq);
                        string mode = vals[3];
                        Int32.TryParse(mode, out modeID);
                        string filter = vals[4];
                        Int32.TryParse(filter, out filterID);
                        string step = vals[5];
                        Int32.TryParse(step, out stepID);
                        string agc = vals[6];
                        Int32.TryParse(agc, out agcID);
                        string squelch = vals[7];
                        Int32.TryParse(squelch, out squelchID);
                        string DisplayZoom = vals[8];
                        Int32.TryParse(DisplayZoom, out zoomID);
                        string DisplayPan = vals[9];
                        Int32.TryParse(DisplayPan, out panID);
                        string cleared = vals[10];
                        bool.TryParse(cleared, out in_use);

                        if (!in_use)
                        {
                            memory = true;
                            text = vals[11];
                            txtNewVFOBand.Text = text;
                            txtNewVFOBand.Refresh();
                            txtVFOABand.Text = text;
                            txtVFOABand.Refresh();
                            MemoryRecall(modeID, filterID, vfoa, losc_freq, stepID, agcID, squelchID);
                            ptbDisplayPan.Value = panID;
                            ptbDisplayZoom.Value = zoomID;
                            CalcDisplayFreq();
                            tbDisplayZoom_Scroll(null, null);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private void btnEraseMemory_Click(object sender, EventArgs e)
        {
            int number;
            btnZAP.Checked = false;
            Int32.TryParse(lblMemoryNumber.Text, out number);

            if (DB.ClearMemory(number))
                txtMemory_fill();
        }

        private void txtMemory_fill()
        {
            try
            {
                int number;
                Int32.TryParse(lblMemoryNumber.Text, out number);
                double vfoa;
                DSPMode mem_mode;
                int modeID;
                ArrayList memory;

                memory = DB.GetMemory(number);

                if (memory != null)
                {
                    foreach (string s in memory)				// string is in the format "freq,losc,mode,filter,cleared"
                    {
                        bool in_use = false;
                        string[] vals = s.Split('/');

                        string freq = vals[1];
                        Double.TryParse(freq, out vfoa);
                        string mode = vals[3];
                        Int32.TryParse(mode, out modeID);
                        mem_mode = (DSPMode)modeID;
                        string cleared = vals[10];
                        bool.TryParse(cleared, out in_use);

                        if (!in_use)
                        {
                            txtMemory.Text = freq + mem_mode.ToString();
                            lblMemoryNumber.BackColor = Color.Blue;
                        }
                        else
                        {
                            txtMemory.Text = "empty";
                            lblMemoryNumber.BackColor = Color.Red;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private void eraseAllMemoryToolStripMenuItem_Click(object sender, EventArgs e)
        {
            btnZAP.Checked = false;
            DB.ClearMemoryTable();
            lblMemoryNumber_Click(sender, e);
        }

        private void lblMemoryNumber_Click(object sender, EventArgs e)
        {
            btnZAP.Checked = false;
            btnMemoryQuickRestore_Click(sender, e);
        }

        private void btnZAP_CheckStateChanged(object sender, EventArgs e)
        {
            if (btnZAP.Checked)
            {
                if (MemoryZap_thread == null || !MemoryZap_thread.IsAlive)
                {
                    run_memory_zap = true;
                    MemoryZap_thread = new Thread(new ThreadStart(MemoryZap));
                    MemoryZap_thread.Name = "Network device Thread";
                    MemoryZap_thread.Priority = ThreadPriority.Normal;
                    MemoryZap_thread.IsBackground = true;
                    MemoryZap_thread.Start();
                }
            }
            else
            {
                run_memory_zap = false;
            }
        }

        void MemoryZap()
        {
            while (run_memory_zap)
            {
                txtMemory_fill();
                btnMemoryQuickRestore_Click(null, null);    // restore memory
                if (lblMemoryNumber.BackColor != Color.Red)  // clear memory == red color
                    Thread.Sleep((int)memory_zap_time);

                if (!reverse_memory_zap && run_memory_zap)
                {
                    if (MemoryNumber < 99)
                        MemoryNumber++;
                    else if (MemoryNumber == 99)
                        MemoryNumber = 1;
                }
                else if (reverse_memory_zap && run_memory_zap)
                {
                    if (MemoryNumber > 1)
                        MemoryNumber--;
                    else if (MemoryNumber == 1)
                        MemoryNumber = 99;
                }
            }

            btnZAP.Checked = false;
        }

        #endregion

        #region Wizard  yt7pwr

        private void mnuWizard_Click(object sender, EventArgs e)
        {
            SetupWizard w = new SetupWizard(this, 0);
            w.ShowDialog();
        }

        #endregion

        #region CWX  yt7pwr

        public void btnCWX1_Click(object sender, EventArgs e)
        {
            if (btnCWX1.Checked && !cwx_playing && !TUN)
            {
                CWX_Playing = true;
                btnCWX2.Checked = false;
                btnCWX3.Checked = false;
                btnCWX4.Checked = false;
                btnCWX5.Checked = false;
                btnCWX6.Checked = false;
                btnCWX2.BackColor = SystemColors.Control;
                btnCWX3.BackColor = SystemColors.Control;
                btnCWX4.BackColor = SystemColors.Control;
                btnCWX5.BackColor = SystemColors.Control;
                btnCWX6.BackColor = SystemColors.Control;

                btnCWX1.BackColor = button_selected_color;

                if (CWXForm == null || CWXForm.IsDisposed)
                {
                    CWXForm = new CWX(this);
                    CWXForm.StartPosition = FormStartPosition.Manual;
                    CWXForm.RestoreSettings();
                }
                else
                    CWXForm.setup_timer();   // kick timer!

                CWXForm.s1_Click(sender, e);
            }
            else
            {
                CWX_Playing = false;
                if (CWXForm != null || !CWXForm.IsDisposed)
                {
                    CWXForm.stopButton_Click(sender, e);
                }
                btnCWX1.BackColor = SystemColors.Control;
            }
        }

        public void btnCWX2_Click(object sender, EventArgs e)
        {
            if (btnCWX2.Checked && !cwx_playing && !TUN)
            {
                CWX_Playing = true;
                btnCWX1.Checked = false;
                btnCWX3.Checked = false;
                btnCWX4.Checked = false;
                btnCWX5.Checked = false;
                btnCWX6.Checked = false;
                btnCWX1.BackColor = SystemColors.Control;
                btnCWX3.BackColor = SystemColors.Control;
                btnCWX4.BackColor = SystemColors.Control;
                btnCWX5.BackColor = SystemColors.Control;
                btnCWX6.BackColor = SystemColors.Control;

                btnCWX2.BackColor = button_selected_color;
                if (CWXForm == null || CWXForm.IsDisposed)
                {
                    CWXForm = new CWX(this);
                    CWXForm.StartPosition = FormStartPosition.Manual;
                    CWXForm.RestoreSettings();
                }
                else
                    CWXForm.setup_timer();   // kick timer!
                CWXForm.s2_Click(sender, e);
            }
            else
            {
                CWX_Playing = false;
                if (CWXForm != null || !CWXForm.IsDisposed)
                {
                    CWXForm.stopButton_Click(sender, e);
                }
                CWXForm.stopButton_Click(sender, e);
                btnCWX2.BackColor = SystemColors.Control;
            }
        }

        public void btnCWX3_Click(object sender, EventArgs e)
        {
            if (btnCWX3.Checked && !cwx_playing && !TUN)
            {
                CWX_Playing = true;
                btnCWX1.Checked = false;
                btnCWX2.Checked = false;
                btnCWX4.Checked = false;
                btnCWX5.Checked = false;
                btnCWX6.Checked = false;
                btnCWX1.BackColor = SystemColors.Control;
                btnCWX2.BackColor = SystemColors.Control;
                btnCWX4.BackColor = SystemColors.Control;
                btnCWX5.BackColor = SystemColors.Control;
                btnCWX6.BackColor = SystemColors.Control;

                btnCWX3.BackColor = button_selected_color;
                if (CWXForm == null || CWXForm.IsDisposed)
                {
                    CWXForm = new CWX(this);
                    CWXForm.StartPosition = FormStartPosition.Manual;
                    CWXForm.RestoreSettings();
                }
                else
                    CWXForm.setup_timer();   // kick timer!
                CWXForm.s3_Click(sender, e);
            }
            else
            {
                CWX_Playing = false;
                if (CWXForm != null || !CWXForm.IsDisposed)
                {
                    CWXForm.stopButton_Click(sender, e);
                }
                CWXForm.stopButton_Click(sender, e);
                btnCWX3.BackColor = SystemColors.Control;
            }
        }

        public void btnCWX4_Click(object sender, EventArgs e)
        {
            if (btnCWX4.Checked && !cwx_playing && !TUN)
            {
                CWX_Playing = true;
                btnCWX1.Checked = false;
                btnCWX2.Checked = false;
                btnCWX3.Checked = false;
                btnCWX5.Checked = false;
                btnCWX6.Checked = false;
                btnCWX1.BackColor = SystemColors.Control;
                btnCWX2.BackColor = SystemColors.Control;
                btnCWX3.BackColor = SystemColors.Control;
                btnCWX5.BackColor = SystemColors.Control;
                btnCWX6.BackColor = SystemColors.Control;

                btnCWX4.BackColor = button_selected_color;
                if (CWXForm == null || CWXForm.IsDisposed)
                {
                    CWXForm = new CWX(this);
                    CWXForm.StartPosition = FormStartPosition.Manual;
                    CWXForm.RestoreSettings();
                }
                else
                    CWXForm.setup_timer();   // kick timer!
                CWXForm.s4_Click(sender, e);
            }
            else
            {
                CWX_Playing = false;
                if (CWXForm != null || !CWXForm.IsDisposed)
                {
                    CWXForm.stopButton_Click(sender, e);
                }
                CWXForm.stopButton_Click(sender, e);
                btnCWX4.BackColor = SystemColors.Control;
            }
        }

        public void btnCWX5_Click(object sender, EventArgs e)
        {
            if (btnCWX5.Checked && !cwx_playing && !TUN)
            {
                CWX_Playing = true;
                btnCWX1.Checked = false;
                btnCWX2.Checked = false;
                btnCWX3.Checked = false;
                btnCWX4.Checked = false;
                btnCWX6.Checked = false;
                btnCWX1.BackColor = SystemColors.Control;
                btnCWX2.BackColor = SystemColors.Control;
                btnCWX3.BackColor = SystemColors.Control;
                btnCWX4.BackColor = SystemColors.Control;
                btnCWX6.BackColor = SystemColors.Control;

                btnCWX5.BackColor = button_selected_color;
                if (CWXForm == null || CWXForm.IsDisposed)
                {
                    CWXForm = new CWX(this);
                    CWXForm.StartPosition = FormStartPosition.Manual;
                    CWXForm.RestoreSettings();
                }
                else
                    CWXForm.setup_timer();   // kick timer!
                CWXForm.s5_Click(sender, e);
            }
            else
            {
                CWX_Playing = false;
                if (CWXForm != null || !CWXForm.IsDisposed)
                {
                    CWXForm.stopButton_Click(sender, e);
                }
                CWXForm.stopButton_Click(sender, e);
                btnCWX5.BackColor = SystemColors.Control;
            }
        }

        public void btnCWX6_Click(object sender, EventArgs e)
        {
            if (btnCWX6.Checked && !cwx_playing && !TUN)
            {
                CWX_Playing = true;
                btnCWX1.Checked = false;
                btnCWX2.Checked = false;
                btnCWX3.Checked = false;
                btnCWX4.Checked = false;
                btnCWX5.Checked = false;
                btnCWX1.BackColor = SystemColors.Control;
                btnCWX2.BackColor = SystemColors.Control;
                btnCWX3.BackColor = SystemColors.Control;
                btnCWX4.BackColor = SystemColors.Control;
                btnCWX5.BackColor = SystemColors.Control;

                btnCWX6.BackColor = button_selected_color;
                if (CWXForm == null || CWXForm.IsDisposed)
                {
                    CWXForm = new CWX(this);
                    CWXForm.StartPosition = FormStartPosition.Manual;
                    CWXForm.RestoreSettings();
                }
                else
                    CWXForm.setup_timer();   // kick timer!
                CWXForm.s6_Click(sender, e);
            }
            else
            {
                CWX_Playing = false;
                if (CWXForm != null || !CWXForm.IsDisposed)
                {
                    CWXForm.stopButton_Click(sender, e);
                }
                CWXForm.stopButton_Click(sender, e);
                btnCWX6.BackColor = SystemColors.Control;
            }
        }

        private void btnCWX1_MouseMove(object sender, EventArgs e)
        {
            if (CWXForm.txt1 != null)
                toolTip1.SetToolTip(btnCWX1, CWXForm.txt1.Text);
        }

        private void btnCWX2_MouseMove(object sender, EventArgs e)
        {
            if (CWXForm.txt2 != null)
                toolTip1.SetToolTip(btnCWX2, CWXForm.txt2.Text);
        }

        private void btnCWX3_MouseMove(object sender, EventArgs e)
        {
            if (CWXForm.txt3 != null)
                toolTip1.SetToolTip(btnCWX3, CWXForm.txt3.Text);
        }

        private void btnCWX4_MouseMove(object sender, EventArgs e)
        {
            if (CWXForm.txt4 != null)
                toolTip1.SetToolTip(btnCWX4, CWXForm.txt4.Text);
        }

        private void btnCWX5_MouseMove(object sender, EventArgs e)
        {
            if (CWXForm.txt5 != null)
                toolTip1.SetToolTip(btnCWX5, CWXForm.txt5.Text);
        }

        private void btnCWX6_MouseMove(object sender, EventArgs e)
        {
            if (CWXForm.txt6 != null)
                toolTip1.SetToolTip(btnCWX6, CWXForm.txt6.Text);
        }

        #endregion

        #region Play/Record Wav file  yt7pwr

        private void chkPlayWav_CheckedChanged(object sender, EventArgs e)
        {
            if (!chkMOX.Checked)
            {
                if (chkPlayWav.Checked)
                {
                    if (WaveForm != null)
                        WaveForm.checkBoxPlay.Checked = true;
                    chkPlayWav.BackColor = Color.Blue;
                    VFOAFreq = VFOAFreq;
                }
                else
                {
                    if (WaveForm != null)
                        WaveForm.checkBoxPlay.Checked = false;
                    chkPlayWav.BackColor = SystemColors.Control;
                    WBIR_state = WBIR_State.DelayAdapt;                 // restart WBIR
                }
            }
        }

        private void chkRecordWav_CheckedChanged(object sender, EventArgs e)
        {
            if (chkRecordWav.Checked)
            {
                if (PowerOn)
                {
                    if (WaveForm != null)
                        WaveForm.checkBoxRecord.Checked = true;
                    chkRecordWav.BackColor = Color.Red;
                }
                else
                {
                    chkRecordWav.Checked = false;
                }
            }
            else
            {
                if (WaveForm != null)
                    WaveForm.checkBoxRecord.Checked = false;
                chkRecordWav.BackColor = SystemColors.Control;
            }
        }

        #endregion

        #region Voice Messages   yt7pwr

        public void btnMsg1_Click(object sender, EventArgs e)
        {
            if (btnMsg1.Checked && !VoiceMsgPlayback && !TUN)
            {
                if (!MOX)
                {
                    VoiceMsgPlayback = true;
                    if (VoiceMsgForm != null || VoiceMsgForm.IsDisposed)
                        VoiceMsgForm.Msg1Play = true;
                    btnMsg1.BackColor = button_selected_color;
                }
                else
                {
                    VoiceMsgForm.PlayStop = true;
                    VoiceMsgPlayback = false;
                    MOX = false;
                }
            }
            else
            {
                VoiceMsgForm.Msg1Play = false;
                VoiceMsgPlayback = false;
                MOX = false;
            }
        }

        public void btnMsg2_Click(object sender, EventArgs e)
        {
            if (btnMsg2.Checked && !VoiceMsgPlayback && !TUN)
            {
                if (!MOX)
                {
                    VoiceMsgPlayback = true;
                    if (VoiceMsgForm != null || VoiceMsgForm.IsDisposed)
                        VoiceMsgForm.Msg2Play = true;
                    btnMsg2.BackColor = button_selected_color;
                }
                else
                {
                    VoiceMsgForm.PlayStop = true;
                    VoiceMsgPlayback = false;
                    MOX = false;
                }
            }
            else
            {
                VoiceMsgForm.Msg2Play = false;
                VoiceMsgPlayback = false;
                MOX = false;
            }
        }

        public void btnMsg3_Click(object sender, EventArgs e)
        {
            if (btnMsg3.Checked && !VoiceMsgPlayback && !TUN)
            {
                if (!MOX)
                {
                    VoiceMsgPlayback = true;
                    if (VoiceMsgForm != null || VoiceMsgForm.IsDisposed)
                        VoiceMsgForm.Msg3Play = true;
                    btnMsg3.BackColor = button_selected_color;
                }
                else
                {
                    VoiceMsgForm.PlayStop = true;
                    VoiceMsgPlayback = false;
                    MOX = false;
                }
            }
            else
            {
                VoiceMsgForm.Msg3Play = false;
                VoiceMsgPlayback = false;
                MOX = false;
            }
        }

        public void btnMsg4_Click(object sender, EventArgs e)
        {
            if (btnMsg4.Checked && !VoiceMsgPlayback && !TUN)
            {
                if (!MOX)
                {
                    VoiceMsgPlayback = true;
                    if (VoiceMsgForm != null || VoiceMsgForm.IsDisposed)
                        VoiceMsgForm.Msg4Play = true;
                    btnMsg4.BackColor = button_selected_color;
                }
                else
                {
                    VoiceMsgForm.PlayStop = true;
                    VoiceMsgPlayback = false;
                    MOX = false;
                }
            }
            else
            {
                VoiceMsgForm.Msg4Play = false;
                VoiceMsgPlayback = false;
                MOX = false;
            }
        }

        public void btnMsg5_Click(object sender, EventArgs e)
        {
            if (btnMsg5.Checked && !VoiceMsgPlayback && !TUN)
            {
                if (!MOX)
                {
                    VoiceMsgPlayback = true;
                    if (VoiceMsgForm != null || VoiceMsgForm.IsDisposed)
                        VoiceMsgForm.Msg5Play = true;
                    btnMsg5.BackColor = button_selected_color;
                }
                else
                {
                    VoiceMsgForm.PlayStop = true;
                    VoiceMsgPlayback = false;
                    MOX = false;
                }
            }
            else
            {
                VoiceMsgPlayback = false;
                VoiceMsgForm.Msg5Play = false;
                MOX = false;
            }
        }

        public void btnMsg6_Click(object sender, EventArgs e)
        {
            if (btnMsg6.Checked && !VoiceMsgPlayback && !TUN)
            {
                if (!MOX)
                {
                    VoiceMsgPlayback = true;
                    if (VoiceMsgForm != null || VoiceMsgForm.IsDisposed)
                        VoiceMsgForm.Msg6Play = true;
                    btnMsg6.BackColor = button_selected_color;
                }
                else
                {
                    VoiceMsgForm.PlayStop = true;
                    VoiceMsgPlayback = false;
                    MOX = false;
                }
            }
            else
            {
                VoiceMsgPlayback = false;
                VoiceMsgForm.Msg6Play = false;
                MOX = false;
            }
        }

        private void mnuVoiceMessages_Click(object sender, EventArgs e)
        {
            if (VoiceMsgForm == null || VoiceMsgForm.IsDisposed)
                VoiceMsgForm = new VoiceMessages(this);

            VoiceMsgForm.Show();
            VoiceMsgForm.Focus();
        }

        private void btnMsg1_MouseHover(object sender, EventArgs e)
        {
            if (VoiceMsgForm.txtMsg1 != null)
                toolTip1.SetToolTip(btnMsg1, VoiceMsgForm.txtMsg1.Text);
        }

        private void btnMsg2_MouseHover(object sender, EventArgs e)
        {
            if (VoiceMsgForm.txtMsg2 != null)
                toolTip1.SetToolTip(btnMsg2, VoiceMsgForm.txtMsg2.Text);
        }

        private void btnMsg3_MouseHover(object sender, EventArgs e)
        {
            if (VoiceMsgForm.txtMsg3 != null)
                toolTip1.SetToolTip(btnMsg3, VoiceMsgForm.txtMsg3.Text);
        }

        private void btnMsg4_MousHover(object sender, EventArgs e)
        {
            if (VoiceMsgForm.txtMsg4 != null)
                toolTip1.SetToolTip(btnMsg4, VoiceMsgForm.txtMsg4.Text);
        }

        private void btnMsg5_MouseHover(object sender, EventArgs e)
        {
            if (VoiceMsgForm.txtMsg5 != null)
                toolTip1.SetToolTip(btnMsg5, VoiceMsgForm.txtMsg5.Text);
        }

        private void btnMsg6_MouseHover(object sender, EventArgs e)
        {
            if (VoiceMsgForm.txtMsg6 != null)
                toolTip1.SetToolTip(btnMsg6, VoiceMsgForm.txtMsg6.Text);
        }

        #endregion

        #region New VFO  yt7pwr


        private void panelVFOBnewHover_Paint(object sender, PaintEventArgs e)
        {
            try
            {
                if (vfoB_new_hover_digit < 0)
                    return;

                int x = 0;
                int width = 0;

                if (vfoB_new_hover_digit == 7)
                {
                    x = txtVFOBnew.Width - ((vfoB_char_width + vfoB_char_space) * 6);
                    x -= (vfoB_decimal_space + vfoB_char_space);
                }
                else if (vfoB_new_hover_digit > 7)
                {
                    x = txtVFOBnew.Width - ((vfoB_char_width + vfoB_char_space) * 6) - vfoB_decimal_width -
                        ((vfoB_char_width + vfoB_char_space) * (vfoB_new_hover_digit - 7));
                }
                else
                {
                    x = txtVFOBnew.Width - ((vfoB_char_width + vfoB_char_space) * vfoB_new_hover_digit);
                    if (vfoB_new_hover_digit > 6)
                        x -= (vfoB_decimal_space - vfoB_char_space * 2) - (vfoB_char_width + vfoB_char_space * 2);
                }
                width = x + vfoB_char_width;

                e.Graphics.DrawLine(new Pen(txtVFOBnew.ForeColor, 3.0f), x, 1, width, 1);
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private void panelVFOBnewHover_MouseMove(object sender, MouseEventArgs e)
        {
            try
            {
                Control c1 = (Control)sender;
                Control c2 = txtVFOBnew;
                int client_width = (c1.Size.Width - c1.ClientSize.Width) + (c2.Size.Width - c2.ClientSize.Width);
                int client_height = (c1.Size.Height - c1.ClientSize.Height) + (c2.Size.Height - c2.ClientSize.Height);
                int x_offset = c1.Left - c2.Left - client_width / 2;
                int y_offset = c1.Top - c2.Top - client_height / 2;
                txtVFOBnew_MouseMove(sender, new MouseEventArgs(e.Button, e.Clicks, e.X + x_offset, e.Y + y_offset, e.Delta));
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private void panelVFOAnewHover_MouseMove(object sender, MouseEventArgs e)
        {
            try
            {
                Control c1 = (Control)sender;
                Control c2 = txtVFOAnew;
                int client_width = (c1.Size.Width - c1.ClientSize.Width) + (c2.Size.Width - c2.ClientSize.Width);
                int client_height = (c1.Size.Height - c1.ClientSize.Height) + (c2.Size.Height - c2.ClientSize.Height);
                int x_offset = c1.Left - c2.Left - client_width / 2;
                int y_offset = c1.Top - c2.Top - client_height / 2;
                txtVFOAnew_MouseMove(sender, new MouseEventArgs(e.Button, e.Clicks, e.X, e.Y, e.Delta));
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private void panelVFOAnewHover_Paint(object sender, PaintEventArgs e)
        {
            try
            {
                if (vfoA_new_hover_digit < 0)
                    return;

                int x = 0;
                int width = 0;

                if (vfoA_new_hover_digit == 7)
                {
                    x = txtVFOAnew.Width - ((vfoA_char_width + vfoA_char_space * 2) * 6);
                    x -= (vfoA_decimal_space + vfoA_char_space * 2);
                }
                else
                {
                    x = txtVFOAnew.Width - ((vfoA_char_width + vfoA_char_space * 2) * vfoA_new_hover_digit);
                    if (vfoA_new_hover_digit > 6)
                        x -= (vfoA_decimal_space - vfoA_char_space * 2) - (vfoA_char_width + vfoA_char_space * 2);
                }
                width = x + vfoA_char_width;

                e.Graphics.DrawLine(new Pen(txtVFOAnew.ForeColor, 3.0f), x, 1, width, 1);
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private void txtVFOAnew_MouseMove(object sender, MouseEventArgs e)
        {
            try
            {
                if (this.ContainsFocus)
                {
                    int old_digit = vfoA_new_hover_digit;
                    int digit_index = 0;
                    GetNewVFOACharWidth();

                    int x = txtVFOAnew.Width;
                    while (x > e.X)
                    {
                        x -= vfoA_char_width;
                        if (digit_index == 6)
                        {
                            x -= vfoA_decimal_space;
                            x += vfoA_char_width;
                        }
                        else
                            x -= vfoA_char_space * 2;

                        digit_index++;
                    }

                    if (digit_index < 1) digit_index = -1;

                    if (vfoAFreq < 9.999999)
                    {
                        if (digit_index > 8) digit_index = 8;
                    }
                    else if (vfoAFreq < 99.999999)
                    {
                        if (digit_index > 9) digit_index = 9;
                    }
                    else if (vfoAFreq < 999.999999)
                    {
                        if (digit_index > 10) digit_index = 10;
                    }
                    else if (vfoAFreq < 9999.999999)
                    {
                        if (digit_index > 11) digit_index = 11;
                    }

                    vfoA_new_hover_digit = digit_index;

                    if (vfoA_new_hover_digit != old_digit)
                        panelVFOAnewHover.Invalidate();
                }
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private void txtVFOAnew_MouseLeave(object sender, EventArgs e)
        {
            try
            {
                vfoA_new_hover_digit = -1;
                panelVFOAnewHover.Invalidate();
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private void txtVFOBnew_MouseLeave(object sender, EventArgs e)
        {
            try
            {
                vfoB_new_hover_digit = -1;
                panelVFOBnewHover.Invalidate();
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private void txtVFOBnew_MouseMove(object sender, MouseEventArgs e)
        {
            try
            {
                if (this.ContainsFocus)
                {
                    int old_digit = vfoB_new_hover_digit;
                    int digit_index = 0;
                    GetNewVFOBCharWidth();

                    int x = txtVFOBnew.Width;
                    while (x > e.X)
                    {
                        x -= vfoB_char_width;
                        if (digit_index == 6)
                        {
                            x -= vfoB_decimal_space;
                            x += vfoB_char_width;
                        }
                        else
                            x -= vfoB_char_space;

                        digit_index++;
                    }

                    if (digit_index < 1) digit_index = -1;

                    if (vfoBFreq < 9.999999)
                    {
                        if (digit_index > 8) digit_index = 8;
                    }
                    else if (vfoBFreq < 99.999999)
                    {
                        if (digit_index > 9) digit_index = 9;
                    }
                    else if (vfoBFreq < 999.999999)
                    {
                        if (digit_index > 10) digit_index = 10;
                    }
                    else if (vfoBFreq < 9999.999999)
                    {
                        if (digit_index > 11) digit_index = 11;
                    }
                    vfoB_new_hover_digit = digit_index;
                    if (vfoB_new_hover_digit != old_digit)
                        panelVFOBnewHover.Invalidate();
                }
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private void txtLOSCnew_MouseLeave(object sender, EventArgs e)
        {
            try
            {
                losc_new_hover_digit = -1;
                panelLOSCnewHover.Invalidate();
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private void txtLOSCnew_MouseMove(object sender, MouseEventArgs e)
        {
            try
            {
                int old_digit = losc_new_hover_digit;
                int digit_index = 0;
                GetNewLOSCCharWidth();

                int x = txtLOSCnew.Width;
                while (x > e.X)
                {
                    x -= losc_char_width;
                    if (digit_index == 6)
                    {
                        x -= losc_decimal_space;
                        x += losc_char_width;
                    }
                    else
                        x -= losc_char_space;

                    digit_index++;
                }

                if (digit_index < 1) digit_index = -1;

                if (loscFreq < 9.999999)
                {
                    if (digit_index > 8) digit_index = 8;
                }
                else if (loscFreq < 99.999999)
                {
                    if (digit_index > 9) digit_index = 9;
                }
                else if (loscFreq < 999.999999)
                {
                    if (digit_index > 10) digit_index = 10;
                }
                else if (loscFreq < 9999.999999)
                {
                    if (digit_index > 11) digit_index = 11;
                }
                losc_new_hover_digit = digit_index;
                if (losc_new_hover_digit != old_digit)
                    panelLOSCnewHover.Invalidate();
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private void panelLOSCnew_Paint(object sender, PaintEventArgs e)
        {
            try
            {
                if (losc_new_hover_digit < 0)
                    return;

                int x = 0;
                int width = 0;

                if (losc_new_hover_digit == 7)
                {
                    x = txtLOSCnew.Width - ((losc_char_width + losc_char_space) * 6);
                    x -= (losc_decimal_space + losc_char_space);
                }
                else if (losc_new_hover_digit > 7)
                {
                    x = txtLOSCnew.Width - ((losc_char_width + losc_char_space) * 6) - losc_decimal_width -
                        ((losc_char_width + losc_char_space) * (losc_new_hover_digit - 7));
                }
                else
                {
                    x = txtLOSCnew.Width - ((losc_char_width + losc_char_space) * losc_new_hover_digit);
                    if (losc_new_hover_digit > 6)
                        x -= (losc_decimal_space - losc_char_space * 2) - (losc_char_width + losc_char_space * 2);
                }

                width = x + losc_char_width;

                e.Graphics.DrawLine(new Pen(txtLOSCnew.ForeColor, 3.0f), x, 1, width, 1);
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private void panelLOSCnewHover_MouseMove(object sender, MouseEventArgs e)
        {
            try
            {
                Control c1 = (Control)sender;
                Control c2 = txtLOSCnew;
                int client_width = (c1.Size.Width - c1.ClientSize.Width) + (c2.Size.Width - c2.ClientSize.Width);
                int client_height = (c1.Size.Height - c1.ClientSize.Height) + (c2.Size.Height - c2.ClientSize.Height);
                int x_offset = c1.Left - c2.Left - client_width / 2;
                int y_offset = c1.Top - c2.Top - client_height / 2;
                txtLOSCnew_MouseMove(sender, new MouseEventArgs(e.Button, e.Clicks, e.X + x_offset, e.Y + y_offset, e.Delta));
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        public void txtVFOAnew_LostFocus(object sender, System.EventArgs e) // yt7pwr
        {
            try
            {
                if (txtVFOAnew.Text == "." || txtVFOAnew.Text == "")
                {
                    VFOAFreq = saved_vfoa_freq;
                }
                else
                {
                    double tmp_vfoA = Double.Parse(txtVFOAnew.Text);
                    if (tmp_vfoA > 0.0 && tmp_vfoA < 500000.0)
                    {
                        if (tmp_vfoA >= MinFreq && tmp_vfoA <= MaxFreq)
                            VFOAFreq = tmp_vfoA;
                        else
                            VFOAFreq = saved_vfoa_freq;
                    }
                    else
                        VFOAFreq = saved_vfoa_freq;
                }
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private void txtVFOBnew_LostFocus(object sender, System.EventArgs e)  // changes yt7pwr
        {
            try
            {
                if (txtVFOBnew.Text == "" || txtVFOBnew.Text == ".")
                {
                    VFOBFreq = saved_vfob_freq;
                    return;
                }

                double freq = Double.Parse(txtVFOBnew.Text);
                if (freq > MinFreq && freq < MaxFreq)
                    VFOBFreq = freq;
                else
                {
                    freq = saved_losc_freq;
                    VFOBFreq = saved_vfob_freq;
                }
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private void txtLOSCnew_LostFocus(object sender, System.EventArgs e)
        {
            try
            {
                double loscfreq = 1.0;

                if (txtLOSCnew.Text == "." || txtLOSCnew.Text == "")
                {
                    LOSCFreq = saved_losc_freq;
                    loscfreq = Double.Parse(txtLOSCnew.Text);
                }
                else
                {
                    loscfreq = Double.Parse(txtLOSCnew.Text);

                    if (loscfreq > 0.0 && loscfreq < 500000.0)
                        LOSCFreq = loscfreq;
                    else
                        LOSCFreq = saved_losc_freq;
                }

                UpdateLOSCFreq(loscfreq.ToString("f6"));

                Display_GDI.LOSC = (long)(loscfreq * 1e6);
#if(DirectX)
                Display_DirectX.LOSC = (long)(loscfreq * 1e6);
#endif

                btnHidden.Focus();
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private void txtVFOAnew_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                txtVFOAnew.Focus();
                txtVFOAnew.SelectAll();
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private void txtVFOBnew_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                txtVFOBnew.Focus();
                txtVFOBnew.SelectAll();
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private void txtLOSCnew_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                txtLOSCnew.Focus();
                txtLOSCnew.SelectAll();
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private void txtVFOAnew_KeyPress(object sender, KeyPressEventArgs e)
        {
            try
            {
                string separator = System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator;
                int KeyCode = (int)e.KeyChar;
                if ((KeyCode < 48 || KeyCode > 57) &&			// numeric keys
                    KeyCode != 8 &&								// backspace
                    !e.KeyChar.ToString().Equals(separator) &&	// decimal
                    KeyCode != 27)								// escape
                {
                    e.Handled = true;
                }
                else
                {
                    if (e.KeyChar.ToString().Equals(separator))
                    {
                        e.Handled = (((TextBoxTS)sender).Text.IndexOf(separator) >= 0);
                    }
                    else if (KeyCode == 27)
                    {
                        VFOAFreq = saved_vfoa_freq;
                        btnHidden.Focus();
                    }
                }
                if (e.KeyChar == (char)Keys.Enter)
                {
                    txtVFOAnew_LostFocus(txtVFOAnew, new System.EventArgs());
                    btnHidden.Focus();
                }
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private void txtVFOBnew_KeyPress(object sender, KeyPressEventArgs e)
        {
            try
            {
                string separator = System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator;
                int KeyCode = (int)e.KeyChar;
                if ((KeyCode < 48 || KeyCode > 57) &&			// numeric keys
                    KeyCode != 8 &&								// backspace
                    !e.KeyChar.ToString().Equals(separator) &&	// decimal
                    KeyCode != 27)								// escape
                {
                    e.Handled = true;
                }
                else
                {
                    if (e.KeyChar.ToString().Equals(separator))
                    {
                        e.Handled = (((TextBoxTS)sender).Text.IndexOf(separator) >= 0);
                    }
                    else if (KeyCode == 27)
                    {
                        VFOBFreq = saved_vfob_freq;
                        btnHidden.Focus();
                    }
                }
                if (e.KeyChar == (char)Keys.Enter)
                {
                    txtVFOBnew_LostFocus(txtVFOBnew, new System.EventArgs());
                    btnHidden.Focus();
                }
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private void txtLOSCnew_KeyPress(object sender, KeyPressEventArgs e)
        {
            try
            {
                if (MOX)
                    return;

                string separator = System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator;
                int KeyCode = (int)e.KeyChar;
                if ((KeyCode < 48 || KeyCode > 57) &&			// numeric keys
                    KeyCode != 8 &&								// backspace
                    !e.KeyChar.ToString().Equals(separator) &&	// decimal
                    KeyCode != 27)								// escape
                {
                    e.Handled = true;
                }
                else
                {
                    if (e.KeyChar.ToString().Equals(separator))
                    {
                        e.Handled = (((TextBoxTS)sender).Text.IndexOf(separator) >= 0);
                    }
                    else if (KeyCode == 27)
                    {
                        LOSCFreq = saved_losc_freq;
                        btnHidden.Focus();
                    }
                }
                if (e.KeyChar == (char)Keys.Enter)
                {
                    txtLOSCnew_LostFocus(txtLOSCnew, new System.EventArgs());
                    btnHidden.Focus();
                }
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());

            }
        }

        private void GetNewVFOACharWidth()
        {
            try
            {
                // This function calculates the pixel width of the VFO display.
                // This information is used for mouse wheel hover tuning.

                Graphics g = txtVFOAnew.CreateGraphics();

                SizeF size = g.MeasureString("0", txtVFOAnew.Font, 1000, StringFormat.GenericTypographic);
                vfoA_char_width = (int)Math.Round(size.Width - 2.0f, 0);	// subtract 2 since measure string includes 1 pixel border on each side

                size = g.MeasureString("00", txtVFOAnew.Font, 1000, StringFormat.GenericTypographic);
                vfoA_char_space = (int)Math.Round(size.Width - 2.0f - 2 * vfoA_char_width, 0);

                size = g.MeasureString(separator, txtVFOAnew.Font, 1000, StringFormat.GenericTypographic);
                vfoA_decimal_width = (int)(size.Width);

                size = g.MeasureString("0" + separator + "0", txtVFOAnew.Font, 1000, StringFormat.GenericTypographic);
                vfoA_decimal_space = (int)Math.Round(size.Width - 2.0f - (2 * vfoA_char_width), 0);

                size = g.MeasureString("1234.678901", txtVFOAnew.Font, 1000, StringFormat.GenericTypographic);
                vfoA_pixel_offset = (int)Math.Round(size.Width - 2.0f, 0);

                g.Dispose();
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private void GetNewLOSCCharWidth()
        {
            try
            {
                Graphics g = txtLOSCnew.CreateGraphics();

                SizeF size = g.MeasureString("0", txtLOSCnew.Font, 1000, StringFormat.GenericTypographic);
                losc_char_width = (int)Math.Round(size.Width - 2.0f, 0);
                float float_char_width = size.Width - 2.0f;

                size = g.MeasureString("00", txtLOSCnew.Font, 1000, StringFormat.GenericTypographic);
                losc_char_space = (int)Math.Round(size.Width - 2.0f - 2 * float_char_width, 0);

                size = g.MeasureString(separator, txtLOSCnew.Font, 1000, StringFormat.GenericTypographic);
                losc_decimal_width = (int)(size.Width - 2.0f);

                size = g.MeasureString("0" + separator + "0", txtLOSCnew.Font, 1000, StringFormat.GenericTypographic);
                losc_decimal_space = (int)Math.Round(size.Width - 2.0f - 2 * float_char_width, 0);

                size = g.MeasureString("1234.678901", txtLOSCnew.Font, 1000, StringFormat.GenericTypographic);
                losc_pixel_offset = (int)Math.Round(size.Width - 2.0f, 0);

                g.Dispose();
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private void GetNewVFOBCharWidth()
        {
            try
            {
                Graphics g = txtVFOBnew.CreateGraphics();

                SizeF size = g.MeasureString("0", txtVFOBnew.Font, 1000, StringFormat.GenericTypographic);
                vfoB_char_width = (int)Math.Round(size.Width - 2.0f, 0);
                float float_char_width = size.Width - 2.0f;

                size = g.MeasureString("00", txtVFOBnew.Font, 1000, StringFormat.GenericTypographic);
                vfoB_char_space = (int)Math.Round(size.Width - 2.0f - 2 * float_char_width, 0);

                size = g.MeasureString(separator, txtVFOBnew.Font, 1000, StringFormat.GenericTypographic);
                vfoB_decimal_width = (int)(size.Width - 2.0f);

                size = g.MeasureString("0" + separator + "0", txtVFOBnew.Font, 1000, StringFormat.GenericTypographic);
                vfoB_decimal_space = (int)Math.Round(size.Width - 2.0f - 2 * float_char_width, 0);

                size = g.MeasureString("1234.678901", txtVFOBnew.Font, 1000, StringFormat.GenericTypographic);
                vfoB_pixel_offset = (int)Math.Round(size.Width - 2.0f, 0);

                g.Dispose();
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private void chkSQLMainRX_CheckedChanged(object sender, EventArgs e)
        {
            if (chkSQLMainRX.Checked)
            {
                chkSQLMainRX.BackColor = button_selected_color;
                DttSP.SetSquelchState(0, 0, true);
                DttSP.SetSquelchVal(0, 0, ((float)ptbSQLMainRX.Value -
                    multimeter_cal_offset -
                    filter_size_cal_offset));
            }
            else
            {
                chkSQLMainRX.BackColor = SystemColors.Control;
                DttSP.SetSquelchState(0, 0, false);
            }

            if (EthCATIsActive)
                CAT_client_socket.ClientServerSync("ZZSO;");

            if (chkSQLMainRX.Focused)
                btnHidden.Focus();
        }

        private void chkSQLSubRX_CheckedChanged(object sender, EventArgs e)
        {
            if (chkSQLSubRX.Checked && chkEnableSubRX.Checked)
            {
                chkSQLSubRX.BackColor = button_selected_color;
                DttSP.SetSquelchState(0, 1, true);
                DttSP.SetSquelchVal(0, 1, (float)ptbSQLSubRX.Value -
                    multimeter_cal_offset -
                    filter_size_cal_offset);
            }
            else
            {
                chkSQLSubRX.BackColor = SystemColors.Control;
                DttSP.SetSquelchState(0, 1, false);
            }

            if (EthCATIsActive)
                CAT_client_socket.ClientServerSync("ZZS0;");

            if (chkSQLSubRX.Focused) btnHidden.Focus();
        }

        private void tbSQLMainRX_OnWheel(MouseEventArgs e)
        {
            if (SetupForm.FastFocus)
                ptbSQLMainRX.Focus();
        }

        private void tbSQLMainRX_Scroll(object sender, EventArgs e)
        {
            DttSP.SetSquelchVal(0, 0, ((float)ptbSQLMainRX.Value -
                multimeter_cal_offset -
                filter_size_cal_offset));

            if (EthCATIsActive)
                CAT_client_socket.ClientServerSync("ZZSQ;");        // sync with server
        }

        private void tbSubRX_OnWheel(MouseEventArgs e)
        {
            if (SetupForm.FastFocus)
                ptbSQLSubRX.Focus();
        }

        private void tbSQLSubRX_Scroll(object sender, EventArgs e)
        {
            DttSP.SetSquelchVal(0, 1, (float)ptbSQLSubRX.Value -
                multimeter_cal_offset -
                filter_size_cal_offset);

            if (EthCATIsActive)
                CAT_client_socket.ClientServerSync("ZZS1;");        // sync with server
        }

        private void picSQLMainRX_Paint(object sender, PaintEventArgs e)
        {
            try
            {
                int signal_x = (int)((main_RX_sql_data + 155.0) * (picSQLMainRX.Width - 1) / 142.0);
                int sql_x = (int)((ptbSQLMainRX.Value + 155.0) * (picSQLMainRX.Width - 1) / 142.0);

                if (chkMOX.Checked) signal_x = sql_x = 0;
                e.Graphics.FillRectangle(new SolidBrush(Color.LimeGreen), 0, 0, signal_x, picSQLMainRX.Height);
                if (sql_x < signal_x)
                    e.Graphics.FillRectangle(new SolidBrush(Color.Red), sql_x + 1, 0, signal_x - sql_x - 1, picSQLMainRX.Height);
            }
            catch
            {
            }
        }

        private void picSQLSubRX_Paint(object sender, PaintEventArgs e)
        {
            try
            {
                int signal_x = (int)((sub_RX_sql_data + 155.0) * (picSQLSubRX.Width - 1) / 142.0);
                int sql_x = (int)((ptbSQLSubRX.Value + 155.0) * (picSQLSubRX.Width - 1) / 142.0);

                if (chkMOX.Checked) signal_x = sql_x = 0;
                e.Graphics.FillRectangle(new SolidBrush(Color.LimeGreen), 0, 0, signal_x, picSQLSubRX.Height);
                if (sql_x < signal_x)
                    e.Graphics.FillRectangle(new SolidBrush(Color.Red), sql_x + 1, 0, signal_x - sql_x - 1, picSQLSubRX.Height);
            }
            catch
            {
            }
        }

        private void InitSMeterModes()
        {
            toolStripNewVFOSmeterRX.Items.Add("Signal");
            toolStripNewVFOSmeterRX.Items.Add("Sig Avg");
            toolStripNewVFOSmeterRX.Items.Add("ADC L");
            toolStripNewVFOSmeterRX.Items.Add("ADC R");
            toolStripNewVFOSmeterRX.Items.Add("Off");

            toolStripNewVFOSmeterTX.Items.Add("Fwd Pwr");
            toolStripNewVFOSmeterTX.Items.Add("Ref Pwr");
            toolStripNewVFOSmeterTX.Items.Add("SWR");
            toolStripNewVFOSmeterTX.Items.Add("Mic");
            toolStripNewVFOSmeterTX.Items.Add("EQ");
            toolStripNewVFOSmeterTX.Items.Add("Leveler");
            toolStripNewVFOSmeterTX.Items.Add("Lev Gain");
            toolStripNewVFOSmeterTX.Items.Add("COMP");
            toolStripNewVFOSmeterTX.Items.Add("CPDR");
            toolStripNewVFOSmeterTX.Items.Add("ALC");
            toolStripNewVFOSmeterTX.Items.Add("ALC Comp");
            toolStripNewVFOSmeterTX.Items.Add("Off");
        }

        private void NewVFOAnalogSignalGaugeTXMode(object sender, EventArgs e)
        {
            if (toolStripNewVFOSmeterTX.Items.Count == 0 ||
                    toolStripNewVFOSmeterTX.SelectedIndex < 0)
            {
                CurrentMeterTXMode = MeterTXMode.FIRST;
            }
            else
            {
                MeterTXMode mode = MeterTXMode.FIRST;
                switch (toolStripNewVFOSmeterTX.Text)
                {
                    case "Fwd Pwr":
                        mode = MeterTXMode.FORWARD_POWER;
                        break;
                    case "Ref Pwr":
                        mode = MeterTXMode.REVERSE_POWER;
                        break;
                    case "Mic":
                        mode = MeterTXMode.MIC;
                        break;
                    case "EQ":
                        mode = MeterTXMode.EQ;
                        break;
                    case "Leveler":
                        mode = MeterTXMode.LEVELER;
                        break;
                    case "Lev Gain":
                        mode = MeterTXMode.LVL_G;
                        break;
                    case "COMP":
                        mode = MeterTXMode.COMP;
                        break;
                    case "CPDR":
                        mode = MeterTXMode.CPDR;
                        break;
                    case "ALC":
                        mode = MeterTXMode.ALC;
                        break;
                    case "ALC Comp":
                        mode = MeterTXMode.ALC_G;
                        break;
                    case "SWR":
                        mode = MeterTXMode.SWR;
                        break;
                    case "Off":
                        mode = MeterTXMode.OFF;
                        break;
                }

                CurrentMeterTXMode = mode;
                SetupForm.comboSMeterTXMode.Text = toolStripNewVFOSmeterTX.Text;
            }
        }

        private void NewVFOAnalogSignalGaugeRXmode(object sender, EventArgs e)
        {
            if (toolStripNewVFOSmeterRX.Items.Count == 0 ||
                    toolStripNewVFOSmeterRX.SelectedIndex < 0)
            {
                CurrentMeterRXMode = MeterRXMode.FIRST;
            }
            else
            {
                MeterRXMode mode = MeterRXMode.FIRST;
                switch (toolStripNewVFOSmeterRX.Text)
                {
                    case "Signal":
                        mode = MeterRXMode.SIGNAL_STRENGTH;
                        break;
                    case "Sig Avg":
                        multimeter_avg = Display_GDI.CLEAR_FLAG;
                        mode = MeterRXMode.SIGNAL_AVERAGE;
                        break;
                    case "ADC L":
                        mode = MeterRXMode.ADC_L;
                        break;
                    case "ADC R":
                        mode = MeterRXMode.ADC_R;
                        break;
                    case "Off":
                        mode = MeterRXMode.OFF;
                        break;
                }

                CurrentMeterRXMode = mode;
                SetupForm.comboSMeterRXMode.Text = toolStripNewVFOSmeterRX.Text;
            }
        }

        #endregion

        #region SUB RX DSP   yt7pwr

        private void SetModeSubRX(DSPMode new_mode) // changes yt7pwr
        {
            if (new_mode == DSPMode.FIRST || new_mode == DSPMode.LAST) return;

            DttSP.CurrentModeSubRX = (DSPMode)new_mode;				// set new DSP mode for Sub RX
            Display_GDI.CurrentDSPModeSubRX = new_mode;
#if(DirectX)
            Display_DirectX.CurrentDSPModeSubRX = new_mode;

            if (chkVFOSplit.Checked)
            {
                g59.KEYER = 0xff;
                g11.KEYER = 0xff;
                net_device.KEYER = 0xff;

                switch (new_mode)
                {
                    case DSPMode.CWL:
                    case DSPMode.CWU:
                        if (chkShowTXCWFreq.Checked)
                        {
                            Display_DirectX.DrawTXCWFreq = true;
                            Display_DirectX.RefreshPanadapterGrid = true;
                        }
                        else
                        {
                            Display_DirectX.DrawTXCWFreq = false;
                            Display_DirectX.RefreshPanadapterGrid = true;
                        }

                        Display_DirectX.DrawTXFilter = false;
                        break;
                    case DSPMode.DRM:
                    case DSPMode.SPEC:
                        break;
                    default:
                        if (chkShowTXFilter.Checked)
                            Display_DirectX.DrawTXFilter = true;
                        else
                            Display_DirectX.DrawTXFilter = false;

                        Display_DirectX.RefreshPanadapterGrid = true;
                        Display_DirectX.DrawTXCWFreq = false;
                        break;
                }
            }
#endif

            double freq = vfoAFreq;

            ptbSubRXFilterShift.Value = 0;
            btnSubRXFilterShiftReset.BackColor = SystemColors.Control;

            switch (old_dsp_mode_subRX)
            {
                case DSPMode.FMN:
                    if (new_mode != DSPMode.AM &&
                        new_mode != DSPMode.SAM &&
                        new_mode != DSPMode.FMN)
                    {
                        chkMON.Enabled = true;
                        chkBINSubRX.Enabled = true;
                    }
                    break;
                case DSPMode.AM:
                    if (new_mode != DSPMode.AM &&
                        new_mode != DSPMode.SAM &&
                        new_mode != DSPMode.FMN)
                    {
                        chkMON.Enabled = true;
                        chkBINSubRX.Enabled = true;
                    }
                    break;
                case DSPMode.SAM:
                    if (new_mode != DSPMode.AM &&
                        new_mode != DSPMode.SAM &&
                        new_mode != DSPMode.FMN)
                    {
                        chkMON.Enabled = true;
                        chkBINSubRX.Enabled = true;
                    }
                    break;
                case DSPMode.SPEC:
                    ptbSubRXFilterShift.Enabled = true;
                    btnSubRXFilterShiftReset.Enabled = true;
                    if (new_mode != DSPMode.DRM)
                    {
                        grpMainRXFilter.Enabled = true;
                        grpSubRXFilter.Enabled = true;
                    }
                    break;
                case DSPMode.DIGL:
                    if (vac_auto_enable &&
                        new_mode != DSPMode.DIGU &&
                        new_mode != DSPMode.DRM)
                    {
                        SetupForm.VACEnable = false;
                    }
                    break;
                case DSPMode.DIGU:
                    if (vac_auto_enable &&
                        new_mode != DSPMode.DIGL &&
                        new_mode != DSPMode.DRM)
                    {
                        SetupForm.VACEnable = false;
                    }
                    break;
                case DSPMode.DRM:
                    if (vac_auto_enable &&
                        new_mode != DSPMode.DIGL &&
                        new_mode != DSPMode.DIGU)
                        SetupForm.VACEnable = false;
                    ptbSubRXFilterShift.Enabled = true;
                    btnSubRXFilterShiftReset.Enabled = true;
                    if (new_mode != DSPMode.SPEC)
                    {
                        grpSubRXFilter.Enabled = true;
                    }
                    break;
            }

            switch (new_mode)
            {
                case DSPMode.LSB:
                    grpSubRXMode.Text = "VFO B Mode - LSB";
                    if (current_click_tune_mode == ClickTuneMode.VFOB && !minimal_screen)
                    {
                        grpModeSpecificPhone.BringToFront();
                        grpModeSpecificFM.SendToBack();
                        grpModeSpecificDigital.SendToBack();
                        grpModeSpecificCW.SendToBack();
                        SetupForm.grpCWXKeys.Visible = false;
                        SetupForm.grpVoiceMsgSetup.Visible = true;
                    }
                    if (chkVFOSplit.Checked)
                        DttSP.SetTXFilters(tx_filter_low, tx_filter_high);
                    break;
                case DSPMode.USB:
                    grpSubRXMode.Text = "VFO B Mode - USB";
                    if (current_click_tune_mode == ClickTuneMode.VFOB && !minimal_screen)
                    {
                        grpModeSpecificPhone.BringToFront();
                        grpModeSpecificFM.SendToBack();
                        grpModeSpecificDigital.SendToBack();
                        grpModeSpecificCW.SendToBack();
                        SetupForm.grpCWXKeys.Visible = false;
                        SetupForm.grpVoiceMsgSetup.Visible = true;
                    }
                    if (chkVFOSplit.Checked)
                        DttSP.SetTXFilters(tx_filter_low, tx_filter_high);
                    break;
                case DSPMode.DSB:
                    grpSubRXMode.Text = "VFO B Mode - DSB";
                    if (current_click_tune_mode == ClickTuneMode.VFOB && !minimal_screen)
                    {
                        grpModeSpecificPhone.BringToFront();
                        grpModeSpecificFM.SendToBack();
                        grpModeSpecificDigital.SendToBack();
                        grpModeSpecificCW.SendToBack();
                        SetupForm.grpCWXKeys.Visible = false;
                        SetupForm.grpVoiceMsgSetup.Visible = true;
                    }
                    if (chkVFOSplit.Checked)
                        DttSP.SetTXFilters(tx_filter_low, tx_filter_high);
                    break;
                case DSPMode.CWL:
                    grpSubRXMode.Text = "VFO B Mode - CWL";

                    if (!rx_only && PowerOn)
                    {
                        chkMOX.Enabled = true;
                        DttSP.CWRingRestart();

                        if (chkVFOSplit.Checked && !DttSP.KeyerRunning())
                        {
                            DttSP.StartKeyer();
                            Keyer.RunKeyer = true;
                        }
                    }
                    cw_key_mode = true;
                    if (chkVFOSplit.Checked)
                        DttSP.SetTXFilters(tx_filter_low, tx_filter_high);
                    if (current_click_tune_mode == ClickTuneMode.VFOB && !minimal_screen)
                    {
                        grpModeSpecificDigital.SendToBack();
                        grpModeSpecificPhone.SendToBack();
                        grpModeSpecificFM.SendToBack();
                        grpModeSpecificCW.BringToFront();
                        SetupForm.grpCWXKeys.Visible = true;
                        SetupForm.grpVoiceMsgSetup.Visible = false;
                    }

                    if (SplitAB_TX)
                    {
                        if (current_model == Model.GENESIS_G11)
                            G11_setup_keyer();
                        else if (current_model == Model.GENESIS_G59USB ||
                            current_model == Model.GENESIS_G59NET)
                            G59_setup_keyer();
                    }
                    break;
                case DSPMode.CWU:
                    grpSubRXMode.Text = "VFO B Mode - CWU";

                    if (!rx_only && PowerOn)
                    {
                        chkMOX.Enabled = true;
                        DttSP.CWRingRestart();

                        if (chkVFOSplit.Checked && !DttSP.KeyerRunning())
                        {
                            DttSP.StartKeyer();
                            Keyer.RunKeyer = true;
                        }
                    }
                    cw_key_mode = true;
                    if (chkVFOSplit.Checked)
                        DttSP.SetTXFilters(tx_filter_low, tx_filter_high);
                    if (current_click_tune_mode == ClickTuneMode.VFOB && !minimal_screen)
                    {
                        SetupForm.grpCWXKeys.Visible = true;
                        SetupForm.grpVoiceMsgSetup.Visible = false;
                        grpModeSpecificDigital.SendToBack();
                        grpModeSpecificFM.SendToBack();
                        grpModeSpecificPhone.SendToBack();
                        grpModeSpecificCW.BringToFront();
                    }

                    if (SplitAB_TX)
                    {
                        if (current_model == Model.GENESIS_G11)
                            G11_setup_keyer();
                        else if (current_model == Model.GENESIS_G59USB ||
                            current_model == Model.GENESIS_G59NET)
                            G59_setup_keyer();
                    }
                    break;
                case DSPMode.FMN:
                    grpSubRXMode.Text = "VFO B Mode - FMN";
                    DttSP.SetTXFilters(tx_filter_low, tx_filter_high);

                    if (!rx_only && PowerOn)
                        chkMOX.Enabled = true;

                    chkBINSubRX.Checked = false;
                    chkBINSubRX.Enabled = false;
                    if (current_click_tune_mode == ClickTuneMode.VFOB && !minimal_screen)
                    {
                        SetupForm.grpCWXKeys.Visible = false;
                        SetupForm.grpVoiceMsgSetup.Visible = true;
                        grpModeSpecificPhone.SendToBack();
                        grpModeSpecificFM.BringToFront();
                        grpModeSpecificDigital.SendToBack();
                        grpModeSpecificCW.SendToBack();
                    }
                    break;
                case DSPMode.AM:
                    grpSubRXMode.Text = "VFO B Mode - AM";

                    if (!rx_only && PowerOn)
                        chkMOX.Enabled = true;

                    chkBINSubRX.Checked = false;
                    chkBINSubRX.Enabled = false;

                    if (chkVFOSplit.Checked)
                        DttSP.SetTXFilters(tx_filter_low, tx_filter_high);

                    if (current_click_tune_mode == ClickTuneMode.VFOB && !minimal_screen)
                    {
                        SetupForm.grpCWXKeys.Visible = false;
                        SetupForm.grpVoiceMsgSetup.Visible = true;
                        grpModeSpecificPhone.BringToFront();
                        grpModeSpecificFM.SendToBack();
                        grpModeSpecificDigital.SendToBack();
                        grpModeSpecificCW.SendToBack();
                    }
                    break;
                case DSPMode.SAM:
                    grpSubRXMode.Text = "VFO B Mode - SAM";

                    if (!rx_only && PowerOn)
                        chkMOX.Enabled = true;

                    chkBINSubRX.Checked = false;
                    chkBINSubRX.Enabled = false;
                    if (chkVFOSplit.Checked)
                        DttSP.SetTXFilters(tx_filter_low, tx_filter_high);
                    if (current_click_tune_mode == ClickTuneMode.VFOB && !minimal_screen)
                    {
                        SetupForm.grpCWXKeys.Visible = false;
                        SetupForm.grpVoiceMsgSetup.Visible = true;
                        grpModeSpecificPhone.BringToFront();
                        grpModeSpecificDigital.SendToBack();
                        grpModeSpecificFM.SendToBack();
                        grpModeSpecificCW.SendToBack();
                    }
                    break;
                case DSPMode.SPEC:
                    grpSubRXMode.Text = "VFO B Mode - SPEC";
                    DttSP.SetRXOsc(0, 0, 0.0);
                    grpMainRXFilter.Enabled = false;
                    grpSubRXFilter.Enabled = false;
                    grpSubRXFilter.Text = "VFO B Filter - " + (DttSP.SampleRate / 1000).ToString("f0") + "kHz";
                    ptbSubRXFilterShift.Enabled = false;
                    btnSubRXFilterShiftReset.Enabled = false;
                    SetupForm.grpCWXKeys.Visible = false;
                    SetupForm.grpVoiceMsgSetup.Visible = false;
                    if (!minimal_screen)
                    {
                        grpModeSpecificPhone.BringToFront();
                        grpModeSpecificDigital.SendToBack();
                        grpModeSpecificFM.SendToBack();
                        grpModeSpecificCW.SendToBack();
                    }
                    break;
                case DSPMode.DIGL:
                    SetupForm.grpCWXKeys.Visible = false;
                    SetupForm.grpVoiceMsgSetup.Visible = false;
                    grpSubRXMode.Text = "VFO B Mode - DIGL";
                    if (chkVFOSplit.Checked)
                        DttSP.SetTXFilters(tx_filter_low, tx_filter_high);
                    if (vac_auto_enable)
                        SetupForm.VACEnable = true;
                    if (current_click_tune_mode == ClickTuneMode.VFOB && !minimal_screen)
                    {
                        grpModeSpecificDigital.BringToFront();
                        grpModeSpecificCW.SendToBack();
                        grpModeSpecificFM.SendToBack();
                        grpModeSpecificPhone.SendToBack();
                    }
                    break;
                case DSPMode.DIGU:
                    SetupForm.grpCWXKeys.Visible = false;
                    SetupForm.grpVoiceMsgSetup.Visible = false;
                    grpSubRXMode.Text = "VFO B Mode - DIGU";
                    if (chkVFOSplit.Checked)
                        DttSP.SetTXFilters(tx_filter_low, tx_filter_high);
                    if (vac_auto_enable)
                        SetupForm.VACEnable = true;
                    if (current_click_tune_mode == ClickTuneMode.VFOB && !minimal_screen)
                    {
                        grpModeSpecificCW.SendToBack();
                        grpModeSpecificPhone.SendToBack();
                        grpModeSpecificFM.SendToBack();
                        grpModeSpecificDigital.BringToFront();
                    }
                    break;
                case DSPMode.DRM:
                    if (current_dsp_mode == DSPMode.DRM)
                        grpSubRXMode.Text = "VFO B Mode - DRM";

                    if (current_click_tune_mode == ClickTuneMode.VFOB && !minimal_screen)
                    {
                        grpModeSpecificCW.SendToBack();
                        grpModeSpecificPhone.SendToBack();
                        grpModeSpecificFM.SendToBack();
                        grpModeSpecificDigital.BringToFront();
                    }
                    break;
            }

            radSubRXFilter1.Text = filter_presets_subRX[(int)new_mode].GetName(Filter.F1);
            radSubRXFilter2.Text = filter_presets_subRX[(int)new_mode].GetName(Filter.F2);
            radSubRXFilter3.Text = filter_presets_subRX[(int)new_mode].GetName(Filter.F3);
            radSubRXFilter4.Text = filter_presets_subRX[(int)new_mode].GetName(Filter.F4);
            radSubRXFilter5.Text = filter_presets_subRX[(int)new_mode].GetName(Filter.F5);
            radSubRXFilter6.Text = filter_presets_subRX[(int)new_mode].GetName(Filter.F6);
            radSubRXFilter7.Text = filter_presets_subRX[(int)new_mode].GetName(Filter.F7);
            radSubRXFilter8.Text = filter_presets_subRX[(int)new_mode].GetName(Filter.F8);
            radSubRXFilter9.Text = filter_presets_subRX[(int)new_mode].GetName(Filter.F9);
            radSubRXFilter10.Text = filter_presets_subRX[(int)new_mode].GetName(Filter.F10);
            radSubRXFilterVar1.Text = filter_presets_subRX[(int)new_mode].GetName(Filter.VAR1);
            radSubRXFilterVar2.Text = filter_presets_subRX[(int)new_mode].GetName(Filter.VAR2);

            if (current_dsp_mode_subRX != DSPMode.SPEC && !callibrating)
                CurrentFilterSubRX = filter_presets_subRX[(int)new_mode].LastFilter;

            tbFilterWidthScroll_newModeSubRX();

            if (chkVFOSplit.Checked)
            {
                switch (current_model)
                {
                    case Model.GENESIS_G59USB:
                    case Model.GENESIS_G59NET:
                        {
                            G59_setup_keyer();
                        }
                        break;

                    case Model.GENESIS_G11:
                        {
                            G11_setup_keyer();
                        }
                        break;
                }
            }

            if (EthCATIsActive)
                CAT_client_socket.ClientServerSync("ZZME;");        // sync with server
        }

        private void radSUBRxModeLSB_CheckedChanged(object sender, EventArgs e)
        {
            if (radSUBRxModeLSB.Checked)
            {
                if (!lock_dsp_mode)
                    old_dsp_mode_subRX = current_dsp_mode_subRX;
                CurrentDSPModeSubRX = DSPMode.LSB;
            }
        }

        private void radSUBRxModeUSB_CheckedChanged(object sender, EventArgs e)
        {
            if (radSUBRxModeUSB.Checked)
            {
                if (!lock_dsp_mode)
                    old_dsp_mode_subRX = current_dsp_mode_subRX;
                CurrentDSPModeSubRX = DSPMode.USB;
            }
        }

        private void radSUBRxModeDSB_CheckedChanged(object sender, EventArgs e)
        {
            if (radSUBRxModeDSB.Checked)
            {
                if (!lock_dsp_mode)
                    old_dsp_mode_subRX = current_dsp_mode_subRX;
                CurrentDSPModeSubRX = DSPMode.DSB;
            }
        }

        private void radSUBRxModeCWL_CheckedChanged(object sender, EventArgs e)
        {
            if (radSUBRxModeCWL.Checked)
            {
                if (!lock_dsp_mode)
                    old_dsp_mode_subRX = current_dsp_mode_subRX;
                CurrentDSPModeSubRX = DSPMode.CWL;
            }
        }

        private void radSUBRxModeCWU_CheckedChanged(object sender, EventArgs e)
        {
            if (radSUBRxModeCWU.Checked)
            {
                if (!lock_dsp_mode)
                    old_dsp_mode_subRX = current_dsp_mode_subRX;
                CurrentDSPModeSubRX = DSPMode.CWU;
            }
        }

        private void radSUBRxModeFMN_CheckedChanged(object sender, EventArgs e)
        {
            if (radSUBRxModeFMN.Checked)
            {
                if (!lock_dsp_mode)
                    old_dsp_mode_subRX = current_dsp_mode_subRX;
                CurrentDSPModeSubRX = DSPMode.FMN;
            }
        }

        private void radSUBRxModeAM_CheckedChanged(object sender, EventArgs e)
        {
            if (radSUBRxModeAM.Checked)
            {
                if (!lock_dsp_mode)
                    old_dsp_mode_subRX = current_dsp_mode_subRX;
                CurrentDSPModeSubRX = DSPMode.AM;
            }
        }

        private void radSUBRxModeSAM_CheckedChanged(object sender, EventArgs e)
        {
            if (radSUBRxModeSAM.Checked)
            {
                if (!lock_dsp_mode)
                    old_dsp_mode_subRX = current_dsp_mode_subRX;
                CurrentDSPModeSubRX = DSPMode.SAM;
            }
        }

        private void radSUBRxModeSPEC_CheckedChanged(object sender, EventArgs e)
        {
            if (radSUBRxModeSAM.Checked)
            {
                if (!lock_dsp_mode)
                    old_dsp_mode_subRX = current_dsp_mode_subRX;
                CurrentDSPModeSubRX = DSPMode.SPEC;
            }
        }

        private void radSUBRxModeDIGL_CheckedChanged(object sender, EventArgs e)
        {
            if (radSUBRxModeDIGL.Checked)
            {
                if (!lock_dsp_mode)
                    old_dsp_mode_subRX = current_dsp_mode_subRX;
                CurrentDSPModeSubRX = DSPMode.DIGL;
            }
        }

        private void radSUBRxModeDIGU_CheckedChanged(object sender, EventArgs e)
        {
            if (radSUBRxModeDIGU.Checked)
            {
                if (!lock_dsp_mode)
                    old_dsp_mode_subRX = current_dsp_mode_subRX;
                CurrentDSPModeSubRX = DSPMode.DIGU;
            }
        }

        private void radSUBRxModeDRM_CheckedChanged(object sender, EventArgs e)
        {
            if (radSUBRxModeDRM.Checked)
            {
                if (!lock_dsp_mode)
                    old_dsp_mode_subRX = current_dsp_mode_subRX;
                CurrentDSPModeSubRX = DSPMode.DRM;
            }
        }

        private void radSubRXFilter1_CheckedChanged(object sender, EventArgs e)
        {
            if (radSubRXFilter1.Checked)
                SetFilterSubRX(Filter.F1);
        }

        private void radSubRXFilter2_CheckedChanged(object sender, EventArgs e)
        {
            if (radSubRXFilter2.Checked)
                SetFilterSubRX(Filter.F2);
        }

        private void radSubRXFilter3_CheckedChanged(object sender, EventArgs e)
        {
            if (radSubRXFilter3.Checked)
                SetFilterSubRX(Filter.F3);
        }

        private void radSubRXFilter4_CheckedChanged(object sender, EventArgs e)
        {
            if (radSubRXFilter4.Checked)
                SetFilterSubRX(Filter.F4);
        }

        private void radSubRXFilter5_CheckedChanged(object sender, EventArgs e)
        {
            if (radSubRXFilter5.Checked)
                SetFilterSubRX(Filter.F5);
        }

        private void radSubRXFilter6_CheckedChanged(object sender, EventArgs e)
        {
            if (radSubRXFilter6.Checked)
                SetFilterSubRX(Filter.F6);
        }

        private void radSubRXFilter7_CheckedChanged(object sender, EventArgs e)
        {
            if (radSubRXFilter7.Checked)
                SetFilterSubRX(Filter.F7);
        }

        private void radSubRXFilter8_CheckedChanged(object sender, EventArgs e)
        {
            if (radSubRXFilter8.Checked)
                SetFilterSubRX(Filter.F8);
        }

        private void radSubRXFilter9_CheckedChanged(object sender, EventArgs e)
        {
            if (radSubRXFilter9.Checked)
                SetFilterSubRX(Filter.F9);
        }

        private void radSubRXFilter10_CheckedChanged(object sender, EventArgs e)
        {
            if (radSubRXFilter10.Checked)
                SetFilterSubRX(Filter.F10);
        }

        private void radSubRXFilterVar1_CheckedChanged(object sender, EventArgs e)
        {
            if (radSubRXFilterVar1.Checked)
                SetFilterSubRX(Filter.VAR1);
        }

        private void radSubRXFilterVar2_CheckedChanged(object sender, EventArgs e)
        {
            if (radSubRXFilterVar2.Checked)
                SetFilterSubRX(Filter.VAR2);
        }

        private void udSubRXFilterLow_ValueChanged(object sender, EventArgs e)
        {
            if (udSubRXFilterLow.Focused)
            {
                if (udSubRXFilterLow.Value >= udSubRXFilterHigh.Value - 10)
                {
                    udSubRXFilterLow.Value = udSubRXFilterHigh.Value - 10;
                    return;
                }

                UpdateFiltersSubRX((int)udSubRXFilterLow.Value, (int)udSubRXFilterHigh.Value);

                if (!save_filter_changes)
                    filter_presets[(int)current_dsp_mode_subRX].SetLow(current_filter_subRX, (int)udSubRXFilterLow.Value);
            }

            if (save_filter_changes)
                filter_presets[(int)current_dsp_mode_subRX].SetLow(current_filter_subRX, (int)udSubRXFilterLow.Value);

            if (udSubRXFilterLow.Focused)
                btnHidden.Focus();
        }

        private void udSubRXFilterHigh_ValueChanged(object sender, EventArgs e)
        {
            if (udSubRXFilterHigh.Focused)
            {
                if (udSubRXFilterHigh.Value <= udSubRXFilterLow.Value + 10)
                {
                    udSubRXFilterHigh.Value = udSubRXFilterLow.Value + 10;
                    return;
                }

                UpdateFiltersSubRX((int)udSubRXFilterLow.Value, (int)udSubRXFilterHigh.Value);

                if (!save_filter_changes)
                    filter_presets[(int)current_dsp_mode_subRX].SetHigh(current_filter_subRX, (int)udSubRXFilterHigh.Value);
            }

            if (save_filter_changes)
                filter_presets[(int)current_dsp_mode_subRX].SetHigh(current_filter_subRX, (int)udSubRXFilterHigh.Value);

            if (udSubRXFilterHigh.Focused)
                btnHidden.Focus();
        }

        private void ptbSubRXFilterWidth_Scroll(object sender, EventArgs e)
        {
            if (current_dsp_mode_subRX == DSPMode.DRM || current_dsp_mode_subRX == DSPMode.SPEC)
            {
                return;  // no good in this mode 
            }

            SelectVarFilterSubRX();

            int range = ptbSubRXFilterWidth.Maximum - ptbSubRXFilterWidth.Minimum;
            int new_bw = 0;

            switch (current_filter_width_mode_subRX)
            {
                case FilterWidthMode.Linear:
                    new_bw = (int)((float)(ptbSubRXFilterWidth.Value - ptbSubRXFilterWidth.Minimum)
                        / range * max_filter_width_subRX);
                    break;
                case FilterWidthMode.Log:
                    double max_log = Math.Log(ptbSubRXFilterWidth.Maximum);
                    double temp = Math.Log(Math.Max((ptbSubRXFilterWidth.Maximum - ptbSubRXFilterWidth.Value), 1.0));
                    temp = max_log - temp;
                    new_bw = (int)((float)(temp / max_log * max_filter_width_subRX));
                    break;
                case FilterWidthMode.Log10:
                    max_log = Math.Log10(ptbSubRXFilterWidth.Maximum);
                    temp = Math.Log10(Math.Max((ptbSubRXFilterWidth.Maximum - ptbSubRXFilterWidth.Value), 1.0));
                    temp = max_log - temp;
                    new_bw = (int)((float)(temp / max_log * max_filter_width_subRX));
                    break;
            }

            new_bw = Math.Max(new_bw, 10);
            int current_center = (DttSP.RXFilterLowCutSubRX + DttSP.RXFilterHighCutSubRX) / 2;
            int low = 0, high = 0;
            switch (current_dsp_mode_subRX)
            {
                case DSPMode.AM:
                case DSPMode.SAM:
                case DSPMode.FMN:
                case DSPMode.DSB:
                    low = current_center - new_bw;
                    high = current_center + new_bw;
                    if (low < -max_filter_width_subRX)
                    {
                        low += (-max_filter_width_subRX - low);
                        high += (-max_filter_width_subRX - low);
                    }
                    else if (high > max_filter_width_subRX)
                    {
                        high -= (high - max_filter_width_subRX);
                        low -= (high - max_filter_width_subRX);
                    }
                    break;
                case DSPMode.LSB:
                    high = -default_low_cut_subRX;
                    low = high - new_bw;
                    break;
                case DSPMode.CWL:
                case DSPMode.DIGL:
                    low = current_center - new_bw / 2;
                    high = current_center + new_bw / 2;
                    if (high > -default_low_cut_subRX && DttSP.RXFilterHighCutSubRX <= -default_low_cut_subRX)
                    {
                        high = -default_low_cut_subRX;
                        low = high - new_bw;
                    }
                    else if (low < -20000)
                    {
                        low = -20000;
                        high = low + new_bw;
                    }
                    break;
                case DSPMode.USB:
                    low = default_low_cut_subRX;
                    high = low + new_bw;
                    break;
                case DSPMode.CWU:
                case DSPMode.DIGU:
                    low = current_center - new_bw / 2;
                    high = current_center + new_bw / 2;
                    if (low < default_low_cut_subRX && DttSP.RXFilterLowCutSubRX >= default_low_cut_subRX)
                    {
                        low = default_low_cut;
                        high = low + new_bw;
                    }
                    else if (high > 20000)
                    {
                        high = 20000;
                        low = high - new_bw;
                    }
                    break;
            }
            UpdateFiltersSubRX(low, high);

            if (ptbSubRXFilterWidth.Focused)
                btnHidden.Focus();
        }

        private void ptbSubRXFilterWidth_OnWheel(MouseEventArgs e)
        {
            if (SetupForm.FastFocus)
                ptbSubRXFilterWidth.Focus();
        }

        private void ptbSubRXFilterWidth_MouseMove(object sender, MouseEventArgs e)
        {
            if (SetupForm.FastFocus)
                ptbSubRXFilterWidth.Focus();
        }

        private void ptbSubRXFilterShift_MouseMove(object sender, MouseEventArgs e)
        {
            if (SetupForm.FastFocus)
                ptbSubRXFilterShift.Focus();
        }

        private void ptbSubRXFilterShift_OnWheel(MouseEventArgs e)
        {
            if (SetupForm.FastFocus)
                ptbSubRXFilterShift.Focus();
        }

        private void ptbSubRXFilterShift_Scroll(object sender, EventArgs e)
        {
            SelectVarFilterSubRX();

            int bw = DttSP.RXFilterHighCutSubRX - DttSP.RXFilterLowCutSubRX;
            int default_center = 0;

            switch (current_dsp_mode_subRX)
            {
                case DSPMode.USB:
                    default_center = default_low_cut_subRX + bw / 2;
                    break;
                case DSPMode.LSB:
                    default_center = -default_low_cut_subRX - bw / 2;
                    break;
                case DSPMode.CWU:
                    default_center = cw_pitch;
                    break;
                case DSPMode.CWL:
                    default_center = -cw_pitch;
                    break;
                case DSPMode.DIGU:
                    default_center = digu_click_tune_offset;
                    break;
                case DSPMode.DIGL:
                    default_center = -digl_click_tune_offset;
                    break;
            }

            int adjusted_max = max_filter_shift_subRX;
            if (default_center > 0)
            {
                if (ptbSubRXFilterShift.Value > 0)
                {
                    adjusted_max = Math.Min(max_filter_shift_subRX, 20000 - (Math.Abs(default_center) + bw / 2));
                }
            }
            else if (default_center < 0)
            {
                if (ptbSubRXFilterShift.Value < 0)
                {
                    adjusted_max = Math.Min(max_filter_shift_subRX, 20000 - (Math.Abs(default_center) + bw / 2));
                }
            }
            else //default_center == 0
            {
                adjusted_max = Math.Min(max_filter_shift_subRX, 20000 - bw / 2);
            }

            int range = ptbSubRXFilterShift.Maximum - ptbSubRXFilterShift.Minimum;
            int new_center = default_center + (int)((float)ptbSubRXFilterShift.Value / (range / 2) * adjusted_max);
            UpdateFiltersSubRX(new_center - bw / 2, new_center + bw / 2);

            btnSubRXFilterShiftReset.BackColor = button_selected_color;

            if (ptbSubRXFilterShift.Focused)
                btnHidden.Focus();
        }

        private void udSubRXFilterLow_LostFocus(object sender, EventArgs e)
        {
            udSubRXFilterLow_ValueChanged(sender, e);
        }

        private void udSubRXFilterHigh_LostFocus(object sender, EventArgs e)
        {
            udSubRXFilterHigh_ValueChanged(sender, e);
        }

        public void SetFilterSubRX(Filter new_filter)
        {
            if (current_dsp_mode_subRX == DSPMode.FIRST || current_dsp_mode_subRX == DSPMode.LAST) 
                return;

            int low = 0, high = 0;

            current_filter_subRX = new_filter;
            low = filter_presets_subRX[(int)current_dsp_mode_subRX].GetLow(new_filter);
            high = filter_presets_subRX[(int)current_dsp_mode_subRX].GetHigh(new_filter);
            //filter_presets_subRX[(int)current_dsp_mode_subRX].LastFilter = new_filter;

            grpSubRXFilter.Text = "VFO B Filter - " + filter_presets[(int)current_dsp_mode_subRX].GetName(new_filter);

            switch (new_filter)
            {
                case Filter.VAR1:
                    radSubRXFilterVar1.BackColor = button_selected_color;
                    udSubRXFilterLow.BackColor = button_selected_color;
                    udSubRXFilterHigh.BackColor = button_selected_color;
                    udSubRXFilterLow.Enabled = true;
                    udSubRXFilterHigh.Enabled = true;
                    break;
                case Filter.VAR2:
                    radSubRXFilterVar2.BackColor = button_selected_color;
                    udSubRXFilterLow.BackColor = button_selected_color;
                    udSubRXFilterHigh.BackColor = button_selected_color;
                    udSubRXFilterLow.Enabled = true;
                    udSubRXFilterHigh.Enabled = true;
                    break;
                case Filter.NONE:
                    foreach (Control c in grpSubRXFilter.Controls)
                    {
                        if (c.GetType() == typeof(RadioButtonTS))
                        {
                            ((RadioButtonTS)c).Checked = false;

                            if (c.BackColor != SystemColors.Control)
                                ((RadioButtonTS)c).BackColor = SystemColors.Control;
                        }
                    }
                    return;
            }

            UpdateFiltersSubRX(low, high);

            if (EthCATIsActive)
                CAT_client_socket.ClientServerSync("ZZFJ;");        // sync with server
        }

        private void tbSubRXFilterShift_Update(int low, int high)
        {
            int bw = DttSP.RXFilterHighCutSubRX - DttSP.RXFilterLowCutSubRX;
            int default_center = 0;
            int current_center = (low + high) / 2;

            switch (current_dsp_mode_subRX)
            {
                case DSPMode.USB:
                    default_center = default_low_cut_subRX + bw / 2;
                    break;
                case DSPMode.LSB:
                    default_center = -default_low_cut_subRX - bw / 2;
                    break;
                case DSPMode.CWU:
                    default_center = cw_pitch;
                    break;
                case DSPMode.CWL:
                    default_center = -cw_pitch;
                    break;
                case DSPMode.DIGU:
                    default_center = digu_click_tune_offset;
                    break;
                case DSPMode.DIGL:
                    default_center = -digl_click_tune_offset;
                    break;
            }

            int adjusted_max = max_filter_shift_subRX;
            if (default_center > 0)
            {
                if (current_center > default_center)
                {
                    adjusted_max = Math.Min(max_filter_shift_subRX, 20000 - (Math.Abs(default_center) + bw / 2));
                }
            }
            else if (default_center < 0)
            {
                if (current_center < default_center)
                {
                    adjusted_max = Math.Min(max_filter_shift_subRX, 20000 - (Math.Abs(default_center) + bw / 2));
                }
            }
            else //default_center == 0
            {
                adjusted_max = Math.Min(max_filter_shift_subRX, 20000 - bw / 2);
            }

            int range = ptbSubRXFilterShift.Maximum - ptbSubRXFilterShift.Minimum;
            int delta = current_center - default_center;
            int new_val = (int)((float)delta / adjusted_max * (range / 2));
            if (new_val > ptbSubRXFilterShift.Maximum) new_val = ptbSubRXFilterShift.Maximum;
            if (new_val < ptbSubRXFilterShift.Minimum) new_val = ptbSubRXFilterShift.Minimum;
            ptbSubRXFilterShift.Value = new_val;

            if (EthCATIsActive)
                CAT_client_socket.ClientServerSync("ZZFJ;");        // sync with server
        }

        private void btnSubRXFilterShiftReset_Click(object sender, EventArgs e)
        {
            int bw = DttSP.RXFilterHighCutSubRX - DttSP.RXFilterLowCutSubRX;
            int low, high;
            switch (current_dsp_mode_subRX)
            {
                case DSPMode.AM:
                case DSPMode.SAM:
                case DSPMode.FMN:
                case DSPMode.DSB:
                    ptbSubRXFilterShift.Value = 0;
                    ptbSubRXFilterShift_Scroll(this, EventArgs.Empty);
                    break;
                case DSPMode.USB:
                    low = default_low_cut_subRX;
                    high = low + bw;
                    UpdateFiltersSubRX(low, high);
                    break;
                case DSPMode.CWU:
                    low = cw_pitch - bw / 2;
                    high = cw_pitch + bw / 2;
                    if (low < 0)
                    {
                        int delta = -low;
                        low += delta;
                        high += delta;
                    }
                    else if (high > 20000)
                    {
                        int delta = high - 20000;
                        high -= delta;
                        low -= delta;
                    }
                    UpdateFiltersSubRX(low, high);
                    break;
                case DSPMode.DIGU:
                    low = digu_click_tune_offset - bw / 2;
                    high = digu_click_tune_offset + bw / 2;
                    if (low < 0)
                    {
                        int delta = -low;
                        low += delta;
                        high += delta;
                    }
                    else if (high > 20000)
                    {
                        int delta = high - 20000;
                        high -= delta;
                        low -= delta;
                    }
                    UpdateFiltersSubRX(low, high);
                    break;
                case DSPMode.LSB:
                    high = -default_low_cut_subRX;
                    low = high - bw;
                    UpdateFiltersSubRX(low, high);
                    break;
                case DSPMode.CWL:
                    high = -cw_pitch + bw / 2;
                    low = -cw_pitch - bw / 2;
                    if (high > 0)
                    {
                        int delta = -high;
                        low -= delta;
                        high -= delta;
                    }
                    else if (low < -20000)
                    {
                        int delta = low + 20000;
                        high += delta;
                        low += delta;
                    }
                    UpdateFiltersSubRX(low, high);
                    break;
                case DSPMode.DIGL:
                    high = -digl_click_tune_offset + bw / 2;
                    low = -digl_click_tune_offset - bw / 2;
                    if (high > 0)
                    {
                        int delta = -high;
                        low -= delta;
                        high -= delta;
                    }
                    else if (low < -20000)
                    {
                        int delta = low + 20000;
                        high += delta;
                        low += delta;
                    }
                    UpdateFiltersSubRX(low, high);
                    break;
            }
            btnSubRXFilterShiftReset.BackColor = SystemColors.Control;	// make button grey

            if (EthCATIsActive)
                CAT_client_socket.ClientServerSync("ZZFJ;");        // sync with server
        }

        private void chkNRSubRX_CheckedChanged(object sender, EventArgs e)
        {
            if (chkNRSubRX.Checked)
            {
                chkNRSubRX.BackColor = button_selected_color;
                DttSP.SetNR(0, 1, true);
            }
            else
            {
                chkNRSubRX.BackColor = SystemColors.Control;
                DttSP.SetNR(0, 1, false);
            }
        }

        private void chkANFSubRX_CheckedChanged(object sender, EventArgs e)
        {
            if (chkANFSubRX.Checked)
            {
                chkANFSubRX.BackColor = button_selected_color;
                DttSP.SetANF(0, 1, true);
            }
            else
            {
                chkANFSubRX.BackColor = SystemColors.Control;
                DttSP.SetANF(0, 1, false);
            }
        }

        private void chkNBSubRX_CheckedChanged(object sender, EventArgs e)
        {
            if (chkNBSubRX.Checked)
            {
                chkNBSubRX.BackColor = button_selected_color;
                DttSP.SetNB(0, 1, true);
            }
            else
            {
                chkNB.BackColor = SystemColors.Control;
                DttSP.SetNB(0, 1, false);
            }
        }

        private void chkNB2SubRX_CheckedChanged(object sender, EventArgs e)
        {
            if (chkNBSubRX.Checked)
            {
                chkNBSubRX.BackColor = button_selected_color;
                DttSP.SetNB(0, 1, true);
            }
            else
            {
                chkNBSubRX.BackColor = SystemColors.Control;
                DttSP.SetNB(0, 1, false);
            }
        }

        private void chkBINSubRX_CheckedChanged(object sender, EventArgs e)
        {
            if (chkBINSubRX.Checked)
            {
                chkBINSubRX.BackColor = button_selected_color;
                DttSP.SetBIN(0, 1, true);
            }
            else
            {
                chkBINSubRX.BackColor = SystemColors.Control;
                DttSP.SetBIN(0, 1, false);
            }
        }

        private void comboAGCMainRX_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                if (comboAGCMainRX.SelectedIndex < 0) return;
                {
                    DttSP.SetRXAGC(0, 0, (AGCMode)comboAGCMainRX.SelectedIndex);
                }

                if ((AGCMode)comboAGCMainRX.SelectedIndex == AGCMode.CUSTOM)
                    SetupForm.CustomRXAGCEnabled = true;
                else SetupForm.CustomRXAGCEnabled = false;

                current_agc_mode = (AGCMode)comboAGCMainRX.SelectedIndex;

                if (comboAGCMainRX.Focused)
                    btnHidden.Focus();
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private void comboAGCSubRX_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (comboAGCSubRX.SelectedIndex < 0) return;
            {
                DttSP.SetRXAGC(0, 1, (AGCMode)comboAGCSubRX.SelectedIndex);
            }

            if ((AGCMode)comboAGCSubRX.SelectedIndex == AGCMode.CUSTOM)
                SetupForm.CustomRXAGCEnabled = true;
            else SetupForm.CustomRXAGCEnabled = false;

            if (comboAGCSubRX.Focused)
                btnHidden.Focus();
        }

        private void ptbSQLSubRX_Scroll(object sender, EventArgs e)
        {
            udSQLSubRX.Value = -ptbSQLSubRX.Value;
            if (ptbSQLSubRX.Focused)
                btnHidden.Focus();
        }

        private void ptbSQLSubRX_OnWheel(MouseEventArgs e)
        {
            if (SetupForm.FastFocus)
                ptbSQLSubRX.Focus();
        }

        private void udSQLSubRX_ValueChanged(object sender, EventArgs e)
        {
            DttSP.SetSquelchVal(0, 1, -(float)udSQLSubRX.Value -
                multimeter_cal_offset -
                filter_size_cal_offset);
            ptbSQLSubRX.Value = -(int)udSQLSubRX.Value;

            if (EthCATIsActive)
                CAT_client_socket.ClientServerSync("ZZS1;");        // sync with server

            if (udSQLSubRX.Focused)
                btnHidden.Focus();
        }

        public void UpdateFiltersSubRX(int low, int high)  // yt7pwr
        {
            switch (current_dsp_mode_subRX)
            {
                case DSPMode.LSB:
                case DSPMode.DIGL:
                case DSPMode.CWL:
                    if (low > high - 10) low = high - 10;
                    break;
                case DSPMode.USB:
                case DSPMode.DIGU:
                case DSPMode.CWU:
                    if (high < low + 10) high = low + 10;
                    break;
                case DSPMode.AM:
                case DSPMode.SAM:
                case DSPMode.FMN:
                case DSPMode.DSB:
                    if (high < low + 20)
                    {
                        if (Math.Abs(high) < Math.Abs(low))
                            high = low + 20;
                        else
                            low = high - 20;
                    }
                    break;
            }

            if (low < -20000)
                low = -20000;
            if (high > 20000)
                high = 20000;

            // send the settings to the DSP
            if (low < high - 10)
                DttSP.SetRXFilterSubRX(low, high);

            // update var filter controls
            udSubRXFilterLow.Value = low;
            udSubRXFilterHigh.Value = high;

            // update Filter Shift
            tbSubRXFilterShift_Update(low, high);

            // update Filter Width
            tbSubRXFilterWidth_Update(low, high);

            // set XIT step rate
            if ((high - low) > 250)
            {
                udXIT.Increment = 10;
                udRIT.Increment = 10;
            }
            else
            {
                udXIT.Increment = 5;
                udRIT.Increment = 5;
            }

            /*if (filterForm != null && !filterForm.IsDisposed)
            {
                if (filterForm.CurrentDSPModeSubRX == current_dsp_mode_subRX)
                    filterForm.CurrentFilterSubRX = current_filter_subRX;
            }*/

            if (high > low + 10)
            {
                DttSP.RXFilterLowCutSubRX = low;
                DttSP.RXFilterHighCutSubRX = high;
            }
        }

        #endregion

        #region Network connection  yt7pwr

        private void btnNetwork_Click(object sender, EventArgs e)
        {
            if (current_model == Model.GENESIS_G59NET)
                network_event.Set();
        }

        #endregion

        #region WBIR

        public WBIR_State WBIR_state = WBIR_State.FastAdapt;
        private bool wbir_tuned = true;
        private bool wbir_delay_adapt = false;

        private void WBIR_thread()
        {
            if (PowerOn)
            {
                int fast_count = 0;
                int countdown = 1000;

                while (wbir_run)
                {
                    switch (WBIR_state)
                    {
                        case WBIR_State.FastAdapt:
                            if (MOX)
                            {
                                float real, imag;
                                //DttSP.SetCorrectIQMu(0, 0, 0.0);
                                //DttSP.SetCorrectIQMu(0, 1, 0.0);
                                WBIR_state = WBIR_State.MOXAdapt;

                                if (!SetupForm.chkWBIRfixed.Checked)
                                    DttSP.SetIQSuspended(1);
                            }
                            else
                            {
                                if (wbir_delay_adapt)
                                {
                                    WBIR_state = WBIR_State.DelayAdapt;
                                    wbir_delay_adapt = false;
                                }
                                else if (wbir_tuned)
                                {
                                    wbir_tuned = false;
                                    fast_count = 0;
                                }

                                DttSP.SetCorrectIQMu(0, 0, 0.5 - (fast_count * 0.005));
                                DttSP.SetCorrectIQMu(0, 1, 0.5 - (fast_count * 0.005));

                                //Debug.WriteLine(" WBIR Fast, Mu: " + (0.05 - (fast_count * 0.005)).ToString("f6"));
                                fast_count++;
                                if (fast_count == 10)
                                {
                                    fast_count = 0;
                                    countdown = 1000;
                                    WBIR_state = WBIR_State.SlowAdapt;
                                }
                            }
                            break;
                        case WBIR_State.SlowAdapt:
                            if (MOX)
                            {
                                float real, imag;
                                //DttSP.SetCorrectIQMu(0, 0, 0.0);    // reset wbir
                                //DttSP.SetCorrectIQMu(0, 1, 0.0);
                                WBIR_state = WBIR_State.MOXAdapt;

                                if (!SetupForm.chkWBIRfixed.Checked)
                                    DttSP.SetIQSuspended(1);
                            }
                            else
                            {
                                countdown -= 100;
                                //Debug.WriteLine("WBIR Slow, countdown: "+countdown);
                                if (wbir_delay_adapt)
                                {
                                    WBIR_state = WBIR_State.DelayAdapt;
                                    wbir_delay_adapt = false;
                                }
                                else if (countdown <= 0 || wbir_tuned)
                                {
                                    wbir_tuned = false;
                                    WBIR_state = WBIR_State.FastAdapt;
                                }
                            }
                            break;
                        case WBIR_State.NoAdapt:
                            //Debug.WriteLine("WBIR Off");
                            if (!MOX)
                            {
                                DttSP.SetCorrectIQEnable(0);
                                DttSP.SetCorrectRXIQw(0, 0, 0, 0, 0);
                                DttSP.SetCorrectRXIQw(0, 1, 0, 0, 0);
                                //DttSP.SetCorrectRXIQw(0, 0, 0, 0, 1);
                                //DttSP.SetCorrectRXIQw(0, 1, 0, 0, 1);
                                DttSP.SetCorrectRXIQw(0, 0, rx_image_real_table[(int)current_band],
                                    rx_image_imag_table[(int)current_band], 1);
                                DttSP.SetCorrectRXIQw(0, 0, rx_image_real_table[(int)current_band],
                                    rx_image_imag_table[(int)current_band], 100);                       // for backup
                                DttSP.SetCorrectRXIQw(0, 1, rx_image_real_table[(int)current_band],
                                    rx_image_imag_table[(int)current_band], 1);
                                DttSP.SetCorrectRXIQw(0, 1, rx_image_real_table[(int)current_band],
                                    rx_image_imag_table[(int)current_band], 100);                       // for backup
                                DttSP.SetCorrectIQEnable(1);
                                wbir_tuned = true;
                                countdown = 1000;
                                WBIR_state = WBIR_State.FastAdapt;

                                if (!SetupForm.chkWBIRfixed.Checked)
                                    DttSP.SetIQSuspended(0);
                            }
                            break;
                        case WBIR_State.StopAdapt:
                            {
                                DttSP.SetCorrectIQEnable(0);
                                DttSP.SetCorrectRXIQw(0, 0, 0, 0, 0);
                                DttSP.SetCorrectRXIQw(0, 1, 0, 0, 0);
                                DttSP.SetCorrectRXIQw(0, 0, 0, 0, 1);
                                DttSP.SetCorrectRXIQw(0, 1, 0, 0, 1);
                            }
                            break;
                        case WBIR_State.DelayAdapt:
                            {
                                Thread.Sleep((int)SetupForm.udWBIRTime.Value);
                                WBIR_state = WBIR_State.NoAdapt;
                            }
                            break;
                        case WBIR_State.MOXAdapt:
                            if (!MOX)
                            {
                                Thread.Sleep(100);
                                WBIR_state = WBIR_State.DelayAdapt;
                            }
                            break;
                    }

                    Thread.Sleep(100);
                }
            }
        }
        #endregion

        #region SmallSoundControl group     yt7pwr

        private void udAF1_ValueChanged_1(object sender, EventArgs e)
        {
            ptbAF1.Value = (int)udAF1.Value;
            AF = ptbAF1.Value;
        }

        private void udRF1_ValueChanged(object sender, EventArgs e)
        {
            ptbRF1.Value = (int)udRF1.Value;
            RF = ptbRF1.Value;
        }

        private void udPWR1_ValueChanged(object sender, EventArgs e)
        {
            ptbPWR1.Value = (int)udPWR1.Value;
            PWR = ptbPWR1.Value;
        }

        private void ptbAF1_OnWheel(MouseEventArgs e)
        {
            if (SetupForm.FastFocus)
                ptbAF1.Focus();
        }

        private void ptbAF1_Scroll(object sender, EventArgs e)
        {
            udAF1.Value = ptbAF1.Value;
            if (ptbAF1.Focused) btnHidden.Focus();
        }

        private void ptbRF1_Scroll(object sender, EventArgs e)
        {
            udRF1.Value = ptbRF1.Value;
            if (ptbRF1.Focused) btnHidden.Focus();
        }

        private void ptbRF1_OnWheel(MouseEventArgs e)
        {
            if (SetupForm.FastFocus)
                ptbRF1.Focus();
        }

        private void ptbPWR1_Scroll(object sender, EventArgs e)
        {
            udPWR1.Value = ptbPWR1.Value;
            if (ptbPWR1.Focused)
                btnHidden.Focus();
        }

        private void ptbPWR1_OnWheel(MouseEventArgs e)
        {
            if (SetupForm.FastFocus)
                ptbPWR1.Focus();
        }

        #endregion

        #region Client Ethernet     yt7pwr

        public void ClientEthernetStart()
        {
            if (CATEth_thread == null || !CATEth_thread.IsAlive)
            {
                CATEth_thread = new Thread(new ThreadStart(CATEthTest));
                CATEth_thread.Name = "CATEthernet Thread";
                CATEth_thread.Priority = ThreadPriority.Normal;
                CATEth_thread.IsBackground = true;
                CATEth_thread.Start();
            }

            ClientSocket.UDPReceive = false;
        }

        void CATEthTest()
        {
            ClientSocket.UDPReceive = true;
            ClientSocket.open(SetupForm.txtMulticastIPAddress.Text, (int)SetupForm.udClientMulticastPort.Value,
                SetupForm.txtClientIPAddress.Text, Audio.BlockSize);
        }

        #endregion

        #region band button zoom   yt7pwr

        private int band_button_width = 48;
        private int band_button_height = 18;
        private Band current_band_zoom = Band.FIRST;
        private Band last_band_zoomed = Band.FIRST;
        private int btn_zoom_timer = 0;
        private bool run_btn_thread = false;
        private Thread btn_zoom_thread;
        private bool btn_resize = false;

        private void btnBandMouseMove(object sender, EventArgs e)
        {
            btn_zoom_timer = 2500;      // reload
        }

        private void radBand160_MouseHover(object sender, EventArgs e)
        {
            if (button_zoom && last_band_zoomed != Band.B160M)
            {
                Font btn_font = new System.Drawing.Font("Arial", 18);
                radBand160.Width = radBand160.Width * 2;
                radBand160.Height = radBand160.Height * 2;
                radBand160.Font = btn_font;
                radBand160.BringToFront();
                current_band_zoom = Band.B160M;
                start_button_thread();
            }
        }

        private void radBand80_MouseHover(object sender, EventArgs e)
        {
            if (button_zoom && last_band_zoomed != Band.B80M)
            {
                Font btn_font = new System.Drawing.Font("Arial", 18);
                Point btn = new Point((grpBandHF.Width - radBand80.Width * 2) / 2, radBand80.Location.Y);
                radBand80.Width = radBand80.Width * 2;
                radBand80.Height = radBand80.Height * 2;
                radBand80.Location = btn;
                radBand80.Font = btn_font;
                radBand80.BringToFront();
                current_band_zoom = Band.B80M;
                start_button_thread();
            }
        }

        private void radBand60_MouseHover(object sender, EventArgs e)
        {
            if (button_zoom && last_band_zoomed != Band.B60M)
            {
                Font btn_font = new System.Drawing.Font("Arial", 18);
                radBand60.Width = radBand60.Width * 2;
                radBand60.Height = radBand60.Height * 2;
                radBand60.Location = radBand80.Location;
                radBand60.Font = btn_font;
                radBand60.BringToFront();
                current_band_zoom = Band.B60M;
                start_button_thread();
            }
        }

        private void radBand40_MouseHover(object sender, EventArgs e)
        {
            if (button_zoom && last_band_zoomed != Band.B40M)
            {
                Font btn_font = new System.Drawing.Font("Arial", 18);
                radBand40.Width = radBand40.Width * 2;
                radBand40.Height = radBand40.Height * 2;
                radBand40.Font = btn_font;
                radBand40.BringToFront();
                current_band_zoom = Band.B40M;
                start_button_thread();
            }
        }

        private void radBand30_MouseHover(object sender, EventArgs e)
        {
            if (button_zoom && last_band_zoomed != Band.B30M)
            {
                Font btn_font = new System.Drawing.Font("Arial", 18);
                Point btn = new Point((grpBandHF.Width - radBand30.Width * 2) / 2, radBand30.Location.Y);
                radBand30.Width = radBand30.Width * 2;
                radBand30.Height = radBand30.Height * 2;
                radBand30.Location = btn;
                radBand30.Font = btn_font;
                radBand30.BringToFront();
                current_band_zoom = Band.B30M;
                start_button_thread();
            }
        }

        private void radBand20_MouseHover(object sender, EventArgs e)
        {
            if (button_zoom && last_band_zoomed != Band.B20M)
            {
                Font btn_font = new System.Drawing.Font("Arial", 18);
                radBand20.Width = radBand20.Width * 2;
                radBand20.Height = radBand20.Height * 2;
                radBand20.Location = radBand30.Location;
                radBand20.Font = btn_font;
                radBand20.BringToFront();
                current_band_zoom = Band.B20M;
                start_button_thread();
            }
        }

        private void radBand17_MouseHover(object sender, EventArgs e)
        {
            if (button_zoom && last_band_zoomed != Band.B17M)
            {
                Font btn_font = new System.Drawing.Font("Arial", 18);
                radBand17.Width = radBand17.Width * 2;
                radBand17.Height = radBand17.Height * 2;
                radBand17.Font = btn_font;
                radBand17.BringToFront();
                current_band_zoom = Band.B17M;
                start_button_thread();
            }
        }

        private void radBand15_MouseHover(object sender, EventArgs e)
        {
            if (button_zoom && last_band_zoomed != Band.B15M)
            {
                Font btn_font = new System.Drawing.Font("Arial", 18);
                Point btn = new Point((grpBandHF.Width - radBand15.Width * 2) / 2, radBand15.Location.Y);
                radBand15.Width = radBand15.Width * 2;
                radBand15.Height = radBand15.Height * 2;
                radBand15.Location = btn;
                radBand15.Font = btn_font;
                radBand15.BringToFront();
                current_band_zoom = Band.B15M;
                start_button_thread();
            }
        }

        private void radBand12_MouseHover(object sender, EventArgs e)
        {
            if (button_zoom && last_band_zoomed != Band.B12M)
            {
                Font btn_font = new System.Drawing.Font("Arial", 18);
                radBand12.Width = radBand12.Width * 2;
                radBand12.Height = radBand12.Height * 2;
                radBand12.Location = radBand15.Location;
                radBand12.Font = btn_font;
                radBand12.BringToFront();
                current_band_zoom = Band.B12M;
                start_button_thread();
            }
        }

        private void radBand10_MouseHover(object sender, EventArgs e)
        {
            if (button_zoom && last_band_zoomed != Band.B10M)
            {
                Font btn_font = new System.Drawing.Font("Arial", 18);
                radBand10.Width = radBand10.Width * 2;
                radBand10.Height = radBand10.Height * 2;
                radBand10.Location = radBand17.Location;
                radBand10.Font = btn_font;
                radBand10.BringToFront();
                current_band_zoom = Band.B10M;
                start_button_thread();
            }
        }

        private void radBand6_MouseHover(object sender, EventArgs e)
        {
            if (button_zoom && last_band_zoomed != Band.B6M)
            {
                Font btn_font = new System.Drawing.Font("Arial", 18);
                Point btn = new Point((grpBandHF.Width - radBand6.Width * 2) / 2, radBand15.Location.Y);
                radBand6.Width = radBand6.Width * 2;
                radBand6.Height = radBand6.Height * 2;
                radBand6.Location = btn;
                radBand6.Font = btn_font;
                radBand6.BringToFront();
                current_band_zoom = Band.B6M;
                start_button_thread();
            }
        }

        private void radBand2_MouseHover(object sender, EventArgs e)
        {
            if (button_zoom && last_band_zoomed != Band.B2M)
            {
                Font btn_font = new System.Drawing.Font("Arial", 18);
                radBand2.Width = radBand2.Width * 2;
                radBand2.Height = radBand2.Height * 2;
                radBand2.Location = radBand15.Location;
                radBand2.Font = btn_font;
                radBand2.BringToFront();
                current_band_zoom = Band.B2M;
                start_button_thread();
            }
        }

        private void radBandVHF_MouseHover(object sender, EventArgs e)
        {
            if (button_zoom && last_band_zoomed != Band.VHF)
            {
                Font btn_font = new System.Drawing.Font("Arial", 18);
                radMoreBands.Width = radMoreBands.Width * 2;
                radMoreBands.Height = radMoreBands.Height * 2;
                radMoreBands.Location = radBand10.Location;
                radMoreBands.Font = btn_font;
                radMoreBands.BringToFront();
                current_band_zoom = Band.VHF;
                start_button_thread();
            }
        }

        private void radBandWWV_MouseHover(object sender, EventArgs e)
        {
            if (button_zoom && last_band_zoomed != Band.WWV)
            {
                Font btn_font = new System.Drawing.Font("Arial", 18);
                Point btn = new Point((grpBandHF.Width - radBandWWV.Width * 2) / 2, radBand6.Location.Y);
                radBandWWV.Width = radBandWWV.Width * 2;
                radBandWWV.Height = radBandWWV.Height * 2;
                radBandWWV.Location = btn;
                radBandWWV.Font = btn_font;
                radBandWWV.BringToFront();
                current_band_zoom = Band.WWV;
                start_button_thread();
            }
        }

        private void radBandGEN_MouseHover(object sender, EventArgs e)
        {
            if (button_zoom && last_band_zoomed != Band.GEN)
            {
                Font btn_font = new System.Drawing.Font("Arial", 18);
                radBandGEN.Width = radBandGEN.Width * 2;
                radBandGEN.Height = radBandGEN.Height * 2;
                radBandGEN.Location = radBand6.Location;
                radBandGEN.Font = btn_font;
                radBandGEN.BringToFront();
                current_band_zoom = Band.GEN;
                start_button_thread();
            }
        }

        private void start_button_thread()
        {
            run_btn_thread = true;
            btn_zoom_thread = new Thread(new ThreadStart(ButtonThread));
            btn_zoom_thread.Name = "Zoom button Thread";
            btn_zoom_thread.Priority = ThreadPriority.Normal;
            btn_zoom_thread.IsBackground = true;
            btn_zoom_thread.Start();
        }

        private void ButtonThread()
        {
            btn_zoom_timer = 2500;

            while (btn_zoom_timer > 0 && run_btn_thread)
            {
                Thread.Sleep(1);
                btn_zoom_timer--;

                if (btn_zoom_timer == 0)
                {
                    btn_resize = true;
                    MouseLeaveBandButton(null, null);
                    current_band_zoom = Band.FIRST;
                }
            }

            run_btn_thread = false;

            if (btn_zoom_timer > 0)
            {
                MouseLeaveBandButton(null, null);
                current_band_zoom = Band.FIRST;
            }
        }

        private void MouseLeaveBandButton(object sender, EventArgs e)
        {
            if (sender != null && e != null && !btn_resize)
            {
                run_btn_thread = false;
                btn_resize = true;
                last_band_zoomed = Band.FIRST;
                return;
            }

            if (button_zoom && btn_resize)
            {
                run_btn_thread = false;

                switch (current_band_zoom)
                {
                    case Band.GEN:
                        Point btn = new Point(radBand2.Location.X, radBandWWV.Location.Y);
                        radBandGEN.Width = band_button_width;
                        radBandGEN.Height = band_button_height;
                        radBandGEN.Location = btn;
                        radBandGEN.Font = radBand80.Font;
                        radBandGEN.SendToBack();
                        last_band_zoomed = Band.GEN;
                        break;
                    case Band.WWV:
                        btn = new Point(radBand6.Location.X, radMoreBands.Location.Y);
                        radBandWWV.Width = band_button_width;
                        radBandWWV.Height = band_button_height;
                        radBandWWV.Location = btn;
                        radBandWWV.Font = radBand80.Font;
                        radBandWWV.SendToBack();
                        last_band_zoomed = Band.WWV;
                        break;
                    case Band.VHF:
                        btn = new Point(radBand10.Location.X, radBandWWV.Location.Y);
                        radMoreBands.Width = band_button_width;
                        radMoreBands.Height = band_button_height;
                        radMoreBands.Location = btn;
                        radMoreBands.Font = radBand80.Font;
                        radMoreBands.SendToBack();
                        last_band_zoomed = Band.VHF;
                        break;
                    case Band.B2M:
                        btn = new Point(radBand12.Location.X, radBand6.Location.Y);
                        radBand2.Width = band_button_width;
                        radBand2.Height = band_button_height;
                        radBand2.Location = btn;
                        radBand2.Font = radBand80.Font;
                        radBand2.SendToBack();
                        last_band_zoomed = Band.B2M;
                        break;
                    case Band.B6M:
                        btn = new Point(radBand15.Location.X, radBand10.Location.Y);
                        radBand6.Width = band_button_width;
                        radBand6.Height = band_button_height;
                        radBand6.Location = btn;
                        radBand6.Font = radBand80.Font;
                        radBand6.SendToBack();
                        last_band_zoomed = Band.B6M;
                        break;
                    case Band.B10M:
                        btn = new Point(radBand17.Location.X, radBand6.Location.Y);
                        radBand10.Width = band_button_width;
                        radBand10.Height = band_button_height;
                        radBand10.Location = btn;
                        radBand10.Font = radBand80.Font;
                        radBand10.SendToBack();
                        last_band_zoomed = Band.B10M;
                        break;
                    case Band.B12M:
                        btn = new Point(radBand20.Location.X, radBand15.Location.Y);
                        radBand12.Width = band_button_width;
                        radBand12.Height = band_button_height;
                        radBand12.Location = btn;
                        radBand12.Font = radBand80.Font;
                        radBand12.SendToBack();
                        last_band_zoomed = Band.B12M;
                        break;
                    case Band.B15M:
                        btn = new Point(radBand30.Location.X, radBand17.Location.Y);
                        radBand15.Width = band_button_width;
                        radBand15.Height = band_button_height;
                        radBand15.Location = btn;
                        radBand15.Font = radBand80.Font;
                        radBand15.SendToBack();
                        last_band_zoomed = Band.B15M;
                        break;
                    case Band.B17M:
                        radBand17.Width = band_button_width;
                        radBand17.Height = band_button_height;
                        radBand17.Font = radBand80.Font;
                        radBand17.SendToBack();
                        last_band_zoomed = Band.B17M;
                        break;
                    case Band.B20M:
                        btn = new Point(radBand60.Location.X, radBand30.Location.Y);
                        radBand20.Width = band_button_width;
                        radBand20.Height = band_button_height;
                        radBand20.Location = btn;
                        radBand20.Font = radBand80.Font;
                        radBand20.SendToBack();
                        last_band_zoomed = Band.B20M;
                        break;
                    case Band.B30M:
                        btn = new Point(radBand80.Location.X, radBand40.Location.Y);
                        radBand30.Width = band_button_width;
                        radBand30.Height = band_button_height;
                        radBand30.Location = btn;
                        radBand30.Font = radBand80.Font;
                        radBand30.SendToBack();
                        last_band_zoomed = Band.B30M;
                        break;
                    case Band.B40M:
                        radBand40.Width = band_button_width;
                        radBand40.Height = band_button_height;
                        radBand40.Font = radBand80.Font;
                        radBand40.SendToBack();
                        last_band_zoomed = Band.B40M;
                        break;
                    case Band.B60M:
                        btn = new Point(radBand20.Location.X, radBand80.Location.Y);
                        radBand60.Width = band_button_width;
                        radBand60.Height = band_button_height;
                        radBand60.Location = btn;
                        radBand60.Font = radBand80.Font;
                        radBand60.SendToBack();
                        last_band_zoomed = Band.B60M;
                        break;
                    case Band.B80M:
                        btn = new Point(radBand30.Location.X, radBand160.Location.Y);
                        radBand80.Width = band_button_width;
                        radBand80.Height = band_button_height;
                        radBand80.Location = btn;
                        radBand80.Font = radBand160.Font;
                        radBand80.SendToBack();
                        last_band_zoomed = Band.B80M;
                        break;
                    case Band.B160M:
                        radBand160.Width = band_button_width;
                        radBand160.Height = band_button_height;
                        radBand160.Font = radBand80.Font;
                        radBand160.SendToBack();
                        last_band_zoomed = Band.B160M;
                        break;
                }

                if (sender != null && e != null && !btn_resize)
                    current_band_zoom = Band.FIRST;

                btn_resize = false;
            }
        }

        #endregion

        #region Manual NOTCH filter selection  yt7pwr

        private int notch_low_value = 100;
        public int NotchLow
        {
            get { return notch_low_value; }
            set
            {
                notch_low_value = value;
                lblNotchLow.Text = notch_low_value.ToString();

                if (notch_high_value - notch_low_value > 10)
                {
                    if (current_dsp_mode == DSPMode.FMN)
                    {
                        int width = FilterHighValue - FilterLowValue;
                        DttSP.SetRXLowPassFilter(0, 0, Math.Abs((width / 2) + value));
                    }
                    else
                        DttSP.SetNotchFilter(notch_low_value, notch_high_value);
                }
            }
        }

        private int notch_high_value = 200;
        public int NotchHigh
        {
            get { return notch_high_value; }
            set
            {
                notch_high_value = value;
                lblNotchHigh.Text = notch_high_value.ToString();

                if (notch_high_value - notch_low_value > 10)
                {
                    if (current_dsp_mode == DSPMode.FMN)
                    {
                        int width = FilterHighValue - FilterLowValue;
                        DttSP.SetRXHighPassFilter(0, 0, Math.Abs((width / 2) + value));
                    }
                    else
                        DttSP.SetNotchFilter(notch_low_value, notch_high_value);
                }
            }
        }

        private void ptbNotchWidth_Scroll(object sender, EventArgs e)
        {
            if (!booting)
            {
                int diff = 0;
                switch (filter_mode)
                {
                    case FilterMode.NOTCH:
                        if (current_dsp_mode == DSPMode.WFM)
                        {
                            NotchLow = -ptbNotchWidth.Value;
                            NotchHigh = ptbNotchWidth.Value;
                        }
                        else if (current_dsp_mode == DSPMode.FMN)
                        {
                            NotchLow = -ptbNotchWidth.Value;
                            NotchHigh = +ptbNotchWidth.Value;
                        }
                        else
                        {
                            if (DttSP.RXFilterLowCut < 0)
                            {
                                if (ptbNotchWidth.Value <= (Math.Abs(DttSP.RXFilterLowCut) -
                                    Math.Abs(DttSP.RXFilterHighCut) + 25) - ptbNotchShift.Value)
                                {
                                    if (ptbNotchWidth.Value > notch_high_value - notch_low_value)
                                    {
                                        if (((notch_low_value - (ptbNotchWidth.Value - (notch_high_value - notch_low_value)) / 2))
                                            >= Math.Abs(DttSP.RXFilterHighCut) + 25)
                                            NotchLow -= (ptbNotchWidth.Value - (notch_high_value - notch_low_value)) / 2;
                                        if (((notch_high_value + (ptbNotchWidth.Value - (notch_high_value - notch_low_value)) / 2))
                                            <= Math.Abs(DttSP.RXFilterLowCut) - 25)
                                            NotchHigh += (ptbNotchWidth.Value - (notch_high_value - notch_low_value)) / 2;
                                    }
                                    else
                                    {
                                        if (((notch_low_value + (ptbNotchWidth.Value - (notch_high_value - notch_low_value)) / 2))
                                            >= Math.Abs(DttSP.RXFilterHighCut) + 25)
                                            NotchLow += ((notch_high_value - notch_low_value) - ptbNotchWidth.Value) / 2;
                                        if (((notch_high_value - ((notch_high_value - notch_low_value) - ptbNotchWidth.Value) / 2))
                                            <= Math.Abs(DttSP.RXFilterLowCut) - 25)
                                            NotchHigh -= ((notch_high_value - notch_low_value) - ptbNotchWidth.Value) / 2;
                                    }
                                }
                            }
                            else
                            {
                                if (ptbNotchWidth.Value <= (DttSP.RXFilterHighCut -
                                    DttSP.RXFilterLowCut + 25) - ptbNotchShift.Value)
                                {
                                    if (ptbNotchWidth.Value > notch_high_value - notch_low_value)
                                    {
                                        if (((notch_low_value - (ptbNotchWidth.Value - (notch_high_value - notch_low_value)) / 2))
                                            >= DttSP.RXFilterLowCut + 25)
                                            NotchLow -= (ptbNotchWidth.Value - (notch_high_value - notch_low_value)) / 2;
                                        if (((notch_high_value + (ptbNotchWidth.Value - (notch_high_value - notch_low_value)) / 2))
                                            <= DttSP.RXFilterHighCut - 25)
                                            NotchHigh += (ptbNotchWidth.Value - (notch_high_value - notch_low_value)) / 2;
                                    }
                                    else
                                    {
                                        if (((notch_low_value + (ptbNotchWidth.Value - (notch_high_value - notch_low_value)) / 2))
                                            >= DttSP.RXFilterLowCut + 25)
                                            NotchLow += ((notch_high_value - notch_low_value) - ptbNotchWidth.Value) / 2;
                                        if (((notch_high_value - ((notch_high_value - notch_low_value) - ptbNotchWidth.Value) / 2))
                                            <= DttSP.RXFilterHighCut - 25)
                                            NotchHigh -= ((notch_high_value - notch_low_value) - ptbNotchWidth.Value) / 2;
                                    }
                                }
                            }
                        }

                        Display_GDI.RXDisplayNotchLowCut = notch_low_value;
                        Display_GDI.RXDisplayNotchHighCut = notch_high_value;
#if DirectX
                        Display_DirectX.RXDisplayNotchLowCut = notch_low_value;
                        Display_DirectX.RXDisplayNotchHighCut = notch_high_value;
#endif
                        break;
                    case FilterMode.PASS_BAND:
                        break;
                    case FilterMode.STOP_BAND:
                        if (DttSP.RXFilterLowCut < 0)
                        {
                            if (ptbNotchWidth.Value <= (Math.Abs(DttSP.RXFilterLowCut) - Math.Abs(DttSP.RXFilterHighCut) + 50) - ptbNotchShift.Value)
                            {
                                diff = ptbNotchWidth.Value - (notch_high_value - notch_low_value);
                                if ((notch_low_value - diff) >= Math.Abs(DttSP.RXFilterHighCut) + 25)
                                    NotchLow -= diff;
                                if ((notch_high_value + diff) <= Math.Abs(DttSP.RXFilterLowCut) - 25)
                                    NotchHigh += diff;
                            }
                        }
                        else
                        {
                            if (ptbNotchWidth.Value <= (Math.Abs(DttSP.RXFilterHighCut) - Math.Abs(DttSP.RXFilterLowCut) + 50) - ptbNotchShift.Value)
                            {
                                diff = ptbNotchWidth.Value - (notch_high_value - notch_low_value);
                                if ((notch_low_value - diff) >= Math.Abs(DttSP.RXFilterLowCut) + 25)
                                    NotchLow -= diff;
                                if ((notch_high_value + diff) <= Math.Abs(DttSP.RXFilterHighCut) - 25)
                                    NotchHigh += diff;
                            }
                        }

                        Display_GDI.RXDisplayNotchLowCut = notch_low_value;
                        Display_GDI.RXDisplayNotchHighCut = notch_high_value;
#if DirectX
                        Display_DirectX.RXDisplayNotchLowCut = notch_low_value;
                        Display_DirectX.RXDisplayNotchHighCut = notch_high_value;
#endif
                        break;
                }
            }
        }

        private void ptbNotchWidth_OnWheel(MouseEventArgs e)
        {
            if (SetupForm.FastFocus)
                ptbNotchWidth.Focus();
        }

        private void ptbNotchShift_OnWheel(MouseEventArgs e)
        {
            if (SetupForm.FastFocus)
                ptbNotchShift.Focus();
        }

        private void ptbNotchShift_Scroll(object sender, EventArgs e)
        {
            if (!booting)
            {
                int position = 0;

                switch (filter_mode)
                {
                    case FilterMode.NOTCH:
                        if (DttSP.RXFilterLowCut < 0)
                        {
                            position = ((Math.Abs(DttSP.RXFilterLowCut) - Math.Abs(DttSP.RXFilterHighCut)) / 2 +
                                Math.Abs(DttSP.RXFilterHighCut) - ptbNotchShift.Value);

                            if (position > 0 && (position + ptbNotchWidth.Value / 2) <= Math.Abs(DttSP.RXFilterLowCut) - 25 &&
                                position - ptbNotchWidth.Value / 2 >= Math.Abs(DttSP.RXFilterHighCut) + 25)
                            {
                                NotchLow = position - ptbNotchWidth.Value / 2;
                                NotchHigh = position + ptbNotchWidth.Value / 2;
                            }
                        }
                        else
                        {
                            position = ((DttSP.RXFilterHighCut - DttSP.RXFilterLowCut) / 2 +
                                DttSP.RXFilterLowCut + ptbNotchShift.Value);

                            if (position > 0 && ((position + ptbNotchWidth.Value / 2) <= DttSP.RXFilterHighCut - 25 &&
                                position - ptbNotchWidth.Value / 2 >= DttSP.RXFilterLowCut + 25))
                            {
                                NotchLow = position - ptbNotchWidth.Value / 2;
                                NotchHigh = position + ptbNotchWidth.Value / 2;
                            }
                        }

                        lblNotchLow.Text = notch_low_value.ToString();
                        lblNotchHigh.Text = notch_high_value.ToString();
                        Display_GDI.RXDisplayNotchLowCut = notch_low_value;
                        Display_GDI.RXDisplayNotchHighCut = notch_high_value;
#if DirectX
                        Display_DirectX.RXDisplayNotchLowCut = notch_low_value;
                        Display_DirectX.RXDisplayNotchHighCut = notch_high_value;
#endif
                        break;
                    case FilterMode.PASS_BAND:
                        break;
                    case FilterMode.STOP_BAND:
                        if (DttSP.RXFilterLowCut < 0)
                        {
                            position = ((Math.Abs(DttSP.RXFilterLowCut) - Math.Abs(DttSP.RXFilterHighCut)) / 2 +
                                Math.Abs(DttSP.RXFilterHighCut) - ptbNotchShift.Value);

                            if (position > 0 && (position + ptbNotchWidth.Value / 2) <= Math.Abs(DttSP.RXFilterLowCut) - 25 &&
                                position - ptbNotchWidth.Value / 2 >= Math.Abs(DttSP.RXFilterHighCut) + 25)
                            {
                                NotchLow = position - ptbNotchWidth.Value / 2;
                                NotchHigh = position + ptbNotchWidth.Value / 2;
                            }
                        }
                        else
                        {
                            position = ((DttSP.RXFilterHighCut - DttSP.RXFilterLowCut) / 2 +
                                DttSP.RXFilterLowCut + ptbNotchShift.Value);

                            if (position > 0 && ((position + ptbNotchWidth.Value / 2) <= DttSP.RXFilterHighCut - 25 &&
                                position - ptbNotchWidth.Value / 2 >= DttSP.RXFilterLowCut + 25))
                            {
                                NotchLow = position - ptbNotchWidth.Value / 2;
                                NotchHigh = position + ptbNotchWidth.Value / 2;
                            }
                        }

                        lblNotchLow.Text = notch_low_value.ToString();
                        lblNotchHigh.Text = notch_high_value.ToString();
                        Display_GDI.RXDisplayNotchLowCut = notch_low_value;
                        Display_GDI.RXDisplayNotchHighCut = notch_high_value;
#if DirectX
                        Display_DirectX.RXDisplayNotchLowCut = notch_low_value;
                        Display_DirectX.RXDisplayNotchHighCut = notch_high_value;
#endif
                        break;
                }
            }
        }

        private void FilterUpdate()
        {
            try
            {
                if (!booting)
                {
                    switch (filter_mode)
                    {
                        case FilterMode.NOTCH:
                            DttSP.SetRXFilterMode(0, 0, FilterMode.NOTCH);
                            if (current_dsp_mode == DSPMode.FMN)
                            {
                                int width = FilterHighValue - FilterLowValue;
                                DttSP.SetRXLowPassFilter(0, 0, Math.Abs(width / 2 - notch_low_value));
                                DttSP.SetRXHighPassFilter(0, 0, Math.Abs(width / 2 + notch_high_value));
                            }
                            else
                                DttSP.SetNotchFilter(notch_low_value, notch_high_value);
                            chkManualNotchFilter.BackColor = button_selected_color;
                            CATNOTCHenable = 1;
                            lblNotchLow.Text = notch_low_value.ToString();
                            lblNotchHigh.Text = notch_high_value.ToString();
                            Display_GDI.RXDisplayNotchLowCut = notch_low_value;
                            Display_GDI.RXDisplayNotchHighCut = notch_high_value;
                            Display_GDI.DisplayNotchFilter = true;
#if DirectX
                            Display_DirectX.RXDisplayNotchLowCut = notch_low_value;
                            Display_DirectX.RXDisplayNotchHighCut = notch_high_value;
                            Display_DirectX.DisplayNotchFilter = true;
#endif
                            break;
                        case FilterMode.STOP_BAND:
                            DttSP.SetNotchFilter(notch_low_value, notch_high_value);
                            DttSP.SetRXFilterMode(0, 0, FilterMode.STOP_BAND);
                            chkManualNotchFilter.BackColor = button_selected_color;
                            lblNotchLow.Text = notch_low_value.ToString();
                            lblNotchHigh.Text = notch_high_value.ToString();
                            Display_GDI.RXDisplayNotchLowCut = notch_low_value;
                            Display_GDI.RXDisplayNotchHighCut = notch_high_value;
                            Display_GDI.DisplayNotchFilter = true;
#if DirectX
                            Display_DirectX.RXDisplayNotchLowCut = notch_low_value;
                            Display_DirectX.RXDisplayNotchHighCut = notch_high_value;
                            Display_DirectX.DisplayNotchFilter = true;
#endif
                            break;
                        case FilterMode.PASS_BAND:
                            chkManualNotchFilter.Checked = false;
                            CATNOTCHenable = 0;
                            DttSP.SetRXFilterMode(0, 0, FilterMode.PASS_BAND);
                            if (current_filter != Filter.VAR1 && current_filter != Filter.VAR2)
                                CurrentFilter = current_filter; // force refresh
                            Display_GDI.DisplayNotchFilter = false;
#if DirectX
                            Display_DirectX.DisplayNotchFilter = false;
                            Display_DirectX.RefreshPanadapterGrid = true;
#endif
                            break;
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private void chkManualNotchFilter_CheckedChanged(object sender, EventArgs e)
        {
            if (!booting)
            {
                if (chkManualNotchFilter.Checked)
                {
                    if (current_dsp_mode != DSPMode.CWL &&
                         current_dsp_mode != DSPMode.CWU)
                    {
                        FilterMode = FilterMode.NOTCH;
                        btnNotchReset_Click(null, null);
                        FilterUpdate();
                    }
                    else
                        chkManualNotchFilter.Checked = false;
                }
                else
                {
                    FilterMode = FilterMode.PASS_BAND;
                    FilterUpdate();
                }
            }
        }

        private void btnNotchReset_Click(object sender, EventArgs e)
        {
            if (filter_mode == FilterMode.NOTCH ||
                filter_mode == FilterMode.PASS_BAND)
            {
                if (current_dsp_mode == DSPMode.WFM || current_dsp_mode == DSPMode.FMN)
                {
                    ptbNotchWidth.Value = 30;
                    FilterUpdate();
                    NotchLow = -30;
                    NotchHigh = 30;
                    ptbNotchShift.Value = 0;
                }
                else
                {
                    ptbNotchShift.Value = 0;
                    notch_low_value = (Math.Abs(DttSP.RXFilterHighCut) - Math.Abs(DttSP.RXFilterLowCut)) / 2 +
                        Math.Abs(DttSP.RXFilterLowCut) - 50;
                    notch_high_value = (Math.Abs(DttSP.RXFilterHighCut) - Math.Abs(DttSP.RXFilterLowCut)) / 2 +
                        Math.Abs(DttSP.RXFilterLowCut) + 50;
                    ptbNotchWidth.Value = notch_high_value - notch_low_value;
                    FilterUpdate();
                    NotchLow = notch_low_value;
                    NotchHigh = notch_high_value;
                }
            }
        }

        #endregion

        #region G59/G11     yt7pwr

        private bool G59Init()
        {
            try
            {
                if (current_model == Model.GENESIS_G59USB && g59.Connected)
                {
                    g59.WriteToDevice(26, 0);                               // Line in
                    Thread.Sleep(1);
                    g59.WriteToDevice(0, 0);
                    Thread.Sleep(1);
                    g59.WriteToDevice(24, 0);                               // CW monitor off
                    Thread.Sleep(1);
                    ExtPA_PTT_Inverted = extPA_PTT_inverted;
                    Thread.Sleep(1);
                    Genesis_EXT_PA_present = genesis_ext_PA_present;        // force reload
                    Thread.Sleep(1);
                    G59SetBandFilter(vfoAFreq);
                    Thread.Sleep(1);
                    if (g59_auto_correction)
                        g59.WriteToDevice(22, 1);
                    else
                        g59.WriteToDevice(22, 0);
                    Thread.Sleep(1);
                    if (g59_PA10_present)
                        g59.WriteToDevice(21, 1);
                    else
                        g59.WriteToDevice(21, 0);
                    Thread.Sleep(1);
                    g59.WriteToDevice(30, 0);       // ext PTT off
                    Thread.Sleep(1);
                    G59SecRXAnt = G59_sec_rx_ant;   // second RX antenna force reload
                    Thread.Sleep(1);
                    G59_setup_keyer();
                    Thread.Sleep(1);
                    G59XTRV_separateRXTX = G59_XTRV_separate_RXTX;      // force refresh
                    Thread.Sleep(1);
                    btnATT_CheckedChanged(this, EventArgs.Empty);
                    Thread.Sleep(1);
                    btnHIGH_AF_CheckedChanged(this, EventArgs.Empty);
                    Thread.Sleep(1);
                    btnHIGH_RF_CheckedChanged(this, EventArgs.Empty);
                    Thread.Sleep(1);

                    double freq = loscFreq;
                    freq *= 1e6;
                    g59.Si570_freq = 56000000;  // reinit!
                    g59.Set_frequency((long)(Math.Round(freq, 6)), true);
                }
                else if (current_model == Model.GENESIS_G59NET && net_device.Connected)
                {
                    if (net_device.Connected)
                    {
                        net_device.WriteToDevice(26, 0);
                        Thread.Sleep(1);
                        net_device.WriteToDevice(0, 0);
                        Thread.Sleep(1);
                        net_device.WriteToDevice(24, 0);                        // CW monitor off
                        Thread.Sleep(1);

                        switch (current_band)
                        {
                            case (Band.B160M):
                                net_device.WriteToDevice(3, 1);
                                break;
                            case (Band.B80M):
                                net_device.WriteToDevice(3, 2);
                                break;
                            case (Band.B60M):
                                net_device.WriteToDevice(3, 3);
                                break;
                            case (Band.B40M):
                                net_device.WriteToDevice(3, 3);
                                break;
                            case (Band.B30M):
                                net_device.WriteToDevice(3, 4);
                                break;
                            case (Band.B20M):
                                net_device.WriteToDevice(3, 4);
                                break;
                            case (Band.B17M):
                                net_device.WriteToDevice(3, 5);
                                break;
                            case (Band.B15M):
                                net_device.WriteToDevice(3, 5);
                                break;
                            case (Band.B12M):
                                net_device.WriteToDevice(3, 6);
                                break;
                            case (Band.B10M):
                                net_device.WriteToDevice(3, 6);
                                break;
                            case (Band.B6M):
                                net_device.WriteToDevice(3, 7);
                                break;
                            default:
                                net_device.WriteToDevice(3, 0);
                                break;
                        }

                        net_device.KEYER = 0xff;   // reset data
                        net_device.WriteToDevice(4,
                            (long)(1200 / (SetupForm.G59CWSpeed * SetupForm.G59CWSpeedCorrection)));    // write CW keyer speed
                        Thread.Sleep(1);
                        net_device.WriteToDevice(20, (long)(SetupForm.G59DASH_DOT_ratio * 10)); // write DASH/DOT ratio
                        Thread.Sleep(1);

                        if (g59_auto_correction)
                            net_device.WriteToDevice(22, 1);
                        else
                            net_device.WriteToDevice(22, 0);
                        if (g59_PA10_present)
                            net_device.WriteToDevice(21, 1);
                        else
                            net_device.WriteToDevice(21, 0);
                        Thread.Sleep(1);

                        G59_setup_keyer();
                        G59SecRXAnt = G59_sec_rx_ant;
                        Thread.Sleep(1);
                        G59XTRV_separateRXTX = G59_XTRV_separate_RXTX;      // force refresh
                        Thread.Sleep(1);
                        btnATT_CheckedChanged(this, EventArgs.Empty);
                        Thread.Sleep(1);
                        btnHIGH_AF_CheckedChanged(this, EventArgs.Empty);
                        Thread.Sleep(1);
                        btnHIGH_RF_CheckedChanged(this, EventArgs.Empty);
                        Thread.Sleep(1);
                    }
                }

                return true;
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
                return false;
            }
        }

        public void G59_setup_keyer()
        {
            try
            {
                if (!booting)
                {
                    DSPMode tmp_mode;

                    if (chkVFOSplit.Checked)
                        tmp_mode = current_dsp_mode_subRX;
                    else
                        tmp_mode = current_dsp_mode;

                    Thread.Sleep(1);
                    g59.KEYER = 0xff;   // reset data
                    g59.WriteToDevice(4,
                        (long)(1200 / (SetupForm.G59CWSpeed * SetupForm.G59CWSpeedCorrection)));    // write CW keyer speed
                    Thread.Sleep(1);
                    g59.WriteToDevice(20, (long)(SetupForm.G59DASH_DOT_ratio * 10));                // write DASH/DOT ratio
                    Thread.Sleep(1);

                    if (current_model == Model.GENESIS_G59USB)
                    {
                        if (tmp_mode == DSPMode.CWU || tmp_mode == DSPMode.CWL)
                        {
                            switch (SetupForm.GenesisKeyerMode)
                            {
                                case Keyer_mode.Iambic_B_Mode:
                                    g59.WriteToDevice(18, (long)Keyer_mode.Iambic_B_Mode);
                                    g59.KeyerMode = (short)Keyer_mode.Iambic_B_Mode;
                                    break;

                                case Keyer_mode.Iambic:
                                    g59.WriteToDevice(18, (long)Keyer_mode.Iambic);
                                    g59.KeyerMode = (short)Keyer_mode.Iambic;
                                    break;

                                case Keyer_mode.Iambic_Reverse_B_Mode:
                                    g59.WriteToDevice(18, (long)Keyer_mode.Iambic_Reverse_B_Mode);
                                    g59.KeyerMode = (short)Keyer_mode.Iambic_Reverse_B_Mode;
                                    break;

                                case Keyer_mode.IambicReverse:
                                    g59.WriteToDevice(18, (long)Keyer_mode.IambicReverse);
                                    g59.KeyerMode = (short)Keyer_mode.IambicReverse;
                                    break;
                                case Keyer_mode.HandKey:
                                    g59.WriteToDevice(18, (long)Keyer_mode.HandKey);
                                    g59.KeyerMode = (short)Keyer_mode.HandKey;
                                    break;
                            }
                        }
                        else
                        {
                            g59.WriteToDevice(18, (long)Keyer_mode.PHONE);
                            g59.KeyerMode = (short)Keyer_mode.PHONE;
                        }
                    }
                    else if (current_model == Model.GENESIS_G59NET)
                    {
                        if (tmp_mode == DSPMode.CWU || tmp_mode == DSPMode.CWL)
                        {
                            switch (SetupForm.GenesisKeyerMode)
                            {
                                case Keyer_mode.Iambic_B_Mode:
                                    net_device.WriteToDevice(18, (long)Keyer_mode.Iambic_B_Mode);
                                    net_device.KeyerMode = (short)Keyer_mode.Iambic_B_Mode;
                                    break;
                                case Keyer_mode.Iambic:
                                    net_device.WriteToDevice(18, (long)Keyer_mode.Iambic);
                                    net_device.KeyerMode = (short)Keyer_mode.Iambic;
                                    break;

                                case Keyer_mode.Iambic_Reverse_B_Mode:
                                    net_device.WriteToDevice(18, (long)Keyer_mode.Iambic_Reverse_B_Mode);
                                    net_device.KeyerMode = (short)Keyer_mode.Iambic_Reverse_B_Mode;
                                    break;
                                case Keyer_mode.IambicReverse:
                                    net_device.WriteToDevice(18, (long)Keyer_mode.IambicReverse);
                                    net_device.KeyerMode = (short)Keyer_mode.IambicReverse;
                                    break;

                                case Keyer_mode.HandKey:
                                    net_device.WriteToDevice(18, (long)Keyer_mode.HandKey);
                                    net_device.KeyerMode = (short)Keyer_mode.HandKey;
                                    break;
                            }
                        }
                    }
                    else
                    {
                        net_device.WriteToDevice(18, (long)Keyer_mode.PHONE);
                        net_device.KeyerMode = (short)Keyer_mode.PHONE;
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        public void G59SetBandFilter(double freq)
        {
            try
            {
                Band b = BandFilterByFreq(freq);

                if (IsXTRV(freq))
                {
                    switch (b)
                    {
                        case Band.BX1:
                            freq -= xBand[1].losc;
                            break;

                        case Band.BX2:
                            freq -= xBand[2].losc;
                            break;

                        case Band.BX3:
                            freq -= xBand[3].losc;
                            break;

                        case Band.BX4:
                            freq -= xBand[4].losc;
                            break;

                        case Band.BX5:
                            freq -= xBand[5].losc;
                            break;

                        case Band.BX6:
                            freq -= xBand[6].losc;
                            break;

                        case Band.BX7:
                            freq -= xBand[7].losc;
                            break;

                        case Band.BX8:
                            freq -= xBand[8].losc;
                            break;

                        case Band.BX9:
                            freq -= xBand[9].losc;
                            break;

                        case Band.BX10:
                            freq -= xBand[10].losc;
                            break;

                        case Band.BX11:
                            freq -= xBand[11].losc;
                            break;

                        case Band.BX12:
                            freq -= xBand[12].losc;
                            break;

                        case Band.B2M:
                            freq -= g59_2m_Xtrv_losc_freq / 1e6;
                            break;
                    }

                    b = BandFilterByFreq(freq);
                }

                switch (b)
                {
                    case Band.B160M:
                        g59.WriteToDevice(3, (long)1);
                        break;

                    case Band.B80M:
                        g59.WriteToDevice(3, (long)2);
                        break;

                    case Band.B60M:
                    case Band.B40M:
                        g59.WriteToDevice(3, (long)3);
                        break;

                    case Band.B30M:
                    case Band.B20M:
                        g59.WriteToDevice(3, (long)4);
                        break;

                    case Band.B17M:
                    case Band.B15M:
                        g59.WriteToDevice(3, (long)5);
                        break;

                    case Band.B12M:
                    case Band.B10M:
                        g59.WriteToDevice(3, (long)6);
                        break;

                    case Band.B6M:
                        g59.WriteToDevice(3, (long)7);
                        break;

                    default:
                        g59.WriteToDevice(3, (long)0);
                        break;
                }

                Thread.Sleep(1);
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private bool G11Init()
        {
            try
            {
                g11.WriteToDevice(26, 0);                               // Line in
                Thread.Sleep(1);
                g11.WriteToDevice(0, 0);
                Thread.Sleep(1);
                g11.WriteToDevice(24, 0);                               // CW monitor off
                Thread.Sleep(1);
                ExtPA_PTT_Inverted = extPA_PTT_inverted;
                Thread.Sleep(1);
                Genesis_EXT_PA_present = genesis_ext_PA_present;        // force reload
                Thread.Sleep(1);
                G11SetBandFilter(vfoAFreq);
                Thread.Sleep(1);

                if (G11_auto_correction)
                    g11.WriteToDevice(22, 1);
                else
                    g11.WriteToDevice(22, 0);
                Thread.Sleep(1);
                g11.WriteToDevice(30, 0);

                G11_setup_keyer();

                Thread.Sleep(1);
                G11XTRV_separateRXTX = G11_XTRV_separate_RXTX;          // force refresh
                Thread.Sleep(1);
                chkG11AFbtn_CheckedChanged(this, EventArgs.Empty);
                Thread.Sleep(1);
                chkG11ATTbtn_CheckedChanged(this, EventArgs.Empty);
                Thread.Sleep(1);
                chkG11RFbtn_CheckedChanged(this, EventArgs.Empty);
                Thread.Sleep(1);

                Thread.Sleep(1);
                G11SecRXAnt = G11_sec_rx_ant;                           // second RX antenna force reload
                double freq = loscFreq;
                freq *= 1e6;
                g11.Si570_freq = 56000000;                              // reinit!
                g11.Set_frequency((long)Math.Round(freq, 6), true);

                return true;
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
                return false;
            }
        }

        public void G11_setup_keyer()
        {
            try
            {
                if (!booting)
                {
                    DSPMode tmp_mode;

                    if (chkVFOSplit.Checked)
                        tmp_mode = current_dsp_mode_subRX;
                    else
                        tmp_mode = current_dsp_mode;

                    Thread.Sleep(1);
                    g11.KEYER = 0xff;   // reset data
                    g11.WriteToDevice(4,
                        (long)(1200 / (SetupForm.G59CWSpeed * SetupForm.G59CWSpeedCorrection)));    // write CW keyer speed
                    Thread.Sleep(1);
                    g11.WriteToDevice(20, (long)(SetupForm.G59DASH_DOT_ratio * 10));                // write DASH/DOT ratio
                    Thread.Sleep(1);

                    if (tmp_mode == DSPMode.CWL || tmp_mode == DSPMode.CWU)
                    {
                        switch (SetupForm.GenesisKeyerMode)
                        {
                            case Keyer_mode.Iambic_B_Mode:
                                g11.WriteToDevice(18, (long)Keyer_mode.Iambic_B_Mode);
                                g11.KeyerMode = (short)Keyer_mode.Iambic_B_Mode;
                                break;

                            case Keyer_mode.Iambic:
                                g11.WriteToDevice(18, (long)Keyer_mode.Iambic);
                                g11.KeyerMode = (short)Keyer_mode.Iambic;
                                break;

                            case Keyer_mode.Iambic_Reverse_B_Mode:
                                g11.WriteToDevice(18, (long)Keyer_mode.Iambic_Reverse_B_Mode);
                                g11.KeyerMode = (short)Keyer_mode.Iambic_Reverse_B_Mode;
                                break;

                            case Keyer_mode.IambicReverse:
                                g11.WriteToDevice(18, (long)Keyer_mode.IambicReverse);
                                g11.KeyerMode = (short)Keyer_mode.IambicReverse;
                                break;

                            case Keyer_mode.HandKey:
                                g11.WriteToDevice(18, (long)Keyer_mode.HandKey);
                                g11.KeyerMode = (short)Keyer_mode.HandKey;
                                break;
                        }
                    }
                    else
                    {
                        g11.WriteToDevice(18, (long)Keyer_mode.PHONE);
                        g11.KeyerMode = (short)Keyer_mode.PHONE;
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.Write("Error in G11 setup keyer!\n" + ex.ToString());
            }
        }

        public void G11SetBandFilter(double freq)
        {
            try
            {
                Band b = BandFilterByFreq(freq);

                if (IsXTRV(freq))
                {
                    switch (b)
                    {
                        case Band.BX1:
                            freq -= xBand[1].losc;
                            break;

                        case Band.BX2:
                            freq -= xBand[2].losc;
                            break;

                        case Band.BX3:
                            freq -= xBand[3].losc;
                            break;

                        case Band.BX4:
                            freq -= xBand[4].losc;
                            break;

                        case Band.BX5:
                            freq -= xBand[5].losc;
                            break;

                        case Band.BX6:
                            freq -= xBand[6].losc;
                            break;

                        case Band.BX7:
                            freq -= xBand[7].losc;
                            break;

                        case Band.BX8:
                            freq -= xBand[8].losc;
                            break;

                        case Band.BX9:
                            freq -= xBand[9].losc;
                            break;

                        case Band.BX10:
                            freq -= xBand[10].losc;
                            break;

                        case Band.BX11:
                            freq -= xBand[11].losc;
                            break;

                        case Band.BX12:
                            freq -= xBand[12].losc;
                            break;

                        case Band.B2M:
                            freq -= g11_Xtrv_losc_freq / 1e6;
                            break;
                    }

                    b = BandFilterByFreq(freq);
                }

                if (g11_multiband)
                {
                    switch (b)
                    {
                        case Band.B160M:
                            g11.WriteToDevice(2, (long)0);
                            break;

                        case Band.B80M:
                            g11.WriteToDevice(2, (long)1);
                            break;

                        case Band.B60M:
                        case Band.B40M:
                            g11.WriteToDevice(2, (long)2);
                            break;

                        case Band.B30M:
                            g11.WriteToDevice(2, (long)3);
                            break;

                        case Band.B17M:
                        case Band.B20M:
                            g11.WriteToDevice(2, (long)4);
                            break;

                        case Band.B15M:
                        case Band.B12M:
                        case Band.B10M:
                            g11.WriteToDevice(2, (long)5);
                            break;

                        case Band.B6M:
                            g11.WriteToDevice(2, (long)6);
                            break;

                        default:
                            g11.WriteToDevice(2, (long)7);      // A=B=C=1 general RX
                            break;
                    }                    
                }
                else
                {
                    switch (b)
                    {
                        case Band.B160M:
                            if (G11BandFiltersCH2[(int)Band.B160M])
                            {
                                g11.WriteToDevice(3, (long)1);
                                g11.WriteToDevice(3, (long)3);
                            }
                            break;
                        case Band.B80M:
                            if (G11BandFiltersCH2[(int)Band.B80M])
                            {
                                g11.WriteToDevice(3, (long)1);
                                g11.WriteToDevice(3, (long)3);
                            }
                            else if (G11BandFiltersCH1[(int)Band.B80M])
                            {
                                g11.WriteToDevice(3, (long)2);
                                g11.WriteToDevice(3, (long)0);
                            }
                            break;
                        case Band.B60M:
                        case Band.B40M:
                            if (G11BandFiltersCH2[(int)Band.B60M] ||
                                G11BandFiltersCH2[(int)Band.B40M])
                            {
                                g11.WriteToDevice(3, (long)1);
                                g11.WriteToDevice(3, (long)3);
                            }
                            else if (G11BandFiltersCH1[(int)Band.B60M] ||
                                G11BandFiltersCH1[(int)Band.B40M])
                            {
                                g11.WriteToDevice(3, (long)2);
                                g11.WriteToDevice(3, (long)0);
                            }
                            break;
                        case Band.B30M:
                            if (G11BandFiltersCH2[(int)Band.B30M])
                            {
                                g11.WriteToDevice(3, (long)1);
                                g11.WriteToDevice(3, (long)3);
                            }
                            else if (G11BandFiltersCH1[(int)Band.B30M])
                            {
                                g11.WriteToDevice(3, (long)2);
                                g11.WriteToDevice(3, (long)0);
                            }
                            break;
                        case Band.B20M:
                            if (G11BandFiltersCH2[(int)Band.B20M])
                            {
                                g11.WriteToDevice(3, (long)1);
                                g11.WriteToDevice(3, (long)3);
                            }
                            else if (G11BandFiltersCH1[(int)Band.B20M])
                            {
                                g11.WriteToDevice(3, (long)2);
                                g11.WriteToDevice(3, (long)0);
                            }
                            break;
                        case Band.B17M:
                            if (G11BandFiltersCH2[(int)Band.B17M])
                            {
                                g11.WriteToDevice(3, (long)1);
                                g11.WriteToDevice(3, (long)3);
                            }
                            else if (G11BandFiltersCH1[(int)Band.B17M])
                            {
                                g11.WriteToDevice(3, (long)2);
                                g11.WriteToDevice(3, (long)0);
                            }
                            break;
                        case Band.B15M:
                            if (G11BandFiltersCH2[(int)Band.B15M])
                            {
                                g11.WriteToDevice(3, (long)1);
                                g11.WriteToDevice(3, (long)3);
                            }
                            else if (G11BandFiltersCH1[(int)Band.B15M])
                            {
                                g11.WriteToDevice(3, (long)2);
                                g11.WriteToDevice(3, (long)0);
                            }
                            break;
                        case Band.B12M:
                            if (G11BandFiltersCH2[(int)Band.B12M])
                            {
                                g11.WriteToDevice(3, (long)1);
                                g11.WriteToDevice(3, (long)3);
                            }
                            else if (G11BandFiltersCH1[(int)Band.B12M])
                            {
                                g11.WriteToDevice(3, (long)2);
                                g11.WriteToDevice(3, (long)0);
                            }
                            break;
                        case Band.B10M:
                            if (G11BandFiltersCH2[(int)Band.B10M])
                            {
                                g11.WriteToDevice(3, (long)1);
                                g11.WriteToDevice(3, (long)3);
                            }
                            else if (G11BandFiltersCH1[(int)Band.B10M])
                            {
                                g11.WriteToDevice(3, (long)2);
                                g11.WriteToDevice(3, (long)0);
                            }
                            break;
                        case Band.B6M:
                            if (G11BandFiltersCH2[(int)Band.B6M])
                            {
                                g11.WriteToDevice(3, (long)1);
                                g11.WriteToDevice(3, (long)3);
                            }
                            else if (G11BandFiltersCH1[(int)Band.B6M])
                            {
                                g11.WriteToDevice(3, (long)2);
                                g11.WriteToDevice(3, (long)0);
                            }
                            break;
                        case Band.B600M:
                            if (G11BandFiltersCH1[(int)Band.B600M])
                            {
                                g11.WriteToDevice(3, (long)2);
                                g11.WriteToDevice(3, (long)0);
                            }
                            break;
                        case Band.B2190M:
                            if (G11BandFiltersCH1[(int)Band.B2190M])
                            {
                                g11.WriteToDevice(3, (long)2);
                                g11.WriteToDevice(3, (long)0);
                            }
                            break;
                    }
                }

                Thread.Sleep(1);
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        #endregion

        #region DX Cluster

        private void dXToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try
            {
                if (DXClusterForm != null && !DXClusterForm.IsDisposed)
                    DXClusterForm.Show();
                else
                {
                    DXClusterForm = new DXClusterClient(SetupForm.txtStnCALL.Text.ToString(),
                        SetupForm.txtStnName.Text.ToString(), SetupForm.txtStnQTH.Text.ToString());
                    DXClusterForm.Show();
                }
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        #endregion

        #region More Bands

        private void radBandHF_Click(object sender, EventArgs e)
        {
            show_more_bands = false;
            grpBandHF.Visible = true;
            grpMoreBands.Visible = false;
        }

        private void radBandHF_CheckedChanged(object sender, EventArgs e)
        {
            if (radBandHF.Checked)
            {
                show_more_bands = false;
                grpBandHF.Visible = true;
                grpMoreBands.Visible = false;
            }
        }

        private void radBand2190_Click(object sender, EventArgs e)
        {
            if(!grpBandHF.Visible)
            {
                run_memory_zap = false;

                if (!radBand2190.Checked)
                    Band2190(true, false, false);
                else
                {
                    if (last_band == "2190M")
                        Band2190(true, true, true);
                    else
                        last_band = "2190M";
                }
            }
        }

        private void radBand2190_CheckedChanged(object sender, EventArgs e)
        {
            run_memory_zap = false;

            if (!vfoa_lock && !vfob_lock)
            {
                if (radBand2190.Checked)
                {
                    Band2190(false, true, false);
                }
                else
                {
                    last_band = "2190M";
                    SaveBand();
                }
            }
        }

        private void Band2190(bool save_band_stack, bool get_band_stack, bool clicked)
        {
            if (save_band_stack)
                SaveBand();

            current_band = Band.B2190M;

            if (last_band.Equals("2190M") && save_band_stack && get_band_stack && !clicked)
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_2190m_index = (band_2190m_index - 1 + band_2190m_register) % Math.Max(band_2190m_register, 1);
                else
                    band_2190m_index = (band_2190m_index + 1) % Math.Max(band_2190m_register, 1);
            }
            else if (last_band.Equals("2190M") && get_band_stack && save_band_stack && clicked)
            {
                band_2190m_index = (band_2190m_index + 1) % Math.Max(band_2190m_register, 1);
            }

            string filterMainRX, filterSubRX, modeMainRX, modeSubRX;
            double freqA;
            double freqB;
            double losc_freq;
            int af, rf, sql1, sql2;
            double pwr;
            bool sql1_on, sql2_on;

            if (get_band_stack)
            {
                if (DB.GetBandStack("2190M", band_2190m_index, out modeMainRX, out modeSubRX, out filterMainRX, out filterSubRX,
                    out freqA, out freqB, out losc_freq, out af, out rf, out pwr, out sql1, out sql1_on, out sql2, out sql2_on))
                {
                    SetBand(modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq, af, rf, pwr, sql1, sql1_on, sql2, sql2_on);
                }
                else
                {
                    DB.AddBandStack("2190M", "CWU", "F7", 0.136, AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked,
                        SquelchSubRX, chkSQLSubRX.Checked);
                    DB.AddBandStack("2190M", "CWU", "F7", 0.136, AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked,
                        SquelchSubRX, chkSQLSubRX.Checked);
                    DB.AddBandStack("2190M", "CWU", "F7", 0.136, AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked,
                        SquelchSubRX, chkSQLSubRX.Checked);
                    DB.Update();
                    UpdateBandStackRegisters();
                }

                MaxFreq = LOSCFreq + DttSP.SampleRate / 2 * 1e-6;
                MinFreq = LOSCFreq - DttSP.SampleRate / 2 * 1e-6;
                CurrentBand = Band.B2190M;
                Band bf = BandFilterByFreq(Math.Round(freqA, 6));
                CurrentBandFilter = bf;
                NewVFOLargeFont = new_vfo_large_font;  // refresh Hover
                NewVFOSmallFont = new_vfo_small_font;
                VFOLargeFont = vfo_large_font;
                VFOSmallFont = vfo_small_font;
                WBIR_state = WBIR_State.NoAdapt;
            }
        }

        private void radBand600_Click(object sender, EventArgs e)
        {
            if (!grpBandHF.Visible)
            {
                run_memory_zap = false;

                if (!radBand600.Checked)
                    Band600(true, false, false);
                else
                {
                    if (last_band == "600M")
                        Band600(true, true, true);
                    else
                        last_band = "600M";
                }
            }
        }

        private void radBand600_CheckedChanged(object sender, EventArgs e)
        {
            run_memory_zap = false;

            if (!vfoa_lock && !vfob_lock)
            {
                if (radBand600.Checked)
                {
                    Band600(false, true, false);
                }
                else
                {
                    last_band = "600M";
                    SaveBand();
                }
            }
        }

        private void Band600(bool save_band_stack, bool get_band_stack, bool clicked)
        {
            if (save_band_stack)
                SaveBand();

            current_band = Band.B600M;

            if (last_band.Equals("600M") && save_band_stack && get_band_stack && !clicked)
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_600m_index = (band_600m_index - 1 + band_600m_register) % Math.Max(band_600m_register, 1);
                else
                    band_600m_index = (band_600m_index + 1) % Math.Max(band_600m_register, 1);
            }
            else if (last_band.Equals("600M") && get_band_stack && save_band_stack && clicked)
            {
                band_600m_index = (band_600m_index + 1) % Math.Max(band_600m_register, 1); ;
            }

            string filterMainRX, filterSubRX, modeMainRX, modeSubRX;
            double freqA;
            double freqB;
            double losc_freq;
            int af, rf, sql1, sql2;
            double pwr;
            bool sql1_on, sql2_on;

            if (get_band_stack)
            {
                if (DB.GetBandStack("600M", band_600m_index, out modeMainRX, out modeSubRX, out filterMainRX, out filterSubRX,
                    out freqA, out freqB, out losc_freq, out af, out rf, out pwr, out sql1, out sql1_on, out sql2, out sql2_on))
                {
                    SetBand(modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq, af, rf, pwr, sql1, sql1_on, sql2, sql2_on);
                }
                else
                {
                    DB.AddBandStack("600M", "CWU", "F7", 0.501, AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked,
                        SquelchSubRX, chkSQLSubRX.Checked);
                    DB.AddBandStack("600M", "CWU", "F7", 0.502, AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked,
                        SquelchSubRX, chkSQLSubRX.Checked);
                    DB.AddBandStack("600M", "CWU", "F7", 0.503, AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked,
                        SquelchSubRX, chkSQLSubRX.Checked);
                    DB.Update();
                    UpdateBandStackRegisters();
                }

                MaxFreq = LOSCFreq + DttSP.SampleRate / 2 * 1e-6;
                MinFreq = LOSCFreq - DttSP.SampleRate / 2 * 1e-6;
                CurrentBand = Band.B600M;
                Band bf = BandFilterByFreq(Math.Round(freqA, 6));
                CurrentBandFilter = bf;
                NewVFOLargeFont = new_vfo_large_font;  // refresh Hover
                NewVFOSmallFont = new_vfo_small_font;
                VFOLargeFont = vfo_large_font;
                VFOSmallFont = vfo_small_font;
                WBIR_state = WBIR_State.NoAdapt;
            }
        }

        private void radBandX1_Click(object sender, EventArgs e)
        {
            run_memory_zap = false;

            if (!radBandX1.Checked)
                BandX1(true, false, false);
            else
            {
                if (last_band == xBand[1].name)
                    BandX1(true, true, true);
                else
                    last_band = xBand[1].name;
            }
        }

        private void radBandX1_CheckedChanged(object sender, EventArgs e)
        {
            run_memory_zap = false;

            if (!vfoa_lock && !vfob_lock)
            {
                if (radBandX1.Checked)
                {
                    BandX1(false, true, false);
                    RXOnly = xBand[1].rx_only;
                }
                else
                {
                    last_band = xBand[1].name;
                    SaveBand();
                }
            }
        }

        private void BandX1(bool save_band_stack, bool get_band_stack, bool clicked)
        {
            if (save_band_stack)
                SaveBand();

            if (last_band.Equals(xBand[1].name) && save_band_stack && get_band_stack && !clicked)
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_X1_index = (band_X1_index - 1 + band_X1_register) % Math.Max(band_X1_register,1);
                else
                    band_X1_index = (band_X1_index + 1) % Math.Max(band_X1_register, 1);
            }
            else if (last_band.Equals(xBand[1].name) && get_band_stack && save_band_stack && clicked)
            {
                band_X1_index = (band_X1_index + 1) % Math.Max(band_X1_register, 1);
            }

            string filterMainRX, filterSubRX, modeMainRX, modeSubRX;
            double freqA;
            double freqB;
            double losc_freq;
            int af, rf, sql1, sql2;
            double pwr;
            bool sql1_on, sql2_on;

            if (get_band_stack)
            {
                CurrentBand = Band.BX1;

                if (DB.GetBandStack(xBand[1].name, band_X1_index, out modeMainRX, out modeSubRX, out filterMainRX, out filterSubRX,
                    out freqA, out freqB, out losc_freq, out af, out rf, out pwr, out sql1, out sql1_on, out sql2, out sql2_on))
                {
                    SetBand(modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq, af, rf, pwr, sql1, sql1_on, sql2, sql2_on);
                }
                else
                {
                    if (xBand[1].name != "")
                    {
                        DB.AddBandStack(xBand[1].name, "CWU", "F7", xBand[1].freq_min, AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked,
                        SquelchSubRX, chkSQLSubRX.Checked);
                        DB.AddBandStack(xBand[1].name, "USB", "F7", xBand[1].freq_min, AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked,
                        SquelchSubRX, chkSQLSubRX.Checked);
                        DB.AddBandStack(xBand[1].name, "USB", "F7", xBand[1].freq_min, AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked,
                        SquelchSubRX, chkSQLSubRX.Checked);
                        DB.Update();
                        UpdateBandStackRegisters();
                    }
                }

                MaxFreq = LOSCFreq + DttSP.SampleRate / 2 * 1e-6;
                MinFreq = LOSCFreq - DttSP.SampleRate / 2 * 1e-6;
                NewVFOLargeFont = new_vfo_large_font;  // refresh Hover
                NewVFOSmallFont = new_vfo_small_font;
                VFOLargeFont = vfo_large_font;
                VFOSmallFont = vfo_small_font;
                WBIR_state = WBIR_State.NoAdapt;
            }
        }

        private void radBandX2_Click(object sender, EventArgs e)
        {
            run_memory_zap = false;

            if (!radBandX2.Checked)
                BandX2(true, false, false);
            else
            {
                if (last_band == xBand[2].name)
                    BandX2(true, true, true);
                else
                    last_band = xBand[2].name;
            }
        }

        private void radBandX2_CheckedChanged(object sender, EventArgs e)
        {
            run_memory_zap = false;

            if (!vfoa_lock && !vfob_lock)
            {
                if (radBandX2.Checked)
                {
                    BandX2(false, true, false);
                    RXOnly = xBand[2].rx_only;
                }
                else
                {
                    last_band = xBand[2].name;
                    SaveBand();
                }
            }
        }

        private void BandX2(bool save_band_stack, bool get_band_stack, bool clicked)
        {
            if (save_band_stack)
                SaveBand();

            if (last_band.Equals(xBand[2].name) && save_band_stack && get_band_stack && !clicked)
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_X2_index = (band_X2_index - 1 + band_X2_register) % Math.Max(band_X2_register, 1);
                else
                    band_X2_index = (band_X2_index + 1) % Math.Max(band_X2_register, 1);
            }
            else if (last_band.Equals(xBand[2].name) && get_band_stack && save_band_stack && clicked)
            {
                band_X2_index = (band_X2_index + 1) % Math.Max(band_X2_register, 1);
            }

            string filterMainRX, filterSubRX, modeMainRX, modeSubRX;
            double freqA;
            double freqB;
            double losc_freq;
            int af, rf, sql1, sql2;
            double pwr;
            bool sql1_on, sql2_on;

            if (get_band_stack)
            {
                CurrentBand = Band.BX2;

                if (DB.GetBandStack(xBand[2].name, band_X2_index, out modeMainRX, out modeSubRX, out filterMainRX, out filterSubRX,
                    out freqA, out freqB, out losc_freq, out af, out rf, out pwr, out sql1, out sql1_on, out sql2, out sql2_on))
                {
                    SetBand(modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq, af, rf, pwr, sql1, sql1_on, sql2, sql2_on);
                }
                else
                {
                    if (xBand[2].name != "")
                    {
                        DB.AddBandStack(xBand[2].name, "CWU", "F7", xBand[2].freq_min, AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked,
                        SquelchSubRX, chkSQLSubRX.Checked);
                        DB.AddBandStack(xBand[2].name, "USB", "F7", xBand[2].freq_min, AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked,
                        SquelchSubRX, chkSQLSubRX.Checked);
                        DB.AddBandStack(xBand[2].name, "USB", "F7", xBand[2].freq_min, AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked,
                        SquelchSubRX, chkSQLSubRX.Checked);
                        DB.Update();
                        UpdateBandStackRegisters();
                    }
                }

                MaxFreq = LOSCFreq + DttSP.SampleRate / 2 * 1e-6;
                MinFreq = LOSCFreq - DttSP.SampleRate / 2 * 1e-6;
                NewVFOLargeFont = new_vfo_large_font;  // refresh Hover
                NewVFOSmallFont = new_vfo_small_font;
                VFOLargeFont = vfo_large_font;
                VFOSmallFont = vfo_small_font;
                WBIR_state = WBIR_State.NoAdapt;
            }
        }

        private void radBandX3_Click(object sender, EventArgs e)
        {
            run_memory_zap = false;

            if (!radBandX3.Checked)
                BandX3(true, false, false);
            else
            {
                if (last_band == xBand[3].name)
                    BandX3(true, true, true);
                else
                    last_band = xBand[3].name;
            }
        }

        private void radBandX3_CheckedChanged(object sender, EventArgs e)
        {
            run_memory_zap = false;

            if (!vfoa_lock && !vfob_lock)
            {
                QRP2000_XTRV_enabled = radBandX3.Checked;

                if (radBandX3.Checked)
                {
                    BandX3(false, true, false);
                    RXOnly = xBand[3].rx_only;
                }
                else
                {
                    last_band = xBand[3].name;
                    SaveBand();
                }
            }
        }

        private void BandX3(bool save_band_stack, bool get_band_stack, bool clicked)
        {
            if (save_band_stack)
                SaveBand();

            if (last_band.Equals(xBand[3].name) && save_band_stack && get_band_stack && !clicked)
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_X3_index = (band_X3_index - 1 + band_X3_register) % Math.Max(band_X3_register, 1);
                else
                    band_X3_index = (band_X3_index + 1) % Math.Max(band_X3_register, 1);
            }
            else if (last_band.Equals(xBand[3].name) && get_band_stack && save_band_stack && clicked)
            {
                band_X3_index = (band_X3_index + 1) % Math.Max(band_X3_register, 1);
            }

            string filterMainRX, filterSubRX, modeMainRX, modeSubRX;
            double freqA;
            double freqB;
            double losc_freq;
            int af, rf, sql1, sql2;
            double pwr;
            bool sql1_on, sql2_on;

            if (get_band_stack)
            {
                CurrentBand = Band.BX3;

                if (DB.GetBandStack(xBand[3].name, band_X3_index, out modeMainRX, out modeSubRX, out filterMainRX, out filterSubRX,
                    out freqA, out freqB, out losc_freq, out af, out rf, out pwr, out sql1, out sql1_on, out sql2, out sql2_on))
                {
                    SetBand(modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq, af, rf, pwr, sql1, sql1_on, sql2, sql2_on);
                }
                else
                {
                    if (xBand[3].name != "")
                    {
                        DB.AddBandStack(xBand[3].name, "CWU", "F7", xBand[3].freq_min, AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked,
                        SquelchSubRX, chkSQLSubRX.Checked);
                        DB.AddBandStack(xBand[3].name, "USB", "F7", xBand[3].freq_min, AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked,
                        SquelchSubRX, chkSQLSubRX.Checked);
                        DB.AddBandStack(xBand[3].name, "USB", "F7", xBand[3].freq_min, AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked,
                        SquelchSubRX, chkSQLSubRX.Checked);
                        DB.Update();
                        UpdateBandStackRegisters();
                    }
                }

                MaxFreq = LOSCFreq + DttSP.SampleRate / 2 * 1e-6;
                MinFreq = LOSCFreq - DttSP.SampleRate / 2 * 1e-6;
                NewVFOLargeFont = new_vfo_large_font;  // refresh Hover
                NewVFOSmallFont = new_vfo_small_font;
                VFOLargeFont = vfo_large_font;
                VFOSmallFont = vfo_small_font;
                WBIR_state = WBIR_State.NoAdapt;
            }
        }

        private void radBandX4_Click(object sender, EventArgs e)
        {
            run_memory_zap = false;

            if (!radBandX4.Checked)
                BandX4(true, false, false);
            else
            {
                if (last_band == xBand[4].name)
                    BandX4(true, true, true);
                else
                    last_band = xBand[4].name;
            }
        }

        private void radBandX4_CheckedChanged(object sender, EventArgs e)
        {
            run_memory_zap = false;

            if (!vfoa_lock && !vfob_lock)
            {
                QRP2000_XTRV_enabled = radBandX4.Checked;

                if (radBandX4.Checked)
                {
                    BandX4(false, true, false);
                    RXOnly = xBand[4].rx_only;
                }
                else
                {
                    last_band = xBand[4].name;
                    SaveBand();
                }
            }
        }

        private void BandX4(bool save_band_stack, bool get_band_stack, bool clicked)
        {
            if (save_band_stack)
                SaveBand();

            if (last_band.Equals(xBand[4].name) && save_band_stack && get_band_stack && !clicked)
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_X4_index = (band_X4_index - 1 + band_X4_register) % Math.Max(band_X4_register, 1);
                else
                    band_X4_index = (band_X4_index + 1) % Math.Max(band_X4_register, 1);
            }
            else if (last_band.Equals(xBand[4].name) && get_band_stack && save_band_stack && clicked)
            {
                band_X4_index = (band_X4_index + 1) % Math.Max(band_X4_register, 1);
            }

            string filterMainRX, filterSubRX, modeMainRX, modeSubRX;
            double freqA;
            double freqB;
            double losc_freq;
            int af, rf, sql1, sql2;
            double pwr;
            bool sql1_on, sql2_on;

            if (get_band_stack)
            {
                CurrentBand = Band.BX4;

                if (DB.GetBandStack(xBand[4].name, band_X4_index, out modeMainRX, out modeSubRX, out filterMainRX, out filterSubRX,
                    out freqA, out freqB, out losc_freq, out af, out rf, out pwr, out sql1, out sql1_on, out sql2, out sql2_on))
                {
                    SetBand(modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq, af, rf, pwr, sql1, sql1_on, sql2, sql2_on);
                }
                else
                {
                    if (xBand[4].name != "")
                    {
                        DB.AddBandStack(xBand[4].name, "CWU", "F7", xBand[4].freq_min, AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked,
                        SquelchSubRX, chkSQLSubRX.Checked);
                        DB.AddBandStack(xBand[4].name, "USB", "F7", xBand[4].freq_min, AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked,
                        SquelchSubRX, chkSQLSubRX.Checked);
                        DB.AddBandStack(xBand[4].name, "USB", "F7", xBand[4].freq_min, AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked,
                        SquelchSubRX, chkSQLSubRX.Checked);
                        DB.Update();
                        UpdateBandStackRegisters();
                    }
                }

                MaxFreq = LOSCFreq + DttSP.SampleRate / 2 * 1e-6;
                MinFreq = LOSCFreq - DttSP.SampleRate / 2 * 1e-6;
                NewVFOLargeFont = new_vfo_large_font;  // refresh Hover
                NewVFOSmallFont = new_vfo_small_font;
                VFOLargeFont = vfo_large_font;
                VFOSmallFont = vfo_small_font;
                WBIR_state = WBIR_State.NoAdapt;
            }
        }

        private void radBandX5_Click(object sender, EventArgs e)
        {
            run_memory_zap = false;

            if (!radBandX5.Checked)
                BandX5(true, false, false);
            else
            {
                if (last_band == xBand[5].name)
                    BandX5(true, true, true);
                else
                    last_band = xBand[5].name;
            }
        }

        private void radBandX5_CheckedChanged(object sender, EventArgs e)
        {
            run_memory_zap = false;

            if (!vfoa_lock && !vfob_lock)
            {
                QRP2000_XTRV_enabled = radBandX5.Checked;

                if (radBandX5.Checked)
                {
                    BandX5(false, true, false);
                    RXOnly = xBand[5].rx_only;
                }
                else
                {
                    last_band = xBand[5].name;
                    SaveBand();
                }
            }
        }

        private void BandX5(bool save_band_stack, bool get_band_stack, bool clicked)
        {
            if (save_band_stack)
                SaveBand();

            if (last_band.Equals(xBand[5].name) && save_band_stack && get_band_stack && !clicked)
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_X5_index = (band_X5_index - 1 + band_X5_register) % Math.Max(band_X5_register, 1);
                else
                    band_X5_index = (band_X5_index + 1) % Math.Max(band_X5_register, 1);
            }
            else if (last_band.Equals(xBand[5].name) && get_band_stack && save_band_stack && clicked)
            {
                band_X5_index = (band_X5_index + 1) % Math.Max(band_X5_register, 1);
            }

            string filterMainRX, filterSubRX, modeMainRX, modeSubRX;
            double freqA;
            double freqB;
            double losc_freq;
            int af, rf, sql1, sql2;
            double pwr;
            bool sql1_on, sql2_on;

            if (get_band_stack)
            {
                CurrentBand = Band.BX5;

                if (DB.GetBandStack(xBand[5].name, band_X5_index, out modeMainRX, out modeSubRX, out filterMainRX, out filterSubRX,
                    out freqA, out freqB, out losc_freq, out af, out rf, out pwr, out sql1, out sql1_on, out sql2, out sql2_on))
                {
                    SetBand(modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq, af, rf, pwr, sql1, sql1_on, sql2, sql2_on);
                }
                else
                {
                    if (xBand[5].name != "")
                    {
                        DB.AddBandStack(xBand[5].name, "CWU", "F7", xBand[5].freq_min, AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked,
                        SquelchSubRX, chkSQLSubRX.Checked);
                        DB.AddBandStack(xBand[5].name, "USB", "F7", xBand[5].freq_min, AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked,
                        SquelchSubRX, chkSQLSubRX.Checked);
                        DB.AddBandStack(xBand[5].name, "USB", "F7", xBand[5].freq_min, AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked,
                        SquelchSubRX, chkSQLSubRX.Checked);
                        DB.Update();
                        UpdateBandStackRegisters();
                    }
                }

                MaxFreq = LOSCFreq + DttSP.SampleRate / 2 * 1e-6;
                MinFreq = LOSCFreq - DttSP.SampleRate / 2 * 1e-6;
                NewVFOLargeFont = new_vfo_large_font;  // refresh Hover
                NewVFOSmallFont = new_vfo_small_font;
                VFOLargeFont = vfo_large_font;
                VFOSmallFont = vfo_small_font;
                WBIR_state = WBIR_State.NoAdapt;
            }
        }

        private void radBandX6_Click(object sender, EventArgs e)
        {
            run_memory_zap = false;

            if (!radBandX6.Checked)
                BandX6(true, false, false);
            else
            {
                if (last_band == xBand[6].name)
                    BandX6(true, true, true);
                else
                    last_band = xBand[6].name;
            }
        }

        private void radBandX6_CheckedChanged(object sender, EventArgs e)
        {
            run_memory_zap = false;

            if (!vfoa_lock && !vfob_lock)
            {
                QRP2000_XTRV_enabled = radBandX6.Checked;

                if (radBandX6.Checked)
                {
                    BandX6(false, true, false);
                    RXOnly = xBand[6].rx_only;
                }
                else
                {
                    last_band = xBand[6].name;
                    SaveBand();
                }
            }
        }

        private void BandX6(bool save_band_stack, bool get_band_stack, bool clicked)
        {
            if (save_band_stack)
                SaveBand();

            if (last_band.Equals(xBand[6].name) && save_band_stack && get_band_stack && !clicked)
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_X6_index = (band_X6_index - 1 + band_X6_register) % Math.Max(band_X6_register, 1);
                else
                    band_X6_index = (band_X6_index + 1) % Math.Max(band_X6_register, 1);
            }
            else if (last_band.Equals(xBand[6].name) && get_band_stack && save_band_stack && clicked)
            {
                band_X6_index = (band_X6_index + 1) % Math.Max(band_X6_register, 1);
            }

            string filterMainRX, filterSubRX, modeMainRX, modeSubRX;
            double freqA;
            double freqB;
            double losc_freq;
            int af, rf, sql1, sql2;
            double pwr;
            bool sql1_on, sql2_on;

            if (get_band_stack)
            {
                CurrentBand = Band.BX6;

                if (DB.GetBandStack(xBand[6].name, band_X6_index, out modeMainRX, out modeSubRX, out filterMainRX, out filterSubRX,
                    out freqA, out freqB, out losc_freq, out af, out rf, out pwr, out sql1, out sql1_on, out sql2, out sql2_on))
                {
                    SetBand(modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq, af, rf, pwr, sql1, sql1_on, sql2, sql2_on);
                }
                else
                {
                    if (xBand[6].name != "")
                    {
                        DB.AddBandStack(xBand[6].name, "CWU", "F7", xBand[6].freq_min, AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked,
                        SquelchSubRX, chkSQLSubRX.Checked);
                        DB.AddBandStack(xBand[6].name, "USB", "F7", xBand[6].freq_min, AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked,
                        SquelchSubRX, chkSQLSubRX.Checked);
                        DB.AddBandStack(xBand[6].name, "USB", "F7", xBand[6].freq_min, AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked,
                        SquelchSubRX, chkSQLSubRX.Checked);
                        DB.Update();
                        UpdateBandStackRegisters();
                    }
                }

                MaxFreq = LOSCFreq + DttSP.SampleRate / 2 * 1e-6;
                MinFreq = LOSCFreq - DttSP.SampleRate / 2 * 1e-6;
                NewVFOLargeFont = new_vfo_large_font;  // refresh Hover
                NewVFOSmallFont = new_vfo_small_font;
                VFOLargeFont = vfo_large_font;
                VFOSmallFont = vfo_small_font;
                WBIR_state = WBIR_State.NoAdapt;
            }
        }

        private void radBandX7_Click(object sender, EventArgs e)
        {
            run_memory_zap = false;

            if (!radBandX7.Checked)
                BandX7(true, false, false);
            else
            {
                if (last_band == xBand[7].name)
                    BandX7(true, true, true);
                else
                    last_band = xBand[7].name;
            }
        }

        private void radBandX7_CheckedChanged(object sender, EventArgs e)
        {
            run_memory_zap = false;

            if (!vfoa_lock && !vfob_lock)
            {
                if (radBandX7.Checked)
                {
                    BandX7(false, true, false);
                    RXOnly = xBand[7].rx_only;
                }
                else
                {
                    last_band = xBand[7].name;
                    SaveBand();
                }
            }
        }

        private void BandX7(bool save_band_stack, bool get_band_stack, bool clicked)
        {
            if (save_band_stack)
                SaveBand();

            if (last_band.Equals(xBand[7].name) && save_band_stack && get_band_stack && !clicked)
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_X7_index = (band_X7_index - 1 + band_X7_register) % Math.Max(band_X7_register, 1);
                else
                    band_X7_index = (band_X7_index + 1) % Math.Max(band_X7_register, 1);
            }
            else if (last_band.Equals(xBand[7].name) && get_band_stack && save_band_stack && clicked)
            {
                band_X7_index = (band_X7_index + 1) % Math.Max(band_X7_register, 1);
            }

            string filterMainRX, filterSubRX, modeMainRX, modeSubRX;
            double freqA;
            double freqB;
            double losc_freq;
            int af, rf, sql1, sql2;
            double pwr;
            bool sql1_on, sql2_on;

            if (get_band_stack)
            {
                CurrentBand = Band.BX7;

                if (DB.GetBandStack(xBand[7].name, band_X7_index, out modeMainRX, out modeSubRX, out filterMainRX, out filterSubRX,
                    out freqA, out freqB, out losc_freq, out af, out rf, out pwr, out sql1, out sql1_on, out sql2, out sql2_on))
                {
                    SetBand(modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq, af, rf, pwr, sql1, sql1_on, sql2, sql2_on);
                }
                else
                {
                    if (xBand[7].name != "")
                    {
                        DB.AddBandStack(xBand[7].name, "CWU", "F7", xBand[7].freq_min, AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked,
                        SquelchSubRX, chkSQLSubRX.Checked);
                        DB.AddBandStack(xBand[7].name, "USB", "F7", xBand[7].freq_min, AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked,
                        SquelchSubRX, chkSQLSubRX.Checked);
                        DB.AddBandStack(xBand[7].name, "USB", "F7", xBand[7].freq_min, AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked,
                        SquelchSubRX, chkSQLSubRX.Checked);
                        DB.Update();
                        UpdateBandStackRegisters();
                    }
                }

                MaxFreq = LOSCFreq + DttSP.SampleRate / 2 * 1e-6;
                MinFreq = LOSCFreq - DttSP.SampleRate / 2 * 1e-6;
                NewVFOLargeFont = new_vfo_large_font;  // refresh Hover
                NewVFOSmallFont = new_vfo_small_font;
                VFOLargeFont = vfo_large_font;
                VFOSmallFont = vfo_small_font;
                WBIR_state = WBIR_State.NoAdapt;
            }
        }

        private void radBandX8_Click(object sender, EventArgs e)
        {
            run_memory_zap = false;

            if (!radBandX8.Checked)
                BandX8(true, false, false);
            else
            {
                if (last_band == xBand[8].name)
                    BandX8(true, true, true);
                else
                    last_band = radBandX8.Text.ToString();
            }
        }

        private void radBandX8_CheckedChanged(object sender, EventArgs e)
        {
            run_memory_zap = false;

            if (!vfoa_lock && !vfob_lock)
            {
                QRP2000_XTRV_enabled = radBandX8.Checked;

                if (radBandX8.Checked)
                {
                    BandX8(false, true, false);
                    RXOnly = xBand[8].rx_only;
                }
                else
                {
                    last_band = xBand[8].name;
                    SaveBand();
                }
            }
        }

        private void BandX8(bool save_band_stack, bool get_band_stack, bool clicked)
        {
            if (save_band_stack)
                SaveBand();

            if (last_band.Equals(xBand[8].name) && save_band_stack && get_band_stack && !clicked)
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_X8_index = (band_X11_index - 1 + band_X8_register) % Math.Max(band_X8_register, 1);
                else
                    band_X8_index = (band_X8_index + 1) % Math.Max(band_X8_register, 1);
            }
            else if (last_band.Equals(xBand[8].name) && get_band_stack && save_band_stack && clicked)
            {
                band_X8_index = (band_X8_index + 1) % Math.Max(band_X8_register, 1);
            }

            string filterMainRX, filterSubRX, modeMainRX, modeSubRX;
            double freqA;
            double freqB;
            double losc_freq;
            int af, rf, sql1, sql2;
            double pwr;
            bool sql1_on, sql2_on;

            if (get_band_stack)
            {
                CurrentBand = Band.BX8;

                if (DB.GetBandStack(xBand[8].name, band_X8_index, out modeMainRX, out modeSubRX, out filterMainRX, out filterSubRX,
                    out freqA, out freqB, out losc_freq, out af, out rf, out pwr, out sql1, out sql1_on, out sql2, out sql2_on))
                {
                    SetBand(modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq, af, rf, pwr, sql1, sql1_on, sql2, sql2_on);
                }
                else
                {
                    if (xBand[8].name != "")
                    {
                        DB.AddBandStack(xBand[8].name, "CWU", "F7", xBand[8].freq_min, AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked,
                        SquelchSubRX, chkSQLSubRX.Checked);
                        DB.AddBandStack(xBand[8].name, "USB", "F7", xBand[8].freq_min, AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked,
                        SquelchSubRX, chkSQLSubRX.Checked);
                        DB.AddBandStack(xBand[8].name, "USB", "F7", xBand[8].freq_min, AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked,
                        SquelchSubRX, chkSQLSubRX.Checked);
                        DB.Update();
                        UpdateBandStackRegisters();
                    }
                }

                MaxFreq = LOSCFreq + DttSP.SampleRate / 2 * 1e-6;
                MinFreq = LOSCFreq - DttSP.SampleRate / 2 * 1e-6;
                NewVFOLargeFont = new_vfo_large_font;  // refresh Hover
                NewVFOSmallFont = new_vfo_small_font;
                VFOLargeFont = vfo_large_font;
                VFOSmallFont = vfo_small_font;
                WBIR_state = WBIR_State.NoAdapt;
            }
        }

        private void radBandX9_Click(object sender, EventArgs e)
        {
            run_memory_zap = false;

            if (!radBandX9.Checked)
                BandX9(true, false, false);
            else
            {
                if (last_band == xBand[9].name)
                    BandX9(true, true, true);
                else
                    last_band = xBand[9].name;
            }
        }

        private void radBandX9_CheckedChanged(object sender, EventArgs e)
        {
            run_memory_zap = false;

            if (!vfoa_lock && !vfob_lock)
            {
                QRP2000_XTRV_enabled = radBandX9.Checked;

                if (radBandX9.Checked)
                {
                    BandX9(false, true, false);
                    RXOnly = xBand[9].rx_only;
                }
                else
                {
                    last_band = xBand[9].name;
                    SaveBand();
                }
            }
        }

        private void BandX9(bool save_band_stack, bool get_band_stack, bool clicked)
        {
            if (save_band_stack)
                SaveBand();

            if (last_band.Equals(xBand[9].name) && save_band_stack && get_band_stack && !clicked)
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_X9_index = (band_X9_index - 1 + band_X9_register) % Math.Max(band_X9_register, 1);
                else
                    band_X9_index = (band_X9_index + 1) % Math.Max(band_X9_register, 1);
            }
            else if (last_band.Equals(xBand[9].name) && get_band_stack && save_band_stack && clicked)
            {
                band_X9_index = (band_X9_index + 1) % Math.Max(band_X9_register, 1);
            }

            string filterMainRX, filterSubRX, modeMainRX, modeSubRX;
            double freqA;
            double freqB;
            double losc_freq;
            int af, rf, sql1, sql2;
            double pwr;
            bool sql1_on, sql2_on;

            if (get_band_stack)
            {
                CurrentBand = Band.BX9;

                if (DB.GetBandStack(xBand[9].name, band_X9_index, out modeMainRX, out modeSubRX, out filterMainRX, out filterSubRX,
                    out freqA, out freqB, out losc_freq, out af, out rf, out pwr, out sql1, out sql1_on, out sql2, out sql2_on))
                {
                    SetBand(modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq, af, rf, pwr, sql1, sql1_on, sql2, sql2_on);
                }
                else
                {
                    if (xBand[9].name != "")
                    {
                        DB.AddBandStack(xBand[9].name, "CWU", "F7", xBand[9].freq_min, AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked,
                        SquelchSubRX, chkSQLSubRX.Checked);
                        DB.AddBandStack(xBand[9].name, "USB", "F7", xBand[9].freq_min, AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked,
                        SquelchSubRX, chkSQLSubRX.Checked);
                        DB.AddBandStack(xBand[9].name, "USB", "F7", xBand[9].freq_min, AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked,
                        SquelchSubRX, chkSQLSubRX.Checked);
                        DB.Update();
                        UpdateBandStackRegisters();
                    }
                }

                MaxFreq = LOSCFreq + DttSP.SampleRate / 2 * 1e-6;
                MinFreq = LOSCFreq - DttSP.SampleRate / 2 * 1e-6;
                NewVFOLargeFont = new_vfo_large_font;  // refresh Hover
                NewVFOSmallFont = new_vfo_small_font;
                VFOLargeFont = vfo_large_font;
                VFOSmallFont = vfo_small_font;
                WBIR_state = WBIR_State.NoAdapt;
            }
        }

        private void radBandX10_Click(object sender, EventArgs e)
        {
            run_memory_zap = false;

            if (!radBandX10.Checked)
                BandX10(true, false, false);
            else
            {
                if (last_band == xBand[10].name)
                    BandX10(true, true, true);
                else
                    last_band = xBand[10].name;
            }
        }

        private void radBandX10_CheckedChanged(object sender, EventArgs e)
        {
            run_memory_zap = false;

            if (!vfoa_lock && !vfob_lock)
            {
                QRP2000_XTRV_enabled = radBandX10.Checked;

                if (radBandX10.Checked)
                {
                    BandX10(false, true, false);
                    RXOnly = xBand[10].rx_only;
                }
                else
                {
                    last_band = xBand[10].name;
                    SaveBand();
                }
            }
        }

        private void BandX10(bool save_band_stack, bool get_band_stack, bool clicked)
        {
            if (save_band_stack)
                SaveBand();

            if (last_band.Equals(xBand[10].name) && save_band_stack && get_band_stack && !clicked)
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_X10_index = (band_X10_index - 1 + band_X11_register) % Math.Max(band_X10_register, 1);
                else
                    band_X10_index = (band_X10_index + 1) % Math.Max(band_X10_register, 1);
            }
            else if (last_band.Equals(xBand[10].name) && get_band_stack && save_band_stack && clicked)
            {
                band_X10_index = (band_X10_index + 1) % Math.Max(band_X10_register, 1);
            }

            string filterMainRX, filterSubRX, modeMainRX, modeSubRX;
            double freqA;
            double freqB;
            double losc_freq;
            int af, rf, sql1, sql2;
            double pwr;
            bool sql1_on, sql2_on;

            if (get_band_stack)
            {
                CurrentBand = Band.BX10;

                if (DB.GetBandStack(xBand[10].name, band_X10_index, out modeMainRX, out modeSubRX, out filterMainRX, out filterSubRX,
                    out freqA, out freqB, out losc_freq, out af, out rf, out pwr, out sql1, out sql1_on, out sql2, out sql2_on))
                {
                    SetBand(modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq, af, rf, pwr, sql1, sql1_on, sql2, sql2_on);
                }
                else
                {
                    if (xBand[10].name != "")
                    {
                        DB.AddBandStack(xBand[10].name, "CWU", "F7", xBand[10].freq_min, AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked,
                        SquelchSubRX, chkSQLSubRX.Checked);
                        DB.AddBandStack(xBand[10].name, "USB", "F7", xBand[10].freq_min, AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked,
                        SquelchSubRX, chkSQLSubRX.Checked);
                        DB.AddBandStack(xBand[10].name, "USB", "F7", xBand[10].freq_min, AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked,
                        SquelchSubRX, chkSQLSubRX.Checked);
                        DB.Update();
                        UpdateBandStackRegisters();
                    }
                }

                MaxFreq = LOSCFreq + DttSP.SampleRate / 2 * 1e-6;
                MinFreq = LOSCFreq - DttSP.SampleRate / 2 * 1e-6;
                NewVFOLargeFont = new_vfo_large_font;  // refresh Hover
                NewVFOSmallFont = new_vfo_small_font;
                VFOLargeFont = vfo_large_font;
                VFOSmallFont = vfo_small_font;
                WBIR_state = WBIR_State.NoAdapt;
            }
        }

        private void radBandX11_Click(object sender, EventArgs e)
        {
            run_memory_zap = false;

            if (!radBandX11.Checked)
                BandX11(true, false, false);
            else
            {
                if (last_band == xBand[11].name)
                    BandX11(true, true, true);
                else
                    last_band = xBand[11].name;
            }
        }

        private void radBandX11_CheckedChanged(object sender, EventArgs e)
        {
            run_memory_zap = false;

            if (!vfoa_lock && !vfob_lock)
            {
                QRP2000_XTRV_enabled = radBandX11.Checked;

                if (radBandX11.Checked)
                {
                    BandX11(false, true, false);
                    RXOnly = xBand[11].rx_only;
                }
                else
                {
                    last_band = xBand[11].name;
                    SaveBand();
                }
            }
        }

        private void BandX11(bool save_band_stack, bool get_band_stack, bool clicked)
        {
            if (save_band_stack)
                SaveBand();

            if (last_band.Equals(xBand[11].name) && save_band_stack && get_band_stack && !clicked)
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_X11_index = (band_X11_index - 1 + band_X11_register) % Math.Max(band_X11_register, 1);
                else
                    band_X11_index = (band_X11_index + 1) % Math.Max(band_X11_register, 1);
            }
            else if (last_band.Equals(xBand[11].name) && get_band_stack && save_band_stack && clicked)
            {
                band_X11_index = (band_X11_index + 1) % Math.Max(band_X11_register, 1);
            }

            string filterMainRX, filterSubRX, modeMainRX, modeSubRX;
            double freqA;
            double freqB;
            double losc_freq;
            int af, rf, sql1, sql2;
            double pwr;
            bool sql1_on, sql2_on;

            if (get_band_stack)
            {
                CurrentBand = Band.BX11;

                if (DB.GetBandStack(xBand[11].name, band_X11_index, out modeMainRX, out modeSubRX, out filterMainRX, out filterSubRX,
                    out freqA, out freqB, out losc_freq, out af, out rf, out pwr, out sql1, out sql1_on, out sql2, out sql2_on))
                {
                    SetBand(modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq, af, rf, pwr, sql1, sql1_on, sql2, sql2_on);
                }
                else
                {
                    if (xBand[11].name != "")
                    {
                        DB.AddBandStack(xBand[11].name, "CWU", "F7", xBand[11].freq_min, AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked,
                        SquelchSubRX, chkSQLSubRX.Checked);
                        DB.AddBandStack(xBand[11].name, "USB", "F7", xBand[11].freq_min, AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked,
                        SquelchSubRX, chkSQLSubRX.Checked);
                        DB.AddBandStack(xBand[11].name, "USB", "F7", xBand[11].freq_min, AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked,
                        SquelchSubRX, chkSQLSubRX.Checked);
                        DB.Update();
                        UpdateBandStackRegisters();
                    }
                }

                MaxFreq = LOSCFreq + DttSP.SampleRate / 2 * 1e-6;
                MinFreq = LOSCFreq - DttSP.SampleRate / 2 * 1e-6;
                NewVFOLargeFont = new_vfo_large_font;  // refresh Hover
                NewVFOSmallFont = new_vfo_small_font;
                VFOLargeFont = vfo_large_font;
                VFOSmallFont = vfo_small_font;
                WBIR_state = WBIR_State.NoAdapt;
            }
        }

        private void radBandX12_Click(object sender, EventArgs e)
        {
            run_memory_zap = false;

            if (!radBandX12.Checked)
                BandX12(true, false, false);
            else
            {
                if (last_band == xBand[12].name)
                    BandX12(true, true, true);
                else
                    last_band = xBand[12].name;
            }
        }

        private void radBandX12_CheckedChanged(object sender, EventArgs e)
        {
            run_memory_zap = false;

            if (!vfoa_lock && !vfob_lock)
            {
                QRP2000_XTRV_enabled = radBandX12.Checked;

                if (radBandX12.Checked)
                {
                    BandX12(false, true, false);
                    RXOnly = xBand[12].rx_only;
                }
                else
                {
                    last_band = xBand[12].name;
                    SaveBand();
                }
            }
        }

        private void BandX12(bool save_band_stack, bool get_band_stack, bool clicked)
        {
            if (save_band_stack)
                SaveBand();

            if (last_band.Equals(xBand[12].name) && save_band_stack && get_band_stack && !clicked)
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_X12_index = (band_X12_index - 1 + band_X12_register) % Math.Max(band_X12_register, 1);
                else
                    band_X12_index = (band_X12_index + 1) % Math.Max(band_X12_register, 1);
            }
            else if (last_band.Equals(xBand[12].name) && get_band_stack && save_band_stack && clicked)
            {
                band_X12_index = (band_X12_index + 1) % Math.Max(band_X12_register, 1);
            }

            string filterMainRX, filterSubRX, modeMainRX, modeSubRX;
            double freqA;
            double freqB;
            double losc_freq;
            int af, rf, sql1, sql2;
            double pwr;
            bool sql1_on, sql2_on;

            if (get_band_stack)
            {
                CurrentBand = Band.BX12;

                if (DB.GetBandStack(xBand[12].name, band_X12_index, out modeMainRX, out modeSubRX, out filterMainRX, out filterSubRX,
                    out freqA, out freqB, out losc_freq, out af, out rf, out pwr, out sql1, out sql1_on, out sql2, out sql2_on))
                {
                    SetBand(modeMainRX, modeSubRX, filterMainRX, filterSubRX, freqA, freqB, losc_freq, af, rf, pwr, sql1, sql1_on, sql2, sql2_on);
                }
                else
                {
                    if (xBand[12].name != "")
                    {
                        DB.AddBandStack(xBand[12].name, "CWU", "F7", xBand[12].freq_min, AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked,
                        SquelchSubRX, chkSQLSubRX.Checked);
                        DB.AddBandStack(xBand[12].name, "USB", "F7", xBand[12].freq_min, AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked,
                        SquelchSubRX, chkSQLSubRX.Checked);
                        DB.AddBandStack(xBand[12].name, "USB", "F7", xBand[12].freq_min, AF, RF, PWR, SquelchMainRX, chkSQLMainRX.Checked,
                        SquelchSubRX, chkSQLSubRX.Checked);
                        DB.Update();
                        UpdateBandStackRegisters();
                    }
                }

                MaxFreq = LOSCFreq + DttSP.SampleRate / 2 * 1e-6;
                MinFreq = LOSCFreq - DttSP.SampleRate / 2 * 1e-6;
                NewVFOLargeFont = new_vfo_large_font;  // refresh Hover
                NewVFOSmallFont = new_vfo_small_font;
                VFOLargeFont = vfo_large_font;
                VFOSmallFont = vfo_small_font;
                WBIR_state = WBIR_State.NoAdapt;
            }
        }

        #endregion

        #region XTRV

        private void xTRVToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (XTRVForm == null || XTRVForm.IsDisposed)
            {
                XTRVForm = new XTRV(this);
                XTRVForm.StartPosition = FormStartPosition.Manual;
            }

            XTRVForm.Show();
            XTRVForm.Focus();

            Win32.SetWindowPos(XTRVForm.Handle.ToInt32(),
                -1, this.Left, this.Top, XTRVForm.Width, XTRVForm.Height, 0);
        }

        public void XTRV_cross_thread_callback(int nr, string btn_txt, double f_min, double f_max, double losc,
            double pa_pwr, double pa_gain, bool rx_only)
        {
            try
            {
                switch (nr)
                {
                    case 1:
                        radBandX1.Text = btn_txt;
                        xBand[1].freq_min = f_min;
                        xBand[1].freq_max = f_max;
                        xBand[1].losc = losc;
                        xBand[1].pa_gain = pa_gain;
                        xBand[1].pa_pwr = pa_pwr;
                        xBand[1].rx_only = rx_only;
                        xBand[1].name = btn_txt;
                        break;
                    case 2:
                        radBandX2.Text = btn_txt;
                        xBand[2].freq_min = f_min;
                        xBand[2].freq_max = f_max;
                        xBand[2].losc = losc;
                        xBand[2].pa_gain = pa_gain;
                        xBand[2].pa_pwr = pa_pwr;
                        xBand[2].rx_only = rx_only;
                        xBand[2].name = btn_txt;
                        break;
                    case 3:
                        radBandX3.Text = btn_txt;
                        xBand[3].freq_min = f_min;
                        xBand[3].freq_max = f_max;
                        xBand[3].losc = losc;
                        xBand[3].pa_gain = pa_gain;
                        xBand[3].pa_pwr = pa_pwr;
                        xBand[3].rx_only = rx_only;
                        xBand[3].name = btn_txt;
                        break;
                    case 4:
                        radBandX4.Text = btn_txt;
                        xBand[4].freq_min = f_min;
                        xBand[4].freq_max = f_max;
                        xBand[4].losc = losc;
                        xBand[4].pa_gain = pa_gain;
                        xBand[4].pa_pwr = pa_pwr;
                        xBand[4].rx_only = rx_only;
                        xBand[4].name = btn_txt;
                        break;
                    case 5:
                        radBandX5.Text = btn_txt;
                        xBand[5].freq_min = f_min;
                        xBand[5].freq_max = f_max;
                        xBand[5].losc = losc;
                        xBand[5].pa_gain = pa_gain;
                        xBand[5].pa_pwr = pa_pwr;
                        xBand[5].rx_only = rx_only;
                        xBand[5].name = btn_txt;
                        break;
                    case 6:
                        radBandX6.Text = btn_txt;
                        xBand[6].freq_min = f_min;
                        xBand[6].freq_max = f_max;
                        xBand[6].losc = losc;
                        xBand[6].pa_gain = pa_gain;
                        xBand[6].pa_pwr = pa_pwr;
                        xBand[6].rx_only = rx_only;
                        xBand[6].name = btn_txt;
                        break;
                    case 7:
                        radBandX7.Text = btn_txt;
                        xBand[7].freq_min = f_min;
                        xBand[7].freq_max = f_max;
                        xBand[7].losc = losc;
                        xBand[7].pa_gain = pa_gain;
                        xBand[7].pa_pwr = pa_pwr;
                        xBand[7].rx_only = rx_only;
                        xBand[7].name = btn_txt;
                        break;
                    case 8:
                        radBandX8.Text = btn_txt;
                        xBand[8].freq_min = f_min;
                        xBand[8].freq_max = f_max;
                        xBand[8].losc = losc;
                        xBand[8].pa_gain = pa_gain;
                        xBand[8].pa_pwr = pa_pwr;
                        xBand[8].rx_only = rx_only;
                        xBand[8].name = btn_txt;
                        break;
                    case 9:
                        radBandX9.Text = btn_txt;
                        xBand[9].freq_min = f_min;
                        xBand[9].freq_max = f_max;
                        xBand[9].losc = losc;
                        xBand[9].pa_gain = pa_gain;
                        xBand[9].pa_pwr = pa_pwr;
                        xBand[9].rx_only = rx_only;
                        xBand[9].name = btn_txt;
                        break;
                    case 10:
                        radBandX10.Text = btn_txt;
                        xBand[10].freq_min = f_min;
                        xBand[10].freq_max = f_max;
                        xBand[10].losc = losc;
                        xBand[10].pa_gain = pa_gain;
                        xBand[10].pa_pwr = pa_pwr;
                        xBand[10].rx_only = rx_only;
                        xBand[10].name = btn_txt;
                        break;
                    case 11:
                        radBandX11.Text = btn_txt;
                        xBand[11].freq_min = f_min;
                        xBand[11].freq_max = f_max;
                        xBand[11].losc = losc;
                        xBand[11].pa_gain = pa_gain;
                        xBand[11].pa_pwr = pa_pwr;
                        xBand[11].rx_only = rx_only;
                        xBand[11].name = btn_txt;
                        break;
                    case 12:
                        radBandX12.Text = btn_txt;
                        xBand[12].freq_min = f_min;
                        xBand[12].freq_max = f_max;
                        xBand[12].losc = losc;
                        xBand[12].pa_gain = pa_gain;
                        xBand[12].pa_pwr = pa_pwr;
                        xBand[12].rx_only = rx_only;
                        xBand[12].name = btn_txt;
                        break;
                }

                if (MOX)
                    PWR_ValueChanged();
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        #endregion

        #region DebugMsg

        private void debugToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (debug == null || debug.IsDisposed)
            {
                debug = new DebugForm(this, false);
                debug.StartPosition = FormStartPosition.Manual;
            }

            debug.Show();
            debug.Focus();
            Win32.SetWindowPos(debug.Handle.ToInt32(),
                -1, this.Left, this.Top, debug.Width, debug.Height, 0);
        }

        public void DebugCallback(string msg)
        {
            try
            {
                switch (msg)
                {
                    default:
                        if (debug != null && debug.Visible)
                        {
                            debug.rtbDebugMsg.AppendText(msg + "\n");
                            SendMessage(debug.rtbDebugMsg.Handle, WM_VSCROLL, SB_BOTTOM, 0);
                        }
                        break;
                }
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        public void DebugInvokeCallback(string msg)
        {
            this.Invoke(new DebugCallbackFunction(DebugCallback), msg);
        }

        #endregion

        #region G6

        public void GenesisG6CommandCallback(string command)
        {
            try
            {
                if (debug != null && debug.Visible)
                {
                    this.Invoke(new DebugCallbackFunction(DebugCallback), command);
                }

                switch (command)
                {
                    case "USB_DISC":
                            btnUSB.BackColor = Color.Red;

                            if (chkPower.Checked)
                                chkPower.Checked = false;
                        break;

                    case "USB_CONN":
                            btnUSB.BackColor = Color.Green;
                        break;

                    default:
                        {

                        }
                        break;
                }
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private bool G6Init()
        {
            try
            {
                g6.WriteToDevice(14, 0);                                    // transmiter OFF
                //DttSP.ResizeSDR(0, block_size1);
                DttSP.SetMode(0, 0, CurrentDSPMode);
                CurrentFilter = CurrentFilter;
                DttSP.SetMode(0, 1, CurrentDSPModeSubRX);
                CurrentFilterSubRX = current_filter_subRX;
                SampleRate1 = sample_rate1;                                 // force refresh
                Thread.Sleep(300);
                //g6.WriteToDevice(26, 0);                                  // Line in
                //g6.WriteToDevice(0, 0);
                g6.WriteToDevice(24, 0);                                    // CW monitor off
                ExtPA_PTT_Inverted = extPA_PTT_inverted;
                Genesis_EXT_PA_present = genesis_ext_PA_present;            // force reload
                G6SetBandFilter(vfoAFreq);

                if (g6_auto_correction)
                    g6.WriteToDevice(22, 1);
                else
                    g6.WriteToDevice(22, 0);

                g6.BufferSize = Audio.BlockSize;
                g6.WriteToDevice(30, 0);

                G6_setup_keyer();

                Thread.Sleep(1);
                G6XTRV_separateRXTX = G6_XTRV_separate_RXTX;                // force refresh
                Thread.Sleep(1);
                chkG6AF_CheckedChanged(this, EventArgs.Empty);
                Thread.Sleep(1);
                chkG6ATT_12dB_CheckedChanged(this, EventArgs.Empty);
                Thread.Sleep(1);
                chkG6ATT_18dB_CheckedChanged(this, EventArgs.Empty);
                Thread.Sleep(1);
                chkG6ATT_CheckedChanged(this, EventArgs.Empty);
                Thread.Sleep(1);
                chkG6RF_CheckedChanged(this, EventArgs.Empty);
                Thread.Sleep(1);

                //Thread.Sleep(1);
                G6SecRXAnt = G6_sec_rx_ant;                                 // second RX antenna force reload
                double freq = loscFreq;
                freq *= 1e6;
                g6.Si570_freq = 56000000;                                   // reinit!
                g6.Set_frequency((long)Math.Round(freq, 6), true);

                int length;
                string text = VFOAFreq.ToString("f6") + "MHz";
                length = (16 - text.Length) / 2;
                text = text.PadRight(text.Length + length, ' ');
                text = text.PadLeft(16, ' ');
                g6.WriteLCDtext(text, 0, 0);

                return true;
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
                return false;
            }
        }

        public void G6_setup_keyer()
        {
            DSPMode tmp_mode;

            if (chkVFOSplit.Checked)
                tmp_mode = current_dsp_mode_subRX;
            else
                tmp_mode = current_dsp_mode;

            g6.KEYER = 0xff;   // reset data
            g6.WriteToDevice(4,
                (long)(5 * 1200 / SetupForm.G59CWSpeed));                                       // write CW keyer speed
            //g6.WriteToDevice(4,
                //(long)(1200 / (SetupForm.G59CWSpeed * SetupForm.G59CWSpeedCorrection)));        // write CW keyer speed
            g6.WriteToDevice(20, (long)(SetupForm.G59DASH_DOT_ratio * 10));                     // write DASH/DOT ratio

            if (tmp_mode == DSPMode.CWL || tmp_mode == DSPMode.CWU)
            {
                switch (SetupForm.GenesisKeyerMode)
                {
                    case Keyer_mode.Iambic_B_Mode:
                        g6.WriteToDevice(18, (long)Keyer_mode.Iambic_B_Mode);
                        g6.KeyerMode = (short)Keyer_mode.Iambic_B_Mode;
                        break;

                    case Keyer_mode.Iambic:
                        g6.WriteToDevice(18, (long)Keyer_mode.Iambic);
                        g6.KeyerMode = (short)Keyer_mode.Iambic;
                        break;

                    case Keyer_mode.Iambic_Reverse_B_Mode:
                        g6.WriteToDevice(18, (long)Keyer_mode.Iambic_Reverse_B_Mode);
                        g6.KeyerMode = (short)Keyer_mode.Iambic_Reverse_B_Mode;
                        break;

                    case Keyer_mode.IambicReverse:
                        g6.WriteToDevice(18, (long)Keyer_mode.IambicReverse);
                        g6.KeyerMode = (short)Keyer_mode.IambicReverse;
                        break;

                    case Keyer_mode.HandKey:
                        g6.WriteToDevice(18, (long)Keyer_mode.HandKey);
                        g6.KeyerMode = (short)Keyer_mode.HandKey;
                        break;
                }
            }
            else
            {
                g6.WriteToDevice(18, (long)Keyer_mode.PHONE);
                g6.KeyerMode = (short)Keyer_mode.PHONE;
            }
        }

        private void chkG6AF_CheckedChanged(object sender, EventArgs e)
        {
            if (current_model == Model.GENESIS_G6)
            {
                if (chkG6AF.Checked)
                {
                    chkG6AF.BackColor = Color.GreenYellow;
                    lblAFNewVFO.BackColor = Color.Red;
                    g6.WriteToDevice(5, 0);                      // AF ON
                }
                else
                {
                    chkG6AF.BackColor = SystemColors.Control;
                    lblAFNewVFO.BackColor = NewBackgroundVFOColor;
                    g6.WriteToDevice(6, 0);                      // AF OFF
                }

                WBIR_state = WBIR_State.DelayAdapt;

                if (EthCATIsActive)
                    CAT_client_socket.ClientServerSync("ZZGA;");                    // sync with server

                if (!MOX)
                {
                    if (vfo_new_look)
                        txtLOSCnew_LostFocus(null, null);
                    else
                        txtLOSCFreq_LostFocus(null, null);                              // force WBIR reinit!
                }
            }
        }

        private void chkG6RF_CheckedChanged(object sender, EventArgs e)
        {
            if (current_model == Model.GENESIS_G6)
            {
                if (chkG6RF.Checked)
                {
                    chkG6RF.BackColor = Color.GreenYellow;
                    lblRFNewVFO.BackColor = Color.Red;
                    g6.WriteToDevice(11, 0);               // PREAMP ON
                }
                else
                {
                    chkG6RF.BackColor = SystemColors.Control;
                    lblRFNewVFO.BackColor = NewBackgroundVFOColor;
                    g6.WriteToDevice(12, 0);               // PREAMP OFF
                }

                WBIR_state = WBIR_State.DelayAdapt;

                if (EthCATIsActive)
                    CAT_client_socket.ClientServerSync("ZZGR;");                // sync with server

                if (!MOX)
                {
                    if (vfo_new_look)
                        txtLOSCnew_LostFocus(null, null);
                    else
                        txtLOSCFreq_LostFocus(null, null);                          // force WBIR reinit!
                }
            }
        }

        private void chkG6ATT_CheckedChanged(object sender, EventArgs e)        // -6dB ATT
        {
            if (current_model == Model.GENESIS_G6)
            {
                if (chkG6ATT_6dB.Checked)
                {
                    chkG6ATT_6dB.BackColor = Color.GreenYellow;
                    lblATTNewVFO.BackColor = Color.Red;
                    g6.WriteToDevice(16, 1);                       // ATT ON
                }
                else
                {
                    chkG6ATT_6dB.BackColor = SystemColors.Control;
                    lblATTNewVFO.BackColor = NewBackgroundVFOColor;
                    g6.WriteToDevice(17, 1);                       // ATT OFF
                }

                WBIR_state = WBIR_State.DelayAdapt;


                if (EthCATIsActive)
                    CAT_client_socket.ClientServerSync("ZZGN;");                    // sync with server

                if (!MOX)
                {
                    if (vfo_new_look)
                        txtLOSCnew_LostFocus(null, null);
                    else
                        txtLOSCFreq_LostFocus(null, null);                              // force WBIR reinit!
                }
            }
        }

        private void chkG6ATT_12dB_CheckedChanged(object sender, EventArgs e)       // -12dB ATT
        {

            if (chkG6ATT_12dB.Checked)
            {
                chkG6ATT_12dB.BackColor = Color.GreenYellow;
                lblATTNewVFO.BackColor = Color.Red;
                g6.WriteToDevice(16, 3);                       // ATT ON
            }
            else
            {
                chkG6ATT_12dB.BackColor = SystemColors.Control;
                lblATTNewVFO.BackColor = NewBackgroundVFOColor;
                g6.WriteToDevice(17, 3);                       // ATT OFF
            }

            WBIR_state = WBIR_State.DelayAdapt;


            if (EthCATIsActive)
                CAT_client_socket.ClientServerSync("ZZGN;");                    // sync with server

            if (!MOX)
            {
                if (vfo_new_look)
                    txtLOSCnew_LostFocus(null, null);
                else
                    txtLOSCFreq_LostFocus(null, null);                              // force WBIR reinit!
            }
        }

        private void chkG6ATT_18dB_CheckedChanged(object sender, EventArgs e)   // -18dB ATT
        {
            if (chkG6ATT_18dB.Checked)
            {
                chkG6ATT_18dB.BackColor = Color.GreenYellow;
                lblATTNewVFO.BackColor = Color.Red;
                g6.WriteToDevice(16, 2);                       // ATT ON
            }
            else
            {
                chkG6ATT_18dB.BackColor = SystemColors.Control;
                lblATTNewVFO.BackColor = NewBackgroundVFOColor;
                g6.WriteToDevice(17, 2);                       // ATT OFF
            }

            WBIR_state = WBIR_State.DelayAdapt;


            if (EthCATIsActive)
                CAT_client_socket.ClientServerSync("ZZGN;");                    // sync with server

            if (!MOX)
            {
                if (vfo_new_look)
                    txtLOSCnew_LostFocus(null, null);
                else
                    txtLOSCFreq_LostFocus(null, null);                              // force WBIR reinit!
            }
        }

        public void G6SetBandFilter(double freq)
        {
            try
            {
                Band b = BandFilterByFreq(freq);

                if (IsXTRV(freq))
                {
                    switch (b)
                    {
                        case Band.BX1:
                            freq -= xBand[1].losc;
                            break;

                        case Band.BX2:
                            freq -= xBand[2].losc;
                            break;

                        case Band.BX3:
                            freq -= xBand[3].losc;
                            break;

                        case Band.BX4:
                            freq -= xBand[4].losc;
                            break;

                        case Band.BX5:
                            freq -= xBand[5].losc;
                            break;

                        case Band.BX6:
                            freq -= xBand[6].losc;
                            break;

                        case Band.BX7:
                            freq -= xBand[7].losc;
                            break;

                        case Band.BX8:
                            freq -= xBand[8].losc;
                            break;

                        case Band.BX9:
                            freq -= xBand[9].losc;
                            break;

                        case Band.BX10:
                            freq -= xBand[10].losc;
                            break;

                        case Band.BX11:
                            freq -= xBand[11].losc;
                            break;

                        case Band.BX12:
                            freq -= xBand[12].losc;
                            break;
                    }

                    b = BandFilterByFreq(freq);
                }

                switch (b)
                {
                    case Band.A1:
                        g6.WriteToDevice(3, (long)1);
                        break;

                    case Band.A2:
                        g6.WriteToDevice(3, (long)2);
                        break;

                    case Band.A3:
                        g6.WriteToDevice(3, (long)3);
                        break;

                    case Band.A4:
                        g6.WriteToDevice(3, (long)4);
                        break;

                    case Band.B1:
                        g6.WriteToDevice(3, (long)5);
                        break;

                    case Band.B2:
                        g6.WriteToDevice(3, (long)6);
                        break;

                    case Band.B3:
                        g6.WriteToDevice(3, (long)7);
                        break;

                    case Band.B4:
                        g6.WriteToDevice(3, (long)8);
                        break;

                    case Band.B5:
                        g6.WriteToDevice(3, (long)9);
                        break;

                    case Band.B6:
                        g6.WriteToDevice(3, (long)10);
                        break;

                    case Band.B7:
                        g6.WriteToDevice(3, (long)11);
                        break;

                    case Band.B8:
                        g6.WriteToDevice(3, (long)12);
                        break;
                    case Band.B9:
                        g6.WriteToDevice(3, (long)13);
                        break;

                    case Band.B10:
                        g6.WriteToDevice(3, (long)14);
                        break;

                    case Band.C1:
                        g6.WriteToDevice(3, (long)15);
                        break;

                    case Band.C2:
                        g6.WriteToDevice(3, (long)16);
                        break;

                    case Band.C3:
                        g6.WriteToDevice(3, (long)17);
                        break;

                    case Band.C4:
                        g6.WriteToDevice(3, (long)18);
                        break;

                    case Band.C5:
                        g6.WriteToDevice(3, (long)19);
                        break;

                    default:
                        g6.WriteToDevice(3, (long)11);      // B7 12-17MHz default
                        break;
                }

                Thread.Sleep(1);
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        #endregion

        #region FM group

        private void chkCTCSS_CheckedChanged(object sender, EventArgs e)
        {
            try
            {
                double freq = 67.0;
                DttSP.EnableCTCSS(0, chkCTCSS.Checked);
                freq = Math.Max(67.0, double.Parse(comboFMCTCSSFreq.Text, CultureInfo.InvariantCulture));
                DttSP.SetCTCSSOscFreq(0, freq);
                DttSP.SetCTCSSAmplitude(0, 0.05);
                ctcss = chkCTCSS.Checked;

                if (debug != null && debug.Visible)
                {
                    this.Invoke(new DebugCallbackFunction(DebugCallback), "CTCSS freq: " + freq.ToString("f1"));
                }
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private void comboFMCTCSSFreq_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                double freq = 67.0;
                freq = Math.Max(67.0, double.Parse(comboFMCTCSSFreq.Text, CultureInfo.InvariantCulture));
                DttSP.SetCTCSSOscFreq(0, freq);
                DttSP.SetCTCSSAmplitude(0, 0.05);
                ctcss_freq = freq;

                if (debug != null && debug.Visible)
                {
                    this.Invoke(new DebugCallbackFunction(DebugCallback), "CTCSS freq: " + freq.ToString("f1"));
                }
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private void radFMModeLow_CheckedChanged(object sender, EventArgs e)
        {
            try
            {
                if (radFMModeLow.Checked)
                    rptr_mode = RPTRmode.low;

            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private void radFMModeSimplex_CheckedChanged(object sender, EventArgs e)
        {
            try
            {
                if (radFMModeSimplex.Checked)
                    rptr_mode = RPTRmode.simplex;
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private void radFMModeHigh_CheckedChanged(object sender, EventArgs e)
        {
            try
            {
                if (radFMModeHigh.Checked)
                    rptr_mode = RPTRmode.high;
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private void lblFMMemory_Click(object sender, EventArgs e)
        {
            try
            {
                btnFMMR_Click(this, EventArgs.Empty);
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private void lblFMMemory_MouseHover(object sender, EventArgs e)
        {
            try
            {
                lblFMMemory.Focus();
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private void lblFMMemory_MouseLeave(object sender, EventArgs e)
        {
            try
            {
                if (lblFMMemory.Focused)
                    btnHidden.Focus();
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private void btnFMMR_Click(object sender, EventArgs e)      // read memory
        {
            try
            {
                int number;
                Int32.TryParse(lblFMMemory.Text, out number);
                double vfoa, losc_freq;
                int modeID, filterID, stepID, agcID, squelchID, zoomID, panID;
                bool in_use = false;
                bool ctcss_local = false;
                int rptr_m = 1; // simplex
                double ctcss_f = 67.0;
                double rptr_o = 0.0;
                string text = "";
                ArrayList memory_list;

                memory_list = DB.GetFMMemory(number);

                if (memory_list != null)
                {
                    foreach (string s in memory_list)				// string is in the format "freq,losc,mode,filter,cleared,text"
                    {
                        string[] vals = s.Split('/');

                        string freq = vals[1];
                        Double.TryParse(freq, out vfoa);
                        string losc = vals[2];
                        Double.TryParse(losc, out losc_freq);
                        string ctcss_s = vals[3];
                        bool.TryParse(ctcss_s, out ctcss_local);
                        string ctcss_freq_s = vals[4];
                        Double.TryParse(ctcss_freq_s, out ctcss_f);
                        string rptr_mode_s = vals[5];
                        int.TryParse(rptr_mode_s, out rptr_m);
                        string rptr_s = vals[6];
                        Double.TryParse(rptr_s, out rptr_o);
                        string mode = vals[7];
                        Int32.TryParse(mode, out modeID);
                        string filter = vals[8];
                        Int32.TryParse(filter, out filterID);
                        string step = vals[9];
                        Int32.TryParse(step, out stepID);
                        string agc = vals[10];
                        Int32.TryParse(agc, out agcID);
                        string squelch = vals[11];
                        Int32.TryParse(squelch, out squelchID);
                        string DisplayZoom = vals[12];
                        Int32.TryParse(DisplayZoom, out zoomID);
                        string DisplayPan = vals[13];
                        Int32.TryParse(DisplayPan, out panID);
                        string cleared = vals[14];
                        bool.TryParse(cleared, out in_use);

                        chkCTCSS.Checked = ctcss_local;
                        ctcss_freq = ctcss_f;
                        comboFMCTCSSFreq.Text = ctcss_f.ToString("f1", CultureInfo.InvariantCulture);
                        RPTRmode = (RPTRmode)rptr_m;
                        RPTR_offset = rptr_o;

                        if (!in_use)
                        {
                            memory = true;
                            text = vals[15];
                            txtNewVFOBand.Text = text;
                            txtNewVFOBand.Refresh();
                            txtVFOABand.Text = text;
                            txtVFOABand.Refresh();
                            MemoryRecall(modeID, filterID, vfoa, losc_freq, stepID, agcID, squelchID);
                            ptbDisplayPan.Value = panID;
                            ptbDisplayZoom.Value = zoomID;
                            CalcDisplayFreq();
                            tbDisplayZoom_Scroll(this, EventArgs.Empty);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private void btnFMMS_Click(object sender, EventArgs e)      // store memory
        {
            try
            {
                int number;
                Int32.TryParse(lblFMMemory.Text, out number);               

                if (DB.SaveFMMemory(number, VFOAFreq, LOSCFreq, (int)CurrentDSPMode, (int)current_filter, StepSize,
                    comboAGCMainRX.SelectedIndex, (int)udSQLMainRX.Value, (int)ptbDisplayZoom.Value, (int)ptbDisplayPan.Value,
                    txtNewVFOBand.Text, ctcss, ctcss_freq, rptr_mode, (double)udFMOffset.Value))
                    txtFMmemory_fill();
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private void btnFMMC_Click(object sender, EventArgs e)      // clear memory
        {
            try
            {
                int number;
                btnZAP.Checked = false;
                Int32.TryParse(lblFMMemory.Text, out number);

                if (DB.ClearFMMemory(number))
                    txtFMmemory_fill();
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private void txtFMmemory_fill()
        {
            try
            {
                int number;
                Int32.TryParse(lblFMMemory.Text, out number);
                double vfoa;
                DSPMode mem_mode;
                int modeID;
                ArrayList memory;

                memory = DB.GetFMMemory(number);

                if (memory != null)
                {
                    foreach (string s in memory)				// string is in the format "freq,losc,mode,filter,cleared"
                    {
                        bool in_use = false;
                        string[] vals = s.Split('/');

                        string freq = vals[1];
                        Double.TryParse(freq, out vfoa);
                        string mode = vals[7];
                        Int32.TryParse(mode, out modeID);
                        mem_mode = (DSPMode)modeID;
                        string cleared = vals[14];
                        bool.TryParse(cleared, out in_use);

                        if (!in_use)
                        {
                            txtFMmemory.Text = freq + mem_mode.ToString();
                            lblFMMemory.BackColor = Color.Blue;
                        }
                        else
                        {
                            txtFMmemory.Text = "empty";
                            lblFMMemory.BackColor = Color.Red;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private void eraseAllMemoryToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            try
            {
                DB.ClearFMMemoryTable();
                txtFMmemory_fill();
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private void ptbFMMicGain_OnWheel(MouseEventArgs e)
        {
            try
            {

            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private void ptbFMMicGain_Scroll(object sender, EventArgs e)
        {
            try
            {
                udMIC.Value = ptbFMMicGain.Value;
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private void chkFMMsg1_CheckedChanged(object sender, EventArgs e)
        {
            if (chkFMMsg1.Checked && !VoiceMsgPlayback && !TUN)
            {
                if (!MOX)
                {
                    VoiceMsgPlayback = true;

                    if (VoiceMsgForm != null || VoiceMsgForm.IsDisposed)
                        VoiceMsgForm.Msg1Play = true;

                    chkFMMsg1.BackColor = button_selected_color;
                }
                else
                {
                    VoiceMsgForm.PlayStop = true;
                    VoiceMsgPlayback = false;
                    MOX = false;
                }
            }
            else
            {
                VoiceMsgForm.Msg1Play = false;
                VoiceMsgPlayback = false;
                MOX = false;
            }
        }

        private void chkFMMsg2_CheckedChanged(object sender, EventArgs e)
        {
            if (chkFMMsg2.Checked && !VoiceMsgPlayback && !TUN)
            {
                if (!MOX)
                {
                    VoiceMsgPlayback = true;

                    if (VoiceMsgForm != null || VoiceMsgForm.IsDisposed)
                        VoiceMsgForm.Msg2Play = true;

                    chkFMMsg2.BackColor = button_selected_color;
                }
                else
                {
                    VoiceMsgForm.PlayStop = true;
                    VoiceMsgPlayback = false;
                    MOX = false;
                }
            }
            else
            {
                VoiceMsgForm.Msg2Play = false;
                VoiceMsgPlayback = false;
                MOX = false;
            }
        }

        private void chkFMMsg3_CheckedChanged(object sender, EventArgs e)
        {
            if (chkFMMsg3.Checked && !VoiceMsgPlayback && !TUN)
            {
                if (!MOX)
                {
                    VoiceMsgPlayback = true;

                    if (VoiceMsgForm != null || VoiceMsgForm.IsDisposed)
                        VoiceMsgForm.Msg3Play = true;

                    chkFMMsg3.BackColor = button_selected_color;
                }
                else
                {
                    VoiceMsgForm.PlayStop = true;
                    VoiceMsgPlayback = false;
                    MOX = false;
                }
            }
            else
            {
                VoiceMsgForm.Msg3Play = false;
                VoiceMsgPlayback = false;
                MOX = false;
            }
        }

        private void chkFMMsg4_CheckedChanged(object sender, EventArgs e)
        {
            if (chkFMMsg4.Checked && !VoiceMsgPlayback && !TUN)
            {
                if (!MOX)
                {
                    VoiceMsgPlayback = true;

                    if (VoiceMsgForm != null || VoiceMsgForm.IsDisposed)
                        VoiceMsgForm.Msg4Play = true;

                    chkFMMsg4.BackColor = button_selected_color;
                }
                else
                {
                    VoiceMsgForm.PlayStop = true;
                    VoiceMsgPlayback = false;
                    MOX = false;
                }
            }
            else
            {
                VoiceMsgForm.Msg4Play = false;
                VoiceMsgPlayback = false;
                MOX = false;
            }
        }

        private void chkFMMsg5_CheckedChanged(object sender, EventArgs e)
        {
            if (chkFMMsg5.Checked && !VoiceMsgPlayback && !TUN)
            {
                if (!MOX)
                {
                    VoiceMsgPlayback = true;

                    if (VoiceMsgForm != null || VoiceMsgForm.IsDisposed)
                        VoiceMsgForm.Msg5Play = true;

                    chkFMMsg5.BackColor = button_selected_color;
                }
                else
                {
                    VoiceMsgForm.PlayStop = true;
                    VoiceMsgPlayback = false;
                    MOX = false;
                }
            }
            else
            {
                VoiceMsgForm.Msg5Play = false;
                VoiceMsgPlayback = false;
                MOX = false;
            }
        }

        private void chkFMMsg6_CheckedChanged(object sender, EventArgs e)
        {
            if (chkFMMsg6.Checked && !VoiceMsgPlayback && !TUN)
            {
                if (!MOX)
                {
                    VoiceMsgPlayback = true;

                    if (VoiceMsgForm != null || VoiceMsgForm.IsDisposed)
                        VoiceMsgForm.Msg6Play = true;

                    chkFMMsg6.BackColor = button_selected_color;
                }
                else
                {
                    VoiceMsgForm.PlayStop = true;
                    VoiceMsgPlayback = false;
                    MOX = false;
                }
            }
            else
            {
                VoiceMsgForm.Msg6Play = false;
                VoiceMsgPlayback = false;
                MOX = false;
            }
        }

        private void chkFMMsg1_MouseHover(object sender, EventArgs e)
        {
            if (VoiceMsgForm.txtMsg1 != null)
                toolTip1.SetToolTip(chkFMMsg1, VoiceMsgForm.txtMsg1.Text);
        }

        private void chkFMMsg2_MouseHover(object sender, EventArgs e)
        {
            if (VoiceMsgForm.txtMsg2 != null)
                toolTip1.SetToolTip(chkFMMsg2, VoiceMsgForm.txtMsg2.Text);
        }

        private void chkFMMsg3_MouseHover(object sender, EventArgs e)
        {
            if (VoiceMsgForm.txtMsg3 != null)
                toolTip1.SetToolTip(chkFMMsg3, VoiceMsgForm.txtMsg3.Text);
        }

        private void chkFMMsg4_MouseHover(object sender, EventArgs e)
        {
            if (VoiceMsgForm.txtMsg4 != null)
                toolTip1.SetToolTip(chkFMMsg4, VoiceMsgForm.txtMsg4.Text);
        }

        private void chkFMMsg5_MouseHover(object sender, EventArgs e)
        {
            if (VoiceMsgForm.txtMsg5 != null)
                toolTip1.SetToolTip(chkFMMsg5, VoiceMsgForm.txtMsg5.Text);
        }

        private void chkFMMsg6_MouseHover(object sender, EventArgs e)
        {
            if (VoiceMsgForm.txtMsg6 != null)
                toolTip1.SetToolTip(chkFMMsg6, VoiceMsgForm.txtMsg6.Text);
        }

        private void chkWFMstereo_CheckedChanged(object sender, EventArgs e)
        {
            try
            {
                if (chkWFMstereo.Checked)
                    DttSP.FMenableStereo(0, 0, 1);
                else
                    DttSP.FMenableStereo(0, 0, 0);
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        #endregion

        #region Audio MUTE      // yt7pwr

        private void chkVACMute_CheckedChanged(object sender, EventArgs e)
        {
            VACMute();
        }

        public void VACMute()
        {
            try
            {
                if (chkVACMute.Checked)
                {
                    Audio.vac_mute_ch = SetupForm.MuteVACChannels;

                    switch (Audio.vac_mute_ch)
                    {
                        case MuteChannels.Both:
                            Audio.VACVolumeLeft = 0.0;
                            Audio.VACVolumeRight = 0.0;
                            break;

                        case MuteChannels.Left:
                            Audio.VACVolumeLeft = 0.0;
                            Audio.VACVolumeRight = AF / 100.0;
                            break;

                        case MuteChannels.Right:
                            Audio.VACVolumeRight = 0.0;
                            Audio.VACVolumeLeft = AF / 100.0;
                            break;

                        case MuteChannels.None:
                            Audio.VACVolumeLeft = AF / 100.0;
                            Audio.VACVolumeRight = AF / 100.0;
                            break;
                    }
                }
                else
                {
                    Audio.vac_mute_ch = MuteChannels.None;
                    Audio.VACVolumeLeft = AF / 100.0;
                    Audio.VACVolumeRight = AF / 100.0;
                }
            }
            catch (Exception ex)
            {
                Debug.Write(ex.ToString());
            }
        }

        private MuteChannels mute_ch = MuteChannels.Both;

        private void leftToolStripMenuItem_Click(object sender, EventArgs e)
        {
            mute_ch = MuteChannels.Left;

            if (MUT)
            {
                Audio.mute_ch = MuteChannels.Left;
                Audio.MonitorVolumeLeft = 0.0;
                Audio.MonitorVolumeRight = AF / 100.0;
            }
        }

        private void rightToolStripMenuItem_Click(object sender, EventArgs e)
        {
            mute_ch = MuteChannels.Right;

            if (MUT)
            {
                Audio.mute_ch = MuteChannels.Right;
                Audio.MonitorVolumeRight = 0.0;
                Audio.MonitorVolumeLeft = AF / 100.0;
            }
        }

        private void bothToolStripMenuItem_Click(object sender, EventArgs e)
        {
            mute_ch = MuteChannels.Both;

            if (MUT)
            {
                Audio.mute_ch = MuteChannels.Both;
                Audio.MonitorVolumeLeft = 0.0;
                Audio.MonitorVolumeRight = 0.0;
            }
        }

        private void noneToolStripMenuItem_Click(object sender, EventArgs e)
        {
            mute_ch = MuteChannels.None;
            Audio.mute_ch = MuteChannels.None;

            if (MUT)
            {
                Audio.MonitorVolumeLeft = 0;
                Audio.MonitorVolumeRight = 0;
            }
            else
            {
                Audio.MonitorVolumeLeft = AF / 100.0;
                Audio.MonitorVolumeRight = AF / 100.0;
            }
        }

        #endregion
    }

    #region DttSP

    public class ProcessSampleThreadController
    {
        uint thread;
        public ProcessSampleThreadController(uint threadno)
        {
            this.thread = threadno;
        }

        public void ProcessSampleThread()
        {
            DttSP.ProcessSamplesThread(thread);
        }
    }

    #endregion
}